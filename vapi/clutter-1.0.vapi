/* clutter-1.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Clutter", gir_namespace = "Clutter", gir_version = "1.0", lower_case_cprefix = "clutter_")]
namespace Clutter {
	namespace FrameSource {
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (deprecated = true, deprecated_since = "1.6", since = "0.8")]
		public static uint add (uint fps, GLib.SourceFunc func);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (deprecated = true, deprecated_since = "1.6", since = "0.8")]
		public static uint add_full (int priority, uint fps, owned GLib.SourceFunc func);
	}
	namespace Key {
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_0")]
		public const uint @0;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_1")]
		public const uint @1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_2")]
		public const uint @2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3")]
		public const uint @3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_AltCursor")]
		public const uint @3270_AltCursor;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Attn")]
		public const uint @3270_Attn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_BackTab")]
		public const uint @3270_BackTab;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_ChangeScreen")]
		public const uint @3270_ChangeScreen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Copy")]
		public const uint @3270_Copy;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_CursorBlink")]
		public const uint @3270_CursorBlink;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_CursorSelect")]
		public const uint @3270_CursorSelect;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_DeleteWord")]
		public const uint @3270_DeleteWord;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Duplicate")]
		public const uint @3270_Duplicate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Enter")]
		public const uint @3270_Enter;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_EraseEOF")]
		public const uint @3270_EraseEOF;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_EraseInput")]
		public const uint @3270_EraseInput;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_ExSelect")]
		public const uint @3270_ExSelect;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_FieldMark")]
		public const uint @3270_FieldMark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Ident")]
		public const uint @3270_Ident;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Jump")]
		public const uint @3270_Jump;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_KeyClick")]
		public const uint @3270_KeyClick;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Left2")]
		public const uint @3270_Left2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_PA1")]
		public const uint @3270_PA1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_PA2")]
		public const uint @3270_PA2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_PA3")]
		public const uint @3270_PA3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Play")]
		public const uint @3270_Play;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_PrintScreen")]
		public const uint @3270_PrintScreen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Quit")]
		public const uint @3270_Quit;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Record")]
		public const uint @3270_Record;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Reset")]
		public const uint @3270_Reset;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Right2")]
		public const uint @3270_Right2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Rule")]
		public const uint @3270_Rule;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Setup")]
		public const uint @3270_Setup;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_3270_Test")]
		public const uint @3270_Test;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_4")]
		public const uint @4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_5")]
		public const uint @5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_6")]
		public const uint @6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_7")]
		public const uint @7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_8")]
		public const uint @8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_9")]
		public const uint @9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_A")]
		public const uint A;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AE")]
		public const uint AE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Aacute")]
		public const uint Aacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Abelowdot")]
		public const uint Abelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Abreve")]
		public const uint Abreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Abreveacute")]
		public const uint Abreveacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Abrevebelowdot")]
		public const uint Abrevebelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Abrevegrave")]
		public const uint Abrevegrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Abrevehook")]
		public const uint Abrevehook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Abrevetilde")]
		public const uint Abrevetilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AccessX_Enable")]
		public const uint AccessX_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AccessX_Feedback_Enable")]
		public const uint AccessX_Feedback_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Acircumflex")]
		public const uint Acircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Acircumflexacute")]
		public const uint Acircumflexacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Acircumflexbelowdot")]
		public const uint Acircumflexbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Acircumflexgrave")]
		public const uint Acircumflexgrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Acircumflexhook")]
		public const uint Acircumflexhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Acircumflextilde")]
		public const uint Acircumflextilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AddFavorite")]
		public const uint AddFavorite;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Adiaeresis")]
		public const uint Adiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Agrave")]
		public const uint Agrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ahook")]
		public const uint Ahook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Alt_L")]
		public const uint Alt_L;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Alt_R")]
		public const uint Alt_R;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Amacron")]
		public const uint Amacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Aogonek")]
		public const uint Aogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ApplicationLeft")]
		public const uint ApplicationLeft;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ApplicationRight")]
		public const uint ApplicationRight;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_0")]
		public const uint Arabic_0;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_1")]
		public const uint Arabic_1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_2")]
		public const uint Arabic_2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_3")]
		public const uint Arabic_3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_4")]
		public const uint Arabic_4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_5")]
		public const uint Arabic_5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_6")]
		public const uint Arabic_6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_7")]
		public const uint Arabic_7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_8")]
		public const uint Arabic_8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_9")]
		public const uint Arabic_9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_ain")]
		public const uint Arabic_ain;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_alef")]
		public const uint Arabic_alef;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_alefmaksura")]
		public const uint Arabic_alefmaksura;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_beh")]
		public const uint Arabic_beh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_comma")]
		public const uint Arabic_comma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_dad")]
		public const uint Arabic_dad;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_dal")]
		public const uint Arabic_dal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_damma")]
		public const uint Arabic_damma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_dammatan")]
		public const uint Arabic_dammatan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_ddal")]
		public const uint Arabic_ddal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_farsi_yeh")]
		public const uint Arabic_farsi_yeh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_fatha")]
		public const uint Arabic_fatha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_fathatan")]
		public const uint Arabic_fathatan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_feh")]
		public const uint Arabic_feh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_fullstop")]
		public const uint Arabic_fullstop;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_gaf")]
		public const uint Arabic_gaf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_ghain")]
		public const uint Arabic_ghain;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_ha")]
		public const uint Arabic_ha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_hah")]
		public const uint Arabic_hah;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_hamza")]
		public const uint Arabic_hamza;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_hamza_above")]
		public const uint Arabic_hamza_above;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_hamza_below")]
		public const uint Arabic_hamza_below;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_hamzaonalef")]
		public const uint Arabic_hamzaonalef;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_hamzaonwaw")]
		public const uint Arabic_hamzaonwaw;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_hamzaonyeh")]
		public const uint Arabic_hamzaonyeh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_hamzaunderalef")]
		public const uint Arabic_hamzaunderalef;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_heh")]
		public const uint Arabic_heh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_heh_doachashmee")]
		public const uint Arabic_heh_doachashmee;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_heh_goal")]
		public const uint Arabic_heh_goal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_jeem")]
		public const uint Arabic_jeem;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_jeh")]
		public const uint Arabic_jeh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_kaf")]
		public const uint Arabic_kaf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_kasra")]
		public const uint Arabic_kasra;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_kasratan")]
		public const uint Arabic_kasratan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_keheh")]
		public const uint Arabic_keheh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_khah")]
		public const uint Arabic_khah;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_lam")]
		public const uint Arabic_lam;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_madda_above")]
		public const uint Arabic_madda_above;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_maddaonalef")]
		public const uint Arabic_maddaonalef;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_meem")]
		public const uint Arabic_meem;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_noon")]
		public const uint Arabic_noon;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_noon_ghunna")]
		public const uint Arabic_noon_ghunna;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_peh")]
		public const uint Arabic_peh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_percent")]
		public const uint Arabic_percent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_qaf")]
		public const uint Arabic_qaf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_question_mark")]
		public const uint Arabic_question_mark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_ra")]
		public const uint Arabic_ra;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_rreh")]
		public const uint Arabic_rreh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_sad")]
		public const uint Arabic_sad;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_seen")]
		public const uint Arabic_seen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_semicolon")]
		public const uint Arabic_semicolon;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_shadda")]
		public const uint Arabic_shadda;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_sheen")]
		public const uint Arabic_sheen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_sukun")]
		public const uint Arabic_sukun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_superscript_alef")]
		public const uint Arabic_superscript_alef;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_switch")]
		public const uint Arabic_switch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_tah")]
		public const uint Arabic_tah;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_tatweel")]
		public const uint Arabic_tatweel;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_tcheh")]
		public const uint Arabic_tcheh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_teh")]
		public const uint Arabic_teh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_tehmarbuta")]
		public const uint Arabic_tehmarbuta;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_thal")]
		public const uint Arabic_thal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_theh")]
		public const uint Arabic_theh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_tteh")]
		public const uint Arabic_tteh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_veh")]
		public const uint Arabic_veh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_waw")]
		public const uint Arabic_waw;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_yeh")]
		public const uint Arabic_yeh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_yeh_baree")]
		public const uint Arabic_yeh_baree;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_zah")]
		public const uint Arabic_zah;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Arabic_zain")]
		public const uint Arabic_zain;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Aring")]
		public const uint Aring;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_AT")]
		public const uint Armenian_AT;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_AYB")]
		public const uint Armenian_AYB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_BEN")]
		public const uint Armenian_BEN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_CHA")]
		public const uint Armenian_CHA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_DA")]
		public const uint Armenian_DA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_DZA")]
		public const uint Armenian_DZA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_E")]
		public const uint Armenian_E;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_FE")]
		public const uint Armenian_FE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_GHAT")]
		public const uint Armenian_GHAT;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_GIM")]
		public const uint Armenian_GIM;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_HI")]
		public const uint Armenian_HI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_HO")]
		public const uint Armenian_HO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_INI")]
		public const uint Armenian_INI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_JE")]
		public const uint Armenian_JE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_KE")]
		public const uint Armenian_KE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_KEN")]
		public const uint Armenian_KEN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_KHE")]
		public const uint Armenian_KHE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_LYUN")]
		public const uint Armenian_LYUN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_MEN")]
		public const uint Armenian_MEN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_NU")]
		public const uint Armenian_NU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_O")]
		public const uint Armenian_O;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_PE")]
		public const uint Armenian_PE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_PYUR")]
		public const uint Armenian_PYUR;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_RA")]
		public const uint Armenian_RA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_RE")]
		public const uint Armenian_RE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_SE")]
		public const uint Armenian_SE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_SHA")]
		public const uint Armenian_SHA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_TCHE")]
		public const uint Armenian_TCHE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_TO")]
		public const uint Armenian_TO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_TSA")]
		public const uint Armenian_TSA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_TSO")]
		public const uint Armenian_TSO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_TYUN")]
		public const uint Armenian_TYUN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_VEV")]
		public const uint Armenian_VEV;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_VO")]
		public const uint Armenian_VO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_VYUN")]
		public const uint Armenian_VYUN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_YECH")]
		public const uint Armenian_YECH;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ZA")]
		public const uint Armenian_ZA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ZHE")]
		public const uint Armenian_ZHE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_accent")]
		public const uint Armenian_accent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_amanak")]
		public const uint Armenian_amanak;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_apostrophe")]
		public const uint Armenian_apostrophe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_at")]
		public const uint Armenian_at;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ayb")]
		public const uint Armenian_ayb;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ben")]
		public const uint Armenian_ben;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_but")]
		public const uint Armenian_but;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_cha")]
		public const uint Armenian_cha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_da")]
		public const uint Armenian_da;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_dza")]
		public const uint Armenian_dza;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_e")]
		public const uint Armenian_e;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_exclam")]
		public const uint Armenian_exclam;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_fe")]
		public const uint Armenian_fe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_full_stop")]
		public const uint Armenian_full_stop;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ghat")]
		public const uint Armenian_ghat;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_gim")]
		public const uint Armenian_gim;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_hi")]
		public const uint Armenian_hi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ho")]
		public const uint Armenian_ho;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_hyphen")]
		public const uint Armenian_hyphen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ini")]
		public const uint Armenian_ini;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_je")]
		public const uint Armenian_je;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ke")]
		public const uint Armenian_ke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ken")]
		public const uint Armenian_ken;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_khe")]
		public const uint Armenian_khe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ligature_ew")]
		public const uint Armenian_ligature_ew;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_lyun")]
		public const uint Armenian_lyun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_men")]
		public const uint Armenian_men;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_nu")]
		public const uint Armenian_nu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_o")]
		public const uint Armenian_o;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_paruyk")]
		public const uint Armenian_paruyk;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_pe")]
		public const uint Armenian_pe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_pyur")]
		public const uint Armenian_pyur;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_question")]
		public const uint Armenian_question;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_ra")]
		public const uint Armenian_ra;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_re")]
		public const uint Armenian_re;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_se")]
		public const uint Armenian_se;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_separation_mark")]
		public const uint Armenian_separation_mark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_sha")]
		public const uint Armenian_sha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_shesht")]
		public const uint Armenian_shesht;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_tche")]
		public const uint Armenian_tche;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_to")]
		public const uint Armenian_to;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_tsa")]
		public const uint Armenian_tsa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_tso")]
		public const uint Armenian_tso;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_tyun")]
		public const uint Armenian_tyun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_verjaket")]
		public const uint Armenian_verjaket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_vev")]
		public const uint Armenian_vev;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_vo")]
		public const uint Armenian_vo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_vyun")]
		public const uint Armenian_vyun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_yech")]
		public const uint Armenian_yech;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_yentamna")]
		public const uint Armenian_yentamna;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_za")]
		public const uint Armenian_za;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Armenian_zhe")]
		public const uint Armenian_zhe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Atilde")]
		public const uint Atilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudibleBell_Enable")]
		public const uint AudibleBell_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioCycleTrack")]
		public const uint AudioCycleTrack;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioForward")]
		public const uint AudioForward;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioLowerVolume")]
		public const uint AudioLowerVolume;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioMedia")]
		public const uint AudioMedia;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioMicMute")]
		public const uint AudioMicMute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioMute")]
		public const uint AudioMute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioNext")]
		public const uint AudioNext;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioPause")]
		public const uint AudioPause;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioPlay")]
		public const uint AudioPlay;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioPrev")]
		public const uint AudioPrev;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioRaiseVolume")]
		public const uint AudioRaiseVolume;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioRandomPlay")]
		public const uint AudioRandomPlay;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioRecord")]
		public const uint AudioRecord;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioRepeat")]
		public const uint AudioRepeat;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioRewind")]
		public const uint AudioRewind;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_AudioStop")]
		public const uint AudioStop;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Away")]
		public const uint Away;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_B")]
		public const uint B;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Babovedot")]
		public const uint Babovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Back")]
		public const uint Back;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_BackForward")]
		public const uint BackForward;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_BackSpace")]
		public const uint BackSpace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Battery")]
		public const uint Battery;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Begin")]
		public const uint Begin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Blue")]
		public const uint Blue;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Bluetooth")]
		public const uint Bluetooth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Book")]
		public const uint Book;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_BounceKeys_Enable")]
		public const uint BounceKeys_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Break")]
		public const uint Break;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_BrightnessAdjust")]
		public const uint BrightnessAdjust;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Byelorussian_SHORTU")]
		public const uint Byelorussian_SHORTU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Byelorussian_shortu")]
		public const uint Byelorussian_shortu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_C")]
		public const uint C;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_CD")]
		public const uint CD;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_CH")]
		public const uint CH;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_C_H")]
		public const uint C_H;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_C_h")]
		public const uint C_h;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cabovedot")]
		public const uint Cabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cacute")]
		public const uint Cacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Calculator")]
		public const uint Calculator;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Calendar")]
		public const uint Calendar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cancel")]
		public const uint Cancel;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Caps_Lock")]
		public const uint Caps_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ccaron")]
		public const uint Ccaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ccedilla")]
		public const uint Ccedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ccircumflex")]
		public const uint Ccircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ch")]
		public const uint Ch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Clear")]
		public const uint Clear;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ClearGrab")]
		public const uint ClearGrab;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Close")]
		public const uint Close;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Codeinput")]
		public const uint Codeinput;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ColonSign")]
		public const uint ColonSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Community")]
		public const uint Community;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ContrastAdjust")]
		public const uint ContrastAdjust;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Control_L")]
		public const uint Control_L;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Control_R")]
		public const uint Control_R;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Copy")]
		public const uint Copy;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_CruzeiroSign")]
		public const uint CruzeiroSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cut")]
		public const uint Cut;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_CycleAngle")]
		public const uint CycleAngle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_A")]
		public const uint Cyrillic_A;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_BE")]
		public const uint Cyrillic_BE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_CHE")]
		public const uint Cyrillic_CHE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_CHE_descender")]
		public const uint Cyrillic_CHE_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_CHE_vertstroke")]
		public const uint Cyrillic_CHE_vertstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_DE")]
		public const uint Cyrillic_DE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_DZHE")]
		public const uint Cyrillic_DZHE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_E")]
		public const uint Cyrillic_E;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_EF")]
		public const uint Cyrillic_EF;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_EL")]
		public const uint Cyrillic_EL;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_EM")]
		public const uint Cyrillic_EM;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_EN")]
		public const uint Cyrillic_EN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_EN_descender")]
		public const uint Cyrillic_EN_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ER")]
		public const uint Cyrillic_ER;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ES")]
		public const uint Cyrillic_ES;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_GHE")]
		public const uint Cyrillic_GHE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_GHE_bar")]
		public const uint Cyrillic_GHE_bar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_HA")]
		public const uint Cyrillic_HA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_HARDSIGN")]
		public const uint Cyrillic_HARDSIGN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_HA_descender")]
		public const uint Cyrillic_HA_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_I")]
		public const uint Cyrillic_I;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_IE")]
		public const uint Cyrillic_IE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_IO")]
		public const uint Cyrillic_IO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_I_macron")]
		public const uint Cyrillic_I_macron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_JE")]
		public const uint Cyrillic_JE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_KA")]
		public const uint Cyrillic_KA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_KA_descender")]
		public const uint Cyrillic_KA_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_KA_vertstroke")]
		public const uint Cyrillic_KA_vertstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_LJE")]
		public const uint Cyrillic_LJE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_NJE")]
		public const uint Cyrillic_NJE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_O")]
		public const uint Cyrillic_O;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_O_bar")]
		public const uint Cyrillic_O_bar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_PE")]
		public const uint Cyrillic_PE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_SCHWA")]
		public const uint Cyrillic_SCHWA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_SHA")]
		public const uint Cyrillic_SHA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_SHCHA")]
		public const uint Cyrillic_SHCHA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_SHHA")]
		public const uint Cyrillic_SHHA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_SHORTI")]
		public const uint Cyrillic_SHORTI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_SOFTSIGN")]
		public const uint Cyrillic_SOFTSIGN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_TE")]
		public const uint Cyrillic_TE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_TSE")]
		public const uint Cyrillic_TSE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_U")]
		public const uint Cyrillic_U;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_U_macron")]
		public const uint Cyrillic_U_macron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_U_straight")]
		public const uint Cyrillic_U_straight;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_U_straight_bar")]
		public const uint Cyrillic_U_straight_bar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_VE")]
		public const uint Cyrillic_VE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_YA")]
		public const uint Cyrillic_YA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_YERU")]
		public const uint Cyrillic_YERU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_YU")]
		public const uint Cyrillic_YU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ZE")]
		public const uint Cyrillic_ZE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ZHE")]
		public const uint Cyrillic_ZHE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ZHE_descender")]
		public const uint Cyrillic_ZHE_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_a")]
		public const uint Cyrillic_a;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_be")]
		public const uint Cyrillic_be;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_che")]
		public const uint Cyrillic_che;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_che_descender")]
		public const uint Cyrillic_che_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_che_vertstroke")]
		public const uint Cyrillic_che_vertstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_de")]
		public const uint Cyrillic_de;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_dzhe")]
		public const uint Cyrillic_dzhe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_e")]
		public const uint Cyrillic_e;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ef")]
		public const uint Cyrillic_ef;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_el")]
		public const uint Cyrillic_el;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_em")]
		public const uint Cyrillic_em;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_en")]
		public const uint Cyrillic_en;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_en_descender")]
		public const uint Cyrillic_en_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_er")]
		public const uint Cyrillic_er;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_es")]
		public const uint Cyrillic_es;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ghe")]
		public const uint Cyrillic_ghe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ghe_bar")]
		public const uint Cyrillic_ghe_bar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ha")]
		public const uint Cyrillic_ha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ha_descender")]
		public const uint Cyrillic_ha_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_hardsign")]
		public const uint Cyrillic_hardsign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_i")]
		public const uint Cyrillic_i;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_i_macron")]
		public const uint Cyrillic_i_macron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ie")]
		public const uint Cyrillic_ie;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_io")]
		public const uint Cyrillic_io;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_je")]
		public const uint Cyrillic_je;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ka")]
		public const uint Cyrillic_ka;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ka_descender")]
		public const uint Cyrillic_ka_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ka_vertstroke")]
		public const uint Cyrillic_ka_vertstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_lje")]
		public const uint Cyrillic_lje;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_nje")]
		public const uint Cyrillic_nje;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_o")]
		public const uint Cyrillic_o;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_o_bar")]
		public const uint Cyrillic_o_bar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_pe")]
		public const uint Cyrillic_pe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_schwa")]
		public const uint Cyrillic_schwa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_sha")]
		public const uint Cyrillic_sha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_shcha")]
		public const uint Cyrillic_shcha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_shha")]
		public const uint Cyrillic_shha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_shorti")]
		public const uint Cyrillic_shorti;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_softsign")]
		public const uint Cyrillic_softsign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_te")]
		public const uint Cyrillic_te;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_tse")]
		public const uint Cyrillic_tse;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_u")]
		public const uint Cyrillic_u;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_u_macron")]
		public const uint Cyrillic_u_macron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_u_straight")]
		public const uint Cyrillic_u_straight;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_u_straight_bar")]
		public const uint Cyrillic_u_straight_bar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ve")]
		public const uint Cyrillic_ve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ya")]
		public const uint Cyrillic_ya;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_yeru")]
		public const uint Cyrillic_yeru;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_yu")]
		public const uint Cyrillic_yu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_ze")]
		public const uint Cyrillic_ze;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_zhe")]
		public const uint Cyrillic_zhe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Cyrillic_zhe_descender")]
		public const uint Cyrillic_zhe_descender;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_D")]
		public const uint D;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_DOS")]
		public const uint DOS;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Dabovedot")]
		public const uint Dabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Dcaron")]
		public const uint Dcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Delete")]
		public const uint Delete;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Display")]
		public const uint Display;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Documents")]
		public const uint Documents;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_DongSign")]
		public const uint DongSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Down")]
		public const uint Down;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Dstroke")]
		public const uint Dstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_E")]
		public const uint E;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ENG")]
		public const uint ENG;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ETH")]
		public const uint ETH;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_EZH")]
		public const uint EZH;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Eabovedot")]
		public const uint Eabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Eacute")]
		public const uint Eacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ebelowdot")]
		public const uint Ebelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ecaron")]
		public const uint Ecaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ecircumflex")]
		public const uint Ecircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ecircumflexacute")]
		public const uint Ecircumflexacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ecircumflexbelowdot")]
		public const uint Ecircumflexbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ecircumflexgrave")]
		public const uint Ecircumflexgrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ecircumflexhook")]
		public const uint Ecircumflexhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ecircumflextilde")]
		public const uint Ecircumflextilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_EcuSign")]
		public const uint EcuSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ediaeresis")]
		public const uint Ediaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Egrave")]
		public const uint Egrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ehook")]
		public const uint Ehook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Eisu_Shift")]
		public const uint Eisu_Shift;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Eisu_toggle")]
		public const uint Eisu_toggle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Eject")]
		public const uint Eject;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Emacron")]
		public const uint Emacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_End")]
		public const uint End;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Eogonek")]
		public const uint Eogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Escape")]
		public const uint Escape;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Eth")]
		public const uint Eth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Etilde")]
		public const uint Etilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_EuroSign")]
		public const uint EuroSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Excel")]
		public const uint Excel;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Execute")]
		public const uint Execute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Explorer")]
		public const uint Explorer;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F")]
		public const uint F;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F1")]
		public const uint F1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F10")]
		public const uint F10;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F11")]
		public const uint F11;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F12")]
		public const uint F12;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F13")]
		public const uint F13;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F14")]
		public const uint F14;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F15")]
		public const uint F15;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F16")]
		public const uint F16;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F17")]
		public const uint F17;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F18")]
		public const uint F18;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F19")]
		public const uint F19;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F2")]
		public const uint F2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F20")]
		public const uint F20;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F21")]
		public const uint F21;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F22")]
		public const uint F22;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F23")]
		public const uint F23;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F24")]
		public const uint F24;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F25")]
		public const uint F25;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F26")]
		public const uint F26;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F27")]
		public const uint F27;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F28")]
		public const uint F28;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F29")]
		public const uint F29;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F3")]
		public const uint F3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F30")]
		public const uint F30;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F31")]
		public const uint F31;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F32")]
		public const uint F32;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F33")]
		public const uint F33;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F34")]
		public const uint F34;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F35")]
		public const uint F35;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F4")]
		public const uint F4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F5")]
		public const uint F5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F6")]
		public const uint F6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F7")]
		public const uint F7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F8")]
		public const uint F8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_F9")]
		public const uint F9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_FFrancSign")]
		public const uint FFrancSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Fabovedot")]
		public const uint Fabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_0")]
		public const uint Farsi_0;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_1")]
		public const uint Farsi_1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_2")]
		public const uint Farsi_2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_3")]
		public const uint Farsi_3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_4")]
		public const uint Farsi_4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_5")]
		public const uint Farsi_5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_6")]
		public const uint Farsi_6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_7")]
		public const uint Farsi_7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_8")]
		public const uint Farsi_8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_9")]
		public const uint Farsi_9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Farsi_yeh")]
		public const uint Farsi_yeh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Favorites")]
		public const uint Favorites;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Finance")]
		public const uint Finance;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Find")]
		public const uint Find;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_First_Virtual_Screen")]
		public const uint First_Virtual_Screen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Forward")]
		public const uint Forward;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_FrameBack")]
		public const uint FrameBack;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_FrameForward")]
		public const uint FrameForward;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_G")]
		public const uint G;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Gabovedot")]
		public const uint Gabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Game")]
		public const uint Game;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Gbreve")]
		public const uint Gbreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Gcaron")]
		public const uint Gcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Gcedilla")]
		public const uint Gcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Gcircumflex")]
		public const uint Gcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_an")]
		public const uint Georgian_an;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_ban")]
		public const uint Georgian_ban;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_can")]
		public const uint Georgian_can;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_char")]
		public const uint Georgian_char;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_chin")]
		public const uint Georgian_chin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_cil")]
		public const uint Georgian_cil;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_don")]
		public const uint Georgian_don;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_en")]
		public const uint Georgian_en;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_fi")]
		public const uint Georgian_fi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_gan")]
		public const uint Georgian_gan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_ghan")]
		public const uint Georgian_ghan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_hae")]
		public const uint Georgian_hae;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_har")]
		public const uint Georgian_har;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_he")]
		public const uint Georgian_he;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_hie")]
		public const uint Georgian_hie;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_hoe")]
		public const uint Georgian_hoe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_in")]
		public const uint Georgian_in;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_jhan")]
		public const uint Georgian_jhan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_jil")]
		public const uint Georgian_jil;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_kan")]
		public const uint Georgian_kan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_khar")]
		public const uint Georgian_khar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_las")]
		public const uint Georgian_las;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_man")]
		public const uint Georgian_man;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_nar")]
		public const uint Georgian_nar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_on")]
		public const uint Georgian_on;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_par")]
		public const uint Georgian_par;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_phar")]
		public const uint Georgian_phar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_qar")]
		public const uint Georgian_qar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_rae")]
		public const uint Georgian_rae;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_san")]
		public const uint Georgian_san;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_shin")]
		public const uint Georgian_shin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_tan")]
		public const uint Georgian_tan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_tar")]
		public const uint Georgian_tar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_un")]
		public const uint Georgian_un;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_vin")]
		public const uint Georgian_vin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_we")]
		public const uint Georgian_we;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_xan")]
		public const uint Georgian_xan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_zen")]
		public const uint Georgian_zen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Georgian_zhar")]
		public const uint Georgian_zhar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Go")]
		public const uint Go;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_ALPHA")]
		public const uint Greek_ALPHA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_ALPHAaccent")]
		public const uint Greek_ALPHAaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_BETA")]
		public const uint Greek_BETA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_CHI")]
		public const uint Greek_CHI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_DELTA")]
		public const uint Greek_DELTA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_EPSILON")]
		public const uint Greek_EPSILON;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_EPSILONaccent")]
		public const uint Greek_EPSILONaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_ETA")]
		public const uint Greek_ETA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_ETAaccent")]
		public const uint Greek_ETAaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_GAMMA")]
		public const uint Greek_GAMMA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_IOTA")]
		public const uint Greek_IOTA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_IOTAaccent")]
		public const uint Greek_IOTAaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_IOTAdiaeresis")]
		public const uint Greek_IOTAdiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_IOTAdieresis")]
		public const uint Greek_IOTAdieresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_KAPPA")]
		public const uint Greek_KAPPA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_LAMBDA")]
		public const uint Greek_LAMBDA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_LAMDA")]
		public const uint Greek_LAMDA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_MU")]
		public const uint Greek_MU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_NU")]
		public const uint Greek_NU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_OMEGA")]
		public const uint Greek_OMEGA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_OMEGAaccent")]
		public const uint Greek_OMEGAaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_OMICRON")]
		public const uint Greek_OMICRON;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_OMICRONaccent")]
		public const uint Greek_OMICRONaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_PHI")]
		public const uint Greek_PHI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_PI")]
		public const uint Greek_PI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_PSI")]
		public const uint Greek_PSI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_RHO")]
		public const uint Greek_RHO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_SIGMA")]
		public const uint Greek_SIGMA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_TAU")]
		public const uint Greek_TAU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_THETA")]
		public const uint Greek_THETA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_UPSILON")]
		public const uint Greek_UPSILON;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_UPSILONaccent")]
		public const uint Greek_UPSILONaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_UPSILONdieresis")]
		public const uint Greek_UPSILONdieresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_XI")]
		public const uint Greek_XI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_ZETA")]
		public const uint Greek_ZETA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_accentdieresis")]
		public const uint Greek_accentdieresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_alpha")]
		public const uint Greek_alpha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_alphaaccent")]
		public const uint Greek_alphaaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_beta")]
		public const uint Greek_beta;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_chi")]
		public const uint Greek_chi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_delta")]
		public const uint Greek_delta;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_epsilon")]
		public const uint Greek_epsilon;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_epsilonaccent")]
		public const uint Greek_epsilonaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_eta")]
		public const uint Greek_eta;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_etaaccent")]
		public const uint Greek_etaaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_finalsmallsigma")]
		public const uint Greek_finalsmallsigma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_gamma")]
		public const uint Greek_gamma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_horizbar")]
		public const uint Greek_horizbar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_iota")]
		public const uint Greek_iota;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_iotaaccent")]
		public const uint Greek_iotaaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_iotaaccentdieresis")]
		public const uint Greek_iotaaccentdieresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_iotadieresis")]
		public const uint Greek_iotadieresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_kappa")]
		public const uint Greek_kappa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_lambda")]
		public const uint Greek_lambda;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_lamda")]
		public const uint Greek_lamda;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_mu")]
		public const uint Greek_mu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_nu")]
		public const uint Greek_nu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_omega")]
		public const uint Greek_omega;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_omegaaccent")]
		public const uint Greek_omegaaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_omicron")]
		public const uint Greek_omicron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_omicronaccent")]
		public const uint Greek_omicronaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_phi")]
		public const uint Greek_phi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_pi")]
		public const uint Greek_pi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_psi")]
		public const uint Greek_psi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_rho")]
		public const uint Greek_rho;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_sigma")]
		public const uint Greek_sigma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_switch")]
		public const uint Greek_switch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_tau")]
		public const uint Greek_tau;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_theta")]
		public const uint Greek_theta;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_upsilon")]
		public const uint Greek_upsilon;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_upsilonaccent")]
		public const uint Greek_upsilonaccent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_upsilonaccentdieresis")]
		public const uint Greek_upsilonaccentdieresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_upsilondieresis")]
		public const uint Greek_upsilondieresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_xi")]
		public const uint Greek_xi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Greek_zeta")]
		public const uint Greek_zeta;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Green")]
		public const uint Green;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_H")]
		public const uint H;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul")]
		public const uint Hangul;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_A")]
		public const uint Hangul_A;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_AE")]
		public const uint Hangul_AE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_AraeA")]
		public const uint Hangul_AraeA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_AraeAE")]
		public const uint Hangul_AraeAE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Banja")]
		public const uint Hangul_Banja;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Cieuc")]
		public const uint Hangul_Cieuc;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Codeinput")]
		public const uint Hangul_Codeinput;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Dikeud")]
		public const uint Hangul_Dikeud;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_E")]
		public const uint Hangul_E;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_EO")]
		public const uint Hangul_EO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_EU")]
		public const uint Hangul_EU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_End")]
		public const uint Hangul_End;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Hanja")]
		public const uint Hangul_Hanja;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Hieuh")]
		public const uint Hangul_Hieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_I")]
		public const uint Hangul_I;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Ieung")]
		public const uint Hangul_Ieung;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Cieuc")]
		public const uint Hangul_J_Cieuc;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Dikeud")]
		public const uint Hangul_J_Dikeud;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Hieuh")]
		public const uint Hangul_J_Hieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Ieung")]
		public const uint Hangul_J_Ieung;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Jieuj")]
		public const uint Hangul_J_Jieuj;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Khieuq")]
		public const uint Hangul_J_Khieuq;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Kiyeog")]
		public const uint Hangul_J_Kiyeog;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_KiyeogSios")]
		public const uint Hangul_J_KiyeogSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_KkogjiDalrinIeung")]
		public const uint Hangul_J_KkogjiDalrinIeung;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Mieum")]
		public const uint Hangul_J_Mieum;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Nieun")]
		public const uint Hangul_J_Nieun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_NieunHieuh")]
		public const uint Hangul_J_NieunHieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_NieunJieuj")]
		public const uint Hangul_J_NieunJieuj;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_PanSios")]
		public const uint Hangul_J_PanSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Phieuf")]
		public const uint Hangul_J_Phieuf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Pieub")]
		public const uint Hangul_J_Pieub;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_PieubSios")]
		public const uint Hangul_J_PieubSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Rieul")]
		public const uint Hangul_J_Rieul;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_RieulHieuh")]
		public const uint Hangul_J_RieulHieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_RieulKiyeog")]
		public const uint Hangul_J_RieulKiyeog;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_RieulMieum")]
		public const uint Hangul_J_RieulMieum;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_RieulPhieuf")]
		public const uint Hangul_J_RieulPhieuf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_RieulPieub")]
		public const uint Hangul_J_RieulPieub;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_RieulSios")]
		public const uint Hangul_J_RieulSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_RieulTieut")]
		public const uint Hangul_J_RieulTieut;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Sios")]
		public const uint Hangul_J_Sios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_SsangKiyeog")]
		public const uint Hangul_J_SsangKiyeog;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_SsangSios")]
		public const uint Hangul_J_SsangSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_Tieut")]
		public const uint Hangul_J_Tieut;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_J_YeorinHieuh")]
		public const uint Hangul_J_YeorinHieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Jamo")]
		public const uint Hangul_Jamo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Jeonja")]
		public const uint Hangul_Jeonja;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Jieuj")]
		public const uint Hangul_Jieuj;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Khieuq")]
		public const uint Hangul_Khieuq;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Kiyeog")]
		public const uint Hangul_Kiyeog;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_KiyeogSios")]
		public const uint Hangul_KiyeogSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_KkogjiDalrinIeung")]
		public const uint Hangul_KkogjiDalrinIeung;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Mieum")]
		public const uint Hangul_Mieum;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_MultipleCandidate")]
		public const uint Hangul_MultipleCandidate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Nieun")]
		public const uint Hangul_Nieun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_NieunHieuh")]
		public const uint Hangul_NieunHieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_NieunJieuj")]
		public const uint Hangul_NieunJieuj;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_O")]
		public const uint Hangul_O;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_OE")]
		public const uint Hangul_OE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_PanSios")]
		public const uint Hangul_PanSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Phieuf")]
		public const uint Hangul_Phieuf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Pieub")]
		public const uint Hangul_Pieub;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_PieubSios")]
		public const uint Hangul_PieubSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_PostHanja")]
		public const uint Hangul_PostHanja;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_PreHanja")]
		public const uint Hangul_PreHanja;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_PreviousCandidate")]
		public const uint Hangul_PreviousCandidate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Rieul")]
		public const uint Hangul_Rieul;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_RieulHieuh")]
		public const uint Hangul_RieulHieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_RieulKiyeog")]
		public const uint Hangul_RieulKiyeog;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_RieulMieum")]
		public const uint Hangul_RieulMieum;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_RieulPhieuf")]
		public const uint Hangul_RieulPhieuf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_RieulPieub")]
		public const uint Hangul_RieulPieub;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_RieulSios")]
		public const uint Hangul_RieulSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_RieulTieut")]
		public const uint Hangul_RieulTieut;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_RieulYeorinHieuh")]
		public const uint Hangul_RieulYeorinHieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Romaja")]
		public const uint Hangul_Romaja;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SingleCandidate")]
		public const uint Hangul_SingleCandidate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Sios")]
		public const uint Hangul_Sios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Special")]
		public const uint Hangul_Special;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SsangDikeud")]
		public const uint Hangul_SsangDikeud;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SsangJieuj")]
		public const uint Hangul_SsangJieuj;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SsangKiyeog")]
		public const uint Hangul_SsangKiyeog;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SsangPieub")]
		public const uint Hangul_SsangPieub;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SsangSios")]
		public const uint Hangul_SsangSios;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Start")]
		public const uint Hangul_Start;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SunkyeongeumMieum")]
		public const uint Hangul_SunkyeongeumMieum;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SunkyeongeumPhieuf")]
		public const uint Hangul_SunkyeongeumPhieuf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_SunkyeongeumPieub")]
		public const uint Hangul_SunkyeongeumPieub;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_Tieut")]
		public const uint Hangul_Tieut;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_U")]
		public const uint Hangul_U;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_WA")]
		public const uint Hangul_WA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_WAE")]
		public const uint Hangul_WAE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_WE")]
		public const uint Hangul_WE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_WEO")]
		public const uint Hangul_WEO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_WI")]
		public const uint Hangul_WI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_YA")]
		public const uint Hangul_YA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_YAE")]
		public const uint Hangul_YAE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_YE")]
		public const uint Hangul_YE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_YEO")]
		public const uint Hangul_YEO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_YI")]
		public const uint Hangul_YI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_YO")]
		public const uint Hangul_YO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_YU")]
		public const uint Hangul_YU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_YeorinHieuh")]
		public const uint Hangul_YeorinHieuh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hangul_switch")]
		public const uint Hangul_switch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hankaku")]
		public const uint Hankaku;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hcircumflex")]
		public const uint Hcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hebrew_switch")]
		public const uint Hebrew_switch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Help")]
		public const uint Help;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Henkan")]
		public const uint Henkan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Henkan_Mode")]
		public const uint Henkan_Mode;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hibernate")]
		public const uint Hibernate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hiragana")]
		public const uint Hiragana;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hiragana_Katakana")]
		public const uint Hiragana_Katakana;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_History")]
		public const uint History;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Home")]
		public const uint Home;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_HomePage")]
		public const uint HomePage;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_HotLinks")]
		public const uint HotLinks;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hstroke")]
		public const uint Hstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hyper_L")]
		public const uint Hyper_L;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Hyper_R")]
		public const uint Hyper_R;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_I")]
		public const uint I;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Center_Object")]
		public const uint ISO_Center_Object;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Continuous_Underline")]
		public const uint ISO_Continuous_Underline;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Discontinuous_Underline")]
		public const uint ISO_Discontinuous_Underline;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Emphasize")]
		public const uint ISO_Emphasize;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Enter")]
		public const uint ISO_Enter;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Fast_Cursor_Down")]
		public const uint ISO_Fast_Cursor_Down;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Fast_Cursor_Left")]
		public const uint ISO_Fast_Cursor_Left;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Fast_Cursor_Right")]
		public const uint ISO_Fast_Cursor_Right;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Fast_Cursor_Up")]
		public const uint ISO_Fast_Cursor_Up;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_First_Group")]
		public const uint ISO_First_Group;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_First_Group_Lock")]
		public const uint ISO_First_Group_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Group_Latch")]
		public const uint ISO_Group_Latch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Group_Lock")]
		public const uint ISO_Group_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Group_Shift")]
		public const uint ISO_Group_Shift;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Last_Group")]
		public const uint ISO_Last_Group;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Last_Group_Lock")]
		public const uint ISO_Last_Group_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Left_Tab")]
		public const uint ISO_Left_Tab;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Level2_Latch")]
		public const uint ISO_Level2_Latch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Level3_Latch")]
		public const uint ISO_Level3_Latch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Level3_Lock")]
		public const uint ISO_Level3_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Level3_Shift")]
		public const uint ISO_Level3_Shift;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Level5_Latch")]
		public const uint ISO_Level5_Latch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Level5_Lock")]
		public const uint ISO_Level5_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Level5_Shift")]
		public const uint ISO_Level5_Shift;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Lock")]
		public const uint ISO_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Move_Line_Down")]
		public const uint ISO_Move_Line_Down;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Move_Line_Up")]
		public const uint ISO_Move_Line_Up;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Next_Group")]
		public const uint ISO_Next_Group;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Next_Group_Lock")]
		public const uint ISO_Next_Group_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Partial_Line_Down")]
		public const uint ISO_Partial_Line_Down;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Partial_Line_Up")]
		public const uint ISO_Partial_Line_Up;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Partial_Space_Left")]
		public const uint ISO_Partial_Space_Left;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Partial_Space_Right")]
		public const uint ISO_Partial_Space_Right;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Prev_Group")]
		public const uint ISO_Prev_Group;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Prev_Group_Lock")]
		public const uint ISO_Prev_Group_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Release_Both_Margins")]
		public const uint ISO_Release_Both_Margins;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Release_Margin_Left")]
		public const uint ISO_Release_Margin_Left;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Release_Margin_Right")]
		public const uint ISO_Release_Margin_Right;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Set_Margin_Left")]
		public const uint ISO_Set_Margin_Left;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ISO_Set_Margin_Right")]
		public const uint ISO_Set_Margin_Right;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Iabovedot")]
		public const uint Iabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Iacute")]
		public const uint Iacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ibelowdot")]
		public const uint Ibelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ibreve")]
		public const uint Ibreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Icircumflex")]
		public const uint Icircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Idiaeresis")]
		public const uint Idiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Igrave")]
		public const uint Igrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ihook")]
		public const uint Ihook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Imacron")]
		public const uint Imacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Insert")]
		public const uint Insert;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Iogonek")]
		public const uint Iogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Itilde")]
		public const uint Itilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_J")]
		public const uint J;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Jcircumflex")]
		public const uint Jcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_K")]
		public const uint K;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_0")]
		public const uint KP_0;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_1")]
		public const uint KP_1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_2")]
		public const uint KP_2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_3")]
		public const uint KP_3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_4")]
		public const uint KP_4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_5")]
		public const uint KP_5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_6")]
		public const uint KP_6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_7")]
		public const uint KP_7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_8")]
		public const uint KP_8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_9")]
		public const uint KP_9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Add")]
		public const uint KP_Add;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Begin")]
		public const uint KP_Begin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Decimal")]
		public const uint KP_Decimal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Delete")]
		public const uint KP_Delete;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Divide")]
		public const uint KP_Divide;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Down")]
		public const uint KP_Down;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_End")]
		public const uint KP_End;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Enter")]
		public const uint KP_Enter;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Equal")]
		public const uint KP_Equal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_F1")]
		public const uint KP_F1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_F2")]
		public const uint KP_F2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_F3")]
		public const uint KP_F3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_F4")]
		public const uint KP_F4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Home")]
		public const uint KP_Home;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Insert")]
		public const uint KP_Insert;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Left")]
		public const uint KP_Left;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Multiply")]
		public const uint KP_Multiply;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Next")]
		public const uint KP_Next;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Page_Down")]
		public const uint KP_Page_Down;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Page_Up")]
		public const uint KP_Page_Up;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Prior")]
		public const uint KP_Prior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Right")]
		public const uint KP_Right;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Separator")]
		public const uint KP_Separator;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Space")]
		public const uint KP_Space;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Subtract")]
		public const uint KP_Subtract;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Tab")]
		public const uint KP_Tab;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KP_Up")]
		public const uint KP_Up;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Kana_Lock")]
		public const uint Kana_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Kana_Shift")]
		public const uint Kana_Shift;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Kanji")]
		public const uint Kanji;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Kanji_Bangou")]
		public const uint Kanji_Bangou;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Katakana")]
		public const uint Katakana;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KbdBrightnessDown")]
		public const uint KbdBrightnessDown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KbdBrightnessUp")]
		public const uint KbdBrightnessUp;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_KbdLightOnOff")]
		public const uint KbdLightOnOff;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Kcedilla")]
		public const uint Kcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Korean_Won")]
		public const uint Korean_Won;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L")]
		public const uint L;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L1")]
		public const uint L1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L10")]
		public const uint L10;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L2")]
		public const uint L2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L3")]
		public const uint L3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L4")]
		public const uint L4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L5")]
		public const uint L5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L6")]
		public const uint L6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L7")]
		public const uint L7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L8")]
		public const uint L8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_L9")]
		public const uint L9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Lacute")]
		public const uint Lacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Last_Virtual_Screen")]
		public const uint Last_Virtual_Screen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch0")]
		public const uint Launch0;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch1")]
		public const uint Launch1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch2")]
		public const uint Launch2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch3")]
		public const uint Launch3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch4")]
		public const uint Launch4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch5")]
		public const uint Launch5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch6")]
		public const uint Launch6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch7")]
		public const uint Launch7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch8")]
		public const uint Launch8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Launch9")]
		public const uint Launch9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LaunchA")]
		public const uint LaunchA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LaunchB")]
		public const uint LaunchB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LaunchC")]
		public const uint LaunchC;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LaunchD")]
		public const uint LaunchD;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LaunchE")]
		public const uint LaunchE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LaunchF")]
		public const uint LaunchF;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Lbelowdot")]
		public const uint Lbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Lcaron")]
		public const uint Lcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Lcedilla")]
		public const uint Lcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Left")]
		public const uint Left;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LightBulb")]
		public const uint LightBulb;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Linefeed")]
		public const uint Linefeed;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LiraSign")]
		public const uint LiraSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LogGrabInfo")]
		public const uint LogGrabInfo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LogOff")]
		public const uint LogOff;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_LogWindowTree")]
		public const uint LogWindowTree;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Lstroke")]
		public const uint Lstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_M")]
		public const uint M;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Mabovedot")]
		public const uint Mabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Macedonia_DSE")]
		public const uint Macedonia_DSE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Macedonia_GJE")]
		public const uint Macedonia_GJE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Macedonia_KJE")]
		public const uint Macedonia_KJE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Macedonia_dse")]
		public const uint Macedonia_dse;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Macedonia_gje")]
		public const uint Macedonia_gje;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Macedonia_kje")]
		public const uint Macedonia_kje;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Mae_Koho")]
		public const uint Mae_Koho;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Mail")]
		public const uint Mail;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MailForward")]
		public const uint MailForward;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Market")]
		public const uint Market;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Massyo")]
		public const uint Massyo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Meeting")]
		public const uint Meeting;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Memo")]
		public const uint Memo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Menu")]
		public const uint Menu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MenuKB")]
		public const uint MenuKB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MenuPB")]
		public const uint MenuPB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Messenger")]
		public const uint Messenger;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Meta_L")]
		public const uint Meta_L;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Meta_R")]
		public const uint Meta_R;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MillSign")]
		public const uint MillSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ModeLock")]
		public const uint ModeLock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Mode_switch")]
		public const uint Mode_switch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MonBrightnessDown")]
		public const uint MonBrightnessDown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MonBrightnessUp")]
		public const uint MonBrightnessUp;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MouseKeys_Accel_Enable")]
		public const uint MouseKeys_Accel_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MouseKeys_Enable")]
		public const uint MouseKeys_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Muhenkan")]
		public const uint Muhenkan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Multi_key")]
		public const uint Multi_key;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MultipleCandidate")]
		public const uint MultipleCandidate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Music")]
		public const uint Music;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MyComputer")]
		public const uint MyComputer;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_MySites")]
		public const uint MySites;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_N")]
		public const uint N;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Nacute")]
		public const uint Nacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_NairaSign")]
		public const uint NairaSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ncaron")]
		public const uint Ncaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ncedilla")]
		public const uint Ncedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_New")]
		public const uint New;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_NewSheqelSign")]
		public const uint NewSheqelSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_News")]
		public const uint News;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Next")]
		public const uint Next;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Next_VMode")]
		public const uint Next_VMode;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Next_Virtual_Screen")]
		public const uint Next_Virtual_Screen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ntilde")]
		public const uint Ntilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Num_Lock")]
		public const uint Num_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_O")]
		public const uint O;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_OE")]
		public const uint OE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Oacute")]
		public const uint Oacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Obarred")]
		public const uint Obarred;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Obelowdot")]
		public const uint Obelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ocaron")]
		public const uint Ocaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ocircumflex")]
		public const uint Ocircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ocircumflexacute")]
		public const uint Ocircumflexacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ocircumflexbelowdot")]
		public const uint Ocircumflexbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ocircumflexgrave")]
		public const uint Ocircumflexgrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ocircumflexhook")]
		public const uint Ocircumflexhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ocircumflextilde")]
		public const uint Ocircumflextilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Odiaeresis")]
		public const uint Odiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Odoubleacute")]
		public const uint Odoubleacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_OfficeHome")]
		public const uint OfficeHome;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ograve")]
		public const uint Ograve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ohook")]
		public const uint Ohook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ohorn")]
		public const uint Ohorn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ohornacute")]
		public const uint Ohornacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ohornbelowdot")]
		public const uint Ohornbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ohorngrave")]
		public const uint Ohorngrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ohornhook")]
		public const uint Ohornhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ohorntilde")]
		public const uint Ohorntilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Omacron")]
		public const uint Omacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ooblique")]
		public const uint Ooblique;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Open")]
		public const uint Open;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_OpenURL")]
		public const uint OpenURL;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Option")]
		public const uint Option;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Oslash")]
		public const uint Oslash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Otilde")]
		public const uint Otilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Overlay1_Enable")]
		public const uint Overlay1_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Overlay2_Enable")]
		public const uint Overlay2_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_P")]
		public const uint P;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pabovedot")]
		public const uint Pabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Page_Down")]
		public const uint Page_Down;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Page_Up")]
		public const uint Page_Up;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Paste")]
		public const uint Paste;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pause")]
		public const uint Pause;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_PesetaSign")]
		public const uint PesetaSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Phone")]
		public const uint Phone;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pictures")]
		public const uint Pictures;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Accelerate")]
		public const uint Pointer_Accelerate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Button1")]
		public const uint Pointer_Button1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Button2")]
		public const uint Pointer_Button2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Button3")]
		public const uint Pointer_Button3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Button4")]
		public const uint Pointer_Button4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Button5")]
		public const uint Pointer_Button5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Button_Dflt")]
		public const uint Pointer_Button_Dflt;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DblClick1")]
		public const uint Pointer_DblClick1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DblClick2")]
		public const uint Pointer_DblClick2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DblClick3")]
		public const uint Pointer_DblClick3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DblClick4")]
		public const uint Pointer_DblClick4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DblClick5")]
		public const uint Pointer_DblClick5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DblClick_Dflt")]
		public const uint Pointer_DblClick_Dflt;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DfltBtnNext")]
		public const uint Pointer_DfltBtnNext;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DfltBtnPrev")]
		public const uint Pointer_DfltBtnPrev;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Down")]
		public const uint Pointer_Down;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DownLeft")]
		public const uint Pointer_DownLeft;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_DownRight")]
		public const uint Pointer_DownRight;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Drag1")]
		public const uint Pointer_Drag1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Drag2")]
		public const uint Pointer_Drag2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Drag3")]
		public const uint Pointer_Drag3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Drag4")]
		public const uint Pointer_Drag4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Drag5")]
		public const uint Pointer_Drag5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Drag_Dflt")]
		public const uint Pointer_Drag_Dflt;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_EnableKeys")]
		public const uint Pointer_EnableKeys;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Left")]
		public const uint Pointer_Left;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Right")]
		public const uint Pointer_Right;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_Up")]
		public const uint Pointer_Up;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_UpLeft")]
		public const uint Pointer_UpLeft;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Pointer_UpRight")]
		public const uint Pointer_UpRight;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_PowerDown")]
		public const uint PowerDown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_PowerOff")]
		public const uint PowerOff;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Prev_VMode")]
		public const uint Prev_VMode;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Prev_Virtual_Screen")]
		public const uint Prev_Virtual_Screen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_PreviousCandidate")]
		public const uint PreviousCandidate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Print")]
		public const uint Print;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Prior")]
		public const uint Prior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Q")]
		public const uint Q;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R")]
		public const uint R;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R1")]
		public const uint R1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R10")]
		public const uint R10;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R11")]
		public const uint R11;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R12")]
		public const uint R12;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R13")]
		public const uint R13;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R14")]
		public const uint R14;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R15")]
		public const uint R15;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R2")]
		public const uint R2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R3")]
		public const uint R3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R4")]
		public const uint R4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R5")]
		public const uint R5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R6")]
		public const uint R6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R7")]
		public const uint R7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R8")]
		public const uint R8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_R9")]
		public const uint R9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Racute")]
		public const uint Racute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Rcaron")]
		public const uint Rcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Rcedilla")]
		public const uint Rcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Red")]
		public const uint Red;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Redo")]
		public const uint Redo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Refresh")]
		public const uint Refresh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Reload")]
		public const uint Reload;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_RepeatKeys_Enable")]
		public const uint RepeatKeys_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Reply")]
		public const uint Reply;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Return")]
		public const uint Return;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Right")]
		public const uint Right;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_RockerDown")]
		public const uint RockerDown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_RockerEnter")]
		public const uint RockerEnter;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_RockerUp")]
		public const uint RockerUp;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Romaji")]
		public const uint Romaji;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_RotateWindows")]
		public const uint RotateWindows;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_RotationKB")]
		public const uint RotationKB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_RotationPB")]
		public const uint RotationPB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_RupeeSign")]
		public const uint RupeeSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_S")]
		public const uint S;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_SCHWA")]
		public const uint SCHWA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sabovedot")]
		public const uint Sabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sacute")]
		public const uint Sacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Save")]
		public const uint Save;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Scaron")]
		public const uint Scaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Scedilla")]
		public const uint Scedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Scircumflex")]
		public const uint Scircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ScreenSaver")]
		public const uint ScreenSaver;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ScrollClick")]
		public const uint ScrollClick;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ScrollDown")]
		public const uint ScrollDown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ScrollUp")]
		public const uint ScrollUp;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Scroll_Lock")]
		public const uint Scroll_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Search")]
		public const uint Search;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Select")]
		public const uint Select;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_SelectButton")]
		public const uint SelectButton;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Send")]
		public const uint Send;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_DJE")]
		public const uint Serbian_DJE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_DZE")]
		public const uint Serbian_DZE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_JE")]
		public const uint Serbian_JE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_LJE")]
		public const uint Serbian_LJE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_NJE")]
		public const uint Serbian_NJE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_TSHE")]
		public const uint Serbian_TSHE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_dje")]
		public const uint Serbian_dje;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_dze")]
		public const uint Serbian_dze;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_je")]
		public const uint Serbian_je;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_lje")]
		public const uint Serbian_lje;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_nje")]
		public const uint Serbian_nje;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Serbian_tshe")]
		public const uint Serbian_tshe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Shift_L")]
		public const uint Shift_L;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Shift_Lock")]
		public const uint Shift_Lock;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Shift_R")]
		public const uint Shift_R;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Shop")]
		public const uint Shop;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_SingleCandidate")]
		public const uint SingleCandidate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_a")]
		public const uint Sinh_a;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_aa")]
		public const uint Sinh_aa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_aa2")]
		public const uint Sinh_aa2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ae")]
		public const uint Sinh_ae;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ae2")]
		public const uint Sinh_ae2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_aee")]
		public const uint Sinh_aee;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_aee2")]
		public const uint Sinh_aee2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ai")]
		public const uint Sinh_ai;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ai2")]
		public const uint Sinh_ai2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_al")]
		public const uint Sinh_al;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_au")]
		public const uint Sinh_au;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_au2")]
		public const uint Sinh_au2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ba")]
		public const uint Sinh_ba;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_bha")]
		public const uint Sinh_bha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ca")]
		public const uint Sinh_ca;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_cha")]
		public const uint Sinh_cha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_dda")]
		public const uint Sinh_dda;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ddha")]
		public const uint Sinh_ddha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_dha")]
		public const uint Sinh_dha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_dhha")]
		public const uint Sinh_dhha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_e")]
		public const uint Sinh_e;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_e2")]
		public const uint Sinh_e2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ee")]
		public const uint Sinh_ee;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ee2")]
		public const uint Sinh_ee2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_fa")]
		public const uint Sinh_fa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ga")]
		public const uint Sinh_ga;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_gha")]
		public const uint Sinh_gha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_h2")]
		public const uint Sinh_h2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ha")]
		public const uint Sinh_ha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_i")]
		public const uint Sinh_i;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_i2")]
		public const uint Sinh_i2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ii")]
		public const uint Sinh_ii;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ii2")]
		public const uint Sinh_ii2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ja")]
		public const uint Sinh_ja;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_jha")]
		public const uint Sinh_jha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_jnya")]
		public const uint Sinh_jnya;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ka")]
		public const uint Sinh_ka;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_kha")]
		public const uint Sinh_kha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_kunddaliya")]
		public const uint Sinh_kunddaliya;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_la")]
		public const uint Sinh_la;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_lla")]
		public const uint Sinh_lla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_lu")]
		public const uint Sinh_lu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_lu2")]
		public const uint Sinh_lu2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_luu")]
		public const uint Sinh_luu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_luu2")]
		public const uint Sinh_luu2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ma")]
		public const uint Sinh_ma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_mba")]
		public const uint Sinh_mba;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_na")]
		public const uint Sinh_na;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ndda")]
		public const uint Sinh_ndda;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ndha")]
		public const uint Sinh_ndha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ng")]
		public const uint Sinh_ng;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ng2")]
		public const uint Sinh_ng2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_nga")]
		public const uint Sinh_nga;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_nja")]
		public const uint Sinh_nja;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_nna")]
		public const uint Sinh_nna;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_nya")]
		public const uint Sinh_nya;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_o")]
		public const uint Sinh_o;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_o2")]
		public const uint Sinh_o2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_oo")]
		public const uint Sinh_oo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_oo2")]
		public const uint Sinh_oo2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_pa")]
		public const uint Sinh_pa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_pha")]
		public const uint Sinh_pha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ra")]
		public const uint Sinh_ra;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ri")]
		public const uint Sinh_ri;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_rii")]
		public const uint Sinh_rii;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ru2")]
		public const uint Sinh_ru2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ruu2")]
		public const uint Sinh_ruu2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_sa")]
		public const uint Sinh_sa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_sha")]
		public const uint Sinh_sha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ssha")]
		public const uint Sinh_ssha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_tha")]
		public const uint Sinh_tha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_thha")]
		public const uint Sinh_thha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_tta")]
		public const uint Sinh_tta;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ttha")]
		public const uint Sinh_ttha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_u")]
		public const uint Sinh_u;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_u2")]
		public const uint Sinh_u2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_uu")]
		public const uint Sinh_uu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_uu2")]
		public const uint Sinh_uu2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_va")]
		public const uint Sinh_va;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sinh_ya")]
		public const uint Sinh_ya;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sleep")]
		public const uint Sleep;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_SlowKeys_Enable")]
		public const uint SlowKeys_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Spell")]
		public const uint Spell;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_SplitScreen")]
		public const uint SplitScreen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Standby")]
		public const uint Standby;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Start")]
		public const uint Start;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_StickyKeys_Enable")]
		public const uint StickyKeys_Enable;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Stop")]
		public const uint Stop;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Subtitle")]
		public const uint Subtitle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Super_L")]
		public const uint Super_L;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Super_R")]
		public const uint Super_R;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Support")]
		public const uint Support;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Suspend")]
		public const uint Suspend;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_1")]
		public const uint Switch_VT_1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_10")]
		public const uint Switch_VT_10;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_11")]
		public const uint Switch_VT_11;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_12")]
		public const uint Switch_VT_12;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_2")]
		public const uint Switch_VT_2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_3")]
		public const uint Switch_VT_3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_4")]
		public const uint Switch_VT_4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_5")]
		public const uint Switch_VT_5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_6")]
		public const uint Switch_VT_6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_7")]
		public const uint Switch_VT_7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_8")]
		public const uint Switch_VT_8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Switch_VT_9")]
		public const uint Switch_VT_9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Sys_Req")]
		public const uint Sys_Req;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_T")]
		public const uint T;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_THORN")]
		public const uint THORN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Tab")]
		public const uint Tab;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Tabovedot")]
		public const uint Tabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_TaskPane")]
		public const uint TaskPane;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Tcaron")]
		public const uint Tcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Tcedilla")]
		public const uint Tcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Terminal")]
		public const uint Terminal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Terminate_Server")]
		public const uint Terminate_Server;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_baht")]
		public const uint Thai_baht;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_bobaimai")]
		public const uint Thai_bobaimai;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_chochan")]
		public const uint Thai_chochan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_chochang")]
		public const uint Thai_chochang;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_choching")]
		public const uint Thai_choching;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_chochoe")]
		public const uint Thai_chochoe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_dochada")]
		public const uint Thai_dochada;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_dodek")]
		public const uint Thai_dodek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_fofa")]
		public const uint Thai_fofa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_fofan")]
		public const uint Thai_fofan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_hohip")]
		public const uint Thai_hohip;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_honokhuk")]
		public const uint Thai_honokhuk;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_khokhai")]
		public const uint Thai_khokhai;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_khokhon")]
		public const uint Thai_khokhon;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_khokhuat")]
		public const uint Thai_khokhuat;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_khokhwai")]
		public const uint Thai_khokhwai;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_khorakhang")]
		public const uint Thai_khorakhang;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_kokai")]
		public const uint Thai_kokai;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_lakkhangyao")]
		public const uint Thai_lakkhangyao;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_lekchet")]
		public const uint Thai_lekchet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_lekha")]
		public const uint Thai_lekha;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_lekhok")]
		public const uint Thai_lekhok;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_lekkao")]
		public const uint Thai_lekkao;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_leknung")]
		public const uint Thai_leknung;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_lekpaet")]
		public const uint Thai_lekpaet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_leksam")]
		public const uint Thai_leksam;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_leksi")]
		public const uint Thai_leksi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_leksong")]
		public const uint Thai_leksong;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_leksun")]
		public const uint Thai_leksun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_lochula")]
		public const uint Thai_lochula;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_loling")]
		public const uint Thai_loling;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_lu")]
		public const uint Thai_lu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_maichattawa")]
		public const uint Thai_maichattawa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_maiek")]
		public const uint Thai_maiek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_maihanakat")]
		public const uint Thai_maihanakat;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_maihanakat_maitho")]
		public const uint Thai_maihanakat_maitho;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_maitaikhu")]
		public const uint Thai_maitaikhu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_maitho")]
		public const uint Thai_maitho;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_maitri")]
		public const uint Thai_maitri;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_maiyamok")]
		public const uint Thai_maiyamok;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_moma")]
		public const uint Thai_moma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_ngongu")]
		public const uint Thai_ngongu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_nikhahit")]
		public const uint Thai_nikhahit;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_nonen")]
		public const uint Thai_nonen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_nonu")]
		public const uint Thai_nonu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_oang")]
		public const uint Thai_oang;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_paiyannoi")]
		public const uint Thai_paiyannoi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_phinthu")]
		public const uint Thai_phinthu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_phophan")]
		public const uint Thai_phophan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_phophung")]
		public const uint Thai_phophung;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_phosamphao")]
		public const uint Thai_phosamphao;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_popla")]
		public const uint Thai_popla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_rorua")]
		public const uint Thai_rorua;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_ru")]
		public const uint Thai_ru;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_saraa")]
		public const uint Thai_saraa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_saraaa")]
		public const uint Thai_saraaa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_saraae")]
		public const uint Thai_saraae;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_saraaimaimalai")]
		public const uint Thai_saraaimaimalai;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_saraaimaimuan")]
		public const uint Thai_saraaimaimuan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_saraam")]
		public const uint Thai_saraam;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sarae")]
		public const uint Thai_sarae;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sarai")]
		public const uint Thai_sarai;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_saraii")]
		public const uint Thai_saraii;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sarao")]
		public const uint Thai_sarao;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sarau")]
		public const uint Thai_sarau;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_saraue")]
		public const uint Thai_saraue;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sarauee")]
		public const uint Thai_sarauee;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sarauu")]
		public const uint Thai_sarauu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sorusi")]
		public const uint Thai_sorusi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sosala")]
		public const uint Thai_sosala;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_soso")]
		public const uint Thai_soso;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_sosua")]
		public const uint Thai_sosua;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_thanthakhat")]
		public const uint Thai_thanthakhat;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_thonangmontho")]
		public const uint Thai_thonangmontho;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_thophuthao")]
		public const uint Thai_thophuthao;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_thothahan")]
		public const uint Thai_thothahan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_thothan")]
		public const uint Thai_thothan;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_thothong")]
		public const uint Thai_thothong;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_thothung")]
		public const uint Thai_thothung;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_topatak")]
		public const uint Thai_topatak;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_totao")]
		public const uint Thai_totao;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_wowaen")]
		public const uint Thai_wowaen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_yoyak")]
		public const uint Thai_yoyak;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thai_yoying")]
		public const uint Thai_yoying;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Thorn")]
		public const uint Thorn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Time")]
		public const uint Time;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ToDoList")]
		public const uint ToDoList;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Tools")]
		public const uint Tools;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_TopMenu")]
		public const uint TopMenu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_TouchpadOff")]
		public const uint TouchpadOff;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_TouchpadOn")]
		public const uint TouchpadOn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_TouchpadToggle")]
		public const uint TouchpadToggle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Touroku")]
		public const uint Touroku;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Travel")]
		public const uint Travel;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Tslash")]
		public const uint Tslash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_U")]
		public const uint U;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_UWB")]
		public const uint UWB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uacute")]
		public const uint Uacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ubelowdot")]
		public const uint Ubelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ubreve")]
		public const uint Ubreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ucircumflex")]
		public const uint Ucircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Udiaeresis")]
		public const uint Udiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Udoubleacute")]
		public const uint Udoubleacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ugrave")]
		public const uint Ugrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uhook")]
		public const uint Uhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uhorn")]
		public const uint Uhorn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uhornacute")]
		public const uint Uhornacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uhornbelowdot")]
		public const uint Uhornbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uhorngrave")]
		public const uint Uhorngrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uhornhook")]
		public const uint Uhornhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uhorntilde")]
		public const uint Uhorntilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukrainian_GHE_WITH_UPTURN")]
		public const uint Ukrainian_GHE_WITH_UPTURN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukrainian_I")]
		public const uint Ukrainian_I;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukrainian_IE")]
		public const uint Ukrainian_IE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukrainian_YI")]
		public const uint Ukrainian_YI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukrainian_ghe_with_upturn")]
		public const uint Ukrainian_ghe_with_upturn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukrainian_i")]
		public const uint Ukrainian_i;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukrainian_ie")]
		public const uint Ukrainian_ie;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukrainian_yi")]
		public const uint Ukrainian_yi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukranian_I")]
		public const uint Ukranian_I;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukranian_JE")]
		public const uint Ukranian_JE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukranian_YI")]
		public const uint Ukranian_YI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukranian_i")]
		public const uint Ukranian_i;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukranian_je")]
		public const uint Ukranian_je;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ukranian_yi")]
		public const uint Ukranian_yi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Umacron")]
		public const uint Umacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Undo")]
		public const uint Undo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ungrab")]
		public const uint Ungrab;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uogonek")]
		public const uint Uogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Up")]
		public const uint Up;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Uring")]
		public const uint Uring;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_User1KB")]
		public const uint User1KB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_User2KB")]
		public const uint User2KB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_UserPB")]
		public const uint UserPB;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Utilde")]
		public const uint Utilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_V")]
		public const uint V;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_VendorHome")]
		public const uint VendorHome;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Video")]
		public const uint Video;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_View")]
		public const uint View;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_VoidSymbol")]
		public const uint VoidSymbol;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_W")]
		public const uint W;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_WLAN")]
		public const uint WLAN;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_WWW")]
		public const uint WWW;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Wacute")]
		public const uint Wacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_WakeUp")]
		public const uint WakeUp;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Wcircumflex")]
		public const uint Wcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Wdiaeresis")]
		public const uint Wdiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_WebCam")]
		public const uint WebCam;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Wgrave")]
		public const uint Wgrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_WheelButton")]
		public const uint WheelButton;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_WindowClear")]
		public const uint WindowClear;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_WonSign")]
		public const uint WonSign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Word")]
		public const uint Word;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_X")]
		public const uint X;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Xabovedot")]
		public const uint Xabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Xfer")]
		public const uint Xfer;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Y")]
		public const uint Y;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Yacute")]
		public const uint Yacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ybelowdot")]
		public const uint Ybelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ycircumflex")]
		public const uint Ycircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ydiaeresis")]
		public const uint Ydiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Yellow")]
		public const uint Yellow;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ygrave")]
		public const uint Ygrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Yhook")]
		public const uint Yhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Ytilde")]
		public const uint Ytilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Z")]
		public const uint Z;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Zabovedot")]
		public const uint Zabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Zacute")]
		public const uint Zacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Zcaron")]
		public const uint Zcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Zen_Koho")]
		public const uint Zen_Koho;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Zenkaku")]
		public const uint Zenkaku;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Zenkaku_Hankaku")]
		public const uint Zenkaku_Hankaku;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ZoomIn")]
		public const uint ZoomIn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ZoomOut")]
		public const uint ZoomOut;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_Zstroke")]
		public const uint Zstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_a")]
		public const uint a;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_aacute")]
		public const uint aacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_abelowdot")]
		public const uint abelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_abovedot")]
		public const uint abovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_abreve")]
		public const uint abreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_abreveacute")]
		public const uint abreveacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_abrevebelowdot")]
		public const uint abrevebelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_abrevegrave")]
		public const uint abrevegrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_abrevehook")]
		public const uint abrevehook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_abrevetilde")]
		public const uint abrevetilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_acircumflex")]
		public const uint acircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_acircumflexacute")]
		public const uint acircumflexacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_acircumflexbelowdot")]
		public const uint acircumflexbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_acircumflexgrave")]
		public const uint acircumflexgrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_acircumflexhook")]
		public const uint acircumflexhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_acircumflextilde")]
		public const uint acircumflextilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_acute")]
		public const uint acute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_adiaeresis")]
		public const uint adiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ae")]
		public const uint ae;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_agrave")]
		public const uint agrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ahook")]
		public const uint ahook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_amacron")]
		public const uint amacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ampersand")]
		public const uint ampersand;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_aogonek")]
		public const uint aogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_apostrophe")]
		public const uint apostrophe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_approxeq")]
		public const uint approxeq;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_approximate")]
		public const uint approximate;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_aring")]
		public const uint aring;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_asciicircum")]
		public const uint asciicircum;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_asciitilde")]
		public const uint asciitilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_asterisk")]
		public const uint asterisk;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_at")]
		public const uint at;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_atilde")]
		public const uint atilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_b")]
		public const uint b;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_babovedot")]
		public const uint babovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_backslash")]
		public const uint backslash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ballotcross")]
		public const uint ballotcross;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_bar")]
		public const uint bar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_because")]
		public const uint because;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_blank")]
		public const uint blank;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_botintegral")]
		public const uint botintegral;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_botleftparens")]
		public const uint botleftparens;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_botleftsqbracket")]
		public const uint botleftsqbracket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_botleftsummation")]
		public const uint botleftsummation;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_botrightparens")]
		public const uint botrightparens;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_botrightsqbracket")]
		public const uint botrightsqbracket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_botrightsummation")]
		public const uint botrightsummation;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_bott")]
		public const uint bott;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_botvertsummationconnector")]
		public const uint botvertsummationconnector;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braceleft")]
		public const uint braceleft;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braceright")]
		public const uint braceright;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_bracketleft")]
		public const uint bracketleft;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_bracketright")]
		public const uint bracketright;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_blank")]
		public const uint braille_blank;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_1")]
		public const uint braille_dot_1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_10")]
		public const uint braille_dot_10;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_2")]
		public const uint braille_dot_2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_3")]
		public const uint braille_dot_3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_4")]
		public const uint braille_dot_4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_5")]
		public const uint braille_dot_5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_6")]
		public const uint braille_dot_6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_7")]
		public const uint braille_dot_7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_8")]
		public const uint braille_dot_8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dot_9")]
		public const uint braille_dot_9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1")]
		public const uint braille_dots_1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12")]
		public const uint braille_dots_12;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123")]
		public const uint braille_dots_123;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1234")]
		public const uint braille_dots_1234;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12345")]
		public const uint braille_dots_12345;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123456")]
		public const uint braille_dots_123456;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1234567")]
		public const uint braille_dots_1234567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12345678")]
		public const uint braille_dots_12345678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1234568")]
		public const uint braille_dots_1234568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123457")]
		public const uint braille_dots_123457;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1234578")]
		public const uint braille_dots_1234578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123458")]
		public const uint braille_dots_123458;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12346")]
		public const uint braille_dots_12346;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123467")]
		public const uint braille_dots_123467;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1234678")]
		public const uint braille_dots_1234678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123468")]
		public const uint braille_dots_123468;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12347")]
		public const uint braille_dots_12347;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123478")]
		public const uint braille_dots_123478;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12348")]
		public const uint braille_dots_12348;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1235")]
		public const uint braille_dots_1235;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12356")]
		public const uint braille_dots_12356;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123567")]
		public const uint braille_dots_123567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1235678")]
		public const uint braille_dots_1235678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123568")]
		public const uint braille_dots_123568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12357")]
		public const uint braille_dots_12357;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123578")]
		public const uint braille_dots_123578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12358")]
		public const uint braille_dots_12358;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1236")]
		public const uint braille_dots_1236;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12367")]
		public const uint braille_dots_12367;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_123678")]
		public const uint braille_dots_123678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12368")]
		public const uint braille_dots_12368;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1237")]
		public const uint braille_dots_1237;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12378")]
		public const uint braille_dots_12378;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1238")]
		public const uint braille_dots_1238;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_124")]
		public const uint braille_dots_124;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1245")]
		public const uint braille_dots_1245;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12456")]
		public const uint braille_dots_12456;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_124567")]
		public const uint braille_dots_124567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1245678")]
		public const uint braille_dots_1245678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_124568")]
		public const uint braille_dots_124568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12457")]
		public const uint braille_dots_12457;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_124578")]
		public const uint braille_dots_124578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12458")]
		public const uint braille_dots_12458;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1246")]
		public const uint braille_dots_1246;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12467")]
		public const uint braille_dots_12467;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_124678")]
		public const uint braille_dots_124678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12468")]
		public const uint braille_dots_12468;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1247")]
		public const uint braille_dots_1247;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12478")]
		public const uint braille_dots_12478;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1248")]
		public const uint braille_dots_1248;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_125")]
		public const uint braille_dots_125;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1256")]
		public const uint braille_dots_1256;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12567")]
		public const uint braille_dots_12567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_125678")]
		public const uint braille_dots_125678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12568")]
		public const uint braille_dots_12568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1257")]
		public const uint braille_dots_1257;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12578")]
		public const uint braille_dots_12578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1258")]
		public const uint braille_dots_1258;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_126")]
		public const uint braille_dots_126;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1267")]
		public const uint braille_dots_1267;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_12678")]
		public const uint braille_dots_12678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1268")]
		public const uint braille_dots_1268;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_127")]
		public const uint braille_dots_127;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1278")]
		public const uint braille_dots_1278;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_128")]
		public const uint braille_dots_128;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13")]
		public const uint braille_dots_13;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_134")]
		public const uint braille_dots_134;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1345")]
		public const uint braille_dots_1345;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13456")]
		public const uint braille_dots_13456;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_134567")]
		public const uint braille_dots_134567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1345678")]
		public const uint braille_dots_1345678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_134568")]
		public const uint braille_dots_134568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13457")]
		public const uint braille_dots_13457;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_134578")]
		public const uint braille_dots_134578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13458")]
		public const uint braille_dots_13458;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1346")]
		public const uint braille_dots_1346;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13467")]
		public const uint braille_dots_13467;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_134678")]
		public const uint braille_dots_134678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13468")]
		public const uint braille_dots_13468;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1347")]
		public const uint braille_dots_1347;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13478")]
		public const uint braille_dots_13478;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1348")]
		public const uint braille_dots_1348;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_135")]
		public const uint braille_dots_135;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1356")]
		public const uint braille_dots_1356;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13567")]
		public const uint braille_dots_13567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_135678")]
		public const uint braille_dots_135678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13568")]
		public const uint braille_dots_13568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1357")]
		public const uint braille_dots_1357;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13578")]
		public const uint braille_dots_13578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1358")]
		public const uint braille_dots_1358;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_136")]
		public const uint braille_dots_136;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1367")]
		public const uint braille_dots_1367;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_13678")]
		public const uint braille_dots_13678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1368")]
		public const uint braille_dots_1368;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_137")]
		public const uint braille_dots_137;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1378")]
		public const uint braille_dots_1378;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_138")]
		public const uint braille_dots_138;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_14")]
		public const uint braille_dots_14;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_145")]
		public const uint braille_dots_145;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1456")]
		public const uint braille_dots_1456;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_14567")]
		public const uint braille_dots_14567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_145678")]
		public const uint braille_dots_145678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_14568")]
		public const uint braille_dots_14568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1457")]
		public const uint braille_dots_1457;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_14578")]
		public const uint braille_dots_14578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1458")]
		public const uint braille_dots_1458;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_146")]
		public const uint braille_dots_146;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1467")]
		public const uint braille_dots_1467;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_14678")]
		public const uint braille_dots_14678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1468")]
		public const uint braille_dots_1468;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_147")]
		public const uint braille_dots_147;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1478")]
		public const uint braille_dots_1478;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_148")]
		public const uint braille_dots_148;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_15")]
		public const uint braille_dots_15;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_156")]
		public const uint braille_dots_156;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1567")]
		public const uint braille_dots_1567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_15678")]
		public const uint braille_dots_15678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1568")]
		public const uint braille_dots_1568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_157")]
		public const uint braille_dots_157;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1578")]
		public const uint braille_dots_1578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_158")]
		public const uint braille_dots_158;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_16")]
		public const uint braille_dots_16;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_167")]
		public const uint braille_dots_167;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_1678")]
		public const uint braille_dots_1678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_168")]
		public const uint braille_dots_168;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_17")]
		public const uint braille_dots_17;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_178")]
		public const uint braille_dots_178;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_18")]
		public const uint braille_dots_18;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2")]
		public const uint braille_dots_2;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23")]
		public const uint braille_dots_23;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_234")]
		public const uint braille_dots_234;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2345")]
		public const uint braille_dots_2345;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23456")]
		public const uint braille_dots_23456;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_234567")]
		public const uint braille_dots_234567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2345678")]
		public const uint braille_dots_2345678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_234568")]
		public const uint braille_dots_234568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23457")]
		public const uint braille_dots_23457;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_234578")]
		public const uint braille_dots_234578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23458")]
		public const uint braille_dots_23458;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2346")]
		public const uint braille_dots_2346;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23467")]
		public const uint braille_dots_23467;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_234678")]
		public const uint braille_dots_234678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23468")]
		public const uint braille_dots_23468;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2347")]
		public const uint braille_dots_2347;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23478")]
		public const uint braille_dots_23478;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2348")]
		public const uint braille_dots_2348;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_235")]
		public const uint braille_dots_235;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2356")]
		public const uint braille_dots_2356;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23567")]
		public const uint braille_dots_23567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_235678")]
		public const uint braille_dots_235678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23568")]
		public const uint braille_dots_23568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2357")]
		public const uint braille_dots_2357;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23578")]
		public const uint braille_dots_23578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2358")]
		public const uint braille_dots_2358;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_236")]
		public const uint braille_dots_236;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2367")]
		public const uint braille_dots_2367;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_23678")]
		public const uint braille_dots_23678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2368")]
		public const uint braille_dots_2368;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_237")]
		public const uint braille_dots_237;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2378")]
		public const uint braille_dots_2378;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_238")]
		public const uint braille_dots_238;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_24")]
		public const uint braille_dots_24;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_245")]
		public const uint braille_dots_245;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2456")]
		public const uint braille_dots_2456;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_24567")]
		public const uint braille_dots_24567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_245678")]
		public const uint braille_dots_245678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_24568")]
		public const uint braille_dots_24568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2457")]
		public const uint braille_dots_2457;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_24578")]
		public const uint braille_dots_24578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2458")]
		public const uint braille_dots_2458;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_246")]
		public const uint braille_dots_246;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2467")]
		public const uint braille_dots_2467;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_24678")]
		public const uint braille_dots_24678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2468")]
		public const uint braille_dots_2468;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_247")]
		public const uint braille_dots_247;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2478")]
		public const uint braille_dots_2478;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_248")]
		public const uint braille_dots_248;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_25")]
		public const uint braille_dots_25;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_256")]
		public const uint braille_dots_256;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2567")]
		public const uint braille_dots_2567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_25678")]
		public const uint braille_dots_25678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2568")]
		public const uint braille_dots_2568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_257")]
		public const uint braille_dots_257;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2578")]
		public const uint braille_dots_2578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_258")]
		public const uint braille_dots_258;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_26")]
		public const uint braille_dots_26;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_267")]
		public const uint braille_dots_267;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_2678")]
		public const uint braille_dots_2678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_268")]
		public const uint braille_dots_268;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_27")]
		public const uint braille_dots_27;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_278")]
		public const uint braille_dots_278;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_28")]
		public const uint braille_dots_28;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3")]
		public const uint braille_dots_3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_34")]
		public const uint braille_dots_34;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_345")]
		public const uint braille_dots_345;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3456")]
		public const uint braille_dots_3456;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_34567")]
		public const uint braille_dots_34567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_345678")]
		public const uint braille_dots_345678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_34568")]
		public const uint braille_dots_34568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3457")]
		public const uint braille_dots_3457;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_34578")]
		public const uint braille_dots_34578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3458")]
		public const uint braille_dots_3458;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_346")]
		public const uint braille_dots_346;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3467")]
		public const uint braille_dots_3467;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_34678")]
		public const uint braille_dots_34678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3468")]
		public const uint braille_dots_3468;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_347")]
		public const uint braille_dots_347;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3478")]
		public const uint braille_dots_3478;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_348")]
		public const uint braille_dots_348;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_35")]
		public const uint braille_dots_35;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_356")]
		public const uint braille_dots_356;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3567")]
		public const uint braille_dots_3567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_35678")]
		public const uint braille_dots_35678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3568")]
		public const uint braille_dots_3568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_357")]
		public const uint braille_dots_357;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3578")]
		public const uint braille_dots_3578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_358")]
		public const uint braille_dots_358;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_36")]
		public const uint braille_dots_36;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_367")]
		public const uint braille_dots_367;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_3678")]
		public const uint braille_dots_3678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_368")]
		public const uint braille_dots_368;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_37")]
		public const uint braille_dots_37;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_378")]
		public const uint braille_dots_378;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_38")]
		public const uint braille_dots_38;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_4")]
		public const uint braille_dots_4;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_45")]
		public const uint braille_dots_45;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_456")]
		public const uint braille_dots_456;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_4567")]
		public const uint braille_dots_4567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_45678")]
		public const uint braille_dots_45678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_4568")]
		public const uint braille_dots_4568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_457")]
		public const uint braille_dots_457;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_4578")]
		public const uint braille_dots_4578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_458")]
		public const uint braille_dots_458;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_46")]
		public const uint braille_dots_46;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_467")]
		public const uint braille_dots_467;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_4678")]
		public const uint braille_dots_4678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_468")]
		public const uint braille_dots_468;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_47")]
		public const uint braille_dots_47;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_478")]
		public const uint braille_dots_478;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_48")]
		public const uint braille_dots_48;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_5")]
		public const uint braille_dots_5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_56")]
		public const uint braille_dots_56;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_567")]
		public const uint braille_dots_567;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_5678")]
		public const uint braille_dots_5678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_568")]
		public const uint braille_dots_568;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_57")]
		public const uint braille_dots_57;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_578")]
		public const uint braille_dots_578;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_58")]
		public const uint braille_dots_58;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_6")]
		public const uint braille_dots_6;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_67")]
		public const uint braille_dots_67;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_678")]
		public const uint braille_dots_678;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_68")]
		public const uint braille_dots_68;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_7")]
		public const uint braille_dots_7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_78")]
		public const uint braille_dots_78;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_braille_dots_8")]
		public const uint braille_dots_8;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_breve")]
		public const uint breve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_brokenbar")]
		public const uint brokenbar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_c")]
		public const uint c;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_c_h")]
		public const uint c_h;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_cabovedot")]
		public const uint cabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_cacute")]
		public const uint cacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_careof")]
		public const uint careof;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_caret")]
		public const uint caret;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_caron")]
		public const uint caron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ccaron")]
		public const uint ccaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ccedilla")]
		public const uint ccedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ccircumflex")]
		public const uint ccircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_cedilla")]
		public const uint cedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_cent")]
		public const uint cent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ch")]
		public const uint ch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_checkerboard")]
		public const uint checkerboard;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_checkmark")]
		public const uint checkmark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_circle")]
		public const uint circle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_club")]
		public const uint club;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_colon")]
		public const uint colon;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_comma")]
		public const uint comma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_containsas")]
		public const uint containsas;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_copyright")]
		public const uint copyright;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_cr")]
		public const uint cr;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_crossinglines")]
		public const uint crossinglines;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_cuberoot")]
		public const uint cuberoot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_currency")]
		public const uint currency;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_cursor")]
		public const uint cursor;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_d")]
		public const uint d;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dabovedot")]
		public const uint dabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dagger")]
		public const uint dagger;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dcaron")]
		public const uint dcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_A")]
		public const uint dead_A;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_E")]
		public const uint dead_E;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_I")]
		public const uint dead_I;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_O")]
		public const uint dead_O;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_U")]
		public const uint dead_U;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_a")]
		public const uint dead_a;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_abovecomma")]
		public const uint dead_abovecomma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_abovedot")]
		public const uint dead_abovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_abovereversedcomma")]
		public const uint dead_abovereversedcomma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_abovering")]
		public const uint dead_abovering;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_aboveverticalline")]
		public const uint dead_aboveverticalline;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_acute")]
		public const uint dead_acute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowbreve")]
		public const uint dead_belowbreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowcircumflex")]
		public const uint dead_belowcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowcomma")]
		public const uint dead_belowcomma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowdiaeresis")]
		public const uint dead_belowdiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowdot")]
		public const uint dead_belowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowmacron")]
		public const uint dead_belowmacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowring")]
		public const uint dead_belowring;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowtilde")]
		public const uint dead_belowtilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_belowverticalline")]
		public const uint dead_belowverticalline;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_breve")]
		public const uint dead_breve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_capital_schwa")]
		public const uint dead_capital_schwa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_caron")]
		public const uint dead_caron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_cedilla")]
		public const uint dead_cedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_circumflex")]
		public const uint dead_circumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_currency")]
		public const uint dead_currency;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_dasia")]
		public const uint dead_dasia;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_diaeresis")]
		public const uint dead_diaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_doubleacute")]
		public const uint dead_doubleacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_doublegrave")]
		public const uint dead_doublegrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_e")]
		public const uint dead_e;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_grave")]
		public const uint dead_grave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_greek")]
		public const uint dead_greek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_hook")]
		public const uint dead_hook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_horn")]
		public const uint dead_horn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_i")]
		public const uint dead_i;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_invertedbreve")]
		public const uint dead_invertedbreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_iota")]
		public const uint dead_iota;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_longsolidusoverlay")]
		public const uint dead_longsolidusoverlay;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_lowline")]
		public const uint dead_lowline;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_macron")]
		public const uint dead_macron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_o")]
		public const uint dead_o;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_ogonek")]
		public const uint dead_ogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_perispomeni")]
		public const uint dead_perispomeni;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_psili")]
		public const uint dead_psili;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_semivoiced_sound")]
		public const uint dead_semivoiced_sound;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_small_schwa")]
		public const uint dead_small_schwa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_stroke")]
		public const uint dead_stroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_tilde")]
		public const uint dead_tilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_u")]
		public const uint dead_u;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dead_voiced_sound")]
		public const uint dead_voiced_sound;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_decimalpoint")]
		public const uint decimalpoint;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_degree")]
		public const uint degree;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_diaeresis")]
		public const uint diaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_diamond")]
		public const uint diamond;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_digitspace")]
		public const uint digitspace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dintegral")]
		public const uint dintegral;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_division")]
		public const uint division;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dollar")]
		public const uint dollar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_doubbaselinedot")]
		public const uint doubbaselinedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_doubleacute")]
		public const uint doubleacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_doubledagger")]
		public const uint doubledagger;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_doublelowquotemark")]
		public const uint doublelowquotemark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_downarrow")]
		public const uint downarrow;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_downcaret")]
		public const uint downcaret;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_downshoe")]
		public const uint downshoe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_downstile")]
		public const uint downstile;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_downtack")]
		public const uint downtack;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_dstroke")]
		public const uint dstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_e")]
		public const uint e;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_eabovedot")]
		public const uint eabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_eacute")]
		public const uint eacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ebelowdot")]
		public const uint ebelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ecaron")]
		public const uint ecaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ecircumflex")]
		public const uint ecircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ecircumflexacute")]
		public const uint ecircumflexacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ecircumflexbelowdot")]
		public const uint ecircumflexbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ecircumflexgrave")]
		public const uint ecircumflexgrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ecircumflexhook")]
		public const uint ecircumflexhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ecircumflextilde")]
		public const uint ecircumflextilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ediaeresis")]
		public const uint ediaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_egrave")]
		public const uint egrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ehook")]
		public const uint ehook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_eightsubscript")]
		public const uint eightsubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_eightsuperior")]
		public const uint eightsuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_elementof")]
		public const uint elementof;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ellipsis")]
		public const uint ellipsis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_em3space")]
		public const uint em3space;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_em4space")]
		public const uint em4space;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_emacron")]
		public const uint emacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_emdash")]
		public const uint emdash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_emfilledcircle")]
		public const uint emfilledcircle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_emfilledrect")]
		public const uint emfilledrect;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_emopencircle")]
		public const uint emopencircle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_emopenrectangle")]
		public const uint emopenrectangle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_emptyset")]
		public const uint emptyset;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_emspace")]
		public const uint emspace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_endash")]
		public const uint endash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_enfilledcircbullet")]
		public const uint enfilledcircbullet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_enfilledsqbullet")]
		public const uint enfilledsqbullet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_eng")]
		public const uint eng;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_enopencircbullet")]
		public const uint enopencircbullet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_enopensquarebullet")]
		public const uint enopensquarebullet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_enspace")]
		public const uint enspace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_eogonek")]
		public const uint eogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_equal")]
		public const uint equal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_eth")]
		public const uint eth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_etilde")]
		public const uint etilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_exclam")]
		public const uint exclam;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_exclamdown")]
		public const uint exclamdown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ezh")]
		public const uint ezh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_f")]
		public const uint f;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_fabovedot")]
		public const uint fabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_femalesymbol")]
		public const uint femalesymbol;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ff")]
		public const uint ff;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_figdash")]
		public const uint figdash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_filledlefttribullet")]
		public const uint filledlefttribullet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_filledrectbullet")]
		public const uint filledrectbullet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_filledrighttribullet")]
		public const uint filledrighttribullet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_filledtribulletdown")]
		public const uint filledtribulletdown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_filledtribulletup")]
		public const uint filledtribulletup;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_fiveeighths")]
		public const uint fiveeighths;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_fivesixths")]
		public const uint fivesixths;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_fivesubscript")]
		public const uint fivesubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_fivesuperior")]
		public const uint fivesuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_fourfifths")]
		public const uint fourfifths;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_foursubscript")]
		public const uint foursubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_foursuperior")]
		public const uint foursuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_fourthroot")]
		public const uint fourthroot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_function")]
		public const uint function;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_g")]
		public const uint g;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_gabovedot")]
		public const uint gabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_gbreve")]
		public const uint gbreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_gcaron")]
		public const uint gcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_gcedilla")]
		public const uint gcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_gcircumflex")]
		public const uint gcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_grave")]
		public const uint grave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_greater")]
		public const uint greater;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_greaterthanequal")]
		public const uint greaterthanequal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_guillemotleft")]
		public const uint guillemotleft;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_guillemotright")]
		public const uint guillemotright;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_h")]
		public const uint h;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hairspace")]
		public const uint hairspace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hcircumflex")]
		public const uint hcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_heart")]
		public const uint heart;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_aleph")]
		public const uint hebrew_aleph;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_ayin")]
		public const uint hebrew_ayin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_bet")]
		public const uint hebrew_bet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_beth")]
		public const uint hebrew_beth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_chet")]
		public const uint hebrew_chet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_dalet")]
		public const uint hebrew_dalet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_daleth")]
		public const uint hebrew_daleth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_doublelowline")]
		public const uint hebrew_doublelowline;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_finalkaph")]
		public const uint hebrew_finalkaph;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_finalmem")]
		public const uint hebrew_finalmem;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_finalnun")]
		public const uint hebrew_finalnun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_finalpe")]
		public const uint hebrew_finalpe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_finalzade")]
		public const uint hebrew_finalzade;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_finalzadi")]
		public const uint hebrew_finalzadi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_gimel")]
		public const uint hebrew_gimel;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_gimmel")]
		public const uint hebrew_gimmel;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_he")]
		public const uint hebrew_he;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_het")]
		public const uint hebrew_het;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_kaph")]
		public const uint hebrew_kaph;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_kuf")]
		public const uint hebrew_kuf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_lamed")]
		public const uint hebrew_lamed;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_mem")]
		public const uint hebrew_mem;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_nun")]
		public const uint hebrew_nun;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_pe")]
		public const uint hebrew_pe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_qoph")]
		public const uint hebrew_qoph;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_resh")]
		public const uint hebrew_resh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_samech")]
		public const uint hebrew_samech;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_samekh")]
		public const uint hebrew_samekh;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_shin")]
		public const uint hebrew_shin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_taf")]
		public const uint hebrew_taf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_taw")]
		public const uint hebrew_taw;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_tet")]
		public const uint hebrew_tet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_teth")]
		public const uint hebrew_teth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_waw")]
		public const uint hebrew_waw;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_yod")]
		public const uint hebrew_yod;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_zade")]
		public const uint hebrew_zade;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_zadi")]
		public const uint hebrew_zadi;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_zain")]
		public const uint hebrew_zain;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hebrew_zayin")]
		public const uint hebrew_zayin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hexagram")]
		public const uint hexagram;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_horizconnector")]
		public const uint horizconnector;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_horizlinescan1")]
		public const uint horizlinescan1;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_horizlinescan3")]
		public const uint horizlinescan3;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_horizlinescan5")]
		public const uint horizlinescan5;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_horizlinescan7")]
		public const uint horizlinescan7;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_horizlinescan9")]
		public const uint horizlinescan9;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hstroke")]
		public const uint hstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ht")]
		public const uint ht;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_hyphen")]
		public const uint hyphen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_i")]
		public const uint i;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_iTouch")]
		public const uint iTouch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_iacute")]
		public const uint iacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ibelowdot")]
		public const uint ibelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ibreve")]
		public const uint ibreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_icircumflex")]
		public const uint icircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_identical")]
		public const uint identical;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_idiaeresis")]
		public const uint idiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_idotless")]
		public const uint idotless;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ifonlyif")]
		public const uint ifonlyif;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_igrave")]
		public const uint igrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ihook")]
		public const uint ihook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_imacron")]
		public const uint imacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_implies")]
		public const uint implies;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_includedin")]
		public const uint includedin;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_includes")]
		public const uint includes;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_infinity")]
		public const uint infinity;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_integral")]
		public const uint integral;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_intersection")]
		public const uint intersection;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_iogonek")]
		public const uint iogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_itilde")]
		public const uint itilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_j")]
		public const uint j;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_jcircumflex")]
		public const uint jcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_jot")]
		public const uint jot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_k")]
		public const uint k;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_A")]
		public const uint kana_A;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_CHI")]
		public const uint kana_CHI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_E")]
		public const uint kana_E;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_FU")]
		public const uint kana_FU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_HA")]
		public const uint kana_HA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_HE")]
		public const uint kana_HE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_HI")]
		public const uint kana_HI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_HO")]
		public const uint kana_HO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_HU")]
		public const uint kana_HU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_I")]
		public const uint kana_I;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_KA")]
		public const uint kana_KA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_KE")]
		public const uint kana_KE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_KI")]
		public const uint kana_KI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_KO")]
		public const uint kana_KO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_KU")]
		public const uint kana_KU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_MA")]
		public const uint kana_MA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_ME")]
		public const uint kana_ME;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_MI")]
		public const uint kana_MI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_MO")]
		public const uint kana_MO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_MU")]
		public const uint kana_MU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_N")]
		public const uint kana_N;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_NA")]
		public const uint kana_NA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_NE")]
		public const uint kana_NE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_NI")]
		public const uint kana_NI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_NO")]
		public const uint kana_NO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_NU")]
		public const uint kana_NU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_O")]
		public const uint kana_O;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_RA")]
		public const uint kana_RA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_RE")]
		public const uint kana_RE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_RI")]
		public const uint kana_RI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_RO")]
		public const uint kana_RO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_RU")]
		public const uint kana_RU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_SA")]
		public const uint kana_SA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_SE")]
		public const uint kana_SE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_SHI")]
		public const uint kana_SHI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_SO")]
		public const uint kana_SO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_SU")]
		public const uint kana_SU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_TA")]
		public const uint kana_TA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_TE")]
		public const uint kana_TE;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_TI")]
		public const uint kana_TI;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_TO")]
		public const uint kana_TO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_TSU")]
		public const uint kana_TSU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_TU")]
		public const uint kana_TU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_U")]
		public const uint kana_U;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_WA")]
		public const uint kana_WA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_WO")]
		public const uint kana_WO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_YA")]
		public const uint kana_YA;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_YO")]
		public const uint kana_YO;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_YU")]
		public const uint kana_YU;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_a")]
		public const uint kana_a;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_closingbracket")]
		public const uint kana_closingbracket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_comma")]
		public const uint kana_comma;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_conjunctive")]
		public const uint kana_conjunctive;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_e")]
		public const uint kana_e;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_fullstop")]
		public const uint kana_fullstop;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_i")]
		public const uint kana_i;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_middledot")]
		public const uint kana_middledot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_o")]
		public const uint kana_o;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_openingbracket")]
		public const uint kana_openingbracket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_switch")]
		public const uint kana_switch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_tsu")]
		public const uint kana_tsu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_tu")]
		public const uint kana_tu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_u")]
		public const uint kana_u;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_ya")]
		public const uint kana_ya;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_yo")]
		public const uint kana_yo;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kana_yu")]
		public const uint kana_yu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kappa")]
		public const uint kappa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kcedilla")]
		public const uint kcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_kra")]
		public const uint kra;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_l")]
		public const uint l;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lacute")]
		public const uint lacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_latincross")]
		public const uint latincross;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lbelowdot")]
		public const uint lbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lcaron")]
		public const uint lcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lcedilla")]
		public const uint lcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftanglebracket")]
		public const uint leftanglebracket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftarrow")]
		public const uint leftarrow;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftcaret")]
		public const uint leftcaret;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftdoublequotemark")]
		public const uint leftdoublequotemark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftmiddlecurlybrace")]
		public const uint leftmiddlecurlybrace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftopentriangle")]
		public const uint leftopentriangle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftpointer")]
		public const uint leftpointer;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftradical")]
		public const uint leftradical;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftshoe")]
		public const uint leftshoe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftsinglequotemark")]
		public const uint leftsinglequotemark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_leftt")]
		public const uint leftt;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lefttack")]
		public const uint lefttack;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_less")]
		public const uint less;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lessthanequal")]
		public const uint lessthanequal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lf")]
		public const uint lf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_logicaland")]
		public const uint logicaland;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_logicalor")]
		public const uint logicalor;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lowleftcorner")]
		public const uint lowleftcorner;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lowrightcorner")]
		public const uint lowrightcorner;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_lstroke")]
		public const uint lstroke;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_m")]
		public const uint m;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_mabovedot")]
		public const uint mabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_macron")]
		public const uint macron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_malesymbol")]
		public const uint malesymbol;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_maltesecross")]
		public const uint maltesecross;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_marker")]
		public const uint marker;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_masculine")]
		public const uint masculine;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_minus")]
		public const uint minus;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_minutes")]
		public const uint minutes;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_mu")]
		public const uint mu;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_multiply")]
		public const uint multiply;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_musicalflat")]
		public const uint musicalflat;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_musicalsharp")]
		public const uint musicalsharp;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_n")]
		public const uint n;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_nabla")]
		public const uint nabla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_nacute")]
		public const uint nacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ncaron")]
		public const uint ncaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ncedilla")]
		public const uint ncedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ninesubscript")]
		public const uint ninesubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ninesuperior")]
		public const uint ninesuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_nl")]
		public const uint nl;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_nobreakspace")]
		public const uint nobreakspace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_notapproxeq")]
		public const uint notapproxeq;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_notelementof")]
		public const uint notelementof;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_notequal")]
		public const uint notequal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_notidentical")]
		public const uint notidentical;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_notsign")]
		public const uint notsign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ntilde")]
		public const uint ntilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_numbersign")]
		public const uint numbersign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_numerosign")]
		public const uint numerosign;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_o")]
		public const uint o;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_oacute")]
		public const uint oacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_obarred")]
		public const uint obarred;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_obelowdot")]
		public const uint obelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ocaron")]
		public const uint ocaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ocircumflex")]
		public const uint ocircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ocircumflexacute")]
		public const uint ocircumflexacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ocircumflexbelowdot")]
		public const uint ocircumflexbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ocircumflexgrave")]
		public const uint ocircumflexgrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ocircumflexhook")]
		public const uint ocircumflexhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ocircumflextilde")]
		public const uint ocircumflextilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_odiaeresis")]
		public const uint odiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_odoubleacute")]
		public const uint odoubleacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_oe")]
		public const uint oe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ogonek")]
		public const uint ogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ograve")]
		public const uint ograve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ohook")]
		public const uint ohook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ohorn")]
		public const uint ohorn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ohornacute")]
		public const uint ohornacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ohornbelowdot")]
		public const uint ohornbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ohorngrave")]
		public const uint ohorngrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ohornhook")]
		public const uint ohornhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ohorntilde")]
		public const uint ohorntilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_omacron")]
		public const uint omacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_oneeighth")]
		public const uint oneeighth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_onefifth")]
		public const uint onefifth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_onehalf")]
		public const uint onehalf;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_onequarter")]
		public const uint onequarter;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_onesixth")]
		public const uint onesixth;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_onesubscript")]
		public const uint onesubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_onesuperior")]
		public const uint onesuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_onethird")]
		public const uint onethird;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ooblique")]
		public const uint ooblique;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_openrectbullet")]
		public const uint openrectbullet;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_openstar")]
		public const uint openstar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_opentribulletdown")]
		public const uint opentribulletdown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_opentribulletup")]
		public const uint opentribulletup;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ordfeminine")]
		public const uint ordfeminine;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_oslash")]
		public const uint oslash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_otilde")]
		public const uint otilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_overbar")]
		public const uint overbar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_overline")]
		public const uint overline;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_p")]
		public const uint p;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_pabovedot")]
		public const uint pabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_paragraph")]
		public const uint paragraph;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_parenleft")]
		public const uint parenleft;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_parenright")]
		public const uint parenright;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_partdifferential")]
		public const uint partdifferential;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_partialderivative")]
		public const uint partialderivative;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_percent")]
		public const uint percent;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_period")]
		public const uint period;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_periodcentered")]
		public const uint periodcentered;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_permille")]
		public const uint permille;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_phonographcopyright")]
		public const uint phonographcopyright;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_plus")]
		public const uint plus;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_plusminus")]
		public const uint plusminus;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_prescription")]
		public const uint prescription;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_prolongedsound")]
		public const uint prolongedsound;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_punctspace")]
		public const uint punctspace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_q")]
		public const uint q;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_quad")]
		public const uint quad;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_question")]
		public const uint question;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_questiondown")]
		public const uint questiondown;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_quotedbl")]
		public const uint quotedbl;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_quoteleft")]
		public const uint quoteleft;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_quoteright")]
		public const uint quoteright;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_r")]
		public const uint r;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_racute")]
		public const uint racute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_radical")]
		public const uint radical;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rcaron")]
		public const uint rcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rcedilla")]
		public const uint rcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_registered")]
		public const uint registered;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightanglebracket")]
		public const uint rightanglebracket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightarrow")]
		public const uint rightarrow;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightcaret")]
		public const uint rightcaret;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightdoublequotemark")]
		public const uint rightdoublequotemark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightmiddlecurlybrace")]
		public const uint rightmiddlecurlybrace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightmiddlesummation")]
		public const uint rightmiddlesummation;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightopentriangle")]
		public const uint rightopentriangle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightpointer")]
		public const uint rightpointer;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightshoe")]
		public const uint rightshoe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightsinglequotemark")]
		public const uint rightsinglequotemark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_rightt")]
		public const uint rightt;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_righttack")]
		public const uint righttack;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_s")]
		public const uint s;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_sabovedot")]
		public const uint sabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_sacute")]
		public const uint sacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_scaron")]
		public const uint scaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_scedilla")]
		public const uint scedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_schwa")]
		public const uint schwa;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_scircumflex")]
		public const uint scircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_script_switch")]
		public const uint script_switch;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_seconds")]
		public const uint seconds;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_section")]
		public const uint section;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_semicolon")]
		public const uint semicolon;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_semivoicedsound")]
		public const uint semivoicedsound;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_seveneighths")]
		public const uint seveneighths;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_sevensubscript")]
		public const uint sevensubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_sevensuperior")]
		public const uint sevensuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_signaturemark")]
		public const uint signaturemark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_signifblank")]
		public const uint signifblank;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_similarequal")]
		public const uint similarequal;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_singlelowquotemark")]
		public const uint singlelowquotemark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_sixsubscript")]
		public const uint sixsubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_sixsuperior")]
		public const uint sixsuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_slash")]
		public const uint slash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_soliddiamond")]
		public const uint soliddiamond;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_space")]
		public const uint space;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_squareroot")]
		public const uint squareroot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ssharp")]
		public const uint ssharp;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_sterling")]
		public const uint sterling;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_stricteq")]
		public const uint stricteq;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_t")]
		public const uint t;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_tabovedot")]
		public const uint tabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_tcaron")]
		public const uint tcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_tcedilla")]
		public const uint tcedilla;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_telephone")]
		public const uint telephone;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_telephonerecorder")]
		public const uint telephonerecorder;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_therefore")]
		public const uint therefore;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_thinspace")]
		public const uint thinspace;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_thorn")]
		public const uint thorn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_threeeighths")]
		public const uint threeeighths;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_threefifths")]
		public const uint threefifths;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_threequarters")]
		public const uint threequarters;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_threesubscript")]
		public const uint threesubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_threesuperior")]
		public const uint threesuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_tintegral")]
		public const uint tintegral;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_topintegral")]
		public const uint topintegral;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_topleftparens")]
		public const uint topleftparens;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_topleftradical")]
		public const uint topleftradical;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_topleftsqbracket")]
		public const uint topleftsqbracket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_topleftsummation")]
		public const uint topleftsummation;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_toprightparens")]
		public const uint toprightparens;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_toprightsqbracket")]
		public const uint toprightsqbracket;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_toprightsummation")]
		public const uint toprightsummation;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_topt")]
		public const uint topt;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_topvertsummationconnector")]
		public const uint topvertsummationconnector;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_trademark")]
		public const uint trademark;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_trademarkincircle")]
		public const uint trademarkincircle;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_tslash")]
		public const uint tslash;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_twofifths")]
		public const uint twofifths;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_twosubscript")]
		public const uint twosubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_twosuperior")]
		public const uint twosuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_twothirds")]
		public const uint twothirds;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_u")]
		public const uint u;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uacute")]
		public const uint uacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ubelowdot")]
		public const uint ubelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ubreve")]
		public const uint ubreve;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ucircumflex")]
		public const uint ucircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_udiaeresis")]
		public const uint udiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_udoubleacute")]
		public const uint udoubleacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ugrave")]
		public const uint ugrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uhook")]
		public const uint uhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uhorn")]
		public const uint uhorn;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uhornacute")]
		public const uint uhornacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uhornbelowdot")]
		public const uint uhornbelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uhorngrave")]
		public const uint uhorngrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uhornhook")]
		public const uint uhornhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uhorntilde")]
		public const uint uhorntilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_umacron")]
		public const uint umacron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_underbar")]
		public const uint underbar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_underscore")]
		public const uint underscore;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_union")]
		public const uint union;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uogonek")]
		public const uint uogonek;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uparrow")]
		public const uint uparrow;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_upcaret")]
		public const uint upcaret;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_upleftcorner")]
		public const uint upleftcorner;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uprightcorner")]
		public const uint uprightcorner;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_upshoe")]
		public const uint upshoe;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_upstile")]
		public const uint upstile;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uptack")]
		public const uint uptack;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_uring")]
		public const uint uring;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_utilde")]
		public const uint utilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_v")]
		public const uint v;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_variation")]
		public const uint variation;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_vertbar")]
		public const uint vertbar;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_vertconnector")]
		public const uint vertconnector;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_voicedsound")]
		public const uint voicedsound;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_vt")]
		public const uint vt;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_w")]
		public const uint w;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_wacute")]
		public const uint wacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_wcircumflex")]
		public const uint wcircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_wdiaeresis")]
		public const uint wdiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_wgrave")]
		public const uint wgrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_x")]
		public const uint x;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_xabovedot")]
		public const uint xabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_y")]
		public const uint y;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_yacute")]
		public const uint yacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ybelowdot")]
		public const uint ybelowdot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ycircumflex")]
		public const uint ycircumflex;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ydiaeresis")]
		public const uint ydiaeresis;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_yen")]
		public const uint yen;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ygrave")]
		public const uint ygrave;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_yhook")]
		public const uint yhook;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_ytilde")]
		public const uint ytilde;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_z")]
		public const uint z;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_zabovedot")]
		public const uint zabovedot;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_zacute")]
		public const uint zacute;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_zcaron")]
		public const uint zcaron;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_zerosubscript")]
		public const uint zerosubscript;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_zerosuperior")]
		public const uint zerosuperior;
		[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_KEY_zstroke")]
		public const uint zstroke;
	}
	namespace Threads {
		namespace FrameSource {
			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_frame_source")]
			[Version (deprecated = true, deprecated_since = "1.6", since = "0.8")]
			public static uint add (uint fps, GLib.SourceFunc func);
			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_frame_source_full")]
			[Version (deprecated = true, deprecated_since = "1.6", since = "0.8")]
			public static uint add_full (int priority, uint fps, owned GLib.SourceFunc func);
		}
		namespace Idle {
			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_idle")]
			[Version (since = "0.4")]
			public static uint add (GLib.SourceFunc func);
			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_idle_full")]
			[Version (since = "0.4")]
			public static uint add_full (int priority, owned GLib.SourceFunc func);
		}
		namespace Timeout {
			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_timeout")]
			[Version (since = "0.4")]
			public static uint add (uint interval, GLib.SourceFunc func);
			[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_threads_add_timeout_full")]
			[Version (since = "0.4")]
			public static uint add_full (int priority, uint interval, owned GLib.SourceFunc func);
		}
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "1.0")]
		public static uint add_repaint_func (owned GLib.SourceFunc func);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "1.10")]
		public static uint add_repaint_func_full (Clutter.RepaintFlags flags, owned GLib.SourceFunc func);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.4")]
		public static void enter ();
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public static void init ();
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.4")]
		public static void leave ();
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "1.0")]
		public static void remove_repaint_func (uint handle_id);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.4")]
		public static void set_lock_functions (GLib.Callback enter_fn, GLib.Callback leave_fn);
	}
	namespace Util {
		[CCode (cheader_filename = "clutter/clutter.h", cname = "clutter_util_next_p2")]
		[Version (deprecated = true, deprecated_since = "1.2")]
		public static int next_power_of_2 (int a);
	}
	namespace Value {
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "1.10")]
		public static Clutter.PaintNode dup_paint_node (GLib.Value value);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static unowned Clutter.Color? get_color (GLib.Value value);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
		public static unowned Cogl.Fixed? get_fixed (GLib.Value value);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "1.10")]
		public static unowned Clutter.PaintNode get_paint_node (GLib.Value value);
		[CCode (array_length_pos = 1.1, array_length_type = "gsize", cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static unowned float[] get_shader_float (GLib.Value value);
		[CCode (array_length_pos = 1.1, array_length_type = "gsize", cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static unowned int[] get_shader_int (GLib.Value value);
		[CCode (array_length_pos = 1.1, array_length_type = "gsize", cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static unowned float[] get_shader_matrix (GLib.Value value);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static unowned Clutter.Units? get_units (GLib.Value value);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static void set_color (GLib.Value value, Clutter.Color color);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
		public static void set_fixed (GLib.Value value, Cogl.Fixed fixed_);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "1.10")]
		public static void set_paint_node (GLib.Value value, Clutter.PaintNode? node);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static void set_shader_float (GLib.Value value, [CCode (array_length_cname = "size", array_length_pos = 1.5)] float[] floats);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static void set_shader_int (GLib.Value value, [CCode (array_length_cname = "size", array_length_pos = 1.5)] int[] ints);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static void set_shader_matrix (GLib.Value value, [CCode (array_length_cname = "size", array_length_pos = 1.5)] float[] matrix);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "0.8")]
		public static void set_units (GLib.Value value, Clutter.Units units);
		[CCode (cheader_filename = "clutter/clutter.h")]
		[Version (since = "1.10")]
		public static void take_paint_node (GLib.Value value, Clutter.PaintNode? node);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_action_get_type ()")]
	[Version (since = "1.4")]
	public abstract class Action : Clutter.ActorMeta {
		[CCode (has_construct_function = false)]
		protected Action ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_actor_get_type ()")]
	public class Actor : GLib.InitiallyUnowned, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		public uint32 flags;
		[CCode (has_construct_function = false)]
		[Version (since = "1.10")]
		public Actor ();
		[Version (since = "1.4")]
		public void add_action (Clutter.Action action);
		[Version (since = "1.4")]
		public void add_action_with_name (string name, Clutter.Action action);
		[Version (since = "1.10")]
		public void add_child (Clutter.Actor child);
		[Version (since = "1.4")]
		public void add_constraint (Clutter.Constraint constraint);
		[Version (since = "1.4")]
		public void add_constraint_with_name (string name, Clutter.Constraint constraint);
		[Version (since = "1.4")]
		public void add_effect (Clutter.Effect effect);
		[Version (since = "1.4")]
		public void add_effect_with_name (string name, Clutter.Effect effect);
		[Version (since = "1.10")]
		public void add_transition (string name, Clutter.Transition transition);
		[Version (since = "0.8")]
		public virtual void allocate (Clutter.ActorBox box, Clutter.AllocationFlags flags);
		[Version (since = "1.4")]
		public void allocate_align_fill (Clutter.ActorBox box, double x_align, double y_align, bool x_fill, bool y_fill, Clutter.AllocationFlags flags);
		[Version (since = "1.0")]
		public void allocate_available_size (float x, float y, float available_width, float available_height, Clutter.AllocationFlags flags);
		[Version (since = "0.8")]
		public void allocate_preferred_size (Clutter.AllocationFlags flags);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public unowned Clutter.Animation animate (ulong mode, uint duration, ...);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
		public unowned Clutter.Animation animate_with_alpha (Clutter.Alpha alpha, ...);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
		public unowned Clutter.Animation animate_with_alphav (Clutter.Alpha alpha, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5)] GLib.Value[] values);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public unowned Clutter.Animation animate_with_timeline (ulong mode, Clutter.Timeline timeline, ...);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public unowned Clutter.Animation animate_with_timelinev (ulong mode, Clutter.Timeline timeline, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] GLib.Value[] values);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public unowned Clutter.Animation animatev (ulong mode, uint duration, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 2.5)] GLib.Value[] values);
		[Version (since = "0.6")]
		public Clutter.Vertex apply_relative_transform_to_point (Clutter.Actor? ancestor, Clutter.Vertex point);
		[NoWrapper]
		public virtual void apply_transform (ref Clutter.Matrix matrix);
		[Version (since = "0.4")]
		public Clutter.Vertex apply_transform_to_point (Clutter.Vertex point);
		[Version (since = "1.24")]
		public void bind_model (GLib.ListModel? model, owned Clutter.ActorCreateChildFunc create_child_func);
		[Version (since = "1.4")]
		public void clear_actions ();
		[Version (since = "1.4")]
		public void clear_constraints ();
		[Version (since = "1.4")]
		public void clear_effects ();
		[Version (since = "1.4")]
		public bool contains (Clutter.Actor descendant);
		[Version (since = "1.8")]
		public void continue_paint ();
		[Version (since = "1.0")]
		public Pango.Context create_pango_context ();
		[Version (since = "1.0")]
		public Pango.Layout create_pango_layout (string? text);
		[Version (since = "1.10")]
		public void destroy_all_children ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void detach_animation ();
		[CCode (cname = "clutter_actor_event")]
		[Version (since = "0.6")]
		public bool emit_event (Clutter.Event event, bool capture);
		[Version (since = "0.4")]
		public void get_abs_allocation_vertices ([CCode (array_length = false)] Clutter.Vertex verts[4]);
		public virtual unowned Atk.Object get_accessible ();
		[Version (since = "1.4")]
		public unowned Clutter.Action get_action (string name);
		[Version (since = "1.4")]
		public GLib.List<weak Clutter.Action> get_actions ();
		[Version (since = "0.8")]
		public Clutter.ActorBox get_allocation_box ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public Clutter.Geometry get_allocation_geometry ();
		[Version (since = "0.6")]
		public void get_allocation_vertices (Clutter.Actor? ancestor, [CCode (array_length = false)] Clutter.Vertex verts[4]);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public void get_anchor_point (out float anchor_x, out float anchor_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public Clutter.Gravity get_anchor_point_gravity ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public unowned Clutter.Animation get_animation ();
		[Version (since = "1.10")]
		public Clutter.Color get_background_color ();
		[CCode (cname = "clutter_get_actor_by_gid")]
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public static unowned Clutter.Actor get_by_gid (uint32 id_);
		[Version (since = "1.10")]
		public unowned Clutter.Actor get_child_at_index (int index_);
		[Version (since = "1.12")]
		public Clutter.Matrix get_child_transform ();
		[Version (since = "1.10")]
		public GLib.List<weak Clutter.Actor> get_children ();
		[Version (since = "0.6")]
		public void get_clip (out float xoff, out float yoff, out float width, out float height);
		[Version (since = "1.4")]
		public bool get_clip_to_allocation ();
		[Version (since = "1.4")]
		public unowned Clutter.Constraint get_constraint (string name);
		[Version (since = "1.4")]
		public GLib.List<weak Clutter.Constraint> get_constraints ();
		[Version (since = "1.10")]
		public unowned Clutter.Content get_content ();
		[Version (since = "1.10")]
		public Clutter.ActorBox get_content_box ();
		[Version (since = "1.10")]
		public Clutter.ContentGravity get_content_gravity ();
		[Version (since = "1.12")]
		public Clutter.ContentRepeat get_content_repeat ();
		[Version (since = "1.10")]
		public void get_content_scaling_filters (out Clutter.ScalingFilter min_filter, out Clutter.ScalingFilter mag_filter);
		[Version (since = "1.10")]
		public unowned Clutter.PaintVolume? get_default_paint_volume ();
		[Version (deprecated = true, deprecated_since = "1.12")]
		public float get_depth ();
		[Version (since = "1.10")]
		public uint get_easing_delay ();
		[Version (since = "1.10")]
		public uint get_easing_duration ();
		[Version (since = "1.10")]
		public Clutter.AnimationMode get_easing_mode ();
		[Version (since = "1.4")]
		public unowned Clutter.Effect get_effect (string name);
		[Version (since = "1.4")]
		public GLib.List<weak Clutter.Effect> get_effects ();
		[Version (since = "1.10")]
		public unowned Clutter.Actor get_first_child ();
		[Version (since = "0.8")]
		public bool get_fixed_position_set ();
		[Version (since = "1.0")]
		public Clutter.ActorFlags get_flags ();
		[Version (deprecated = true, deprecated_since = "1.10")]
		public Clutter.Geometry get_geometry ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public uint32 get_gid ();
		[CCode (cname = "clutter_actor_has_pointer")]
		[Version (since = "1.2")]
		public bool get_has_pointer ();
		public float get_height ();
		[Version (since = "1.10")]
		public unowned Clutter.Actor get_last_child ();
		[Version (since = "1.10")]
		public unowned Clutter.LayoutManager get_layout_manager ();
		[Version (since = "1.10")]
		public Clutter.Margin get_margin ();
		[Version (since = "1.10")]
		public float get_margin_bottom ();
		[Version (since = "1.10")]
		public float get_margin_left ();
		[Version (since = "1.10")]
		public float get_margin_right ();
		[Version (since = "1.10")]
		public float get_margin_top ();
		[Version (since = "1.10")]
		public int get_n_children ();
		public unowned string get_name ();
		[Version (since = "1.10")]
		public unowned Clutter.Actor get_next_sibling ();
		[Version (since = "1.8")]
		public Clutter.OffscreenRedirect get_offscreen_redirect ();
		public uint8 get_opacity ();
		[Version (since = "1.6")]
		public bool get_paint_box (out Clutter.ActorBox box);
		[Version (since = "0.8")]
		public uint8 get_paint_opacity ();
		[Version (since = "0.8")]
		public bool get_paint_visibility ();
		[Version (since = "1.6")]
		public unowned Clutter.PaintVolume? get_paint_volume ();
		[CCode (vfunc_name = "get_paint_volume")]
		[NoWrapper]
		public virtual bool get_paint_volume_vfunc (out Clutter.PaintVolume volume);
		[Version (since = "1.0")]
		public unowned Pango.Context get_pango_context ();
		public unowned Clutter.Actor? get_parent ();
		[Version (since = "1.12")]
		public void get_pivot_point (out float pivot_x, out float pivot_y);
		[Version (since = "1.12")]
		public float get_pivot_point_z ();
		[Version (since = "0.6")]
		public void get_position (out float x, out float y);
		[Version (since = "0.8")]
		public virtual void get_preferred_height (float for_width, out float min_height_p, out float natural_height_p);
		[Version (since = "0.8")]
		public void get_preferred_size (out float min_width_p, out float min_height_p, out float natural_width_p, out float natural_height_p);
		[Version (since = "0.8")]
		public virtual void get_preferred_width (float for_height, out float min_width_p, out float natural_width_p);
		[Version (since = "1.10")]
		public unowned Clutter.Actor get_previous_sibling ();
		[Version (since = "0.6")]
		public bool get_reactive ();
		[Version (since = "1.2")]
		public Clutter.RequestMode get_request_mode ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public double get_rotation (Clutter.RotateAxis axis, out float x, out float y, out float z);
		[Version (since = "1.12")]
		public double get_rotation_angle (Clutter.RotateAxis axis);
		[Version (since = "0.2")]
		public void get_scale (out double scale_x, out double scale_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void get_scale_center (out float center_x, out float center_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public Clutter.Gravity get_scale_gravity ();
		[Version (since = "1.12")]
		public double get_scale_z ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public unowned Clutter.Shader get_shader ();
		[Version (since = "0.2")]
		public void get_size (out float width, out float height);
		[Version (since = "0.8")]
		public unowned Clutter.Stage get_stage ();
		[Version (since = "1.2")]
		public Clutter.TextDirection get_text_direction ();
		[Version (since = "1.12")]
		public Clutter.Matrix get_transform ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public Clutter.Matrix get_transformation_matrix ();
		[Version (since = "1.6")]
		public unowned Clutter.PaintVolume? get_transformed_paint_volume (Clutter.Actor relative_to_ancestor);
		[Version (since = "0.8")]
		public void get_transformed_position (out float x, out float y);
		[Version (since = "0.8")]
		public void get_transformed_size (out float width, out float height);
		[Version (since = "1.10")]
		public unowned Clutter.Transition get_transition (string name);
		[Version (since = "1.12")]
		public void get_translation (out float translate_x, out float translate_y, out float translate_z);
		public float get_width ();
		public float get_x ();
		[Version (since = "1.10")]
		public Clutter.ActorAlign get_x_align ();
		[Version (since = "1.12")]
		public bool get_x_expand ();
		public float get_y ();
		[Version (since = "1.10")]
		public Clutter.ActorAlign get_y_align ();
		[Version (since = "1.12")]
		public bool get_y_expand ();
		[Version (since = "1.12")]
		public float get_z_position ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public Clutter.Gravity get_z_rotation_gravity ();
		[Version (since = "1.0")]
		public void grab_key_focus ();
		[Version (since = "1.10")]
		public bool has_actions ();
		[Version (since = "1.4")]
		public bool has_allocation ();
		[Version (since = "1.10")]
		public bool has_constraints ();
		[Version (since = "1.10")]
		public bool has_effects ();
		[Version (since = "1.4")]
		public bool has_key_focus ();
		[Version (since = "1.8")]
		public virtual bool has_overlaps ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public virtual void hide_all ();
		[Version (since = "1.10")]
		public void insert_child_above (Clutter.Actor child, Clutter.Actor? sibling);
		[Version (since = "1.10")]
		public void insert_child_at_index (Clutter.Actor child, int index_);
		[Version (since = "1.10")]
		public void insert_child_below (Clutter.Actor child, Clutter.Actor? sibling);
		[Version (since = "1.0")]
		public bool is_in_clone_paint ();
		[Version (since = "1.24")]
		public bool is_mapped ();
		[Version (since = "1.24")]
		public bool is_realized ();
		[Version (since = "0.6")]
		public bool is_rotated ();
		[Version (since = "0.6")]
		public bool is_scaled ();
		[Version (since = "1.24")]
		public bool is_visible ();
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void lower (Clutter.Actor? above);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void lower_bottom ();
		[Version (since = "1.0")]
		public virtual void map ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public void move_anchor_point (float anchor_x, float anchor_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public void move_anchor_point_from_gravity (Clutter.Gravity gravity);
		[Version (since = "0.2")]
		public void move_by (float dx, float dy);
		[Version (since = "1.12")]
		public bool needs_expand (Clutter.Orientation orientation);
		[NoWrapper]
		public virtual void paint_node (Clutter.PaintNode root);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void pop_internal ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void push_internal ();
		public void queue_redraw ();
		[Version (since = "1.10")]
		public void queue_redraw_with_clip (Cairo.RectangleInt? clip);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void raise (Clutter.Actor? below);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void raise_top ();
		[Version (since = "1.4")]
		public void remove_action (Clutter.Action action);
		[Version (since = "1.4")]
		public void remove_action_by_name (string name);
		[Version (since = "1.10")]
		public void remove_all_children ();
		[Version (since = "1.10")]
		public void remove_all_transitions ();
		[Version (since = "1.10")]
		public void remove_child (Clutter.Actor child);
		public void remove_clip ();
		[Version (since = "1.4")]
		public void remove_constraint (Clutter.Constraint constraint);
		[Version (since = "1.4")]
		public void remove_constraint_by_name (string name);
		[Version (since = "1.4")]
		public void remove_effect (Clutter.Effect effect);
		[Version (since = "1.4")]
		public void remove_effect_by_name (string name);
		[Version (since = "1.10")]
		public void remove_transition (string name);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public void reparent (Clutter.Actor new_parent);
		[Version (since = "1.10")]
		public void replace_child (Clutter.Actor old_child, Clutter.Actor new_child);
		[Version (since = "1.10")]
		public void restore_easing_state ();
		[Version (since = "1.10")]
		public void save_easing_state ();
		[Version (since = "1.10")]
		public void set_allocation (Clutter.ActorBox box, Clutter.AllocationFlags flags);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public void set_anchor_point (float anchor_x, float anchor_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public void set_anchor_point_from_gravity (Clutter.Gravity gravity);
		[Version (since = "1.10")]
		public void set_background_color (Clutter.Color? color);
		[Version (since = "1.10")]
		public void set_child_above_sibling (Clutter.Actor child, Clutter.Actor? sibling);
		[Version (since = "1.10")]
		public void set_child_at_index (Clutter.Actor child, int index_);
		[Version (since = "1.10")]
		public void set_child_below_sibling (Clutter.Actor child, Clutter.Actor? sibling);
		[Version (since = "1.12")]
		public void set_child_transform (Clutter.Matrix? transform);
		[Version (since = "0.6")]
		public void set_clip (float xoff, float yoff, float width, float height);
		[Version (since = "1.4")]
		public void set_clip_to_allocation (bool clip_set);
		[Version (since = "1.10")]
		public void set_content (Clutter.Content? content);
		[Version (since = "1.10")]
		public void set_content_gravity (Clutter.ContentGravity gravity);
		[Version (since = "1.12")]
		public void set_content_repeat (Clutter.ContentRepeat repeat);
		[Version (since = "1.10")]
		public void set_content_scaling_filters (Clutter.ScalingFilter min_filter, Clutter.ScalingFilter mag_filter);
		[Version (deprecated = true, deprecated_since = "1.12")]
		public void set_depth (float depth);
		[Version (since = "1.10")]
		public void set_easing_delay (uint msecs);
		[Version (since = "1.10")]
		public void set_easing_duration (uint msecs);
		[Version (since = "1.10")]
		public void set_easing_mode (Clutter.AnimationMode mode);
		[Version (since = "0.8")]
		public void set_fixed_position_set (bool is_set);
		[Version (since = "1.0")]
		public void set_flags (Clutter.ActorFlags flags);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void set_geometry (Clutter.Geometry geometry);
		[Version (since = "0.2")]
		public void set_height (float height);
		[Version (since = "1.10")]
		public void set_layout_manager (Clutter.LayoutManager? manager);
		[Version (since = "1.10")]
		public void set_margin (Clutter.Margin margin);
		[Version (since = "1.10")]
		public void set_margin_bottom (float margin);
		[Version (since = "1.10")]
		public void set_margin_left (float margin);
		[Version (since = "1.10")]
		public void set_margin_right (float margin);
		[Version (since = "1.10")]
		public void set_margin_top (float margin);
		public void set_name (string name);
		[Version (since = "1.8")]
		public void set_offscreen_redirect (Clutter.OffscreenRedirect redirect);
		public void set_opacity (uint8 opacity);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void set_parent (Clutter.Actor parent);
		[Version (since = "1.12")]
		public void set_pivot_point (float pivot_x, float pivot_y);
		[Version (since = "1.12")]
		public void set_pivot_point_z (float pivot_z);
		public void set_position (float x, float y);
		[Version (since = "0.6")]
		public void set_reactive (bool reactive);
		[Version (since = "1.2")]
		public void set_request_mode (Clutter.RequestMode mode);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public void set_rotation (Clutter.RotateAxis axis, double angle, float x, float y, float z);
		[Version (since = "1.12")]
		public void set_rotation_angle (Clutter.RotateAxis axis, double angle);
		[Version (since = "0.2")]
		public void set_scale (double scale_x, double scale_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_scale_full (double scale_x, double scale_y, float center_x, float center_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_scale_with_gravity (double scale_x, double scale_y, Clutter.Gravity gravity);
		[Version (since = "1.12")]
		public void set_scale_z (double scale_z);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public bool set_shader (Clutter.Shader? shader);
		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
		public void set_shader_param (string param, GLib.Value value);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.8")]
		public void set_shader_param_float (string param, float value);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.8")]
		public void set_shader_param_int (string param, int value);
		public void set_size (float width, float height);
		[Version (since = "1.2")]
		public void set_text_direction (Clutter.TextDirection text_dir);
		[Version (since = "1.12")]
		public void set_transform (Clutter.Matrix? transform);
		[Version (since = "1.12")]
		public void set_translation (float translate_x, float translate_y, float translate_z);
		[Version (since = "0.2")]
		public void set_width (float width);
		[Version (since = "0.6")]
		public void set_x (float x);
		[Version (since = "1.10")]
		public void set_x_align (Clutter.ActorAlign x_align);
		[Version (since = "1.12")]
		public void set_x_expand (bool expand);
		[Version (since = "0.6")]
		public void set_y (float y);
		[Version (since = "1.10")]
		public void set_y_align (Clutter.ActorAlign y_align);
		[Version (since = "1.12")]
		public void set_y_expand (bool expand);
		[Version (since = "1.12")]
		public void set_z_position (float z_position);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_z_rotation_from_gravity (double angle, Clutter.Gravity gravity);
		public bool should_pick_paint ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public virtual void show_all ();
		[Version (since = "0.6")]
		public bool transform_stage_point (float x, float y, out float x_out, out float y_out);
		[Version (since = "1.0")]
		public virtual void unmap ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public void unparent ();
		[Version (since = "1.0")]
		public void unset_flags (Clutter.ActorFlags flags);
		[NoAccessorMethod]
		[Version (since = "1.4")]
		public Clutter.Action actions { set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public Clutter.ActorBox allocation { owned get; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public Clutter.Gravity anchor_gravity { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public float anchor_x { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public float anchor_y { get; set; }
		[Version (since = "1.10")]
		public Clutter.Color background_color { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.10")]
		public bool background_color_set { get; }
		[Version (since = "1.12")]
		public Clutter.Matrix child_transform { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public bool child_transform_set { get; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12")]
		public Clutter.Geometry clip { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public Clutter.Rect clip_rect { owned get; set; }
		[Version (since = "1.0")]
		public bool clip_to_allocation { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.4")]
		public Clutter.Constraint constraints { set; }
		[Version (since = "1.10")]
		public Clutter.Content content { get; set; }
		[Version (since = "1.10")]
		public Clutter.ActorBox content_box { get; }
		[Version (since = "1.10")]
		public Clutter.ContentGravity content_gravity { get; set; }
		[Version (since = "1.12")]
		public Clutter.ContentRepeat content_repeat { get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public float depth { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.4")]
		public Clutter.Effect effect { set; }
		[Version (since = "1.10")]
		public Clutter.Actor first_child { get; }
		[Version (since = "0.8")]
		public bool fixed_position_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public float fixed_x { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public float fixed_y { get; set; }
		[NoAccessorMethod]
		public bool has_clip { get; }
		[NoAccessorMethod]
		[Version (since = "1.2")]
		public bool has_pointer { get; }
		public float height { get; set; }
		[Version (since = "1.10")]
		public Clutter.Actor last_child { get; }
		[Version (since = "1.10")]
		public Clutter.LayoutManager layout_manager { get; set; }
		[NoAccessorMethod]
		public Clutter.ScalingFilter magnification_filter { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.0")]
		public bool mapped { get; }
		[Version (since = "1.10")]
		public float margin_bottom { get; set; }
		[Version (since = "1.10")]
		public float margin_left { get; set; }
		[Version (since = "1.10")]
		public float margin_right { get; set; }
		[Version (since = "1.10")]
		public float margin_top { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public float min_height { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public bool min_height_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public float min_width { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public bool min_width_set { get; set; }
		[NoAccessorMethod]
		public Clutter.ScalingFilter minification_filter { get; set; }
		[Version (since = "0.2")]
		public string name { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public float natural_height { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public bool natural_height_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public float natural_width { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public bool natural_width_set { get; set; }
		[Version (since = "1.8")]
		public Clutter.OffscreenRedirect offscreen_redirect { get; set; }
		public uint opacity { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public Clutter.Point pivot_point { owned get; set; }
		[Version (since = "1.12")]
		public float pivot_point_z { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public Clutter.Point position { owned get; set; }
		[Version (since = "0.6")]
		public bool reactive { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.0")]
		public bool realized { get; }
		[Version (since = "0.8")]
		public Clutter.RequestMode request_mode { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double rotation_angle_x { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double rotation_angle_y { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double rotation_angle_z { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public Clutter.Vertex rotation_center_x { owned get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public Clutter.Vertex rotation_center_y { owned get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public Clutter.Vertex rotation_center_z { owned get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public Clutter.Gravity rotation_center_z_gravity { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public float scale_center_x { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public float scale_center_y { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public Clutter.Gravity scale_gravity { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double scale_x { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double scale_y { get; set; }
		[Version (since = "1.12")]
		public double scale_z { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public bool show_on_set_parent { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public Clutter.Size size { owned get; set; }
		[Version (since = "1.0")]
		public Clutter.TextDirection text_direction { get; set; }
		[Version (since = "1.12")]
		public Clutter.Matrix transform { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public bool transform_set { get; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public float translation_x { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public float translation_y { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public float translation_z { get; set; }
		[NoAccessorMethod]
		public bool visible { get; set; }
		public float width { get; set; }
		public float x { get; set; }
		[Version (since = "1.10")]
		public Clutter.ActorAlign x_align { get; set; }
		[Version (since = "1.12")]
		public bool x_expand { get; set; }
		public float y { get; set; }
		[Version (since = "1.10")]
		public Clutter.ActorAlign y_align { get; set; }
		[Version (since = "1.12")]
		public bool y_expand { get; set; }
		[Version (since = "1.12")]
		public float z_position { get; set; }
		[Version (since = "1.0")]
		public signal void allocation_changed (Clutter.ActorBox box, Clutter.AllocationFlags flags);
		[Version (since = "0.6")]
		public virtual signal bool button_press_event (Clutter.ButtonEvent event);
		[Version (since = "0.6")]
		public virtual signal bool button_release_event (Clutter.ButtonEvent event);
		[Version (since = "0.6")]
		public virtual signal bool captured_event (Clutter.Event event);
		[HasEmitter]
		[Version (since = "0.2")]
		public virtual signal void destroy ();
		[Version (since = "0.6")]
		public virtual signal bool enter_event (Clutter.CrossingEvent event);
		[Version (since = "0.6")]
		public virtual signal bool event (Clutter.Event event);
		[HasEmitter]
		[Version (since = "0.2")]
		public virtual signal void hide ();
		[Version (since = "0.6")]
		public virtual signal void key_focus_in ();
		[Version (since = "0.6")]
		public virtual signal void key_focus_out ();
		[Version (since = "0.6")]
		public virtual signal bool key_press_event (Clutter.KeyEvent event);
		[Version (since = "0.6")]
		public virtual signal bool key_release_event (Clutter.KeyEvent event);
		[Version (since = "0.6")]
		public virtual signal bool leave_event (Clutter.CrossingEvent event);
		[Version (since = "0.6")]
		public virtual signal bool motion_event (Clutter.MotionEvent event);
		[HasEmitter]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public virtual signal void paint ();
		[Version (since = "0.2")]
		public virtual signal void parent_set (Clutter.Actor? old_parent);
		[Version (since = "1.0")]
		public virtual signal void pick (Clutter.Color color);
		[HasEmitter]
		[Version (since = "1.2")]
		public virtual signal void queue_relayout ();
		[HasEmitter]
		[Version (deprecated = true, deprecated_since = "1.16", since = "0.8")]
		public virtual signal void realize ();
		[Version (since = "0.6")]
		public virtual signal bool scroll_event (Clutter.ScrollEvent event);
		[HasEmitter]
		[Version (since = "0.2")]
		public virtual signal void show ();
		[Version (since = "1.12")]
		public virtual signal bool touch_event (Clutter.Event event);
		[Version (since = "1.12")]
		public signal void transition_stopped (string name, bool is_finished);
		[Version (since = "1.10")]
		public signal void transitions_completed ();
		[HasEmitter]
		[Version (deprecated = true, deprecated_since = "1.16", since = "0.8")]
		public virtual signal void unrealize ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_actor_meta_get_type ()")]
	[Version (since = "1.4")]
	public abstract class ActorMeta : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected ActorMeta ();
		public unowned Clutter.Actor get_actor ();
		public bool get_enabled ();
		public unowned string get_name ();
		[NoWrapper]
		public virtual void set_actor (Clutter.Actor? actor);
		public void set_enabled (bool is_enabled);
		public void set_name (string name);
		public Clutter.Actor actor { get; }
		public bool enabled { get; set; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_align_constraint_get_type ()")]
	[Version (since = "1.4")]
	public class AlignConstraint : Clutter.Constraint {
		[CCode (has_construct_function = false, type = "ClutterConstraint*")]
		public AlignConstraint (Clutter.Actor? source, Clutter.AlignAxis axis, float factor);
		public Clutter.AlignAxis get_align_axis ();
		public float get_factor ();
		public unowned Clutter.Actor get_source ();
		public void set_align_axis (Clutter.AlignAxis axis);
		public void set_factor (float factor);
		public void set_source (Clutter.Actor? source);
		public Clutter.AlignAxis align_axis { get; set construct; }
		public float factor { get; set construct; }
		public Clutter.Actor source { get; set construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_alpha_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
	public class Alpha : GLib.InitiallyUnowned, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		public Alpha ();
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public Alpha.full (Clutter.Timeline timeline, ulong mode);
		public double get_alpha ();
		[Version (since = "1.0")]
		public ulong get_mode ();
		public unowned Clutter.Timeline get_timeline ();
		[Version (since = "1.0")]
		public static ulong register_closure (GLib.Closure closure);
		[Version (since = "1.0")]
		public static ulong register_func (Clutter.AlphaFunc func);
		[Version (since = "0.8")]
		public void set_closure (GLib.Closure closure);
		public void set_func (owned Clutter.AlphaFunc func);
		[Version (since = "1.0")]
		public void set_mode (ulong mode);
		public void set_timeline (Clutter.Timeline timeline);
		[CCode (has_construct_function = false)]
		[Version (since = "1.0")]
		public Alpha.with_func (Clutter.Timeline timeline, owned Clutter.AlphaFunc func);
		public double alpha { get; }
		[Version (since = "1.0")]
		public ulong mode { get; set construct; }
		public Clutter.Timeline timeline { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_animation_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
	public class Animation : GLib.Object, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		public Animation ();
		public unowned Clutter.Animation bind (string property_name, GLib.Value final);
		public unowned Clutter.Animation bind_interval (string property_name, owned Clutter.Interval interval);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
		public unowned Clutter.Alpha get_alpha ();
		public uint get_duration ();
		public unowned Clutter.Interval get_interval (string property_name);
		public bool get_loop ();
		public ulong get_mode ();
		public unowned GLib.Object get_object ();
		public unowned Clutter.Timeline get_timeline ();
		public bool has_property (string property_name);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
		public void set_alpha (Clutter.Alpha alpha);
		public void set_duration (uint msecs);
		public void set_loop (bool loop);
		public void set_mode (ulong mode);
		public void set_object (GLib.Object object);
		public void set_timeline (Clutter.Timeline? timeline);
		public void unbind_property (string property_name);
		public unowned Clutter.Animation update (string property_name, GLib.Value final);
		public void update_interval (string property_name, Clutter.Interval interval);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
		public Clutter.Alpha alpha { get; set; }
		public uint duration { get; set; }
		public bool loop { get; set; }
		public ulong mode { get; set; }
		public GLib.Object object { get; set; }
		public Clutter.Timeline timeline { get; set; }
		[HasEmitter]
		public virtual signal void completed ();
		public virtual signal void started ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_animator_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
	public class Animator : GLib.Object, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		public Animator ();
		public bool compute_value (GLib.Object object, string property_name, double progress, GLib.Value value);
		public uint get_duration ();
		public GLib.List<weak Clutter.AnimatorKey> get_keys (GLib.Object? object, string? property_name, double progress);
		public unowned Clutter.Timeline get_timeline ();
		public bool property_get_ease_in (GLib.Object object, string property_name);
		public Clutter.Interpolation property_get_interpolation (GLib.Object object, string property_name);
		public void property_set_ease_in (GLib.Object object, string property_name, bool ease_in);
		public void property_set_interpolation (GLib.Object object, string property_name, Clutter.Interpolation interpolation);
		public void remove_key (GLib.Object? object, string? property_name, double progress);
		public void @set (void* first_object, string first_property_name, uint first_mode, ...);
		public void set_duration (uint duration);
		public unowned Clutter.Animator set_key (GLib.Object object, string property_name, uint mode, double progress, GLib.Value value);
		public void set_timeline (Clutter.Timeline timeline);
		public unowned Clutter.Timeline start ();
		public uint duration { get; set; }
		public Clutter.Timeline timeline { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_animator_key_get_type ()")]
	[Compact]
	[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
	public class AnimatorKey {
		public ulong get_mode ();
		public unowned GLib.Object get_object ();
		public double get_progress ();
		public unowned string get_property_name ();
		public GLib.Type get_property_type ();
		public bool get_value (GLib.Value value);
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "0.2")]
	public class AnyEvent : Clutter.Event {
		public Clutter.EventFlags flags;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_backend_get_type ()")]
	[Version (since = "0.4")]
	public class Backend : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Backend ();
		[NoWrapper]
		public virtual void add_options (GLib.OptionGroup group);
		[NoWrapper]
		public virtual bool create_context () throws GLib.Error;
		[NoWrapper]
		public virtual unowned Clutter.StageWindow create_stage (Clutter.Stage wrapper) throws GLib.Error;
		[NoWrapper]
		public virtual void ensure_context (Clutter.Stage stage);
		[NoWrapper]
		public virtual unowned Clutter.DeviceManager get_device_manager ();
		[Version (deprecated = true, deprecated_since = "1.4", since = "0.4")]
		public uint get_double_click_distance ();
		[Version (deprecated = true, deprecated_since = "1.4", since = "0.4")]
		public uint get_double_click_time ();
		[NoWrapper]
		public virtual Clutter.FeatureFlags get_features ();
		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
		public unowned string get_font_name ();
		[Version (since = "0.8")]
		public unowned Cairo.FontOptions get_font_options ();
		public double get_resolution ();
		[NoWrapper]
		public virtual void init_events ();
		[NoWrapper]
		public virtual void init_features ();
		[NoWrapper]
		public virtual bool post_parse () throws GLib.Error;
		[NoWrapper]
		public virtual bool pre_parse () throws GLib.Error;
		[NoWrapper]
		public virtual void redraw (Clutter.Stage stage);
		[Version (deprecated = true, deprecated_since = "1.4", since = "0.4")]
		public void set_double_click_distance (uint distance);
		[Version (deprecated = true, deprecated_since = "1.4", since = "0.4")]
		public void set_double_click_time (uint msec);
		[Version (deprecated = true, deprecated_since = "1.4", since = "1.0")]
		public void set_font_name (string font_name);
		[Version (since = "0.8")]
		public void set_font_options (Cairo.FontOptions options);
		[Version (deprecated = true, deprecated_since = "1.4", since = "0.4")]
		public void set_resolution (double dpi);
		[Version (since = "1.0")]
		public signal void font_changed ();
		[Version (since = "1.0")]
		public signal void resolution_changed ();
		[Version (since = "1.4")]
		public signal void settings_changed ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
	public abstract class Behaviour : GLib.Object, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		protected Behaviour ();
		public void actors_foreach (Clutter.BehaviourForeachFunc func);
		[NoWrapper]
		public virtual void alpha_notify (double alpha_value);
		public void apply (Clutter.Actor actor);
		public GLib.SList<weak Clutter.Actor> get_actors ();
		public unowned Clutter.Alpha get_alpha ();
		public int get_n_actors ();
		public unowned Clutter.Actor get_nth_actor (int index_);
		[Version (since = "0.4")]
		public bool is_applied (Clutter.Actor actor);
		public void remove (Clutter.Actor actor);
		[Version (since = "0.4")]
		public void remove_all ();
		public void set_alpha (Clutter.Alpha alpha);
		public Clutter.Alpha alpha { get; set; }
		[Version (since = "0.4")]
		public virtual signal void applied (Clutter.Actor actor);
		[Version (since = "0.4")]
		public virtual signal void removed (Clutter.Actor actor);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_depth_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
	public class BehaviourDepth : Clutter.Behaviour, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
		[Version (since = "0.4")]
		public BehaviourDepth (Clutter.Alpha? alpha, int depth_start, int depth_end);
		[Version (since = "0.6")]
		public void get_bounds (out int depth_start, out int depth_end);
		[Version (since = "0.6")]
		public void set_bounds (int depth_start, int depth_end);
		[NoAccessorMethod]
		[Version (since = "0.4")]
		public int depth_end { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.4")]
		public int depth_start { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_ellipse_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.4")]
	public class BehaviourEllipse : Clutter.Behaviour, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
		public BehaviourEllipse (Clutter.Alpha? alpha, int x, int y, int width, int height, Clutter.RotateDirection direction, double start, double end);
		public double get_angle_end ();
		[Version (since = "0.6")]
		public double get_angle_start ();
		public double get_angle_tilt (Clutter.RotateAxis axis);
		public void get_center (out int x, out int y);
		public Clutter.RotateDirection get_direction ();
		public int get_height ();
		public void get_tilt (out double angle_tilt_x, out double angle_tilt_y, out double angle_tilt_z);
		public int get_width ();
		public void set_angle_end (double angle_end);
		[Version (since = "0.6")]
		public void set_angle_start (double angle_start);
		public void set_angle_tilt (Clutter.RotateAxis axis, double angle_tilt);
		public void set_center (int x, int y);
		public void set_direction (Clutter.RotateDirection direction);
		public void set_height (int height);
		public void set_tilt (double angle_tilt_x, double angle_tilt_y, double angle_tilt_z);
		public void set_width (int width);
		public double angle_end { get; set; }
		public double angle_start { get; set; }
		[NoAccessorMethod]
		public double angle_tilt_x { get; set; }
		[NoAccessorMethod]
		public double angle_tilt_y { get; set; }
		[NoAccessorMethod]
		public double angle_tilt_z { get; set; }
		[NoAccessorMethod]
		public Clutter.Knot center { owned get; set; }
		public Clutter.RotateDirection direction { get; set; }
		public int height { get; set; }
		public int width { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_opacity_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
	public class BehaviourOpacity : Clutter.Behaviour, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
		public BehaviourOpacity (Clutter.Alpha? alpha, uint8 opacity_start, uint8 opacity_end);
		[Version (since = "0.6")]
		public void get_bounds (out uint8 opacity_start, out uint8 opacity_end);
		[Version (since = "0.6")]
		public void set_bounds (uint8 opacity_start, uint8 opacity_end);
		[NoAccessorMethod]
		public uint opacity_end { get; set; }
		[NoAccessorMethod]
		public uint opacity_start { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_path_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
	public class BehaviourPath : Clutter.Behaviour, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
		public BehaviourPath (Clutter.Alpha? alpha, Clutter.Path path);
		[Version (since = "1.0")]
		public unowned Clutter.Path get_path ();
		[Version (since = "1.0")]
		public void set_path (Clutter.Path path);
		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
		[Version (since = "1.0")]
		public BehaviourPath.with_description (Clutter.Alpha? alpha, string desc);
		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
		[Version (since = "1.0")]
		public BehaviourPath.with_knots (Clutter.Alpha? alpha, [CCode (array_length_cname = "n_knots", array_length_pos = 2.1, array_length_type = "guint")] Clutter.Knot[] knots);
		public Clutter.Path path { get; set; }
		public virtual signal void knot_reached (uint knot_num);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_rotate_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.4")]
	public class BehaviourRotate : Clutter.Behaviour, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
		public BehaviourRotate (Clutter.Alpha? alpha, Clutter.RotateAxis axis, Clutter.RotateDirection direction, double angle_start, double angle_end);
		public Clutter.RotateAxis get_axis ();
		public void get_bounds (out double angle_start, out double angle_end);
		public void get_center (out int x, out int y, out int z);
		public Clutter.RotateDirection get_direction ();
		public void set_axis (Clutter.RotateAxis axis);
		public void set_bounds (double angle_start, double angle_end);
		public void set_center (int x, int y, int z);
		public void set_direction (Clutter.RotateDirection direction);
		[NoAccessorMethod]
		public double angle_end { get; set; }
		[NoAccessorMethod]
		public double angle_start { get; set; }
		public Clutter.RotateAxis axis { get; set; }
		[NoAccessorMethod]
		public int center_x { get; set; }
		[NoAccessorMethod]
		public int center_y { get; set; }
		[NoAccessorMethod]
		public int center_z { get; set; }
		public Clutter.RotateDirection direction { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_behaviour_scale_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
	public class BehaviourScale : Clutter.Behaviour, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterBehaviour*")]
		public BehaviourScale (Clutter.Alpha? alpha, double x_scale_start, double y_scale_start, double x_scale_end, double y_scale_end);
		[Version (since = "0.4")]
		public void get_bounds (out double x_scale_start, out double y_scale_start, out double x_scale_end, out double y_scale_end);
		[Version (since = "0.6")]
		public void set_bounds (double x_scale_start, double y_scale_start, double x_scale_end, double y_scale_end);
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double x_scale_end { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double x_scale_start { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double y_scale_end { get; set; }
		[NoAccessorMethod]
		[Version (since = "0.6")]
		public double y_scale_start { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_bin_layout_get_type ()")]
	[Version (since = "1.2")]
	public class BinLayout : Clutter.LayoutManager {
		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
		public BinLayout (Clutter.BinAlignment x_align = Clutter.BinAlignment.START, Clutter.BinAlignment y_align = Clutter.BinAlignment.START);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void add (Clutter.Actor child, Clutter.BinAlignment x_align, Clutter.BinAlignment y_align);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void get_alignment (Clutter.Actor? child, out Clutter.BinAlignment x_align, out Clutter.BinAlignment y_align);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_alignment (Clutter.Actor? child, Clutter.BinAlignment x_align, Clutter.BinAlignment y_align);
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public Clutter.BinAlignment x_align { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public Clutter.BinAlignment y_align { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_bind_constraint_get_type ()")]
	[Version (since = "1.4")]
	public class BindConstraint : Clutter.Constraint {
		[CCode (has_construct_function = false, type = "ClutterConstraint*")]
		public BindConstraint (Clutter.Actor? source, Clutter.BindCoordinate coordinate, float offset);
		public Clutter.BindCoordinate get_coordinate ();
		public float get_offset ();
		public unowned Clutter.Actor get_source ();
		public void set_coordinate (Clutter.BindCoordinate coordinate);
		public void set_offset (float offset);
		public void set_source (Clutter.Actor? source);
		public Clutter.BindCoordinate coordinate { get; set construct; }
		public float offset { get; set construct; }
		public Clutter.Actor source { get; set construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_binding_pool_get_type ()")]
	[Version (since = "1.0")]
	public class BindingPool : GLib.Object {
		[CCode (has_construct_function = false)]
		public BindingPool (string name);
		public bool activate (uint key_val, Clutter.ModifierType modifiers, GLib.Object gobject);
		public void block_action (string action_name);
		public static unowned Clutter.BindingPool find (string name);
		public unowned string find_action (uint key_val, Clutter.ModifierType modifiers);
		public static unowned Clutter.BindingPool get_for_class (void* klass);
		public void install_action (string action_name, uint key_val, Clutter.ModifierType modifiers, owned Clutter.BindingActionFunc callback);
		public void install_closure (string action_name, uint key_val, Clutter.ModifierType modifiers, GLib.Closure closure);
		public void override_action (uint key_val, Clutter.ModifierType modifiers, owned Clutter.BindingActionFunc callback);
		public void override_closure (uint key_val, Clutter.ModifierType modifiers, GLib.Closure closure);
		public void remove_action (uint key_val, Clutter.ModifierType modifiers);
		public void unblock_action (string action_name);
		[NoAccessorMethod]
		public string name { owned get; construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_blur_effect_get_type ()")]
	[Version (since = "1.4")]
	public class BlurEffect : Clutter.OffscreenEffect {
		[CCode (has_construct_function = false, type = "ClutterEffect*")]
		public BlurEffect ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_box_get_type ()")]
	[Version (since = "1.2")]
	public class Box : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public Box (Clutter.LayoutManager manager);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public Clutter.Color get_color ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public unowned Clutter.LayoutManager get_layout_manager ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void pack (Clutter.Actor actor, ...);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void pack_after (Clutter.Actor actor, Clutter.Actor? sibling, ...);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void pack_at (Clutter.Actor actor, int position, ...);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void pack_before (Clutter.Actor actor, Clutter.Actor? sibling, ...);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void packv (Clutter.Actor actor, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5, array_length_type = "guint")] string[] properties, [CCode (array_length_cname = "n_properties", array_length_pos = 1.5, array_length_type = "guint")] GLib.Value[] values);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void set_color (Clutter.Color? color);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public void set_layout_manager (Clutter.LayoutManager manager);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public Clutter.Color color { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.2")]
		public bool color_set { get; set; }
		public Clutter.LayoutManager layout_manager { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_box_layout_get_type ()")]
	[Version (since = "1.2")]
	public class BoxLayout : Clutter.LayoutManager {
		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
		public BoxLayout ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void get_alignment (Clutter.Actor actor, out Clutter.BoxAlignment x_align, out Clutter.BoxAlignment y_align);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public uint get_easing_duration ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public ulong get_easing_mode ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public bool get_expand (Clutter.Actor actor);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void get_fill (Clutter.Actor actor, out bool x_fill, out bool y_fill);
		[Version (since = "1.4")]
		public bool get_homogeneous ();
		[Version (since = "1.12")]
		public Clutter.Orientation get_orientation ();
		public bool get_pack_start ();
		public uint get_spacing ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public bool get_use_animations ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public bool get_vertical ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void pack (Clutter.Actor actor, bool expand, bool x_fill, bool y_fill, Clutter.BoxAlignment x_align, Clutter.BoxAlignment y_align);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_alignment (Clutter.Actor actor, Clutter.BoxAlignment x_align, Clutter.BoxAlignment y_align);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_easing_duration (uint msecs);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_easing_mode (ulong mode);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_expand (Clutter.Actor actor, bool expand);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_fill (Clutter.Actor actor, bool x_fill, bool y_fill);
		[Version (since = "1.4")]
		public void set_homogeneous (bool homogeneous);
		[Version (since = "1.12")]
		public void set_orientation (Clutter.Orientation orientation);
		public void set_pack_start (bool pack_start);
		public void set_spacing (uint spacing);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_use_animations (bool animate);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_vertical (bool vertical);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public uint easing_duration { get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public ulong easing_mode { get; set; }
		[Version (since = "1.4")]
		public bool homogeneous { get; set; }
		[Version (since = "1.12")]
		public Clutter.Orientation orientation { get; set; }
		public bool pack_start { get; set; }
		public uint spacing { get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public bool use_animations { get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public bool vertical { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_brightness_contrast_effect_get_type ()")]
	[Version (since = "1.10")]
	public class BrightnessContrastEffect : Clutter.OffscreenEffect {
		[CCode (has_construct_function = false, type = "ClutterEffect*")]
		public BrightnessContrastEffect ();
		public void get_brightness (out float red, out float green, out float blue);
		public void get_contrast (out float red, out float green, out float blue);
		public void set_brightness (float brightness);
		public void set_brightness_full (float red, float green, float blue);
		public void set_contrast (float contrast);
		public void set_contrast_full (float red, float green, float blue);
		[NoAccessorMethod]
		public Clutter.Color brightness { owned get; set; }
		[NoAccessorMethod]
		public Clutter.Color contrast { owned get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "0.2")]
	public class ButtonEvent : Clutter.Event {
		public double axes;
		public uint32 button;
		public uint click_count;
		public weak Clutter.InputDevice device;
		public Clutter.EventFlags flags;
		public Clutter.ModifierType modifier_state;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
		public float x;
		public float y;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_cairo_texture_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
	public class CairoTexture : Clutter.Texture, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		public CairoTexture (uint width, uint height);
		public void clear ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
		public Cairo.Context create ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
		public Cairo.Context create_region (int x_offset, int y_offset, int width, int height);
		[Version (since = "1.8")]
		public bool get_auto_resize ();
		public void get_surface_size (out uint width, out uint height);
		[Version (since = "1.8")]
		public void invalidate ();
		[Version (since = "1.8")]
		public void invalidate_rectangle (Cairo.RectangleInt? rect);
		[Version (since = "1.8")]
		public void set_auto_resize (bool value);
		public void set_surface_size (uint width, uint height);
		[Version (since = "1.8")]
		public bool auto_resize { get; set; }
		[NoAccessorMethod]
		public uint surface_height { get; set; }
		[NoAccessorMethod]
		public uint surface_width { get; set; }
		[Version (since = "1.6")]
		public virtual signal Cairo.Surface create_surface (uint width, uint height);
		[Version (since = "1.8")]
		public virtual signal bool draw (Cairo.Context cr);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_canvas_get_type ()")]
	[Version (since = "1.10")]
	public class Canvas : GLib.Object, Clutter.Content {
		[CCode (has_construct_function = false, type = "ClutterContent*")]
		public Canvas ();
		[Version (since = "1.18")]
		public int get_scale_factor ();
		[Version (since = "1.18")]
		public void set_scale_factor (int scale);
		public bool set_size (int width, int height);
		[NoAccessorMethod]
		public int height { get; set; }
		[Version (since = "1.18")]
		public int scale_factor { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.18")]
		public bool scale_factor_set { get; }
		[NoAccessorMethod]
		public int width { get; set; }
		public virtual signal bool draw (Cairo.Context cr, int width, int height);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_child_meta_get_type ()")]
	[Version (since = "0.8")]
	public abstract class ChildMeta : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ChildMeta ();
		public unowned Clutter.Actor get_actor ();
		public unowned Clutter.Container get_container ();
		public Clutter.Actor actor { get; construct; }
		public Clutter.Container container { get; construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_click_action_get_type ()")]
	[Version (since = "1.4")]
	public class ClickAction : Clutter.Action {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public ClickAction ();
		public uint get_button ();
		[Version (since = "1.8")]
		public void get_coords (out float press_x, out float press_y);
		[Version (since = "1.6")]
		public Clutter.ModifierType get_state ();
		public void release ();
		[NoAccessorMethod]
		public bool held { get; }
		[NoAccessorMethod]
		[Version (since = "1.8")]
		public int long_press_duration { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.8")]
		public int long_press_threshold { get; set; }
		[NoAccessorMethod]
		public bool pressed { get; }
		public virtual signal void clicked (Clutter.Actor actor);
		[Version (since = "1.8")]
		public virtual signal bool long_press (Clutter.Actor actor, Clutter.LongPressState state);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_clip_node_get_type ()")]
	[Version (since = "1.10")]
	public class ClipNode : Clutter.PaintNode {
		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
		public ClipNode ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_clone_get_type ()")]
	[Version (since = "1.0")]
	public class Clone : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		public Clone (Clutter.Actor source);
		public unowned Clutter.Actor get_source ();
		public void set_source (Clutter.Actor? source);
		public Clutter.Actor source { get; set construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_color_node_get_type ()")]
	[Version (since = "1.10")]
	public class ColorNode : Clutter.PipelineNode {
		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
		public ColorNode (Clutter.Color? color);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_colorize_effect_get_type ()")]
	[Version (since = "1.4")]
	public class ColorizeEffect : Clutter.OffscreenEffect {
		[CCode (has_construct_function = false, type = "ClutterEffect*")]
		public ColorizeEffect (Clutter.Color tint);
		public Clutter.Color get_tint ();
		public void set_tint (Clutter.Color tint);
		public Clutter.Color tint { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_constraint_get_type ()")]
	[Version (since = "1.4")]
	public abstract class Constraint : Clutter.ActorMeta {
		[CCode (has_construct_function = false)]
		protected Constraint ();
		[NoWrapper]
		public virtual void update_allocation (Clutter.Actor actor, Clutter.ActorBox allocation);
		[NoWrapper]
		public virtual void update_preferred_size (Clutter.Actor actor, Clutter.Orientation direction, float for_size, float minimum_size, float natural_size);
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "0.2")]
	public class CrossingEvent : Clutter.Event {
		public weak Clutter.InputDevice device;
		public Clutter.EventFlags flags;
		public weak Clutter.Actor related;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
		public float x;
		public float y;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_deform_effect_get_type ()")]
	[Version (since = "1.4")]
	public abstract class DeformEffect : Clutter.OffscreenEffect {
		[CCode (has_construct_function = false)]
		protected DeformEffect ();
		[NoWrapper]
		public virtual void deform_vertex (float width, float height, Cogl.TextureVertex vertex);
		public unowned Cogl.Handle get_back_material ();
		public void get_n_tiles (out uint x_tiles, out uint y_tiles);
		public void invalidate ();
		public void set_back_material (Cogl.Handle? material);
		public void set_n_tiles (uint x_tiles, uint y_tiles);
		[NoAccessorMethod]
		public uint x_tiles { get; set; }
		[NoAccessorMethod]
		public uint y_tiles { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_desaturate_effect_get_type ()")]
	[Version (since = "1.4")]
	public class DesaturateEffect : Clutter.OffscreenEffect {
		[CCode (has_construct_function = false, type = "ClutterEffect*")]
		public DesaturateEffect (double factor);
		public double get_factor ();
		public void set_factor (double factor);
		public double factor { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_device_manager_get_type ()")]
	[Version (since = "1.2")]
	public abstract class DeviceManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DeviceManager ();
		[NoWrapper]
		public virtual void add_device (Clutter.InputDevice device);
		public virtual unowned Clutter.InputDevice get_core_device (Clutter.InputDeviceType device_type);
		public static unowned Clutter.DeviceManager get_default ();
		public virtual unowned Clutter.InputDevice get_device (int device_id);
		public GLib.SList<weak Clutter.InputDevice> list_devices ();
		public unowned GLib.SList<Clutter.InputDevice> peek_devices ();
		[NoWrapper]
		public virtual void remove_device (Clutter.InputDevice device);
		[NoWrapper]
		public virtual void select_stage_events (Clutter.Stage stage);
		[NoAccessorMethod]
		public Clutter.Backend backend { owned get; construct; }
		public signal void device_added (Clutter.InputDevice device);
		public signal void device_removed (Clutter.InputDevice device);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_drag_action_get_type ()")]
	[Version (since = "1.4")]
	public class DragAction : Clutter.Action {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public DragAction ();
		public bool get_drag_area (out Clutter.Rect drag_area);
		public Clutter.DragAxis get_drag_axis ();
		public unowned Clutter.Actor get_drag_handle ();
		public void get_drag_threshold (out uint x_threshold, out uint y_threshold);
		public void get_motion_coords (out float motion_x, out float motion_y);
		public void get_press_coords (out float press_x, out float press_y);
		public void set_drag_area (Clutter.Rect? drag_area);
		public void set_drag_axis (Clutter.DragAxis axis);
		public void set_drag_handle (Clutter.Actor? handle);
		public void set_drag_threshold (int x_threshold, int y_threshold);
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public Clutter.Rect drag_area { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public bool drag_area_set { get; }
		public Clutter.DragAxis drag_axis { get; set; }
		public Clutter.Actor drag_handle { get; set; }
		[NoAccessorMethod]
		public int x_drag_threshold { get; set; }
		[NoAccessorMethod]
		public int y_drag_threshold { get; set; }
		public virtual signal void drag_begin (Clutter.Actor actor, float event_x, float event_y, Clutter.ModifierType modifiers);
		public virtual signal void drag_end (Clutter.Actor actor, float event_x, float event_y, Clutter.ModifierType modifiers);
		public virtual signal void drag_motion (Clutter.Actor actor, float delta_x, float delta_y);
		[Version (since = "1.12")]
		public virtual signal bool drag_progress (Clutter.Actor actor, float delta_x, float delta_y);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_drop_action_get_type ()")]
	[Version (since = "1.8")]
	public class DropAction : Clutter.Action {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public DropAction ();
		public virtual signal bool can_drop (Clutter.Actor actor, float event_x, float event_y);
		public virtual signal void drop (Clutter.Actor actor, float event_x, float event_y);
		[Version (since = "1.12")]
		public signal void drop_cancel (Clutter.Actor actor, float event_x, float event_y);
		public virtual signal void over_in (Clutter.Actor actor);
		public virtual signal void over_out (Clutter.Actor actor);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_effect_get_type ()")]
	[Version (since = "1.4")]
	public abstract class Effect : Clutter.ActorMeta {
		[CCode (has_construct_function = false)]
		protected Effect ();
		[NoWrapper]
		public virtual bool get_paint_volume (out Clutter.PaintVolume volume);
		[NoWrapper]
		public virtual void paint (Clutter.EffectPaintFlags flags);
		[NoWrapper]
		public virtual void pick (Clutter.EffectPaintFlags flags);
		[NoWrapper]
		public virtual void post_paint ();
		[NoWrapper]
		public virtual bool pre_paint ();
		[Version (since = "1.8")]
		public void queue_repaint ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_event_get_type ()")]
	[Compact]
	[Version (since = "0.2")]
	public class Event {
		public Clutter.EventType type;
		[CCode (has_construct_function = false)]
		public Event (Clutter.EventType type);
		[Version (since = "1.18")]
		public static uint add_filter (Clutter.Stage? stage, [CCode (delegate_target_pos = 2.2, destroy_notify_pos = 2.1)] owned Clutter.EventFilterFunc func);
		public Clutter.Event copy ();
		public void free ();
		[Version (since = "0.4")]
		public static Clutter.Event @get ();
		[Version (since = "1.12")]
		public double get_angle (Clutter.Event target);
		[Version (since = "1.6")]
		public double get_axes (out uint n_axes);
		[Version (since = "1.0")]
		public uint32 get_button ();
		[Version (since = "1.0")]
		public uint get_click_count ();
		[Version (since = "0.4")]
		public void get_coords (out float x, out float y);
		[Version (since = "1.0")]
		public unowned Clutter.InputDevice get_device ();
		public int get_device_id ();
		[Version (since = "1.0")]
		public Clutter.InputDeviceType get_device_type ();
		[Version (since = "1.12")]
		public float get_distance (Clutter.Event target);
		[Version (since = "1.10")]
		public unowned Clutter.EventSequence get_event_sequence ();
		[Version (since = "1.0")]
		public Clutter.EventFlags get_flags ();
		[Version (since = "1.24")]
		public void get_gesture_motion_delta (out double dx, out double dy);
		public Clutter.TouchpadGesturePhase get_gesture_phase ();
		[Version (since = "1.24")]
		public double get_gesture_pinch_angle_delta ();
		[Version (since = "1.24")]
		public double get_gesture_pinch_scale ();
		[Version (since = "1.24")]
		public uint get_gesture_swipe_finger_count ();
		[Version (since = "1.0")]
		public uint16 get_key_code ();
		[Version (since = "1.0")]
		public uint get_key_symbol ();
		public unichar get_key_unicode ();
		[Version (since = "1.12")]
		public Clutter.Point get_position ();
		[Version (since = "1.0")]
		public unowned Clutter.Actor get_related ();
		[Version (since = "1.10")]
		public void get_scroll_delta (out double dx, out double dy);
		[Version (since = "1.0")]
		public Clutter.ScrollDirection get_scroll_direction ();
		[Version (since = "1.26")]
		public Clutter.ScrollFinishFlags get_scroll_finish_flags ();
		[Version (since = "1.26")]
		public Clutter.ScrollSource get_scroll_source ();
		[Version (since = "0.6")]
		public unowned Clutter.Actor get_source ();
		[Version (since = "1.6")]
		public unowned Clutter.InputDevice get_source_device ();
		[Version (since = "0.8")]
		public unowned Clutter.Stage get_stage ();
		[Version (since = "0.4")]
		public Clutter.ModifierType get_state ();
		[Version (since = "1.16")]
		public void get_state_full (out Clutter.ModifierType button_state, out Clutter.ModifierType base_state, out Clutter.ModifierType latched_state, out Clutter.ModifierType locked_state, out Clutter.ModifierType effective_state);
		[Version (since = "0.4")]
		public uint32 get_time ();
		[CCode (cname = "clutter_event_type")]
		public Clutter.EventType get_type ();
		[Version (since = "1.12")]
		public bool has_control_modifier ();
		[Version (since = "1.12")]
		public bool has_shift_modifier ();
		[Version (since = "1.12")]
		public bool is_pointer_emulated ();
		[Version (since = "0.4")]
		public static unowned Clutter.Event peek ();
		[Version (since = "0.6")]
		public void put ();
		[Version (since = "1.18")]
		public static void remove_filter (uint id);
		[Version (since = "1.8")]
		public void set_button (uint32 button);
		[Version (since = "1.8")]
		public void set_coords (float x, float y);
		[Version (since = "1.6")]
		public void set_device (Clutter.InputDevice? device);
		[Version (since = "1.8")]
		public void set_flags (Clutter.EventFlags flags);
		[Version (since = "1.8")]
		public void set_key_code (uint16 key_code);
		[Version (since = "1.8")]
		public void set_key_symbol (uint key_sym);
		[Version (since = "1.8")]
		public void set_key_unicode (unichar key_unicode);
		[Version (since = "1.8")]
		public void set_related (Clutter.Actor? actor);
		[Version (since = "1.10")]
		public void set_scroll_delta (double dx, double dy);
		[Version (since = "1.8")]
		public void set_scroll_direction (Clutter.ScrollDirection direction);
		[Version (since = "1.8")]
		public void set_source (Clutter.Actor? actor);
		[Version (since = "1.8")]
		public void set_source_device (Clutter.InputDevice? device);
		[Version (since = "1.8")]
		public void set_stage (Clutter.Stage? stage);
		[Version (since = "1.8")]
		public void set_state (Clutter.ModifierType state);
		[Version (since = "1.8")]
		public void set_time (uint32 time_);
		public Clutter.AnyEvent any {[CCode (cname = "(ClutterAnyEvent *)")]  get; }
		public Clutter.ButtonEvent button {[CCode (cname = "(ClutterButtonEvent *)")]  get; }
		public Clutter.CrossingEvent crossing {[CCode (cname = "(ClutterCrossingEvent *)")]  get; }
		public Clutter.KeyEvent key {[CCode (cname = "(ClutterKeyEvent *)")]  get; }
		public Clutter.MotionEvent motion {[CCode (cname = "(ClutterMotionEvent *)")]  get; }
		public Clutter.ScrollEvent scroll {[CCode (cname = "(ClutterScrollEvent *)")]  get; }
		public Clutter.StageStateEvent stage_state {[CCode (cname = "(ClutterStageStateEvent *)")]  get; }
		public Clutter.TouchEvent touch {[CCode (cname = "(ClutterTouchEvent *)")]  get; }
		public Clutter.TouchpadPinchEvent touchpad_pinch {[CCode (cname = "(ClutterTouchpadPinchEvent *)")]  get; }
		public Clutter.TouchpadSwipeEvent touchpad_swipe {[CCode (cname = "(ClutterTouchpadSwipeEvent *)")]  get; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_event_sequence_get_type ()")]
	[Compact]
	[Version (since = "1.12")]
	public class EventSequence {
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_fixed_layout_get_type ()")]
	[Version (since = "1.2")]
	public class FixedLayout : Clutter.LayoutManager {
		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
		public FixedLayout ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_flow_layout_get_type ()")]
	[Version (since = "1.2")]
	public class FlowLayout : Clutter.LayoutManager {
		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
		public FlowLayout (Clutter.FlowOrientation orientation);
		public float get_column_spacing ();
		public void get_column_width (out float min_width, out float max_width);
		public bool get_homogeneous ();
		public Clutter.FlowOrientation get_orientation ();
		public void get_row_height (out float min_height, out float max_height);
		public float get_row_spacing ();
		[Version (since = "1.16")]
		public bool get_snap_to_grid ();
		public void set_column_spacing (float spacing);
		public void set_column_width (float min_width, float max_width);
		public void set_homogeneous (bool homogeneous);
		public void set_orientation (Clutter.FlowOrientation orientation);
		public void set_row_height (float min_height, float max_height);
		public void set_row_spacing (float spacing);
		[Version (since = "1.16")]
		public void set_snap_to_grid (bool snap_to_grid);
		public float column_spacing { get; set; }
		public bool homogeneous { get; set; }
		[NoAccessorMethod]
		public float max_column_width { get; set; }
		[NoAccessorMethod]
		public float max_row_height { get; set; }
		[NoAccessorMethod]
		public float min_column_width { get; set; }
		[NoAccessorMethod]
		public float min_row_height { get; set; }
		public Clutter.FlowOrientation orientation { get; set construct; }
		public float row_spacing { get; set; }
		[Version (since = "1.16")]
		public bool snap_to_grid { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_gesture_action_get_type ()")]
	[Version (since = "1.8")]
	public class GestureAction : Clutter.Action {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public GestureAction ();
		[Version (since = "1.12")]
		public void cancel ();
		[NoWrapper]
		public virtual bool gesture_prepare (Clutter.Actor actor);
		[Version (since = "1.12")]
		public unowned Clutter.InputDevice get_device (uint point);
		[Version (since = "1.14")]
		public unowned Clutter.Event get_last_event (uint point);
		public void get_motion_coords (uint point, out float motion_x, out float motion_y);
		[Version (since = "1.12")]
		public float get_motion_delta (uint point, out float delta_x, out float delta_y);
		[Version (since = "1.12")]
		public uint get_n_current_points ();
		[Version (since = "1.12")]
		public int get_n_touch_points ();
		public void get_press_coords (uint point, out float press_x, out float press_y);
		public void get_release_coords (uint point, out float release_x, out float release_y);
		[Version (since = "1.12")]
		public unowned Clutter.EventSequence get_sequence (uint point);
		[Version (since = "1.18")]
		public void get_threshold_trigger_distance (out float x, out float y);
		[Version (since = "1.20")]
		public Clutter.GestureTriggerEdge get_threshold_trigger_edge ();
		[Version (deprecated = true, deprecated_since = "1.20", since = "1.18")]
		public Clutter.GestureTriggerEdge get_threshold_trigger_egde ();
		[Version (since = "1.12")]
		public float get_velocity (uint point, out float velocity_x, out float velocity_y);
		[Version (since = "1.12")]
		public void set_n_touch_points (int nb_points);
		[Version (since = "1.18")]
		public void set_threshold_trigger_distance (float x, float y);
		[Version (since = "1.18")]
		public void set_threshold_trigger_edge (Clutter.GestureTriggerEdge edge);
		[Version (since = "1.16")]
		public int n_touch_points { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.18")]
		public float threshold_trigger_distance_x { get; construct; }
		[NoAccessorMethod]
		[Version (since = "1.18")]
		public float threshold_trigger_distance_y { get; construct; }
		[Version (since = "1.18")]
		public Clutter.GestureTriggerEdge threshold_trigger_edge { get; construct; }
		public virtual signal bool gesture_begin (Clutter.Actor actor);
		public virtual signal void gesture_cancel (Clutter.Actor actor);
		public virtual signal void gesture_end (Clutter.Actor actor);
		public virtual signal bool gesture_progress (Clutter.Actor actor);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_grid_layout_get_type ()")]
	[Version (since = "1.12")]
	public class GridLayout : Clutter.LayoutManager {
		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
		public GridLayout ();
		public void attach (Clutter.Actor child, int left, int top, int width, int height);
		public void attach_next_to (Clutter.Actor child, Clutter.Actor? sibling, Clutter.GridPosition side, int width, int height);
		public unowned Clutter.Actor get_child_at (int left, int top);
		public bool get_column_homogeneous ();
		public uint get_column_spacing ();
		public Clutter.Orientation get_orientation ();
		public bool get_row_homogeneous ();
		public uint get_row_spacing ();
		public void insert_column (int position);
		public void insert_next_to (Clutter.Actor sibling, Clutter.GridPosition side);
		public void insert_row (int position);
		public void set_column_homogeneous (bool homogeneous);
		public void set_column_spacing (uint spacing);
		public void set_orientation (Clutter.Orientation orientation);
		public void set_row_homogeneous (bool homogeneous);
		public void set_row_spacing (uint spacing);
		public bool column_homogeneous { get; set; }
		public uint column_spacing { get; set; }
		public Clutter.Orientation orientation { get; set; }
		public bool row_homogeneous { get; set; }
		public uint row_spacing { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_group_get_type ()")]
	[Version (since = "0.2")]
	public class Group : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (deprecated = true, deprecated_since = "1.10")]
		public Group ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public int get_n_children ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public unowned Clutter.Actor get_nth_child (int index_);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void remove_all ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_image_get_type ()")]
	[Version (since = "1.10")]
	public class Image : GLib.Object, Clutter.Content {
		[CCode (has_construct_function = false, type = "ClutterContent*")]
		public Image ();
		public bool set_area ([CCode (array_length = false)] uint8[] data, Cogl.PixelFormat pixel_format, Cairo.RectangleInt rect, uint row_stride) throws GLib.Error;
		[Version (since = "1.12")]
		public bool set_bytes (GLib.Bytes data, Cogl.PixelFormat pixel_format, uint width, uint height, uint row_stride) throws GLib.Error;
		public bool set_data ([CCode (array_length = false)] uint8[] data, Cogl.PixelFormat pixel_format, uint width, uint height, uint row_stride) throws GLib.Error;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_input_device_get_type ()")]
	public class InputDevice : GLib.Object {
		[CCode (has_construct_function = false)]
		protected InputDevice ();
		[Version (since = "1.6")]
		public unowned Clutter.InputDevice get_associated_device ();
		[Version (since = "1.6")]
		public Clutter.InputAxis get_axis (uint index_);
		[Version (since = "1.6")]
		public bool get_axis_value ([CCode (array_length = false)] double[] axes, Clutter.InputAxis axis, out double value);
		[Version (since = "1.12")]
		public bool get_coords (Clutter.EventSequence? sequence, out Clutter.Point point);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void get_device_coords (out int x, out int y);
		[Version (since = "1.0")]
		public int get_device_id ();
		[Version (since = "1.6")]
		public Clutter.InputMode get_device_mode ();
		[Version (since = "1.2")]
		public unowned string get_device_name ();
		[Version (since = "1.0")]
		public Clutter.InputDeviceType get_device_type ();
		[Version (since = "1.6")]
		public bool get_enabled ();
		[CCode (cname = "clutter_get_input_device_for_id")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
		public static unowned Clutter.InputDevice get_for_id (int id_);
		[Version (since = "1.10")]
		public unowned Clutter.Actor get_grabbed_actor ();
		[Version (since = "1.6")]
		public bool get_has_cursor ();
		[Version (since = "1.6")]
		public bool get_key (uint index_, out uint keyval, out Clutter.ModifierType modifiers);
		[Version (since = "1.16")]
		public Clutter.ModifierType get_modifier_state ();
		[Version (since = "1.6")]
		public uint get_n_axes ();
		[Version (since = "1.6")]
		public uint get_n_keys ();
		[Version (since = "1.2")]
		public unowned Clutter.Actor get_pointer_actor ();
		[Version (since = "1.2")]
		public unowned Clutter.Stage get_pointer_stage ();
		[Version (since = "1.22")]
		public unowned string get_product_id ();
		[Version (since = "1.6")]
		public GLib.List<weak Clutter.InputDevice> get_slave_devices ();
		[Version (since = "1.22")]
		public unowned string get_vendor_id ();
		[Version (since = "1.10")]
		public void grab (Clutter.Actor actor);
		[Version (since = "1.10")]
		public bool keycode_to_evdev (uint hardware_keycode, uint evdev_keycode);
		[Version (since = "1.12")]
		public unowned Clutter.Actor sequence_get_grabbed_actor (Clutter.EventSequence sequence);
		[Version (since = "1.12")]
		public void sequence_grab (Clutter.EventSequence sequence, Clutter.Actor actor);
		[Version (since = "1.12")]
		public void sequence_ungrab (Clutter.EventSequence sequence);
		[Version (since = "1.6")]
		public void set_enabled (bool enabled);
		[Version (since = "1.6")]
		public void set_key (uint index_, uint keyval, Clutter.ModifierType modifiers);
		[Version (since = "1.10")]
		public void ungrab ();
		[Version (since = "1.2")]
		public void update_from_event (Clutter.Event event, bool update_stage);
		[NoAccessorMethod]
		[Version (since = "1.6")]
		public Clutter.Backend backend { owned get; construct; }
		[NoAccessorMethod]
		[Version (since = "1.6")]
		public Clutter.DeviceManager device_manager { owned get; construct; }
		public Clutter.InputMode device_mode { get; construct; }
		[Version (since = "1.2")]
		public Clutter.InputDeviceType device_type { get; construct; }
		[Version (since = "1.6")]
		public bool enabled { get; set; }
		[Version (since = "1.6")]
		public bool has_cursor { get; construct; }
		[NoAccessorMethod]
		[Version (since = "1.2")]
		public int id { get; construct; }
		[Version (since = "1.6")]
		public uint n_axes { get; }
		[NoAccessorMethod]
		[Version (since = "1.2")]
		public string name { owned get; construct; }
		[Version (since = "1.22")]
		public string product_id { get; construct; }
		[Version (since = "1.22")]
		public string vendor_id { get; construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_interval_get_type ()")]
	[Version (since = "1.0")]
	public class Interval : GLib.InitiallyUnowned, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		public Interval (GLib.Type gtype, ...);
		public Clutter.Interval clone ();
		[Version (since = "1.4")]
		public unowned GLib.Value? compute (double factor);
		public virtual bool compute_value (double factor, out GLib.Value value);
		public GLib.Value get_final_value ();
		public GLib.Value get_initial_value ();
		public void get_interval (...);
		public GLib.Type get_value_type ();
		[Version (since = "1.12")]
		public bool is_valid ();
		public unowned GLib.Value? peek_final_value ();
		public unowned GLib.Value? peek_initial_value ();
		public static void register_progress_func (GLib.Type value_type, Clutter.ProgressFunc func);
		[Version (since = "1.10")]
		public void set_final (...);
		public void set_final_value (GLib.Value value);
		[Version (since = "1.10")]
		public void set_initial (...);
		public void set_initial_value (GLib.Value value);
		public void set_interval (...);
		public virtual bool validate (GLib.ParamSpec pspec);
		[CCode (has_construct_function = false)]
		public Interval.with_values (GLib.Type gtype, GLib.Value? initial, GLib.Value? final);
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public GLib.Value final { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "1.12")]
		public GLib.Value initial { owned get; set; }
		public GLib.Type value_type { get; construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "0.2")]
	public class KeyEvent : Clutter.Event {
		public weak Clutter.InputDevice device;
		public Clutter.EventFlags flags;
		public uint16 hardware_keycode;
		public uint keyval;
		public Clutter.ModifierType modifier_state;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
		public unichar unicode_value;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_keyframe_transition_get_type ()")]
	[Version (since = "1.12")]
	public class KeyframeTransition : Clutter.PropertyTransition, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterTransition*")]
		public KeyframeTransition (string property_name);
		public void clear ();
		public void get_key_frame (uint index_, out double key, out Clutter.AnimationMode mode, out GLib.Value value);
		public uint get_n_key_frames ();
		public void set_key_frame (uint index_, double key, Clutter.AnimationMode mode, GLib.Value value);
		public void set_key_frames ([CCode (array_length_cname = "n_key_frames", array_length_pos = 0.5, array_length_type = "guint")] double[] key_frames);
		public void set_modes ([CCode (array_length_cname = "n_modes", array_length_pos = 0.5, array_length_type = "guint")] Clutter.AnimationMode[] modes);
		public void set_values ([CCode (array_length_cname = "n_values", array_length_pos = 0.5, array_length_type = "guint")] GLib.Value[] values);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_layout_manager_get_type ()")]
	[Version (since = "1.2")]
	public abstract class LayoutManager : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected LayoutManager ();
		public virtual void allocate (Clutter.Container container, Clutter.ActorBox allocation, Clutter.AllocationFlags flags);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public virtual unowned Clutter.Alpha begin_animation (uint duration, ulong mode);
		public void child_get (Clutter.Container container, Clutter.Actor actor, ...);
		public void child_get_property (Clutter.Container container, Clutter.Actor actor, string property_name, GLib.Value value);
		public void child_set (Clutter.Container container, Clutter.Actor actor, ...);
		public void child_set_property (Clutter.Container container, Clutter.Actor actor, string property_name, GLib.Value value);
		[NoWrapper]
		public virtual unowned Clutter.LayoutMeta create_child_meta (Clutter.Container container, Clutter.Actor actor);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public virtual void end_animation ();
		public unowned GLib.ParamSpec find_child_property (string name);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public virtual double get_animation_progress ();
		[Version (since = "1.0")]
		public unowned Clutter.LayoutMeta get_child_meta (Clutter.Container container, Clutter.Actor actor);
		[NoWrapper]
		public virtual GLib.Type get_child_meta_type ();
		public virtual void get_preferred_height (Clutter.Container container, float for_width, out float min_height_p, out float nat_height_p);
		public virtual void get_preferred_width (Clutter.Container container, float for_height, out float min_width_p, out float nat_width_p);
		[CCode (array_length_pos = 0.1, array_length_type = "guint")]
		public GLib.ParamSpec[] list_child_properties ();
		public virtual void set_container (Clutter.Container? container);
		[HasEmitter]
		public virtual signal void layout_changed ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_layout_meta_get_type ()")]
	[Version (since = "1.2")]
	public abstract class LayoutMeta : Clutter.ChildMeta {
		[CCode (has_construct_function = false)]
		protected LayoutMeta ();
		public unowned Clutter.LayoutManager get_manager ();
		public Clutter.LayoutManager manager { get; construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_list_model_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.24", since = "0.6")]
	public class ListModel : Clutter.Model, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterModel*")]
		public ListModel (uint n_columns, ...);
		[CCode (cname = "clutter_list_model_newv", has_construct_function = false, type = "ClutterModel*")]
		public ListModel.newv ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5, array_length_type = "guint")] GLib.Type[] types, [CCode (array_length_cname = "n_columns", array_length_pos = 0.5, array_length_type = "guint")] string[] names);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_model_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.24", since = "0.6")]
	public abstract class Model : GLib.Object, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		protected Model ();
		public void append (...);
		public void appendv ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5, array_length_type = "guint")] uint[] columns, [CCode (array_length_cname = "n_columns", array_length_pos = 0.5, array_length_type = "guint")] GLib.Value[] values);
		public bool filter_iter (Clutter.ModelIter iter);
		public bool filter_row (uint row);
		public void @foreach (Clutter.ModelForeachFunc func);
		public virtual unowned string get_column_name (uint column);
		public virtual GLib.Type get_column_type (uint column);
		[Version (since = "1.0")]
		public bool get_filter_set ();
		public Clutter.ModelIter get_first_iter ();
		public virtual Clutter.ModelIter get_iter_at_row (uint row);
		public Clutter.ModelIter get_last_iter ();
		public virtual uint get_n_columns ();
		public virtual uint get_n_rows ();
		public int get_sorting_column ();
		public void insert (uint row, ...);
		[NoWrapper]
		public virtual unowned Clutter.ModelIter insert_row (int index_);
		public void insert_value (uint row, uint column, GLib.Value value);
		public void insertv (uint row, [CCode (array_length_cname = "n_columns", array_length_pos = 1.5, array_length_type = "guint")] uint[] columns, [CCode (array_length_cname = "n_columns", array_length_pos = 1.5, array_length_type = "guint")] GLib.Value[] values);
		public void prepend (...);
		public void prependv ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5, array_length_type = "guint")] uint[] columns, [CCode (array_length_cname = "n_columns", array_length_pos = 0.5, array_length_type = "guint")] GLib.Value[] values);
		public void remove (uint row);
		[NoWrapper]
		public virtual void remove_row (uint row);
		public void resort ();
		public void set_filter (owned Clutter.ModelFilterFunc? func);
		public void set_names ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5, array_length_type = "guint")] string[] names);
		public void set_sort (int column, owned Clutter.ModelSortFunc? func);
		public void set_sorting_column (int column);
		public void set_types ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5, array_length_type = "guint")] GLib.Type[] types);
		[Version (since = "1.0")]
		public bool filter_set { get; }
		public virtual signal void filter_changed ();
		public virtual signal void row_added (Clutter.ModelIter iter);
		public virtual signal void row_changed (Clutter.ModelIter iter);
		public virtual signal void row_removed (Clutter.ModelIter iter);
		public virtual signal void sort_changed ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_model_iter_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.24", since = "0.6")]
	public abstract class ModelIter : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ModelIter ();
		[Version (since = "0.8")]
		public virtual Clutter.ModelIter copy ();
		public void @get (...);
		public virtual unowned Clutter.Model get_model ();
		public virtual uint get_row ();
		public virtual GLib.Value get_value (uint column);
		public virtual bool is_first ();
		public virtual bool is_last ();
		public virtual unowned Clutter.ModelIter next ();
		public virtual unowned Clutter.ModelIter prev ();
		public void @set (...);
		public virtual void set_value (uint column, GLib.Value value);
		[NoAccessorMethod]
		public Clutter.Model model { owned get; set; }
		[NoAccessorMethod]
		public uint row { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "0.2")]
	public class MotionEvent : Clutter.Event {
		public double axes;
		public weak Clutter.InputDevice device;
		public Clutter.EventFlags flags;
		public Clutter.ModifierType modifier_state;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
		public float x;
		public float y;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_offscreen_effect_get_type ()")]
	[Version (since = "1.4")]
	public abstract class OffscreenEffect : Clutter.Effect {
		[CCode (has_construct_function = false)]
		protected OffscreenEffect ();
		public virtual Cogl.Handle create_texture (float width, float height);
		public unowned Cogl.Material get_target ();
		[Version (since = "1.14")]
		public bool get_target_rect (out Clutter.Rect rect);
		[Version (deprecated = true, deprecated_since = "1.14", since = "1.8")]
		public bool get_target_size (out float width, out float height);
		[Version (since = "1.10")]
		public unowned Cogl.Handle get_texture ();
		public virtual void paint_target ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_page_turn_effect_get_type ()")]
	[Version (since = "1.4")]
	public class PageTurnEffect : Clutter.DeformEffect {
		[CCode (has_construct_function = false, type = "ClutterEffect*")]
		public PageTurnEffect (double period, double angle, float radius);
		public double get_angle ();
		public double get_period ();
		public float get_radius ();
		public void set_angle (double angle);
		public void set_period (double period);
		public void set_radius (float radius);
		public double angle { get; set; }
		public double period { get; set; }
		public float radius { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_paint_node_get_type ()")]
	[Version (since = "1.10")]
	public abstract class PaintNode {
		[CCode (has_construct_function = false)]
		protected PaintNode ();
		public void add_child (Clutter.PaintNode child);
		public void add_rectangle (Clutter.ActorBox rect);
		public void add_texture_rectangle (Clutter.ActorBox rect, float x_1, float y_1, float x_2, float y_2);
		public unowned Clutter.PaintNode @ref ();
		public void set_name (string name);
		public void unref ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_pan_action_get_type ()")]
	[Version (since = "1.12")]
	public class PanAction : Clutter.GestureAction {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public PanAction ();
		public double get_acceleration_factor ();
		[Version (since = "1.24")]
		public float get_constrained_motion_delta (uint point, out float delta_x, out float delta_y);
		public double get_deceleration ();
		public bool get_interpolate ();
		public void get_interpolated_coords (out float interpolated_x, out float interpolated_y);
		public float get_interpolated_delta (out float delta_x, out float delta_y);
		[Version (since = "1.14")]
		public void get_motion_coords (uint point, out float motion_x, out float motion_y);
		[Version (since = "1.14")]
		public float get_motion_delta (uint point, out float delta_x, out float delta_y);
		public Clutter.PanAxis get_pan_axis ();
		public void set_acceleration_factor (double factor);
		public void set_deceleration (double rate);
		public void set_interpolate (bool should_interpolate);
		public void set_pan_axis (Clutter.PanAxis axis);
		public double acceleration_factor { get; set; }
		public double deceleration { get; set; }
		public bool interpolate { get; set; }
		public Clutter.PanAxis pan_axis { get; set; }
		public virtual signal bool pan (Clutter.Actor actor, bool is_interpolated);
		public virtual signal void pan_stopped (Clutter.Actor actor);
	}
	[CCode (cheader_filename = "clutter/clutter.h", lower_case_csuffix = "param_units", type_id = "clutter_param_units_get_type ()")]
	public class ParamSpecUnit : GLib.ParamSpec {
		[CCode (has_construct_function = false)]
		protected ParamSpecUnit ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_path_get_type ()")]
	[Version (since = "1.0")]
	public class Path : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		public Path ();
		public void add_cairo_path (Cairo.Path cpath);
		public void add_close ();
		public void add_curve_to (int x_1, int y_1, int x_2, int y_2, int x_3, int y_3);
		public void add_line_to (int x, int y);
		public void add_move_to (int x, int y);
		public void add_node (Clutter.PathNode node);
		public void add_rel_curve_to (int x_1, int y_1, int x_2, int y_2, int x_3, int y_3);
		public void add_rel_line_to (int x, int y);
		public void add_rel_move_to (int x, int y);
		public bool add_string (string str);
		public void clear ();
		public void @foreach (Clutter.PathCallback callback);
		public string get_description ();
		public uint get_length ();
		public uint get_n_nodes ();
		public Clutter.PathNode get_node (uint index_);
		public GLib.SList<weak Clutter.PathNode?> get_nodes ();
		public uint get_position (double progress, out Clutter.Knot position);
		public void insert_node (int index_, Clutter.PathNode node);
		public void remove_node (uint index_);
		public void replace_node (uint index_, Clutter.PathNode node);
		public bool set_description (string str);
		public void to_cairo_path (Cairo.Context cr);
		[CCode (has_construct_function = false)]
		public Path.with_description (string desc);
		public string description { owned get; set; }
		public uint length { get; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_path_constraint_get_type ()")]
	[Version (since = "1.6")]
	public class PathConstraint : Clutter.Constraint {
		[CCode (has_construct_function = false, type = "ClutterConstraint*")]
		public PathConstraint (Clutter.Path? path, float offset);
		public float get_offset ();
		public unowned Clutter.Path get_path ();
		public void set_offset (float offset);
		public void set_path (Clutter.Path? path);
		public float offset { get; set; }
		public Clutter.Path path { get; set; }
		public signal void node_reached (Clutter.Actor actor, uint index);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_pipeline_node_get_type ()")]
	[Version (since = "1.10")]
	public class PipelineNode : Clutter.PaintNode {
		[CCode (has_construct_function = false)]
		protected PipelineNode ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_property_transition_get_type ()")]
	[Version (since = "1.10")]
	public class PropertyTransition : Clutter.Transition, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterTransition*")]
		public PropertyTransition (string? property_name);
		public unowned string get_property_name ();
		public void set_property_name (string? property_name);
		public string property_name { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_rectangle_get_type ()")]
	[Version (since = "0.2")]
	public class Rectangle : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (deprecated = true, deprecated_since = "1.10")]
		public Rectangle ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public Clutter.Color get_border_color ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public uint get_border_width ();
		[Version (deprecated = true, deprecated_since = "1.10")]
		public Clutter.Color get_color ();
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void set_border_color (Clutter.Color color);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.2")]
		public void set_border_width (uint width);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void set_color (Clutter.Color color);
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (deprecated = true, deprecated_since = "1.10")]
		public Rectangle.with_color (Clutter.Color color);
		public Clutter.Color border_color { get; set; }
		public uint border_width { get; set; }
		public Clutter.Color color { get; set; }
		[NoAccessorMethod]
		public bool has_border { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_rotate_action_get_type ()")]
	[Version (since = "1.12")]
	public class RotateAction : Clutter.GestureAction {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public RotateAction ();
		public virtual signal bool rotate (Clutter.Actor actor, double angle);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_score_get_type ()")]
	[Version (since = "0.6")]
	public class Score : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public Score ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public ulong append (Clutter.Timeline? parent, Clutter.Timeline timeline);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.8")]
		public ulong append_at_marker (Clutter.Timeline parent, string marker_name, Clutter.Timeline timeline);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public bool get_loop ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public unowned Clutter.Timeline get_timeline (ulong id_);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public bool is_playing ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public GLib.SList<weak Clutter.Timeline> list_timelines ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public void pause ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public void remove (ulong id_);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public void remove_all ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public void rewind ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public void set_loop (bool loop);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public void start ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public void stop ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public bool loop { get; set; }
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public virtual signal void completed ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public virtual signal void paused ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public virtual signal void started ();
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public virtual signal void timeline_completed (Clutter.Timeline timeline);
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public virtual signal void timeline_started (Clutter.Timeline timeline);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_script_get_type ()")]
	[Version (since = "0.6")]
	public class Script : GLib.Object {
		[CCode (has_construct_function = false)]
		public Script ();
		[Version (since = "0.8")]
		public void add_search_paths ([CCode (array_length_cname = "n_paths", array_length_pos = 1.1, array_length_type = "gsize")] string[] paths);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.8")]
		public void add_states (string? name, Clutter.State state);
		public void connect_signals (void* user_data);
		public void connect_signals_full (Clutter.ScriptConnectFunc func);
		public void ensure_objects ();
		public unowned GLib.Object get_object (string name);
		public int get_objects (...);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.8")]
		public unowned Clutter.State get_states (string? name);
		[Version (since = "1.10")]
		public unowned string get_translation_domain ();
		public virtual GLib.Type get_type_from_name (string type_name);
		[Version (since = "0.8")]
		public GLib.List<weak GLib.Object> list_objects ();
		public uint load_from_data (string data, ssize_t length) throws GLib.Error;
		public uint load_from_file (string filename) throws GLib.Error;
		[Version (since = "1.10")]
		public uint load_from_resource (string resource_path) throws GLib.Error;
		[Version (since = "0.8")]
		public string lookup_filename (string filename);
		[Version (since = "1.10")]
		public void set_translation_domain (string? domain);
		public void unmerge_objects (uint merge_id);
		[NoAccessorMethod]
		public string filename { owned get; }
		[NoAccessorMethod]
		public bool filename_set { get; }
		[Version (since = "1.10")]
		public string translation_domain { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_scroll_actor_get_type ()")]
	[Version (since = "1.12")]
	public class ScrollActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		public ScrollActor ();
		public Clutter.ScrollMode get_scroll_mode ();
		public void scroll_to_point (Clutter.Point point);
		public void scroll_to_rect (Clutter.Rect rect);
		public void set_scroll_mode (Clutter.ScrollMode mode);
		public Clutter.ScrollMode scroll_mode { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "0.2")]
	public class ScrollEvent : Clutter.Event {
		public double axes;
		public weak Clutter.InputDevice device;
		public Clutter.ScrollDirection direction;
		public Clutter.ScrollFinishFlags finish_flags;
		public Clutter.EventFlags flags;
		public Clutter.ModifierType modifier_state;
		public Clutter.ScrollSource scroll_source;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
		public float x;
		public float y;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_settings_get_type ()")]
	[Version (since = "1.4")]
	public class Settings : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Settings ();
		public static unowned Clutter.Settings get_default ();
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.4")]
		public Clutter.Backend backend { construct; }
		[NoAccessorMethod]
		[Version (since = "1.8")]
		public int dnd_drag_threshold { get; set; }
		[NoAccessorMethod]
		public int double_click_distance { get; set; }
		[NoAccessorMethod]
		public int double_click_time { get; set; }
		[NoAccessorMethod]
		public int font_antialias { get; set; }
		[NoAccessorMethod]
		public int font_dpi { get; set; }
		[NoAccessorMethod]
		public string font_hint_style { owned get; set; }
		[NoAccessorMethod]
		public int font_hinting { get; set; }
		[NoAccessorMethod]
		public string font_name { owned get; set; }
		[NoAccessorMethod]
		public string font_subpixel_order { owned get; set; }
		[NoAccessorMethod]
		public uint fontconfig_timestamp { set; }
		[NoAccessorMethod]
		[Version (since = "1.8")]
		public int long_press_duration { get; set; }
		[NoAccessorMethod]
		public uint password_hint_time { get; set; }
		[NoAccessorMethod]
		public int unscaled_font_dpi { set; }
		[NoAccessorMethod]
		public int window_scaling_factor { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_shader_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
	public class Shader : GLib.Object {
		[CCode (has_construct_function = false)]
		public Shader ();
		[Version (since = "0.8")]
		public bool compile () throws GLib.Error;
		[Version (since = "1.0")]
		public unowned Cogl.Handle get_cogl_fragment_shader ();
		[Version (since = "1.0")]
		public unowned Cogl.Handle get_cogl_program ();
		[Version (since = "1.0")]
		public unowned Cogl.Handle get_cogl_vertex_shader ();
		public unowned string get_fragment_source ();
		public bool get_is_enabled ();
		public unowned string get_vertex_source ();
		[Version (since = "0.8")]
		public bool is_compiled ();
		public void release ();
		public void set_fragment_source (string data, ssize_t length);
		public void set_is_enabled (bool enabled);
		[Version (since = "1.0")]
		public void set_uniform (string name, GLib.Value value);
		public void set_vertex_source (string data, ssize_t length);
		[NoAccessorMethod]
		[Version (since = "0.8")]
		public bool compiled { get; }
		[NoAccessorMethod]
		public bool enabled { get; set; }
		[NoAccessorMethod]
		public string fragment_source { owned get; set; }
		[NoAccessorMethod]
		public string vertex_source { owned get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_shader_effect_get_type ()")]
	[Version (since = "1.4")]
	public class ShaderEffect : Clutter.OffscreenEffect {
		[CCode (has_construct_function = false, type = "ClutterEffect*")]
		[Version (since = "1.8")]
		public ShaderEffect (Clutter.ShaderType shader_type);
		public unowned Cogl.Handle get_program ();
		public unowned Cogl.Handle get_shader ();
		[NoWrapper]
		public virtual string get_static_shader_source ();
		public bool set_shader_source (string source);
		public void set_uniform_value (string name, GLib.Value value);
		[NoAccessorMethod]
		public Clutter.ShaderType shader_type { construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_shader_float_get_type ()")]
	public class ShaderFloat {
		[CCode (has_construct_function = false)]
		protected ShaderFloat ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_shader_int_get_type ()")]
	public class ShaderInt {
		[CCode (has_construct_function = false)]
		protected ShaderInt ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_shader_matrix_get_type ()")]
	public class ShaderMatrix {
		[CCode (has_construct_function = false)]
		protected ShaderMatrix ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_snap_constraint_get_type ()")]
	[Version (since = "1.6")]
	public class SnapConstraint : Clutter.Constraint {
		[CCode (has_construct_function = false, type = "ClutterConstraint*")]
		public SnapConstraint (Clutter.Actor? source, Clutter.SnapEdge from_edge, Clutter.SnapEdge to_edge, float offset);
		public void get_edges (out Clutter.SnapEdge from_edge, out Clutter.SnapEdge to_edge);
		public float get_offset ();
		public unowned Clutter.Actor get_source ();
		public void set_edges (Clutter.SnapEdge from_edge, Clutter.SnapEdge to_edge);
		public void set_offset (float offset);
		public void set_source (Clutter.Actor? source);
		[NoAccessorMethod]
		public Clutter.SnapEdge from_edge { get; set construct; }
		public float offset { get; set construct; }
		public Clutter.Actor source { get; set construct; }
		[NoAccessorMethod]
		public Clutter.SnapEdge to_edge { get; set construct; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_stage_get_type ()")]
	[Version (since = "0.2")]
	public class Stage : Clutter.Group, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (since = "0.8")]
		public Stage ();
		[CCode (cname = "clutter_stage_event")]
		[Version (since = "0.4")]
		public bool emit_event (Clutter.Event event);
		[Version (since = "0.8")]
		public void ensure_current ();
		[Version (since = "1.0")]
		public void ensure_redraw ();
		[Version (since = "1.0")]
		public void ensure_viewport ();
		[Version (since = "1.6")]
		public bool get_accept_focus ();
		public unowned Clutter.Actor get_actor_at_pos (Clutter.PickMode pick_mode, int x, int y);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public Clutter.Color get_color ();
		[Version (deprecated = true, deprecated_since = "1.10")]
		public static unowned Clutter.Stage get_default ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
		public Clutter.Fog get_fog ();
		[Version (since = "1.0")]
		public bool get_fullscreen ();
		[Version (since = "0.6")]
		public unowned Clutter.Actor get_key_focus ();
		[Version (since = "1.2")]
		public void get_minimum_size (out uint width, out uint height);
		[Version (since = "1.8")]
		public bool get_motion_events_enabled ();
		[Version (since = "1.4")]
		public bool get_no_clear_hint ();
		public Clutter.Perspective get_perspective ();
		[Version (since = "1.8")]
		public Cairo.RectangleInt get_redraw_clip_bounds ();
		[Version (since = "1.0")]
		public bool get_throttle_motion_events ();
		[Version (since = "0.4")]
		public unowned string get_title ();
		[Version (since = "1.2")]
		public bool get_use_alpha ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
		public bool get_use_fog ();
		[Version (since = "0.4")]
		public bool get_user_resizable ();
		[Version (since = "0.4")]
		public void hide_cursor ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
		public bool is_default ();
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
		public void queue_redraw ();
		[CCode (array_length = false)]
		public uint8[] read_pixels (int x, int y, int width = -1, int height = -1);
		[CCode (cname = "clutter_redraw")]
		public void redraw ();
		[Version (since = "1.6")]
		public void set_accept_focus (bool accept_focus);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void set_color (Clutter.Color color);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
		public void set_fog (Clutter.Fog fog);
		[Version (since = "1.0")]
		public void set_fullscreen (bool fullscreen);
		[Version (since = "0.6")]
		public void set_key_focus (Clutter.Actor? actor);
		[Version (since = "1.2")]
		public void set_minimum_size (uint width, uint height);
		[Version (since = "1.8")]
		public void set_motion_events_enabled (bool enabled);
		[Version (since = "1.4")]
		public void set_no_clear_hint (bool no_clear);
		public void set_perspective (Clutter.Perspective perspective);
		[Version (since = "1.0")]
		public void set_throttle_motion_events (bool throttle);
		[Version (since = "0.4")]
		public void set_title (string title);
		[Version (since = "1.2")]
		public void set_use_alpha (bool use_alpha);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
		public void set_use_fog (bool fog);
		[Version (since = "0.4")]
		public void set_user_resizable (bool resizable);
		public void show_cursor ();
		[Version (since = "1.6")]
		public bool accept_focus { get; set; }
		[Version (deprecated = true, deprecated_since = "1.10")]
		public Clutter.Color color { get; set; }
		[NoAccessorMethod]
		public bool cursor_visible { get; set; }
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
		public Clutter.Fog fog { get; set; }
		[NoAccessorMethod]
		public bool fullscreen_set { get; }
		[Version (since = "1.2")]
		public Clutter.Actor key_focus { get; set; }
		[Version (since = "1.4")]
		public bool no_clear_hint { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.10")]
		public bool offscreen { get; set; }
		[Version (since = "0.8")]
		public Clutter.Perspective perspective { get; set; }
		[Version (since = "0.4")]
		public string title { get; set; }
		[Version (since = "1.2")]
		public bool use_alpha { get; set; }
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
		public bool use_fog { get; set; }
		[Version (since = "0.4")]
		public bool user_resizable { get; set; }
		[Version (since = "0.6")]
		public virtual signal void activate ();
		[Version (since = "1.20")]
		public signal void after_paint ();
		[Version (since = "0.6")]
		public virtual signal void deactivate ();
		[Version (since = "1.2")]
		public virtual signal bool delete_event (Clutter.Event event);
		[Version (since = "0.6")]
		public virtual signal void fullscreen ();
		[Version (since = "0.6")]
		public virtual signal void unfullscreen ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_stage_manager_get_type ()")]
	[Version (since = "1.0")]
	public class StageManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected StageManager ();
		[Version (since = "0.8")]
		public static unowned Clutter.StageManager get_default ();
		[Version (since = "0.8")]
		public unowned Clutter.Stage get_default_stage ();
		[Version (since = "0.8")]
		public GLib.SList<weak Clutter.Stage> list_stages ();
		public unowned GLib.SList<Clutter.Stage> peek_stages ();
		[Version (deprecated = true, deprecated_since = "1.2", since = "0.8")]
		public void set_default_stage (Clutter.Stage stage);
		[Version (since = "0.8")]
		public Clutter.Stage default_stage { get; }
		[Version (since = "0.8")]
		public virtual signal void stage_added (Clutter.Stage stage);
		[Version (since = "0.8")]
		public virtual signal void stage_removed (Clutter.Stage stage);
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "0.2")]
	public class StageStateEvent : Clutter.Event {
		public Clutter.StageState changed_mask;
		public Clutter.EventFlags flags;
		public Clutter.StageState new_state;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_state_get_type ()")]
	[Version (since = "1.4")]
	public class State : GLib.Object, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public State ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned Clutter.Animator get_animator (string source_state_name, string target_state_name);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public uint get_duration (string? source_state_name, string? target_state_name);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public GLib.List<weak Clutter.StateKey> get_keys (string? source_state_name, string? target_state_name, GLib.Object? object, string? property_name);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned string get_state ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public GLib.List<weak string> get_states ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned Clutter.Timeline get_timeline ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void remove_key (string? source_state_name, string? target_state_name, GLib.Object? object, string? property_name);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_animator (string source_state_name, string target_state_name, Clutter.Animator? animator);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_duration (string? source_state_name, string? target_state_name, uint duration);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned Clutter.State set_key (string? source_state_name, string target_state_name, GLib.Object object, string property_name, uint mode, GLib.Value value, double pre_delay, double post_delay);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned Clutter.Timeline set_state (string target_state_name);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned Clutter.Timeline warp_to_state (string target_state_name);
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public uint duration { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public string state { owned get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public virtual signal void completed ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_state_key_get_type ()")]
	[Compact]
	[Version (since = "1.4")]
	public class StateKey {
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public ulong get_mode ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned GLib.Object get_object ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public double get_post_delay ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public double get_pre_delay ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned string get_property_name ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public GLib.Type get_property_type ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned string get_source_state_name ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public unowned string get_target_state_name ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public bool get_value (GLib.Value value);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_swipe_action_get_type ()")]
	[Version (since = "1.8")]
	public class SwipeAction : Clutter.GestureAction {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public SwipeAction ();
		[Version (deprecated = true, deprecated_since = "1.14", since = "1.8")]
		public virtual signal void swept (Clutter.Actor actor, Clutter.SwipeDirection direction);
		[Version (since = "1.14")]
		public virtual signal bool swipe (Clutter.Actor actor, Clutter.SwipeDirection direction);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_table_layout_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.18", since = "1.4")]
	public class TableLayout : Clutter.LayoutManager {
		[CCode (has_construct_function = false, type = "ClutterLayoutManager*")]
		public TableLayout ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void get_alignment (Clutter.Actor actor, out Clutter.TableAlignment x_align, out Clutter.TableAlignment y_align);
		public int get_column_count ();
		public uint get_column_spacing ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public uint get_easing_duration ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public ulong get_easing_mode ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void get_expand (Clutter.Actor actor, out bool x_expand, out bool y_expand);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void get_fill (Clutter.Actor actor, out bool x_fill, out bool y_fill);
		public int get_row_count ();
		public uint get_row_spacing ();
		public void get_span (Clutter.Actor actor, out int column_span, out int row_span);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public bool get_use_animations ();
		public void pack (Clutter.Actor actor, int column, int row);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_alignment (Clutter.Actor actor, Clutter.TableAlignment x_align, Clutter.TableAlignment y_align);
		public void set_column_spacing (uint spacing);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_easing_duration (uint msecs);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_easing_mode (ulong mode);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_expand (Clutter.Actor actor, bool x_expand, bool y_expand);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_fill (Clutter.Actor actor, bool x_fill, bool y_fill);
		public void set_row_spacing (uint spacing);
		public void set_span (Clutter.Actor actor, int column_span, int row_span);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_use_animations (bool animate);
		public uint column_spacing { get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public uint easing_duration { get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public ulong easing_mode { get; set; }
		public uint row_spacing { get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public bool use_animations { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_tap_action_get_type ()")]
	[Version (since = "1.14")]
	public class TapAction : Clutter.GestureAction {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public TapAction ();
		public virtual signal void tap (Clutter.Actor actor);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_text_get_type ()")]
	[Version (since = "1.0")]
	public class Text : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		public Text ();
		[Version (since = "1.10")]
		public int coords_to_position (float x, float y);
		public void delete_chars (uint n_chars);
		public bool delete_selection ();
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		public Text.full (string font_name, string text, Clutter.Color color);
		public bool get_activatable ();
		public unowned Pango.AttrList get_attributes ();
		[Version (since = "1.10")]
		public unowned Clutter.TextBuffer get_buffer ();
		public string get_chars (ssize_t start_pos, ssize_t end_pos);
		public Clutter.Color get_color ();
		public Clutter.Color get_cursor_color ();
		public int get_cursor_position ();
		[Version (since = "1.16")]
		public Clutter.Rect get_cursor_rect ();
		public uint get_cursor_size ();
		public bool get_cursor_visible ();
		public bool get_editable ();
		public Pango.EllipsizeMode get_ellipsize ();
		[Version (since = "1.2")]
		public Pango.FontDescription get_font_description ();
		public unowned string get_font_name ();
		[Version (since = "0.6")]
		public bool get_justify ();
		public unowned Pango.Layout get_layout ();
		[Version (since = "1.8")]
		public void get_layout_offsets (out int x, out int y);
		public Pango.Alignment get_line_alignment ();
		public bool get_line_wrap ();
		public Pango.WrapMode get_line_wrap_mode ();
		public int get_max_length ();
		public unichar get_password_char ();
		public bool get_selectable ();
		[Version (since = "1.8")]
		public Clutter.Color get_selected_text_color ();
		public string get_selection ();
		public int get_selection_bound ();
		public Clutter.Color get_selection_color ();
		public bool get_single_line_mode ();
		public unowned string get_text ();
		public bool get_use_markup ();
		public void insert_text (string text, ssize_t position);
		public void insert_unichar (unichar wc);
		public bool position_to_coords (int position, out float x, out float y, out float line_height = null);
		public void set_activatable (bool activatable);
		public void set_attributes (Pango.AttrList? attrs);
		[Version (since = "1.10")]
		public void set_buffer (Clutter.TextBuffer buffer);
		public void set_color (Clutter.Color color);
		public void set_cursor_color (Clutter.Color? color);
		public void set_cursor_position (int position);
		public void set_cursor_size (int size);
		public void set_cursor_visible (bool cursor_visible);
		public void set_editable (bool editable);
		public void set_ellipsize (Pango.EllipsizeMode mode);
		[Version (since = "1.2")]
		public void set_font_description (Pango.FontDescription font_desc);
		public void set_font_name (string? font_name);
		public void set_justify (bool justify);
		public void set_line_alignment (Pango.Alignment alignment);
		public void set_line_wrap (bool line_wrap);
		public void set_line_wrap_mode (Pango.WrapMode wrap_mode);
		public void set_markup (string? markup);
		public void set_max_length (int max);
		public void set_password_char (unichar wc);
		[Version (since = "1.2")]
		public void set_preedit_string (string? preedit_str, Pango.AttrList? preedit_attrs, uint cursor_pos);
		public void set_selectable (bool selectable);
		[Version (since = "1.8")]
		public void set_selected_text_color (Clutter.Color? color);
		public void set_selection (ssize_t start_pos, ssize_t end_pos);
		public void set_selection_bound (int selection_bound);
		public void set_selection_color (Clutter.Color? color);
		public void set_single_line_mode (bool single_line);
		public void set_text (string? text);
		public void set_use_markup (bool setting);
		[CCode (cname = "clutter_text_activate")]
		public bool try_activate ();
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (since = "1.10")]
		public Text.with_buffer (Clutter.TextBuffer buffer);
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		public Text.with_text (string? font_name, string text);
		public bool activatable { get; set; }
		public Pango.AttrList attributes { get; set; }
		[Version (since = "1.8")]
		public Clutter.TextBuffer buffer { get; set; }
		public Clutter.Color color { get; set; }
		public Clutter.Color cursor_color { get; set; }
		[NoAccessorMethod]
		public bool cursor_color_set { get; }
		[Version (since = "1.12")]
		public int cursor_position { get; set; }
		public int cursor_size { get; set; }
		public bool cursor_visible { get; set; }
		public bool editable { get; set; }
		public Pango.EllipsizeMode ellipsize { get; set; }
		[Version (since = "1.2")]
		public Pango.FontDescription font_description { owned get; set; }
		public string font_name { get; set; }
		public bool justify { get; set; }
		public Pango.Alignment line_alignment { get; set; }
		public bool line_wrap { get; set; }
		public Pango.WrapMode line_wrap_mode { get; set; }
		public int max_length { get; set; }
		public uint password_char { get; set; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public int position { get; set; }
		public bool selectable { get; set; }
		[Version (since = "1.8")]
		public Clutter.Color selected_text_color { get; set; }
		[NoAccessorMethod]
		[Version (since = "1.8")]
		public bool selected_text_color_set { get; }
		public int selection_bound { get; set; }
		public Clutter.Color selection_color { get; set; }
		[NoAccessorMethod]
		public bool selection_color_set { get; }
		public bool single_line_mode { get; set; }
		public string text { get; set; }
		public bool use_markup { get; set; }
		public virtual signal void activate ();
		[Version (since = "1.16")]
		public virtual signal void cursor_changed ();
		[Version (deprecated = true, deprecated_since = "1.16", since = "1.0")]
		public virtual signal Clutter.Geometry cursor_event ();
		[HasEmitter]
		[Version (since = "1.2")]
		public signal void delete_text (int start_pos, int end_pos);
		public virtual signal void text_changed ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_text_buffer_get_type ()")]
	[Version (since = "1.10")]
	public class TextBuffer : GLib.Object {
		[CCode (has_construct_function = false)]
		public TextBuffer ();
		public virtual uint delete_text (uint position, uint n_chars);
		public void emit_deleted_text (uint position, uint n_chars);
		public void emit_inserted_text (uint position, string chars, uint n_chars);
		public size_t get_bytes ();
		public virtual uint get_length ();
		public int get_max_length ();
		public unowned string get_text ();
		[CCode (vfunc_name = "get_text")]
		[NoWrapper]
		public virtual unowned string get_text_with_length (size_t n_bytes);
		public virtual uint insert_text (uint position, string chars, uint n_chars);
		public void set_max_length (int max_length);
		public void set_text (string chars, int n_chars);
		[CCode (has_construct_function = false)]
		public TextBuffer.with_text (string? text, ssize_t text_len);
		public uint length { get; }
		public int max_length { get; set; }
		public string text { get; }
		public virtual signal void deleted_text (uint position, uint n_chars);
		public virtual signal void inserted_text (uint position, string chars, uint n_chars);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_text_node_get_type ()")]
	[Version (since = "1.10")]
	public class TextNode : Clutter.PaintNode {
		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
		public TextNode (Pango.Layout? layout, Clutter.Color? color);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_texture_get_type ()")]
	[Version (since = "0.2")]
	public class Texture : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (deprecated = true, deprecated_since = "1.12")]
		public Texture ();
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
		public Texture.from_actor (Clutter.Actor actor);
		[CCode (has_construct_function = false, type = "ClutterActor*")]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public Texture.from_file (string filename) throws Clutter.TextureError;
		[Version (deprecated = true, deprecated_since = "1.12")]
		public void get_base_size (out int width, out int height);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public unowned Cogl.Handle get_cogl_material ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public unowned Cogl.Handle get_cogl_texture ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public Clutter.TextureQuality get_filter_quality ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public bool get_keep_aspect_ratio ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public bool get_load_async ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public bool get_load_data_async ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public int get_max_tile_waste ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public bool get_pick_with_alpha ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public Cogl.PixelFormat get_pixel_format ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void get_repeat (out bool repeat_x, out bool repeat_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public bool get_sync_size ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.6")]
		public bool set_area_from_rgb_data ([CCode (array_length = false)] uint8[] data, bool has_alpha, int x, int y, int width, int height, int rowstride, int bpp, Clutter.TextureFlags flags) throws GLib.Error;
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public void set_cogl_material (Cogl.Handle cogl_material);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public void set_cogl_texture (Cogl.Handle cogl_tex);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public void set_filter_quality (Clutter.TextureQuality filter_quality);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.8")]
		public bool set_from_file (string filename) throws GLib.Error;
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.4")]
		public bool set_from_rgb_data ([CCode (array_length = false)] uint8[] data, bool has_alpha, int width, int height, int rowstride, int bpp, Clutter.TextureFlags flags) throws GLib.Error;
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public bool set_from_yuv_data ([CCode (array_length = false)] uint8[] data, int width, int height, Clutter.TextureFlags flags) throws GLib.Error;
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_keep_aspect_ratio (bool keep_aspect);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_load_async (bool load_async);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_load_data_async (bool load_async);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.4")]
		public void set_pick_with_alpha (bool pick_with_alpha);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_repeat (bool repeat_x, bool repeat_y);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_sync_size (bool sync_size);
		public Cogl.Material cogl_material { get; set; }
		public Cogl.Texture cogl_texture { get; set; }
		[NoAccessorMethod]
		public bool disable_slicing { get; construct; }
		[NoAccessorMethod]
		[Version (deprecated = true, deprecated_since = "1.12")]
		public string filename { owned get; set; }
		public Clutter.TextureQuality filter_quality { get; set construct; }
		public bool keep_aspect_ratio { get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public bool load_async { set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public bool load_data_async { set; }
		public bool pick_with_alpha { get; set; }
		public Cogl.PixelFormat pixel_format { get; }
		[NoAccessorMethod]
		public bool repeat_x { get; set; }
		[NoAccessorMethod]
		public bool repeat_y { get; set; }
		public bool sync_size { get; set; }
		[NoAccessorMethod]
		public int tile_waste { get; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public virtual signal void load_finished (GLib.Error error);
		[Version (deprecated = true, deprecated_since = "1.12")]
		public virtual signal void pixbuf_change ();
		[Version (deprecated = true, deprecated_since = "1.12")]
		public virtual signal void size_change (int width, int height);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_texture_node_get_type ()")]
	[Version (since = "1.10")]
	public class TextureNode : Clutter.PipelineNode {
		[CCode (has_construct_function = false, type = "ClutterPaintNode*")]
		public TextureNode (Cogl.Texture texture, Clutter.Color? color, Clutter.ScalingFilter min_filter, Clutter.ScalingFilter mag_filter);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_timeline_get_type ()")]
	[Version (since = "0.2")]
	public class Timeline : GLib.Object, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		[Version (since = "0.6")]
		public Timeline (uint msecs);
		[Version (since = "1.14")]
		public void add_marker (string marker_name, double progress);
		[Version (since = "0.8")]
		public void add_marker_at_time (string marker_name, uint msecs);
		public void advance (uint msecs);
		[Version (since = "0.8")]
		public void advance_to_marker (string marker_name);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public Clutter.Timeline clone ();
		[Version (since = "1.6")]
		public bool get_auto_reverse ();
		[Version (since = "1.12")]
		public bool get_cubic_bezier_progress (out Clutter.Point c_1, out Clutter.Point c_2);
		[Version (since = "1.10")]
		public int get_current_repeat ();
		[Version (since = "0.4")]
		public uint get_delay ();
		[Version (since = "0.6")]
		public uint get_delta ();
		[Version (since = "0.6")]
		public Clutter.TimelineDirection get_direction ();
		[Version (since = "0.6")]
		public uint get_duration ();
		[Version (since = "1.10")]
		public int64 get_duration_hint ();
		public uint get_elapsed_time ();
		[Version (deprecated = true, deprecated_since = "1.10")]
		public bool get_loop ();
		[Version (since = "0.6")]
		public double get_progress ();
		[Version (since = "1.10")]
		public Clutter.AnimationMode get_progress_mode ();
		[Version (since = "1.10")]
		public int get_repeat_count ();
		[Version (since = "1.12")]
		public bool get_step_progress (out int n_steps, out Clutter.StepMode step_mode);
		[Version (since = "0.8")]
		public bool has_marker (string marker_name);
		public bool is_playing ();
		[CCode (array_length = true, array_length_pos = 1.1, array_length_type = "gsize", array_null_terminated = true)]
		[Version (since = "0.8")]
		public string[] list_markers (int msecs);
		public void pause ();
		[Version (since = "0.8")]
		public void remove_marker (string marker_name);
		public void rewind ();
		[Version (since = "1.6")]
		public void set_auto_reverse (bool reverse);
		[Version (since = "1.12")]
		public void set_cubic_bezier_progress (Clutter.Point c_1, Clutter.Point c_2);
		[Version (since = "0.4")]
		public void set_delay (uint msecs);
		[Version (since = "0.6")]
		public void set_direction (Clutter.TimelineDirection direction);
		[Version (since = "0.6")]
		public void set_duration (uint msecs);
		[Version (deprecated = true, deprecated_since = "1.10")]
		public void set_loop (bool loop);
		[Version (since = "1.10")]
		public void set_progress_func (owned Clutter.TimelineProgressFunc? func);
		[Version (since = "1.10")]
		public void set_progress_mode (Clutter.AnimationMode mode);
		[Version (since = "1.10")]
		public void set_repeat_count (int count);
		[Version (since = "1.12")]
		public void set_step_progress (int n_steps, Clutter.StepMode step_mode);
		public void skip (uint msecs);
		public void start ();
		public void stop ();
		[Version (since = "1.6")]
		public bool auto_reverse { get; set; }
		[Version (since = "0.4")]
		public uint delay { get; set; }
		[Version (since = "0.6")]
		public Clutter.TimelineDirection direction { get; set; }
		[Version (since = "0.6")]
		public uint duration { get; set; }
		[Version (deprecated = true, deprecated_since = "1.10")]
		public bool loop { get; set; }
		[Version (since = "1.10")]
		public Clutter.AnimationMode progress_mode { get; set; }
		[Version (since = "1.10")]
		public int repeat_count { get; set; }
		public virtual signal void completed ();
		[Version (since = "0.8")]
		public virtual signal void marker_reached (string marker_name, int msecs);
		public virtual signal void new_frame (int msecs);
		public virtual signal void paused ();
		public virtual signal void started ();
		[Version (since = "1.12")]
		public virtual signal void stopped (bool is_finished);
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.6")]
	public class TimeoutPool {
		[CCode (has_construct_function = false)]
		public TimeoutPool (int priority);
		[Version (since = "0.4")]
		public uint add (uint fps, owned GLib.SourceFunc func);
		[Version (since = "0.4")]
		public void remove (uint id_);
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "1.10")]
	public class TouchEvent : Clutter.Event {
		public double axes;
		public weak Clutter.InputDevice device;
		public Clutter.EventFlags flags;
		public Clutter.ModifierType modifier_state;
		public weak Clutter.EventSequence sequence;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
		public float x;
		public float y;
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "1.24")]
	public class TouchpadPinchEvent : Clutter.Event {
		public float angle_delta;
		public float dx;
		public float dy;
		public Clutter.EventFlags flags;
		public Clutter.TouchpadGesturePhase phase;
		public float scale;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
		public float x;
		public float y;
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Compact]
	[Version (since = "1.24")]
	public class TouchpadSwipeEvent : Clutter.Event {
		public float dx;
		public float dy;
		public Clutter.EventFlags flags;
		public uint n_fingers;
		public Clutter.TouchpadGesturePhase phase;
		public weak Clutter.Actor source;
		public weak Clutter.Stage stage;
		public uint32 time;
		public Clutter.EventType type;
		public float x;
		public float y;
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_transition_get_type ()")]
	[Version (since = "1.10")]
	public abstract class Transition : Clutter.Timeline, Clutter.Scriptable {
		[CCode (has_construct_function = false)]
		protected Transition ();
		[NoWrapper]
		public virtual void attached (Clutter.Animatable animatable);
		[NoWrapper]
		public virtual void compute_value (Clutter.Animatable animatable, Clutter.Interval interval, double progress);
		[NoWrapper]
		public virtual void detached (Clutter.Animatable animatable);
		public unowned Clutter.Animatable get_animatable ();
		public unowned Clutter.Interval get_interval ();
		public bool get_remove_on_complete ();
		public void set_animatable (Clutter.Animatable? animatable);
		[Version (since = "1.12")]
		public void set_from_value (GLib.Value value);
		public void set_interval (Clutter.Interval? interval);
		public void set_remove_on_complete (bool remove_complete);
		[Version (since = "1.12")]
		public void set_to_value (GLib.Value value);
		public Clutter.Animatable animatable { get; set; }
		public Clutter.Interval interval { get; set; }
		public bool remove_on_complete { get; set; }
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_transition_group_get_type ()")]
	[Version (since = "1.12")]
	public class TransitionGroup : Clutter.Transition, Clutter.Scriptable {
		[CCode (has_construct_function = false, type = "ClutterTransition*")]
		public TransitionGroup ();
		public void add_transition (Clutter.Transition transition);
		public void remove_all ();
		public void remove_transition (Clutter.Transition transition);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_zoom_action_get_type ()")]
	[Version (since = "1.12")]
	public class ZoomAction : Clutter.GestureAction {
		[CCode (has_construct_function = false, type = "ClutterAction*")]
		public ZoomAction ();
		public Clutter.Point get_focal_point ();
		public Clutter.Point get_transformed_focal_point ();
		public Clutter.ZoomAxis get_zoom_axis ();
		public void set_zoom_axis (Clutter.ZoomAxis axis);
		public Clutter.ZoomAxis zoom_axis { get; set; }
		public virtual signal bool zoom (Clutter.Actor actor, Clutter.Point focal_point, double factor);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_animatable_get_type ()")]
	[Version (since = "1.0")]
	public interface Animatable : GLib.Object {
		[Version (deprecated = true, deprecated_since = "1.8", since = "1.0")]
		public abstract bool animate_property (Clutter.Animation animation, string property_name, GLib.Value initial_value, GLib.Value final_value, double progress, GLib.Value value);
		[Version (since = "1.4")]
		public abstract unowned GLib.ParamSpec find_property (string property_name);
		[Version (since = "1.4")]
		public abstract void get_initial_state (string property_name, GLib.Value value);
		[Version (since = "1.8")]
		public abstract bool interpolate_value (string property_name, Clutter.Interval interval, double progress, out GLib.Value value);
		[Version (since = "1.4")]
		public abstract void set_final_state (string property_name, GLib.Value value);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_container_get_type ()")]
	[Version (since = "0.4")]
	public interface Container : GLib.Object {
		public void add (params Clutter.Actor[] actors);
		[CCode (vfunc_name = "add")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public abstract void add_actor (Clutter.Actor actor);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public void add_valist (Clutter.Actor first_actor, va_list var_args);
		[Version (since = "0.8")]
		public void child_get (Clutter.Actor actor, ...);
		[Version (since = "0.8")]
		public void child_get_property (Clutter.Actor child, string property, GLib.Value value);
		[Version (since = "0.8")]
		public void child_set (Clutter.Actor actor, ...);
		[Version (since = "0.8")]
		public void child_set_property (Clutter.Actor child, string property, GLib.Value value);
		[Version (since = "0.8")]
		public static unowned GLib.ParamSpec class_find_child_property (GLib.ObjectClass klass, string property_name);
		[CCode (array_length_pos = 1.1, array_length_type = "guint")]
		[Version (since = "0.8")]
		public static GLib.ParamSpec[] class_list_child_properties (GLib.ObjectClass klass);
		[Version (since = "1.2")]
		public virtual void create_child_meta (Clutter.Actor actor);
		[Version (since = "1.2")]
		public virtual void destroy_child_meta (Clutter.Actor actor);
		[Version (since = "0.6")]
		public unowned Clutter.Actor find_child_by_name (string child_name);
		[CCode (cname = "clutter_container_class_find_child_property")]
		public class unowned GLib.ParamSpec find_child_property (string property_name);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public abstract void @foreach (Clutter.Callback callback);
		[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
		public virtual void foreach_with_internals (Clutter.Callback callback);
		[Version (since = "0.8")]
		public virtual unowned Clutter.ChildMeta get_child_meta (Clutter.Actor actor);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public GLib.List<weak Clutter.Actor> get_children ();
		[CCode (cname = "clutter_container_class_list_child_properties")]
		public class unowned GLib.ParamSpec[] list_child_properties ();
		[CCode (vfunc_name = "lower")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
		public virtual void lower_child (Clutter.Actor actor, Clutter.Actor? sibling = null);
		[CCode (vfunc_name = "raise")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
		public virtual void raise_child (Clutter.Actor actor, Clutter.Actor? sibling = null);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public void remove (...);
		[CCode (vfunc_name = "remove")]
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public abstract void remove_actor (Clutter.Actor actor);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
		public void remove_valist (Clutter.Actor first_actor, va_list var_args);
		[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
		public abstract void sort_depth_order ();
		public virtual signal void actor_added (Clutter.Actor actor);
		public virtual signal void actor_removed (Clutter.Actor actor);
		[HasEmitter]
		[Version (since = "0.8")]
		public virtual signal void child_notify (Clutter.Actor child, GLib.ParamSpec pspec);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_content_get_type ()")]
	[Version (since = "1.10")]
	public interface Content : GLib.Object {
		public abstract bool get_preferred_size (out float width, out float height);
		public abstract void invalidate ();
		[NoWrapper]
		public abstract void paint_content (Clutter.Actor actor, Clutter.PaintNode node);
		public virtual signal void attached (Clutter.Actor actor);
		public virtual signal void detached (Clutter.Actor actor);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_media_get_type ()")]
	[Version (since = "0.2")]
	public interface Media : GLib.Object {
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public double get_audio_volume ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public double get_buffer_fill ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public bool get_can_seek ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public double get_duration ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public bool get_playing ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public double get_progress ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public string get_subtitle_font_name ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public string get_subtitle_uri ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public string get_uri ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_audio_volume (double volume);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public void set_filename (string filename);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public void set_playing (bool playing);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public void set_progress (double progress);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_subtitle_font_name (string font_name);
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public void set_subtitle_uri (string uri);
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public void set_uri (string uri);
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public abstract double audio_volume { get; set; }
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public abstract double buffer_fill { get; }
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public abstract bool can_seek { get; }
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public abstract double duration { get; }
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public abstract bool playing { get; set; }
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.0")]
		public abstract double progress { get; set; }
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public abstract string subtitle_font_name { owned get; set; }
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "1.2")]
		public abstract string subtitle_uri { owned get; set; }
		[ConcreteAccessor]
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public abstract string uri { owned get; set; }
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public virtual signal void eos ();
		[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
		public virtual signal void error (GLib.Error error);
	}
	[CCode (cheader_filename = "clutter/clutter.h", type_id = "clutter_scriptable_get_type ()")]
	[Version (since = "0.6")]
	public interface Scriptable : GLib.Object {
		public abstract unowned string get_id ();
		public abstract bool parse_custom_node (Clutter.Script script, GLib.Value value, string name, Json.Node node);
		public abstract void set_custom_property (Clutter.Script script, string name, GLib.Value value);
		public abstract void set_id (string id_);
	}
	[CCode (cheader_filename = "clutter/clutter.h")]
	public interface StageWindow : GLib.Object {
		[NoWrapper]
		public abstract void add_redraw_clip (Clutter.Geometry stage_rectangle);
		[NoWrapper]
		public abstract void get_geometry (out Clutter.Geometry geometry);
		[NoWrapper]
		public abstract int get_pending_swaps ();
		[NoWrapper]
		public abstract unowned Clutter.Actor get_wrapper ();
		[NoWrapper]
		public abstract bool has_redraw_clips ();
		[NoWrapper]
		public abstract void hide ();
		[NoWrapper]
		public abstract bool ignoring_redraw_clips ();
		[NoWrapper]
		public abstract bool realize ();
		[NoWrapper]
		public abstract void resize (int width, int height);
		[NoWrapper]
		public abstract void set_cursor_visible (bool cursor_visible);
		[NoWrapper]
		public abstract void set_fullscreen (bool is_fullscreen);
		[NoWrapper]
		public abstract void set_title (string title);
		[NoWrapper]
		public abstract void set_user_resizable (bool is_resizable);
		[NoWrapper]
		public abstract void show (bool do_raise);
		[NoWrapper]
		public abstract void unrealize ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_actor_box_get_type ()")]
	public struct ActorBox {
		public float x1;
		public float y1;
		public float x2;
		public float y2;
		[Version (since = "1.12")]
		public static Clutter.ActorBox? alloc ();
		[Version (since = "1.2")]
		public static void clamp_to_pixel (ref Clutter.ActorBox box);
		[Version (since = "1.0")]
		public bool contains (float x, float y);
		[Version (since = "1.0")]
		public Clutter.ActorBox? copy ();
		[Version (since = "1.0")]
		public bool equal (Clutter.ActorBox box_b);
		[Version (since = "1.0")]
		public void free ();
		[CCode (cname = "clutter_actor_box_from_vertices")]
		public ActorBox.from_vertices ([CCode (array_length = false)] Clutter.Vertex verts[4]);
		[Version (since = "1.0")]
		public float get_area ();
		[Version (since = "1.0")]
		public float get_height ();
		[Version (since = "1.0")]
		public void get_origin (out float x, out float y);
		[Version (since = "1.0")]
		public void get_size (out float width, out float height);
		[Version (since = "1.0")]
		public float get_width ();
		[Version (since = "1.0")]
		public float get_x ();
		[Version (since = "1.0")]
		public float get_y ();
		[Version (since = "1.10")]
		public unowned Clutter.ActorBox? init (float x_1, float y_1, float x_2, float y_2);
		[Version (since = "1.10")]
		public void init_rect (float x, float y, float width, float height);
		[Version (since = "1.2")]
		public Clutter.ActorBox interpolate (Clutter.ActorBox final, double progress);
		[Version (since = "1.6")]
		public void set_origin (float x, float y);
		[Version (since = "1.6")]
		public void set_size (float width, float height);
		[Version (since = "1.4")]
		public Clutter.ActorBox union (Clutter.ActorBox b);
	}
	[CCode (cheader_filename = "clutter/clutter.h", has_type_id = false)]
	[Version (since = "1.10")]
	public struct ActorIter {
		public void destroy ();
		public void init (Clutter.Actor root);
		[Version (since = "1.12")]
		public bool is_valid ();
		public bool next (out unowned Clutter.Actor child);
		public bool prev (out unowned Clutter.Actor child);
		public void remove ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "CLUTTER_TYPE_COLOR")]
	public struct Color {
		public uint8 red;
		public uint8 green;
		public uint8 blue;
		public uint8 alpha;
		public Clutter.Color add (Clutter.Color b);
		[Version (since = "1.12")]
		public static Clutter.Color? alloc ();
		[Version (since = "0.2")]
		public Clutter.Color? copy ();
		public Clutter.Color darken ();
		[Version (since = "0.2")]
		public bool equal (Clutter.Color v2);
		[Version (since = "0.2")]
		public void free ();
		[CCode (cname = "clutter_color_from_hls")]
		public Color.from_hls (float hue, float luminance, float saturation);
		[CCode (cname = "clutter_color_from_pixel")]
		public Color.from_pixel (uint32 pixel);
		[CCode (cname = "clutter_color_from_string")]
		public Color.from_string (string str);
		[Version (since = "1.6")]
		public static unowned Clutter.Color? get_static (Clutter.StaticColor color);
		[Version (since = "1.0")]
		public uint hash ();
		[Version (since = "1.12")]
		public unowned Clutter.Color? init (uint8 red, uint8 green, uint8 blue, uint8 alpha);
		[Version (since = "1.6")]
		public Clutter.Color interpolate (Clutter.Color final, double progress);
		public Clutter.Color lighten ();
		[CCode (cname = "clutter_color_from_string")]
		public bool parse_string (string str);
		public Clutter.Color shade (double factor);
		public Clutter.Color subtract (Clutter.Color b);
		public void to_hls (out float hue, out float luminance, out float saturation);
		public uint32 to_pixel ();
		[Version (since = "0.2")]
		public string to_string ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_fog_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
	public struct Fog {
		public float z_near;
		public float z_far;
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_geometry_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.16")]
	public struct Geometry {
		public int x;
		public int y;
		public uint width;
		public uint height;
		[Version (since = "1.4")]
		public bool intersects (Clutter.Geometry geometry1);
		[Version (since = "1.4")]
		public Clutter.Geometry union (Clutter.Geometry geometry_b);
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_knot_get_type ()")]
	[Version (since = "0.2")]
	public struct Knot {
		public int x;
		public int y;
		public Clutter.Knot? copy ();
		public bool equal (Clutter.Knot knot_b);
		public void free ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_margin_get_type ()")]
	[Version (since = "1.10")]
	public struct Margin {
		public float left;
		public float right;
		public float top;
		public float bottom;
		public Clutter.Margin? copy ();
		public void free ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_matrix_get_type ()")]
	[Version (since = "1.12")]
	public struct Matrix : Cogl.Matrix {
		public static Clutter.Matrix? alloc ();
		public void free ();
		public unowned Clutter.Matrix? init_from_array ([CCode (array_length = false)] float values[16]);
		public unowned Clutter.Matrix? init_from_matrix (Clutter.Matrix b);
		public unowned Clutter.Matrix? init_identity ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_paint_volume_get_type ()")]
	[Version (since = "1.4")]
	public struct PaintVolume {
		[Version (since = "1.6")]
		public Clutter.PaintVolume? copy ();
		[Version (since = "1.6")]
		public void free ();
		[Version (since = "1.6")]
		public float get_depth ();
		[Version (since = "1.6")]
		public float get_height ();
		[Version (since = "1.6")]
		public Clutter.Vertex get_origin ();
		[Version (since = "1.6")]
		public float get_width ();
		[Version (since = "1.6")]
		public void set_depth (float depth);
		[Version (since = "1.6")]
		public bool set_from_allocation (Clutter.Actor actor);
		[Version (since = "1.6")]
		public void set_height (float height);
		[Version (since = "1.6")]
		public void set_origin (Clutter.Vertex origin);
		[Version (since = "1.6")]
		public void set_width (float width);
		[Version (since = "1.6")]
		public void union (Clutter.PaintVolume another_pv);
		[Version (since = "1.10")]
		public void union_box (Clutter.ActorBox box);
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_path_node_get_type ()")]
	[Version (since = "1.0")]
	public struct PathNode {
		public Clutter.PathNodeType type;
		[CCode (array_length = false)]
		public weak Clutter.Knot points[3];
		public Clutter.PathNode? copy ();
		public bool equal (Clutter.PathNode node_b);
		public void free ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_perspective_get_type ()")]
	[Version (since = "0.4")]
	public struct Perspective {
		public float fovy;
		public float aspect;
		public float z_near;
		public float z_far;
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_point_get_type ()")]
	[Version (since = "1.12")]
	public struct Point {
		public float x;
		public float y;
		public static Clutter.Point? alloc ();
		public Clutter.Point? copy ();
		public float distance (Clutter.Point b, out float x_distance, out float y_distance);
		public bool equals (Clutter.Point b);
		public void free ();
		public unowned Clutter.Point? init (float x, float y);
		public static unowned Clutter.Point? zero ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_rect_get_type ()")]
	[Version (since = "1.12")]
	public struct Rect {
		public Clutter.Point origin;
		public Clutter.Size size;
		public static Clutter.Rect? alloc ();
		public void clamp_to_pixel ();
		public bool contains_point (Clutter.Point point);
		public bool contains_rect (Clutter.Rect b);
		public Clutter.Rect? copy ();
		public bool equals (Clutter.Rect b);
		public void free ();
		public Clutter.Point get_center ();
		public float get_height ();
		public float get_width ();
		public float get_x ();
		public float get_y ();
		public unowned Clutter.Rect? init (float x, float y, float width, float height);
		public void inset (float d_x, float d_y);
		public bool intersection (Clutter.Rect b, out Clutter.Rect res);
		public Clutter.Rect? normalize ();
		public void offset (float d_x, float d_y);
		public Clutter.Rect union (Clutter.Rect b);
		public static unowned Clutter.Rect? zero ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_size_get_type ()")]
	[Version (since = "1.12")]
	public struct Size {
		public float width;
		public float height;
		public static Clutter.Size? alloc ();
		public Clutter.Size? copy ();
		public bool equals (Clutter.Size b);
		public void free ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "CLUTTER_TYPE_UNITS")]
	[Version (since = "1.0")]
	public struct Units {
		public Clutter.Units? copy ();
		public void free ();
		[CCode (cname = "clutter_units_from_cm")]
		public Units.from_cm (float cm);
		[CCode (cname = "clutter_units_from_em")]
		public Units.from_em (float em);
		[CCode (cname = "clutter_units_from_em_for_font")]
		public Units.from_em_for_font (string font_name, float em);
		[CCode (cname = "clutter_units_from_mm")]
		public Units.from_mm (float mm);
		[CCode (cname = "clutter_units_from_pixels")]
		public Units.from_pixels (int px);
		[CCode (cname = "clutter_units_from_pt")]
		public Units.from_pt (float pt);
		[CCode (cname = "clutter_units_from_string")]
		public Units.from_string (string str);
		public Clutter.UnitType get_unit_type ();
		public float get_unit_value ();
		public float to_pixels ();
		public string to_string ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "clutter_vertex_get_type ()")]
	[Version (since = "0.4")]
	public struct Vertex {
		public float x;
		public float y;
		public float z;
		[Version (since = "1.12")]
		public static Clutter.Vertex? alloc ();
		[Version (since = "1.0")]
		public Clutter.Vertex? copy ();
		[Version (since = "1.0")]
		public bool equal (Clutter.Vertex vertex_b);
		[Version (since = "1.0")]
		public void free ();
		[Version (since = "1.10")]
		public unowned Clutter.Vertex? init (float x, float y, float z);
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ACTOR_ALIGN_", type_id = "clutter_actor_align_get_type ()")]
	[Version (since = "1.10")]
	public enum ActorAlign {
		FILL,
		START,
		CENTER,
		END
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ACTOR_", type_id = "clutter_actor_flags_get_type ()")]
	[Flags]
	public enum ActorFlags {
		MAPPED,
		REALIZED,
		REACTIVE,
		VISIBLE,
		NO_LAYOUT
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ALIGN_", type_id = "clutter_align_axis_get_type ()")]
	[Version (since = "1.4")]
	public enum AlignAxis {
		X_AXIS,
		Y_AXIS,
		BOTH
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_allocation_flags_get_type ()")]
	[Flags]
	[Version (since = "1.0")]
	public enum AllocationFlags {
		ALLOCATION_NONE,
		ABSOLUTE_ORIGIN_CHANGED,
		DELEGATE_LAYOUT
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_animation_mode_get_type ()")]
	[Version (since = "1.0")]
	public enum AnimationMode {
		CUSTOM_MODE,
		LINEAR,
		EASE_IN_QUAD,
		EASE_OUT_QUAD,
		EASE_IN_OUT_QUAD,
		EASE_IN_CUBIC,
		EASE_OUT_CUBIC,
		EASE_IN_OUT_CUBIC,
		EASE_IN_QUART,
		EASE_OUT_QUART,
		EASE_IN_OUT_QUART,
		EASE_IN_QUINT,
		EASE_OUT_QUINT,
		EASE_IN_OUT_QUINT,
		EASE_IN_SINE,
		EASE_OUT_SINE,
		EASE_IN_OUT_SINE,
		EASE_IN_EXPO,
		EASE_OUT_EXPO,
		EASE_IN_OUT_EXPO,
		EASE_IN_CIRC,
		EASE_OUT_CIRC,
		EASE_IN_OUT_CIRC,
		EASE_IN_ELASTIC,
		EASE_OUT_ELASTIC,
		EASE_IN_OUT_ELASTIC,
		EASE_IN_BACK,
		EASE_OUT_BACK,
		EASE_IN_OUT_BACK,
		EASE_IN_BOUNCE,
		EASE_OUT_BOUNCE,
		EASE_IN_OUT_BOUNCE,
		STEPS,
		STEP_START,
		STEP_END,
		CUBIC_BEZIER,
		EASE,
		EASE_IN,
		EASE_OUT,
		EASE_IN_OUT,
		ANIMATION_LAST
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_BIN_ALIGNMENT_", type_id = "clutter_bin_alignment_get_type ()")]
	[Version (since = "1.2")]
	public enum BinAlignment {
		[Version (deprecated = true)]
		FIXED,
		[Version (deprecated = true)]
		FILL,
		START,
		[Version (deprecated = true)]
		END,
		[Version (deprecated = true)]
		CENTER
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_BIND_", type_id = "clutter_bind_coordinate_get_type ()")]
	[Version (since = "1.4")]
	public enum BindCoordinate {
		X,
		Y,
		WIDTH,
		HEIGHT,
		POSITION,
		SIZE,
		ALL
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_BOX_ALIGNMENT_", type_id = "clutter_box_alignment_get_type ()")]
	[Version (since = "1.2")]
	public enum BoxAlignment {
		START,
		END,
		CENTER
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_CONTENT_GRAVITY_", type_id = "clutter_content_gravity_get_type ()")]
	[Version (since = "1.10")]
	public enum ContentGravity {
		TOP_LEFT,
		TOP,
		TOP_RIGHT,
		LEFT,
		CENTER,
		RIGHT,
		BOTTOM_LEFT,
		BOTTOM,
		BOTTOM_RIGHT,
		RESIZE_FILL,
		RESIZE_ASPECT
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_REPEAT_", type_id = "clutter_content_repeat_get_type ()")]
	[Flags]
	[Version (since = "1.12")]
	public enum ContentRepeat {
		NONE,
		X_AXIS,
		Y_AXIS,
		BOTH
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_DRAG_", type_id = "clutter_drag_axis_get_type ()")]
	[Version (since = "1.4")]
	public enum DragAxis {
		AXIS_NONE,
		X_AXIS,
		Y_AXIS
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_EFFECT_PAINT_ACTOR_", type_id = "clutter_effect_paint_flags_get_type ()")]
	[Flags]
	public enum EffectPaintFlags {
		[CCode (cname = "CLUTTER_EFFECT_PAINT_ACTOR_DIRTY")]
		ACTOR_DIRTY
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_EVENT_", type_id = "clutter_event_flags_get_type ()")]
	[Flags]
	[Version (since = "0.6")]
	public enum EventFlags {
		NONE,
		FLAG_SYNTHETIC
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_event_type_get_type ()")]
	[Version (since = "0.4")]
	public enum EventType {
		NOTHING,
		KEY_PRESS,
		KEY_RELEASE,
		MOTION,
		ENTER,
		LEAVE,
		BUTTON_PRESS,
		BUTTON_RELEASE,
		SCROLL,
		STAGE_STATE,
		DESTROY_NOTIFY,
		CLIENT_MESSAGE,
		DELETE,
		TOUCH_BEGIN,
		TOUCH_UPDATE,
		TOUCH_END,
		TOUCH_CANCEL,
		TOUCHPAD_PINCH,
		TOUCHPAD_SWIPE,
		EVENT_LAST
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_FEATURE_", type_id = "clutter_feature_flags_get_type ()")]
	[Flags]
	[Version (since = "0.4")]
	public enum FeatureFlags {
		TEXTURE_NPOT,
		SYNC_TO_VBLANK,
		TEXTURE_YUV,
		TEXTURE_READ_PIXELS,
		STAGE_STATIC,
		STAGE_USER_RESIZE,
		STAGE_CURSOR,
		SHADERS_GLSL,
		OFFSCREEN,
		STAGE_MULTIPLE,
		SWAP_EVENTS;
		[CCode (cname = "clutter_feature_available")]
		public bool is_available ();
		[CCode (cname = "clutter_feature_get_all")]
		public static Clutter.FeatureFlags @get ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_FLOW_", type_id = "clutter_flow_orientation_get_type ()")]
	[Version (since = "1.2")]
	public enum FlowOrientation {
		HORIZONTAL,
		VERTICAL
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_FONT_", type_id = "clutter_font_flags_get_type ()")]
	[Flags]
	[Version (deprecated = true, deprecated_since = "1.22", since = "1.0")]
	public enum FontFlags {
		MIPMAPPING,
		HINTING
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_GESTURE_TRIGGER_EDGE_", type_id = "clutter_gesture_trigger_edge_get_type ()")]
	[Version (since = "1.18")]
	public enum GestureTriggerEdge {
		NONE,
		AFTER,
		BEFORE
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_GRAVITY_", type_id = "clutter_gravity_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.22", since = "0.2")]
	public enum Gravity {
		NONE,
		NORTH,
		NORTH_EAST,
		EAST,
		SOUTH_EAST,
		SOUTH,
		SOUTH_WEST,
		WEST,
		NORTH_WEST,
		CENTER
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_GRID_POSITION_", type_id = "clutter_grid_position_get_type ()")]
	[Version (since = "1.12")]
	public enum GridPosition {
		LEFT,
		RIGHT,
		TOP,
		BOTTOM
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_INIT_", type_id = "clutter_init_error_get_type ()")]
	[Version (since = "0.2")]
	public enum InitError {
		SUCCESS,
		ERROR_UNKNOWN,
		ERROR_THREADS,
		ERROR_BACKEND,
		ERROR_INTERNAL;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_INPUT_AXIS_", type_id = "clutter_input_axis_get_type ()")]
	[Version (since = "1.6")]
	public enum InputAxis {
		IGNORE,
		X,
		Y,
		PRESSURE,
		XTILT,
		YTILT,
		WHEEL,
		DISTANCE,
		LAST
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_input_device_type_get_type ()")]
	[Version (since = "1.0")]
	public enum InputDeviceType {
		POINTER_DEVICE,
		KEYBOARD_DEVICE,
		EXTENSION_DEVICE,
		JOYSTICK_DEVICE,
		TABLET_DEVICE,
		TOUCHPAD_DEVICE,
		TOUCHSCREEN_DEVICE,
		PEN_DEVICE,
		ERASER_DEVICE,
		CURSOR_DEVICE,
		N_DEVICE_TYPES
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_INPUT_MODE_", type_id = "clutter_input_mode_get_type ()")]
	[Version (since = "1.6")]
	public enum InputMode {
		MASTER,
		SLAVE,
		FLOATING
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_INTERPOLATION_", type_id = "clutter_interpolation_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.22", since = "1.2")]
	public enum Interpolation {
		LINEAR,
		CUBIC
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_LONG_PRESS_", type_id = "clutter_long_press_state_get_type ()")]
	[Version (since = "1.8")]
	public enum LongPressState {
		QUERY,
		ACTIVATE,
		CANCEL
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_modifier_type_get_type ()")]
	[Flags]
	[Version (since = "0.4")]
	public enum ModifierType {
		SHIFT_MASK,
		LOCK_MASK,
		CONTROL_MASK,
		MOD1_MASK,
		MOD2_MASK,
		MOD3_MASK,
		MOD4_MASK,
		MOD5_MASK,
		BUTTON1_MASK,
		BUTTON2_MASK,
		BUTTON3_MASK,
		BUTTON4_MASK,
		BUTTON5_MASK,
		MODIFIER_RESERVED_13_MASK,
		MODIFIER_RESERVED_14_MASK,
		MODIFIER_RESERVED_15_MASK,
		MODIFIER_RESERVED_16_MASK,
		MODIFIER_RESERVED_17_MASK,
		MODIFIER_RESERVED_18_MASK,
		MODIFIER_RESERVED_19_MASK,
		MODIFIER_RESERVED_20_MASK,
		MODIFIER_RESERVED_21_MASK,
		MODIFIER_RESERVED_22_MASK,
		MODIFIER_RESERVED_23_MASK,
		MODIFIER_RESERVED_24_MASK,
		MODIFIER_RESERVED_25_MASK,
		SUPER_MASK,
		HYPER_MASK,
		META_MASK,
		MODIFIER_RESERVED_29_MASK,
		RELEASE_MASK,
		MODIFIER_MASK
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_OFFSCREEN_REDIRECT_", type_id = "clutter_offscreen_redirect_get_type ()")]
	[Flags]
	[Version (since = "1.8")]
	public enum OffscreenRedirect {
		AUTOMATIC_FOR_OPACITY,
		ALWAYS
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ORIENTATION_", type_id = "clutter_orientation_get_type ()")]
	[Version (since = "1.12")]
	public enum Orientation {
		HORIZONTAL,
		VERTICAL
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PAN_", type_id = "clutter_pan_axis_get_type ()")]
	[Version (since = "1.12")]
	public enum PanAxis {
		AXIS_NONE,
		X_AXIS,
		Y_AXIS,
		AXIS_AUTO
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PATH_", type_id = "clutter_path_node_type_get_type ()")]
	[Version (since = "1.0")]
	public enum PathNodeType {
		MOVE_TO,
		LINE_TO,
		CURVE_TO,
		CLOSE,
		REL_MOVE_TO,
		REL_LINE_TO,
		REL_CURVE_TO
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_PICK_", type_id = "clutter_pick_mode_get_type ()")]
	[Version (since = "1.0")]
	public enum PickMode {
		NONE,
		REACTIVE,
		ALL
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_REPAINT_FLAGS_", type_id = "clutter_repaint_flags_get_type ()")]
	[Flags]
	[Version (since = "1.10")]
	public enum RepaintFlags {
		PRE_PAINT,
		POST_PAINT,
		QUEUE_REDRAW_ON_ADD
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_REQUEST_", type_id = "clutter_request_mode_get_type ()")]
	[Version (since = "0.8")]
	public enum RequestMode {
		HEIGHT_FOR_WIDTH,
		WIDTH_FOR_HEIGHT,
		CONTENT_SIZE
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_rotate_axis_get_type ()")]
	[Version (since = "0.4")]
	public enum RotateAxis {
		X_AXIS,
		Y_AXIS,
		Z_AXIS
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ROTATE_", type_id = "clutter_rotate_direction_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.22", since = "0.4")]
	public enum RotateDirection {
		CW,
		CCW
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCALING_FILTER_", type_id = "clutter_scaling_filter_get_type ()")]
	[Version (since = "1.10")]
	public enum ScalingFilter {
		LINEAR,
		NEAREST,
		TRILINEAR
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCROLL_", type_id = "clutter_scroll_direction_get_type ()")]
	[Version (since = "0.4")]
	public enum ScrollDirection {
		UP,
		DOWN,
		LEFT,
		RIGHT,
		SMOOTH
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCROLL_FINISHED_", type_id = "clutter_scroll_finish_flags_get_type ()")]
	[Flags]
	[Version (since = "1.26")]
	public enum ScrollFinishFlags {
		NONE,
		HORIZONTAL,
		VERTICAL
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCROLL_", type_id = "clutter_scroll_mode_get_type ()")]
	[Flags]
	[Version (since = "1.12")]
	public enum ScrollMode {
		NONE,
		HORIZONTALLY,
		VERTICALLY,
		BOTH
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCROLL_SOURCE_", type_id = "clutter_scroll_source_get_type ()")]
	[Version (since = "1.26")]
	public enum ScrollSource {
		UNKNOWN,
		WHEEL,
		FINGER,
		CONTINUOUS
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_", type_id = "clutter_shader_type_get_type ()")]
	[Version (since = "1.4")]
	public enum ShaderType {
		VERTEX_SHADER,
		FRAGMENT_SHADER
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SNAP_EDGE_", type_id = "clutter_snap_edge_get_type ()")]
	[Version (since = "1.6")]
	public enum SnapEdge {
		TOP,
		RIGHT,
		BOTTOM,
		LEFT
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_STAGE_STATE_", type_id = "clutter_stage_state_get_type ()")]
	[Flags]
	[Version (since = "0.4")]
	public enum StageState {
		FULLSCREEN,
		OFFSCREEN,
		ACTIVATED
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_COLOR_", type_id = "clutter_static_color_get_type ()")]
	[Version (since = "1.6")]
	public enum StaticColor {
		WHITE,
		BLACK,
		RED,
		DARK_RED,
		GREEN,
		DARK_GREEN,
		BLUE,
		DARK_BLUE,
		CYAN,
		DARK_CYAN,
		MAGENTA,
		DARK_MAGENTA,
		YELLOW,
		DARK_YELLOW,
		GRAY,
		DARK_GRAY,
		LIGHT_GRAY,
		BUTTER,
		BUTTER_LIGHT,
		BUTTER_DARK,
		ORANGE,
		ORANGE_LIGHT,
		ORANGE_DARK,
		CHOCOLATE,
		CHOCOLATE_LIGHT,
		CHOCOLATE_DARK,
		CHAMELEON,
		CHAMELEON_LIGHT,
		CHAMELEON_DARK,
		SKY_BLUE,
		SKY_BLUE_LIGHT,
		SKY_BLUE_DARK,
		PLUM,
		PLUM_LIGHT,
		PLUM_DARK,
		SCARLET_RED,
		SCARLET_RED_LIGHT,
		SCARLET_RED_DARK,
		ALUMINIUM_1,
		ALUMINIUM_2,
		ALUMINIUM_3,
		ALUMINIUM_4,
		ALUMINIUM_5,
		ALUMINIUM_6,
		TRANSPARENT
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_STEP_MODE_", type_id = "clutter_step_mode_get_type ()")]
	[Version (since = "1.12")]
	public enum StepMode {
		START,
		END
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SWIPE_DIRECTION_", type_id = "clutter_swipe_direction_get_type ()")]
	[Flags]
	[Version (since = "1.8")]
	public enum SwipeDirection {
		UP,
		DOWN,
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TABLE_ALIGNMENT_", type_id = "clutter_table_alignment_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.22", since = "1.4")]
	public enum TableAlignment {
		START,
		CENTER,
		END
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXT_DIRECTION_", type_id = "clutter_text_direction_get_type ()")]
	[Version (since = "1.2")]
	public enum TextDirection {
		DEFAULT,
		LTR,
		RTL
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXTURE_", type_id = "clutter_texture_flags_get_type ()")]
	[Flags]
	[Version (deprecated = true, deprecated_since = "1.22", since = "0.4")]
	public enum TextureFlags {
		NONE,
		RGB_FLAG_BGR,
		RGB_FLAG_PREMULT,
		YUV_FLAG_YUV2
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXTURE_QUALITY_", type_id = "clutter_texture_quality_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.22", since = "0.8")]
	public enum TextureQuality {
		LOW,
		MEDIUM,
		HIGH
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TIMELINE_", type_id = "clutter_timeline_direction_get_type ()")]
	[Version (since = "0.6")]
	public enum TimelineDirection {
		FORWARD,
		BACKWARD
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TOUCHPAD_GESTURE_PHASE_", type_id = "clutter_touchpad_gesture_phase_get_type ()")]
	[Version (since = "1.24")]
	public enum TouchpadGesturePhase {
		BEGIN,
		UPDATE,
		END,
		CANCEL
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_UNIT_", type_id = "clutter_unit_type_get_type ()")]
	[Version (since = "1.0")]
	public enum UnitType {
		PIXEL,
		EM,
		MM,
		POINT,
		CM
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_ZOOM_", type_id = "clutter_zoom_axis_get_type ()")]
	[Version (since = "1.12")]
	public enum ZoomAxis {
		X_AXIS,
		Y_AXIS,
		BOTH
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_IMAGE_ERROR_INVALID_", type_id = "clutter_image_error_get_type ()")]
	[Version (since = "1.10")]
	public errordomain ImageError {
		DATA;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SCRIPT_ERROR_INVALID_", type_id = "clutter_script_error_get_type ()")]
	[Version (since = "0.6")]
	public errordomain ScriptError {
		TYPE_FUNCTION,
		PROPERTY,
		VALUE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_SHADER_ERROR_", type_id = "clutter_shader_error_get_type ()")]
	[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
	public errordomain ShaderError {
		NO_ASM,
		NO_GLSL,
		COMPILE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", cprefix = "CLUTTER_TEXTURE_ERROR_", type_id = "clutter_texture_error_get_type ()")]
	[Version (since = "0.4")]
	public errordomain TextureError {
		OUT_OF_MEMORY,
		NO_YUV,
		BAD_FORMAT;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
	[Version (since = "1.24")]
	public delegate Clutter.Actor ActorCreateChildFunc (GLib.Object item);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
	[Version (deprecated = true, deprecated_since = "1.12", since = "0.2")]
	public delegate double AlphaFunc (Clutter.Alpha alpha);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 2.9)]
	[Version (deprecated = true, deprecated_since = "1.6", since = "0.2")]
	public delegate void BehaviourForeachFunc (Clutter.Behaviour behaviour, Clutter.Actor actor);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 4.9)]
	[Version (since = "1.0")]
	public delegate bool BindingActionFunc (GLib.Object gobject, string action_name, uint key_val, Clutter.ModifierType modifiers);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
	public delegate void Callback (Clutter.Actor actor);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
	[Version (since = "1.18")]
	public delegate bool EventFilterFunc (Clutter.Event event);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 2.9)]
	[Version (deprecated = true, deprecated_since = "1.24", since = "0.6")]
	public delegate bool ModelFilterFunc (Clutter.Model model, Clutter.ModelIter iter);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 2.9)]
	[Version (deprecated = true, deprecated_since = "1.24", since = "0.6")]
	public delegate bool ModelForeachFunc (Clutter.Model model, Clutter.ModelIter iter);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 3.9)]
	[Version (deprecated = true, deprecated_since = "1.24", since = "0.6")]
	public delegate int ModelSortFunc (Clutter.Model model, GLib.Value a, GLib.Value b);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 1.9)]
	[Version (since = "1.0")]
	public delegate void PathCallback (Clutter.PathNode node);
	[CCode (cheader_filename = "clutter/clutter.h", has_target = false)]
	[Version (since = "1.0")]
	public delegate bool ProgressFunc (GLib.Value a, GLib.Value b, double progress, GLib.Value retval);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 6.9)]
	[Version (since = "0.6")]
	public delegate void ScriptConnectFunc (Clutter.Script script, GLib.Object object, string signal_name, string handler_name, GLib.Object connect_object, GLib.ConnectFlags flags);
	[CCode (cheader_filename = "clutter/clutter.h", instance_pos = 3.9)]
	[Version (since = "1.10")]
	public delegate double TimelineProgressFunc (Clutter.Timeline timeline, double elapsed, double total);
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_COGL")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
	public const string COGL;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_CURRENT_TIME")]
	[Version (since = "0.4")]
	public const int CURRENT_TIME;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_FLAVOUR")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
	public const string FLAVOUR;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_PATH_RELATIVE")]
	public const int PATH_RELATIVE;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_PRIORITY_REDRAW")]
	[Version (since = "0.8")]
	public const int PRIORITY_REDRAW;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_VERSION")]
	public const double VERSION;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_VERSION_HEX")]
	public const int VERSION_HEX;
	[CCode (cheader_filename = "clutter/clutter.h", cname = "CLUTTER_VERSION_S")]
	public const string VERSION_S;
	[CCode (cheader_filename = "clutter/clutter.h")]
	public static void base_init ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.12")]
	public static void cairo_clear (Cairo.Context cr);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.0")]
	public static void cairo_set_source_color (Cairo.Context cr, Clutter.Color color);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.2")]
	public static bool check_version (uint major, uint minor, uint micro);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.10")]
	public static bool check_windowing_backend (string backend_type);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
	public static void clear_glyph_cache ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.14")]
	public static void disable_accessibility ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.4")]
	public static void do_event (Clutter.Event event);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.4")]
	public static bool events_pending ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.4")]
	public static bool get_accessibility_enabled ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.2")]
	public static unowned Clutter.Event get_current_event ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.0")]
	public static uint32 get_current_event_time ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10")]
	public static bool get_debug_enabled ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.4")]
	public static unowned Clutter.Backend get_default_backend ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.6")]
	public static uint get_default_frame_rate ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.2")]
	public static Clutter.TextDirection get_default_text_direction ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
	public static Clutter.FontFlags get_font_flags ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.0")]
	public static unowned Pango.FontMap get_font_map ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.6")]
	public static unowned Clutter.Actor get_keyboard_grab ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
	public static bool get_motion_events_enabled ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.2")]
	public static GLib.OptionGroup get_option_group ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.8")]
	public static GLib.OptionGroup get_option_group_without_init ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.6")]
	public static unowned Clutter.Actor get_pointer_grab ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.6")]
	public static unowned string get_script_id (GLib.Object gobject);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "0.4")]
	public static bool get_show_fps ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10")]
	public static ulong get_timestamp ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.6")]
	public static void grab_keyboard (Clutter.Actor actor);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.6")]
	public static void grab_pointer (Clutter.Actor actor);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
	public static void grab_pointer_for_device (Clutter.Actor actor, int id_);
	[CCode (cheader_filename = "clutter/clutter.h")]
	public static Clutter.InitError init ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[]? argv);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.2")]
	public static Clutter.InitError init_with_args ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[]? argv, string? parameter_string, [CCode (array_length = false)] GLib.OptionEntry[]? entries, string? translation_domain) throws GLib.Error;
	[CCode (cheader_filename = "clutter/clutter.h")]
	public static uint32 keysym_to_unicode (uint keyval);
	[CCode (cheader_filename = "clutter/clutter.h")]
	public static void main ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	public static int main_level ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	public static void main_quit ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "0.6")]
	public static void set_default_frame_rate (uint frames_per_sec);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "1.0")]
	public static void set_font_flags (Clutter.FontFlags flags);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.8", since = "0.6")]
	public static void set_motion_events_enabled (bool enable);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.16")]
	public static void set_windowing_backend (string backend_type);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.18")]
	public static void test_add_data_full (string test_path, owned GLib.TestDataFunc test_func);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.18")]
	public static bool test_check_actor_at_point (Clutter.Actor stage, Clutter.Point point, Clutter.Actor actor, out Clutter.Actor? result);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.18")]
	public static bool test_check_color_at_point (Clutter.Actor stage, Clutter.Point point, Clutter.Color color, out Clutter.Color result);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.18")]
	public static unowned Clutter.Actor test_get_stage ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	public static void test_init (int argc, string argv);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.18")]
	public static int test_run ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.6")]
	public static void ungrab_keyboard ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "0.6")]
	public static void ungrab_pointer ();
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (deprecated = true, deprecated_since = "1.10", since = "0.8")]
	public static void ungrab_pointer_for_device (int id_);
	[CCode (cheader_filename = "clutter/clutter.h")]
	[Version (since = "1.10")]
	public static uint unicode_to_keysym (uint32 wc);
}
