/* namespace_unique.c generated by valac, the Vala compiler
 * generated from namespace_unique.vala, do not modify */

#include <glib-object.h>
#include <gobject/gvaluecollector.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define G_TYPE_VALA_FOO (g_vala_foo_get_type ())
#define G_VALA_FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), G_TYPE_VALA_FOO, GValaFoo))
#define G_VALA_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), G_TYPE_VALA_FOO, GValaFooClass))
#define G_IS_VALA_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), G_TYPE_VALA_FOO))
#define G_IS_VALA_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), G_TYPE_VALA_FOO))
#define G_VALA_FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), G_TYPE_VALA_FOO, GValaFooClass))

typedef struct _GValaFoo GValaFoo;
typedef struct _GValaFooClass GValaFooClass;
typedef struct _GValaFooPrivate GValaFooPrivate;
typedef struct _GParamSpecValaFoo GParamSpecValaFoo;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _GValaFoo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GValaFooPrivate * priv;
};

struct _GValaFooClass {
	GTypeClass parent_class;
	void (*finalize) (GValaFoo *self);
};

struct _GParamSpecValaFoo {
	GParamSpec parent_instance;
};

static gpointer g_vala_foo_parent_class = NULL;

VALA_EXTERN gpointer g_vala_foo_ref (gpointer instance);
VALA_EXTERN void g_vala_foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* g_param_spec_vala_foo (const gchar* name,
                                   const gchar* nick,
                                   const gchar* blurb,
                                   GType object_type,
                                   GParamFlags flags);
VALA_EXTERN void g_value_set_vala_foo (GValue* value,
                           gpointer v_object);
VALA_EXTERN void g_value_take_vala_foo (GValue* value,
                            gpointer v_object);
VALA_EXTERN gpointer g_value_get_vala_foo (const GValue* value);
VALA_EXTERN GType g_vala_foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GValaFoo, g_vala_foo_unref)
VALA_EXTERN GValaFoo* g_vala_foo_new (void);
VALA_EXTERN GValaFoo* g_vala_foo_construct (GType object_type);
static void g_vala_foo_finalize (GValaFoo * obj);
static GType g_vala_foo_get_type_once (void);
VALA_EXTERN gint g_vala_foo (void);
static void _vala_main (void);

GValaFoo*
g_vala_foo_construct (GType object_type)
{
	GValaFoo* self = NULL;
	self = (GValaFoo*) g_type_create_instance (object_type);
	return self;
}

GValaFoo*
g_vala_foo_new (void)
{
	return g_vala_foo_construct (G_TYPE_VALA_FOO);
}

static void
g_value_vala_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
g_value_vala_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		g_vala_foo_unref (value->data[0].v_pointer);
	}
}

static void
g_value_vala_foo_copy_value (const GValue* src_value,
                             GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = g_vala_foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
g_value_vala_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
g_value_vala_foo_collect_value (GValue* value,
                                guint n_collect_values,
                                GTypeCValue* collect_values,
                                guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		GValaFoo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = g_vala_foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
g_value_vala_foo_lcopy_value (const GValue* value,
                              guint n_collect_values,
                              GTypeCValue* collect_values,
                              guint collect_flags)
{
	GValaFoo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = g_vala_foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
g_param_spec_vala_foo (const gchar* name,
                       const gchar* nick,
                       const gchar* blurb,
                       GType object_type,
                       GParamFlags flags)
{
	GParamSpecValaFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, G_TYPE_VALA_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
g_value_get_vala_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, G_TYPE_VALA_FOO), NULL);
	return value->data[0].v_pointer;
}

void
g_value_set_vala_foo (GValue* value,
                      gpointer v_object)
{
	GValaFoo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, G_TYPE_VALA_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, G_TYPE_VALA_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		g_vala_foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		g_vala_foo_unref (old);
	}
}

void
g_value_take_vala_foo (GValue* value,
                       gpointer v_object)
{
	GValaFoo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, G_TYPE_VALA_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, G_TYPE_VALA_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		g_vala_foo_unref (old);
	}
}

static void
g_vala_foo_class_init (GValaFooClass * klass,
                       gpointer klass_data)
{
	g_vala_foo_parent_class = g_type_class_peek_parent (klass);
	((GValaFooClass *) klass)->finalize = g_vala_foo_finalize;
}

static void
g_vala_foo_instance_init (GValaFoo * self,
                          gpointer klass)
{
	self->ref_count = 1;
}

static void
g_vala_foo_finalize (GValaFoo * obj)
{
	GValaFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, G_TYPE_VALA_FOO, GValaFoo);
	g_signal_handlers_destroy (self);
}

static GType
g_vala_foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { g_value_vala_foo_init, g_value_vala_foo_free_value, g_value_vala_foo_copy_value, g_value_vala_foo_peek_pointer, "p", g_value_vala_foo_collect_value, "p", g_value_vala_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (GValaFooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) g_vala_foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GValaFoo), 0, (GInstanceInitFunc) g_vala_foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType g_vala_foo_type_id;
	g_vala_foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "GValaFoo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return g_vala_foo_type_id;
}

GType
g_vala_foo_get_type (void)
{
	static volatile gsize g_vala_foo_type_id__once = 0;
	if (g_once_init_enter (&g_vala_foo_type_id__once)) {
		GType g_vala_foo_type_id;
		g_vala_foo_type_id = g_vala_foo_get_type_once ();
		g_once_init_leave (&g_vala_foo_type_id__once, g_vala_foo_type_id);
	}
	return g_vala_foo_type_id__once;
}

gpointer
g_vala_foo_ref (gpointer instance)
{
	GValaFoo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
g_vala_foo_unref (gpointer instance)
{
	GValaFoo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		G_VALA_FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

gint
g_vala_foo (void)
{
	gint result;
	result = 42;
	return result;
}

static void
_vala_main (void)
{
	const gchar* _tmp0_;
	_vala_assert (g_vala_foo () == 42, "vala_foo () == 42");
	_tmp0_ = g_type_name (G_TYPE_VALA_FOO);
	_vala_assert (g_strcmp0 (_tmp0_, "GValaFoo") == 0, "typeof (ValaFoo).name () == \"GValaFoo\"");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

