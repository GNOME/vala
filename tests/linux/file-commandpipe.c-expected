/* linux_file_commandpipe.c generated by valac, the Vala compiler
 * generated from linux_file_commandpipe.vala, do not modify */

#include <stdio.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _pclose0(var) ((var == NULL) ? NULL : (var = (pclose (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	{
		FILE* pipe = NULL;
		FILE* _tmp0_;
		gint _result_ = 0;
		FILE* _tmp1_;
		_tmp0_ = popen ("sleep 0", "r");
		pipe = _tmp0_;
		_tmp1_ = pipe;
		pipe = NULL;
		_result_ = pclose (_tmp1_);
		_vala_assert (_result_ == 0, "result == 0");
		_pclose0 (pipe);
	}
	{
		FILE* _tmp2_;
		FILE* _tmp3_;
		_tmp2_ = popen ("ls *", "r");
		_tmp3_ = _tmp2_;
		_pclose0 (_tmp3_);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

