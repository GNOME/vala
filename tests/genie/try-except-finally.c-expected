/* genie_try_except_finally.c generated by valac, the Vala compiler
 * generated from genie_try_except_finally.gs, do not modify */

#include <gio/gio.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN void test (GError** error);
static void _vala_main (gchar** args,
                 gint args_length1);

void
test (GError** error)
{
	GError* _tmp0_;
	GError* _inner_error0_ = NULL;
	_tmp0_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_FAILED, "failed");
	_inner_error0_ = _tmp0_;
	g_propagate_error (error, _inner_error0_);
	return;
}

static void
_vala_main (gchar** args,
            gint args_length1)
{
	gint a = 0;
	GError* _inner_error0_ = NULL;
	a = 0;
	{
		gint _tmp0_;
		_tmp0_ = a;
		a = _tmp0_ + 1;
		test (&_inner_error0_);
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		gint _tmp1_;
		g_clear_error (&_inner_error0_);
		_tmp1_ = a;
		a = _tmp1_ + 1;
	}
	__finally0:
	{
		GError* _inner_error1_ = NULL;
		gint _tmp2_;
		_tmp2_ = a;
		a = _tmp2_ + 1;
	}
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_vala_assert (a == 3, "a == 3");
}

int
main (int argc,
      char ** argv)
{
	_vala_main (argv, argc);
	return 0;
}

