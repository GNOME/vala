/* genie_struct.c generated by valac, the Vala compiler
 * generated from genie_struct.gs, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_TEST (test_get_type ())
typedef struct _Test Test;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Test {
	gchar* empty;
};

static void _vala_main (gchar** args,
                 gint args_length1);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Test* test_dup (const Test* self);
VALA_EXTERN void test_free (Test* self);
VALA_EXTERN void test_copy (const Test* self,
                Test* dest);
VALA_EXTERN void test_destroy (Test* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Test, test_destroy)
VALA_EXTERN void test_init (Test *self);

static void
_vala_main (gchar** args,
            gint args_length1)
{
	Test a = {0};
	Test _tmp0_;
	const gchar* _tmp1_;
	test_init (&a);
	_tmp0_ = a;
	_tmp1_ = _tmp0_.empty;
	_vala_assert (g_strcmp0 (_tmp1_, "") == 0, "a.empty == \"\"");
	test_destroy (&a);
}

int
main (int argc,
      char ** argv)
{
	_vala_main (argv, argc);
	return 0;
}

void
test_init (Test *self)
{
	gchar* _tmp0_;
	memset (self, 0, sizeof (Test));
	_tmp0_ = g_strdup ("");
	_g_free0 ((*self).empty);
	(*self).empty = _tmp0_;
}

void
test_copy (const Test* self,
           Test* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).empty;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).empty);
	(*dest).empty = _tmp1_;
}

void
test_destroy (Test* self)
{
	_g_free0 ((*self).empty);
}

Test*
test_dup (const Test* self)
{
	Test* dup;
	dup = g_new0 (Test, 1);
	test_copy (self, dup);
	return dup;
}

void
test_free (Test* self)
{
	test_destroy (self);
	g_free (self);
}

static GType
test_get_type_once (void)
{
	GType test_type_id;
	test_type_id = g_boxed_type_register_static ("Test", (GBoxedCopyFunc) test_dup, (GBoxedFreeFunc) test_free);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

