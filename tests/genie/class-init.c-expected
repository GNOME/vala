/* genie_class_init.c generated by valac, the Vala compiler
 * generated from genie_class_init.gs, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEST, TestClass))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define IS_TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEST))
#define TEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEST, TestClass))

typedef struct _Test Test;
typedef struct _TestClass TestClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _TestPrivate TestPrivate;
enum  {
	TEST_0_PROPERTY,
	TEST_NUM_PROPERTIES
};
static GParamSpec* test_properties[TEST_NUM_PROPERTIES];

struct _Test {
	GObject parent_instance;
	TestPrivate * priv;
};

struct _TestClass {
	GObjectClass parent_class;
};

static gpointer test_parent_class = NULL;

static void _vala_main (gchar** args,
                 gint args_length1);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, g_object_unref)
VALA_EXTERN Test* test_new (void);
VALA_EXTERN Test* test_construct (GType object_type);
VALA_EXTERN void nothing (void);
static GObject * test_constructor (GType type,
                            guint n_construct_properties,
                            GObjectConstructParam * construct_properties);
static void test_finalize (GObject * obj);
static GType test_get_type_once (void);

static void
_vala_main (gchar** args,
            gint args_length1)
{
	Test* a = NULL;
	Test* _tmp0_;
	_tmp0_ = test_new ();
	a = _tmp0_;
	_g_object_unref0 (a);
}

int
main (int argc,
      char ** argv)
{
	_vala_main (argv, argc);
	return 0;
}

void
nothing (void)
{
}

Test*
test_construct (GType object_type)
{
	Test * self = NULL;
	self = (Test*) g_object_new (object_type, NULL);
	return self;
}

Test*
test_new (void)
{
	return test_construct (TYPE_TEST);
}

static GObject *
test_constructor (GType type,
                  guint n_construct_properties,
                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	Test * self;
	parent_class = G_OBJECT_CLASS (test_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TEST, Test);
	nothing ();
	return obj;
}

static void
test_base_init (TestClass * klass)
{
	nothing ();
}

static void
test_class_init (TestClass * klass,
                 gpointer klass_data)
{
	test_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->constructor = test_constructor;
	G_OBJECT_CLASS (klass)->finalize = test_finalize;
	nothing ();
}

static void
test_instance_init (Test * self,
                    gpointer klass)
{
}

static void
test_finalize (GObject * obj)
{
	Test * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TEST, Test);
	nothing ();
	G_OBJECT_CLASS (test_parent_class)->finalize (obj);
}

static GType
test_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (TestClass), (GBaseInitFunc) test_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Test), 0, (GInstanceInitFunc) test_instance_init, NULL };
	GType test_type_id;
	test_type_id = g_type_register_static (G_TYPE_OBJECT, "Test", &g_define_type_info, 0);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

