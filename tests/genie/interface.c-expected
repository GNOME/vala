/* genie_interface.c generated by valac, the Vala compiler
 * generated from genie_interface.gs, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEST, TestClass))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define IS_TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEST))
#define TEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEST, TestClass))

typedef struct _Test Test;
typedef struct _TestClass TestClass;

#define TYPE_ITEST (itest_get_type ())
#define ITEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ITEST, ITest))
#define IS_ITEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ITEST))
#define ITEST_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_ITEST, ITestIface))

typedef struct _ITest ITest;
typedef struct _ITestIface ITestIface;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _TestPrivate TestPrivate;
enum  {
	TEST_0_PROPERTY,
	TEST_NUM_PROPERTIES
};
static GParamSpec* test_properties[TEST_NUM_PROPERTIES];
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _ITestIface {
	GTypeInterface parent_iface;
	gboolean (*test) (ITest* self, gint a);
};

struct _Test {
	GObject parent_instance;
	TestPrivate * priv;
};

struct _TestClass {
	GObjectClass parent_class;
};

static gpointer test_parent_class = NULL;
static ITestIface * test_itest_parent_iface = NULL;

static void _vala_main (gchar** args,
                 gint args_length1);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, g_object_unref)
VALA_EXTERN Test* test_new (void);
VALA_EXTERN Test* test_construct (GType object_type);
VALA_EXTERN GType itest_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ITest, g_object_unref)
VALA_EXTERN gboolean itest_test (ITest* self,
                     gint a);
static GType itest_get_type_once (void);
static gboolean test_real_test (ITest* base,
                         gint a);
static GType test_get_type_once (void);

static void
_vala_main (gchar** args,
            gint args_length1)
{
	Test* a = NULL;
	Test* _tmp0_;
	_tmp0_ = test_new ();
	a = _tmp0_;
	_vala_assert (itest_test (G_TYPE_CHECK_INSTANCE_CAST (a, TYPE_ITEST, ITest), 42), "a.test(42)");
	_g_object_unref0 (a);
}

int
main (int argc,
      char ** argv)
{
	_vala_main (argv, argc);
	return 0;
}

gboolean
itest_test (ITest* self,
            gint a)
{
	ITestIface* _iface_;
	g_return_val_if_fail (IS_ITEST (self), FALSE);
	_iface_ = ITEST_GET_INTERFACE (self);
	if (_iface_->test) {
		return _iface_->test (self, a);
	}
	return FALSE;
}

static void
itest_default_init (ITestIface * iface,
                    gpointer iface_data)
{
}

static GType
itest_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ITestIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) itest_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType itest_type_id;
	itest_type_id = g_type_register_static (G_TYPE_INTERFACE, "ITest", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (itest_type_id, G_TYPE_OBJECT);
	return itest_type_id;
}

GType
itest_get_type (void)
{
	static volatile gsize itest_type_id__once = 0;
	if (g_once_init_enter (&itest_type_id__once)) {
		GType itest_type_id;
		itest_type_id = itest_get_type_once ();
		g_once_init_leave (&itest_type_id__once, itest_type_id);
	}
	return itest_type_id__once;
}

static gboolean
test_real_test (ITest* base,
                gint a)
{
	Test * self;
	gboolean result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_TEST, Test);
	result = a == 42;
	return result;
}

Test*
test_construct (GType object_type)
{
	Test * self = NULL;
	self = (Test*) g_object_new (object_type, NULL);
	return self;
}

Test*
test_new (void)
{
	return test_construct (TYPE_TEST);
}

static void
test_class_init (TestClass * klass,
                 gpointer klass_data)
{
	test_parent_class = g_type_class_peek_parent (klass);
}

static void
test_itest_interface_init (ITestIface * iface,
                           gpointer iface_data)
{
	test_itest_parent_iface = g_type_interface_peek_parent (iface);
	iface->test = (gboolean (*) (ITest*, gint)) test_real_test;
}

static void
test_instance_init (Test * self,
                    gpointer klass)
{
}

static GType
test_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (TestClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Test), 0, (GInstanceInitFunc) test_instance_init, NULL };
	static const GInterfaceInfo itest_info = { (GInterfaceInitFunc) test_itest_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType test_type_id;
	test_type_id = g_type_register_static (G_TYPE_OBJECT, "Test", &g_define_type_info, 0);
	g_type_add_interface_static (test_type_id, TYPE_ITEST, &itest_info);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

