/* methods_bug596726.c generated by valac, the Vala compiler
 * generated from methods_bug596726.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*Func) (gpointer user_data);
typedef struct _Block1Data Block1Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _Block1Data {
	int _ref_count_;
	GObject* _result_;
};

VALA_EXTERN void do_bar (Func f,
             gpointer f_target);
VALA_EXTERN GObject* do_foo (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void __vala_lambda0__func (gpointer self);
static void _vala_main (void);

void
do_bar (Func f,
        gpointer f_target)
{
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_g_object_unref0 (_data1_->_result_);
		g_slice_free (Block1Data, _data1_);
	}
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	GObject* v = NULL;
	GObject* _tmp0_;
	_tmp0_ = _g_object_ref0 (_data1_->_result_);
	v = _tmp0_;
	_g_object_unref0 (v);
}

static void
__vala_lambda0__func (gpointer self)
{
	_vala_lambda0_ (self);
}

GObject*
do_foo (void)
{
	Block1Data* _data1_;
	GObject* _tmp0_;
	GObject* _tmp1_;
	GObject* result;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_tmp0_ = g_object_new (G_TYPE_OBJECT, NULL);
	_data1_->_result_ = _tmp0_;
	do_bar (__vala_lambda0__func, _data1_);
	_tmp1_ = _g_object_ref0 (_data1_->_result_);
	result = _tmp1_;
	block1_data_unref (_data1_);
	_data1_ = NULL;
	return result;
}

static void
_vala_main (void)
{
	GObject* _tmp0_;
	GObject* _tmp1_;
	_tmp0_ = do_foo ();
	_tmp1_ = _tmp0_;
	_g_object_unref0 (_tmp1_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

