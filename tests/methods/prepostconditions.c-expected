/* methods_prepostconditions.c generated by valac, the Vala compiler
 * generated from methods_prepostconditions.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;

#define TYPE_BAR (bar_get_type ())
typedef struct _Bar Bar;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
	gboolean ensured;
	gboolean required;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
	gint (*manam) (Foo* self, gint i);
	gint (*manam_pre) (Foo* self, gint i);
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

struct _Bar {
	gboolean ensured;
	gboolean required;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN gint foo_manam (Foo* self,
                gint i);
VALA_EXTERN gint foo_manam_pre (Foo* self,
                    gint i);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN Foo* foo_new_post (void);
VALA_EXTERN Foo* foo_construct_post (GType object_type);
VALA_EXTERN void foo_foo (Foo* self);
VALA_EXTERN gchar* foo_bar (Foo* self);
VALA_EXTERN void foo_foo_pre (Foo* self,
                  gint i);
VALA_EXTERN gint foo_bar_pre (Foo* self,
                  gint i);
VALA_EXTERN gint foo_faz (Foo* self,
              gint i);
VALA_EXTERN gint foo_faz_pre (Foo* self,
                  gint i);
static gint foo_real_manam (Foo* self,
                     gint i);
static gint foo_real_manam_pre (Foo* self,
                         gint i);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Bar* bar_dup (const Bar* self);
VALA_EXTERN void bar_free (Bar* self);
VALA_EXTERN void bar_init (Bar *self);
VALA_EXTERN void bar_init_post (Bar *self);
VALA_EXTERN void bar_bar (Bar *self);
VALA_EXTERN gchar* bar_foo (Bar *self);
static void _vala_main (void);

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	self->required = TRUE;
	_vala_return_val_if_fail (self->required, "required = true", NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

Foo*
foo_construct_post (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	self->ensured = TRUE;
	_vala_warn_if_fail (self->ensured, "ensured = true");
	return self;
}

Foo*
foo_new_post (void)
{
	return foo_construct_post (TYPE_FOO);
}

void
foo_foo (Foo* self)
{
	g_return_if_fail (IS_FOO (self));
	self->ensured = TRUE;
	_vala_warn_if_fail (self->ensured, "ensured = true");
}

gchar*
foo_bar (Foo* self)
{
	gchar* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	gchar* result;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = g_strdup ("bar");
	result = _tmp0_;
	_tmp1_ = strlen (result);
	_tmp2_ = _tmp1_;
	_vala_warn_if_fail (_tmp2_ >= 3, "result.length >= 3");
	return result;
}

void
foo_foo_pre (Foo* self,
             gint i)
{
	g_return_if_fail (IS_FOO (self));
	_vala_return_if_fail (i > 23, "i > 23");
	_vala_assert (i == 42, "i == 42");
}

gint
foo_bar_pre (Foo* self,
             gint i)
{
	gint result;
	g_return_val_if_fail (IS_FOO (self), 0);
	_vala_return_val_if_fail (i > 42, "i > 42", 0);
	_vala_assert (i == 4711, "i == 4711");
	result = i;
	return result;
}

gint
foo_faz (Foo* self,
         gint i)
{
	gint result;
	g_return_val_if_fail (IS_FOO (self), 0);
	switch (i) {
		case 42:
		{
			result = i;
			_vala_warn_if_fail (result > 23, "result > 23");
			return result;
		}
		default:
		{
			g_assert_not_reached ();
		}
	}
}

gint
foo_faz_pre (Foo* self,
             gint i)
{
	gint result;
	g_return_val_if_fail (IS_FOO (self), 0);
	_vala_return_val_if_fail (i > 23, "i > 23", 0);
	switch (i) {
		case 4711:
		{
			result = i;
			return result;
		}
		default:
		{
			g_assert_not_reached ();
		}
	}
}

static gint
foo_real_manam (Foo* self,
                gint i)
{
	gint result;
	switch (i) {
		case 67:
		{
			result = i;
			_vala_warn_if_fail (result > 23, "result > 23");
			return result;
		}
		default:
		{
			g_assert_not_reached ();
		}
	}
}

gint
foo_manam (Foo* self,
           gint i)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), 0);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->manam) {
		gint result;
		result = _klass_->manam (self, i);
		_vala_warn_if_fail (result > 23, "result > 23");
		return result;
	}
	return -1;
}

static gint
foo_real_manam_pre (Foo* self,
                    gint i)
{
	gint result;
	_vala_return_val_if_fail (i > 23, "i > 23", 0);
	switch (i) {
		case 231:
		{
			result = i;
			return result;
		}
		default:
		{
			g_assert_not_reached ();
		}
	}
}

gint
foo_manam_pre (Foo* self,
               gint i)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), 0);
	_vala_return_val_if_fail (i > 23, "i > 23", 0);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->manam_pre) {
		return _klass_->manam_pre (self, i);
	}
	return -1;
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	((FooClass *) klass)->manam = (gint (*) (Foo*, gint)) foo_real_manam;
	((FooClass *) klass)->manam_pre = (gint (*) (Foo*, gint)) foo_real_manam_pre;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->ensured = FALSE;
	self->required = FALSE;
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

void
bar_init (Bar *self)
{
	memset (self, 0, sizeof (Bar));
	(*self).required = TRUE;
	_vala_return_if_fail ((*self).required, "required = true");
}

void
bar_init_post (Bar *self)
{
	memset (self, 0, sizeof (Bar));
	(*self).ensured = TRUE;
	_vala_warn_if_fail ((*self).ensured, "ensured = true");
}

void
bar_bar (Bar *self)
{
	(*self).ensured = TRUE;
	_vala_warn_if_fail ((*self).ensured, "ensured = true");
}

gchar*
bar_foo (Bar *self)
{
	gchar* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	gchar* result;
	_tmp0_ = g_strdup ("foo");
	result = _tmp0_;
	_tmp1_ = strlen (result);
	_tmp2_ = _tmp1_;
	_vala_warn_if_fail (_tmp2_ >= 3, "result.length >= 3");
	return result;
}

Bar*
bar_dup (const Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	memcpy (dup, self, sizeof (Bar));
	return dup;
}

void
bar_free (Bar* self)
{
	g_free (self);
}

static GType
bar_get_type_once (void)
{
	GType bar_type_id;
	bar_type_id = g_boxed_type_register_static ("Bar", (GBoxedCopyFunc) bar_dup, (GBoxedFreeFunc) bar_free);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	Foo* foo2 = NULL;
	Foo* _tmp3_;
	Bar bar = {0};
	Bar _tmp4_;
	Bar _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	Bar bar2 = {0};
	Bar _tmp8_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_vala_assert (foo->required, "foo.required");
	foo_foo (foo);
	_vala_assert (foo->ensured, "foo.ensured");
	_tmp1_ = foo_bar (foo);
	_tmp2_ = _tmp1_;
	_vala_assert (g_strcmp0 (_tmp2_, "bar") == 0, "foo.bar () == \"bar\"");
	_g_free0 (_tmp2_);
	foo_foo_pre (foo, 42);
	_vala_assert (foo_bar_pre (foo, 4711) == 4711, "foo.bar_pre (4711) == 4711");
	_vala_assert (foo_faz (foo, 42) == 42, "foo.faz (42) == 42");
	_vala_assert (foo_faz_pre (foo, 4711) == 4711, "foo.faz_pre (4711) == 4711");
	_vala_assert (foo_manam (foo, 67) == 67, "foo.manam (67) == 67");
	_vala_assert (foo_manam_pre (foo, 231) == 231, "foo.manam_pre (231) == 231");
	_tmp3_ = foo_new_post ();
	foo2 = _tmp3_;
	_vala_assert (foo2->ensured, "foo2.ensured");
	bar_init (&bar);
	_tmp4_ = bar;
	_vala_assert (_tmp4_.required, "bar.required");
	bar_bar (&bar);
	_tmp5_ = bar;
	_vala_assert (_tmp5_.ensured, "bar.ensured");
	_tmp6_ = bar_foo (&bar);
	_tmp7_ = _tmp6_;
	_vala_assert (g_strcmp0 (_tmp7_, "foo") == 0, "bar.foo () == \"foo\"");
	_g_free0 (_tmp7_);
	bar_init_post (&bar2);
	_tmp8_ = bar2;
	_vala_assert (_tmp8_.ensured, "bar2.ensured");
	_foo_unref0 (foo2);
	_foo_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

