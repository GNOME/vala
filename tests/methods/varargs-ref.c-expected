/* methods_varargs_ref.c generated by valac, the Vala compiler
 * generated from methods_varargs_ref.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <stdarg.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN void set_foo_varg (const gchar* s,
                   ...);
static void _vala_main (void);

void
set_foo_varg (const gchar* s,
              ...)
{
	va_list args = {0};
	const gchar** ref_s1 = NULL;
	const gchar** _tmp0_;
	const gchar** ref_s2 = NULL;
	const gchar** _tmp1_;
	g_return_if_fail (s != NULL);
	va_start (args, s);
	_tmp0_ = va_arg (args, const gchar**);
	ref_s1 = _tmp0_;
	*ref_s1 = "bar";
	_tmp1_ = va_arg (args, const gchar**);
	ref_s2 = _tmp1_;
	*ref_s2 = "manam";
	va_end (args);
}

static void
_vala_main (void)
{
	const gchar* bar = NULL;
	const gchar* manam = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	bar = "";
	manam = "";
	set_foo_varg ("foo", &bar, &manam, NULL);
	_tmp0_ = bar;
	_vala_assert (g_strcmp0 (_tmp0_, "bar") == 0, "bar == \"bar\"");
	_tmp1_ = manam;
	_vala_assert (g_strcmp0 (_tmp1_, "manam") == 0, "manam == \"manam\"");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

