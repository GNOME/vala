/* methods_bug598738.c generated by valac, the Vala compiler
 * generated from methods_bug598738.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

typedef void (*Func) (gpointer user_data);
typedef struct _Block1Data Block1Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Block1Data {
	int _ref_count_;
	gint* array;
	gint array_length1;
	gint _array_size_;
};

static void _vala_main (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void __vala_lambda0__func (gpointer self);

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_data1_->array = (g_free (_data1_->array), NULL);
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	_vala_assert (_data1_->array_length1 == 10, "array.length == 10");
}

static void
__vala_lambda0__func (gpointer self)
{
	_vala_lambda0_ (self);
}

static void
_vala_main (void)
{
	Block1Data* _data1_;
	gint* _tmp0_;
	Func foo = NULL;
	gpointer foo_target;
	GDestroyNotify foo_target_destroy_notify;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_tmp0_ = g_new0 (gint, 10);
	_data1_->array = _tmp0_;
	_data1_->array_length1 = 10;
	_data1_->_array_size_ = _data1_->array_length1;
	foo = __vala_lambda0__func;
	foo_target = block1_data_ref (_data1_);
	foo_target_destroy_notify = block1_data_unref;
	foo (foo_target);
	(foo_target_destroy_notify == NULL) ? NULL : (foo_target_destroy_notify (foo_target), NULL);
	foo = NULL;
	foo_target = NULL;
	foo_target_destroy_notify = NULL;
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

