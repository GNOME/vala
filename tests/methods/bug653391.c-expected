/* methods_bug653391.c generated by valac, the Vala compiler
 * generated from methods_bug653391.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef gchar* (*Deleg) (gpointer user_data);
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block1Data Block1Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Block1Data {
	int _ref_count_;
	gchar* bar;
};

VALA_EXTERN Deleg foo (gchar* bar,
           gpointer* result_target,
           GDestroyNotify* result_target_destroy_notify);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static gchar* _vala_lambda0_ (Block1Data* _data1_);
static gchar* __vala_lambda0__deleg (gpointer self);
static void _vala_main (void);

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_g_free0 (_data1_->bar);
		g_slice_free (Block1Data, _data1_);
	}
}

static gchar*
_vala_lambda0_ (Block1Data* _data1_)
{
	gchar* _tmp0_;
	gchar* result;
	_tmp0_ = g_strdup (_data1_->bar);
	result = _tmp0_;
	return result;
}

static gchar*
__vala_lambda0__deleg (gpointer self)
{
	gchar* result;
	result = _vala_lambda0_ (self);
	return result;
}

Deleg
foo (gchar* bar,
     gpointer* result_target,
     GDestroyNotify* result_target_destroy_notify)
{
	Block1Data* _data1_;
	Deleg _tmp0_;
	gpointer _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	Deleg result;
	g_return_val_if_fail (bar != NULL, NULL);
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_g_free0 (_data1_->bar);
	_data1_->bar = bar;
	_tmp0_ = __vala_lambda0__deleg;
	_tmp0__target = block1_data_ref (_data1_);
	_tmp0__target_destroy_notify = block1_data_unref;
	*result_target = _tmp0__target;
	*result_target_destroy_notify = _tmp0__target_destroy_notify;
	result = _tmp0_;
	block1_data_unref (_data1_);
	_data1_ = NULL;
	return result;
}

static void
_vala_main (void)
{
	gchar* _tmp0_;
	gpointer _tmp1_ = NULL;
	GDestroyNotify _tmp2_ = NULL;
	Deleg _tmp3_;
	Deleg _tmp4_;
	gpointer _tmp4__target;
	GDestroyNotify _tmp4__target_destroy_notify;
	gchar* _tmp5_;
	gchar* _tmp6_;
	_tmp0_ = g_strdup ("foo");
	_tmp3_ = foo (_tmp0_, &_tmp1_, &_tmp2_);
	_tmp4_ = _tmp3_;
	_tmp4__target = _tmp1_;
	_tmp4__target_destroy_notify = _tmp2_;
	_tmp5_ = _tmp4_ (_tmp1_);
	_tmp6_ = _tmp5_;
	_vala_assert (g_strcmp0 (_tmp6_, "foo") == 0, "foo (\"foo\")() == \"foo\"");
	_g_free0 (_tmp6_);
	(_tmp4__target_destroy_notify == NULL) ? NULL : (_tmp4__target_destroy_notify (_tmp4__target), NULL);
	_tmp4_ = NULL;
	_tmp4__target = NULL;
	_tmp4__target_destroy_notify = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

