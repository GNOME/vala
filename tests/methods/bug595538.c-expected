/* methods_bug595538.c generated by valac, the Vala compiler
 * generated from methods_bug595538.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*Foo) (gpointer user_data);
typedef struct _Block1Data Block1Data;

struct _Block1Data {
	int _ref_count_;
	gint i;
};

VALA_EXTERN void do_foo (Foo foo,
             gpointer foo_target);
static void _vala_main (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void _vala_lambda1_ (Block1Data* _data1_);
static void __vala_lambda1__foo (gpointer self);
static void __vala_lambda0__foo (gpointer self);

void
do_foo (Foo foo,
        gpointer foo_target)
{
	foo (foo_target);
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda1_ (Block1Data* _data1_)
{
	gint j = 0;
	j = _data1_->i;
}

static void
__vala_lambda1__foo (gpointer self)
{
	_vala_lambda1_ (self);
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	do_foo (__vala_lambda1__foo, _data1_);
}

static void
__vala_lambda0__foo (gpointer self)
{
	_vala_lambda0_ (self);
}

static void
_vala_main (void)
{
	Block1Data* _data1_;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->i = 42;
	do_foo (__vala_lambda0__foo, _data1_);
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

