/* methods_prepostconditions_captured.c generated by valac, the Vala compiler
 * generated from methods_prepostconditions_captured.vala, do not modify */

#include <glib.h>
#include <gio/gio.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*Func) (gpointer user_data);
typedef struct _Block1Data Block1Data;
typedef struct _Block2Data Block2Data;
typedef struct _Block3Data Block3Data;
typedef struct _FooData FooData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Block1Data {
	int _ref_count_;
	gint i;
};

struct _Block2Data {
	int _ref_count_;
	gint i;
};

struct _Block3Data {
	int _ref_count_;
	gint i;
	gpointer _async_data_;
};

struct _FooData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gint i;
	gint result;
	Block3Data* _data3_;
	Func f;
	gpointer f_target;
	GDestroyNotify f_target_destroy_notify;
};

VALA_EXTERN gint bar (gint i);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void __vala_lambda0__func (gpointer self);
VALA_EXTERN void baz (gint i);
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
static void _vala_lambda1_ (Block2Data* _data2_);
static void __vala_lambda1__func (gpointer self);
static void foo_data_free (gpointer _data);
VALA_EXTERN void foo (gint i,
          GAsyncReadyCallback _callback_,
          gpointer _user_data_);
VALA_EXTERN gint foo_finish (GAsyncResult* _res_);
static gboolean foo_co (FooData* _data_);
static Block3Data* block3_data_ref (Block3Data* _data3_);
static void block3_data_unref (void * _userdata_);
static void _vala_lambda2_ (Block3Data* _data3_);
static void __vala_lambda2__func (gpointer self);
static void _vala_main (void);

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	_vala_assert (_data1_->i == 23, "i == 23");
	_data1_->i = 42;
}

static void
__vala_lambda0__func (gpointer self)
{
	_vala_lambda0_ (self);
}

gint
bar (gint i)
{
	Block1Data* _data1_;
	Func f = NULL;
	gpointer f_target;
	GDestroyNotify f_target_destroy_notify;
	gint result;
	_vala_return_val_if_fail (i == 23, "i == 23", 0);
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->i = i;
	f = __vala_lambda0__func;
	f_target = block1_data_ref (_data1_);
	f_target_destroy_notify = block1_data_unref;
	f (f_target);
	result = _data1_->i;
	_vala_warn_if_fail (_data1_->i == 42, "i == 42");
	(f_target_destroy_notify == NULL) ? NULL : (f_target_destroy_notify (f_target), NULL);
	f = NULL;
	f_target = NULL;
	f_target_destroy_notify = NULL;
	block1_data_unref (_data1_);
	_data1_ = NULL;
	return result;
}

static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
	g_atomic_int_inc (&_data2_->_ref_count_);
	return _data2_;
}

static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
		g_slice_free (Block2Data, _data2_);
	}
}

static void
_vala_lambda1_ (Block2Data* _data2_)
{
	_vala_assert (_data2_->i == 42, "i == 42");
	_data2_->i = 23;
}

static void
__vala_lambda1__func (gpointer self)
{
	_vala_lambda1_ (self);
}

void
baz (gint i)
{
	Block2Data* _data2_;
	Func f = NULL;
	gpointer f_target;
	GDestroyNotify f_target_destroy_notify;
	_vala_return_if_fail (i == 42, "i == 42");
	_data2_ = g_slice_new0 (Block2Data);
	_data2_->_ref_count_ = 1;
	_data2_->i = i;
	f = __vala_lambda1__func;
	f_target = block2_data_ref (_data2_);
	f_target_destroy_notify = block2_data_unref;
	f (f_target);
	_vala_warn_if_fail (_data2_->i == 23, "i == 23");
	(f_target_destroy_notify == NULL) ? NULL : (f_target_destroy_notify (f_target), NULL);
	f = NULL;
	f_target = NULL;
	f_target_destroy_notify = NULL;
	block2_data_unref (_data2_);
	_data2_ = NULL;
}

static void
foo_data_free (gpointer _data)
{
	FooData* _data_;
	_data_ = _data;
	g_slice_free (FooData, _data_);
}

void
foo (gint i,
     GAsyncReadyCallback _callback_,
     gpointer _user_data_)
{
	FooData* _data_;
	_data_ = g_slice_new0 (FooData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, foo_data_free);
	_data_->i = i;
	foo_co (_data_);
}

gint
foo_finish (GAsyncResult* _res_)
{
	gint result;
	FooData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
	result = _data_->result;
	return result;
}

static Block3Data*
block3_data_ref (Block3Data* _data3_)
{
	g_atomic_int_inc (&_data3_->_ref_count_);
	return _data3_;
}

static void
block3_data_unref (void * _userdata_)
{
	Block3Data* _data3_;
	_data3_ = (Block3Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data3_->_ref_count_)) {
		g_slice_free (Block3Data, _data3_);
	}
}

static void
_vala_lambda2_ (Block3Data* _data3_)
{
	_vala_assert (_data3_->i == 23, "i == 23");
	_data3_->i = 42;
}

static void
__vala_lambda2__func (gpointer self)
{
	_vala_lambda2_ (self);
}

static gboolean
foo_co (FooData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_vala_return_val_if_fail (_data_->i == 23, "i == 23", FALSE);
	_data_->_data3_ = g_slice_new0 (Block3Data);
	_data_->_data3_->_ref_count_ = 1;
	_data_->_data3_->i = _data_->i;
	_data_->_data3_->_async_data_ = _data_;
	_data_->f = __vala_lambda2__func;
	_data_->f_target = block3_data_ref (_data_->_data3_);
	_data_->f_target_destroy_notify = block3_data_unref;
	_data_->f (_data_->f_target);
	_data_->result = _data_->_data3_->i;
	_vala_warn_if_fail (_data_->_data3_->i == 42, "i == 42");
	(_data_->f_target_destroy_notify == NULL) ? NULL : (_data_->f_target_destroy_notify (_data_->f_target), NULL);
	_data_->f = NULL;
	_data_->f_target = NULL;
	_data_->f_target_destroy_notify = NULL;
	block3_data_unref (_data_->_data3_);
	_data_->_data3_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
_vala_main (void)
{
	_vala_assert (bar (23) == 42, "bar (23) == 42");
	baz (42);
	foo (23, NULL, NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

