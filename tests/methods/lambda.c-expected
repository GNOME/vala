/* methods_lambda.c generated by valac, the Vala compiler
 * generated from methods_lambda.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef gint (*MamanActionCallback) (gint i);
typedef void (*MamanActionOutCallback) (gint* i);
typedef void (*MamanActionRefCallback) (gint* i);

#define MAMAN_TYPE_BAR (maman_bar_get_type ())
#define MAMAN_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAMAN_TYPE_BAR, MamanBar))
#define MAMAN_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAMAN_TYPE_BAR, MamanBarClass))
#define MAMAN_IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAMAN_TYPE_BAR))
#define MAMAN_IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAMAN_TYPE_BAR))
#define MAMAN_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAMAN_TYPE_BAR, MamanBarClass))

typedef struct _MamanBar MamanBar;
typedef struct _MamanBarClass MamanBarClass;
typedef struct _MamanBarPrivate MamanBarPrivate;
enum  {
	MAMAN_BAR_0_PROPERTY,
	MAMAN_BAR_NUM_PROPERTIES
};
static GParamSpec* maman_bar_properties[MAMAN_BAR_NUM_PROPERTIES];
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _MamanBar {
	GObject parent_instance;
	MamanBarPrivate * priv;
};

struct _MamanBarClass {
	GObjectClass parent_class;
};

static gpointer maman_bar_parent_class = NULL;

VALA_EXTERN GType maman_bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MamanBar, g_object_unref)
static gint maman_bar_do_action (MamanActionCallback cb);
static gint maman_bar_do_out_action (MamanActionOutCallback cb);
static gint maman_bar_do_ref_action (MamanActionRefCallback cb);
static gint maman_bar_main (void);
static gint _vala_lambda0_ (gint i);
static gint __vala_lambda0__maman_action_callback (gint i);
static gint _vala_lambda1_ (gint i);
static gint __vala_lambda1__maman_action_callback (gint i);
static void _vala_lambda2_ (gint* i);
static void __vala_lambda2__maman_action_out_callback (gint* i);
static void _vala_lambda3_ (gint* i);
static void __vala_lambda3__maman_action_ref_callback (gint* i);
VALA_EXTERN MamanBar* maman_bar_new (void);
VALA_EXTERN MamanBar* maman_bar_construct (GType object_type);
static GType maman_bar_get_type_once (void);

static gint
maman_bar_do_action (MamanActionCallback cb)
{
	gint result;
	result = cb (1);
	return result;
}

static gint
maman_bar_do_out_action (MamanActionOutCallback cb)
{
	gint i = 0;
	gint _tmp0_ = 0;
	gint result;
	cb (&_tmp0_);
	i = _tmp0_;
	result = i;
	return result;
}

static gint
maman_bar_do_ref_action (MamanActionRefCallback cb)
{
	gint i = 0;
	gint result;
	i = 1;
	cb (&i);
	result = i;
	return result;
}

static gint
_vala_lambda0_ (gint i)
{
	gint result;
	result = i * 2;
	return result;
}

static gint
__vala_lambda0__maman_action_callback (gint i)
{
	gint result;
	result = _vala_lambda0_ (i);
	return result;
}

static gint
_vala_lambda1_ (gint i)
{
	gint result;
	result = i * 3;
	return result;
}

static gint
__vala_lambda1__maman_action_callback (gint i)
{
	gint result;
	result = _vala_lambda1_ (i);
	return result;
}

static void
_vala_lambda2_ (gint* i)
{
	gint _vala_i = 0;
	_vala_i = 4;
	if (i) {
		*i = _vala_i;
	}
}

static void
__vala_lambda2__maman_action_out_callback (gint* i)
{
	_vala_lambda2_ (i);
}

static void
_vala_lambda3_ (gint* i)
{
	*i = (*i) + 4;
}

static void
__vala_lambda3__maman_action_ref_callback (gint* i)
{
	_vala_lambda3_ (i);
}

static gint
maman_bar_main (void)
{
	gint result;
	_vala_assert (maman_bar_do_action (__vala_lambda0__maman_action_callback) == 2, "do_action (i => i * 2) == 2");
	_vala_assert (maman_bar_do_action (__vala_lambda1__maman_action_callback) == 3, "do_action (i => { return i * 3; }) == 3");
	_vala_assert (maman_bar_do_out_action (__vala_lambda2__maman_action_out_callback) == 4, "do_out_action ((out i) => { i = 4; }) == 4");
	_vala_assert (maman_bar_do_ref_action (__vala_lambda3__maman_action_ref_callback) == 5, "do_ref_action ((ref i) => { i += 4; }) == 5");
	result = 0;
	return result;
}

int
main (int argc,
      char ** argv)
{
	return maman_bar_main ();
}

MamanBar*
maman_bar_construct (GType object_type)
{
	MamanBar * self = NULL;
	self = (MamanBar*) g_object_new (object_type, NULL);
	return self;
}

MamanBar*
maman_bar_new (void)
{
	return maman_bar_construct (MAMAN_TYPE_BAR);
}

static void
maman_bar_class_init (MamanBarClass * klass,
                      gpointer klass_data)
{
	maman_bar_parent_class = g_type_class_peek_parent (klass);
}

static void
maman_bar_instance_init (MamanBar * self,
                         gpointer klass)
{
}

static GType
maman_bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MamanBarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maman_bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MamanBar), 0, (GInstanceInitFunc) maman_bar_instance_init, NULL };
	GType maman_bar_type_id;
	maman_bar_type_id = g_type_register_static (G_TYPE_OBJECT, "MamanBar", &g_define_type_info, 0);
	return maman_bar_type_id;
}

GType
maman_bar_get_type (void)
{
	static volatile gsize maman_bar_type_id__once = 0;
	if (g_once_init_enter (&maman_bar_type_id__once)) {
		GType maman_bar_type_id;
		maman_bar_type_id = maman_bar_get_type_once ();
		g_once_init_leave (&maman_bar_type_id__once, maman_bar_type_id);
	}
	return maman_bar_type_id__once;
}

