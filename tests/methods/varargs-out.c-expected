/* methods_varargs_out.c generated by valac, the Vala compiler
 * generated from methods_varargs_out.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <stdarg.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NAME_PROPERTY,
	FOO_ID_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooPrivate {
	gchar* _name;
	gint _id;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
VALA_EXTERN Foo* foo_static;
Foo* foo_static = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN const gchar* foo_get_name (Foo* self);
VALA_EXTERN void foo_set_name (Foo* self,
                   const gchar* value);
VALA_EXTERN gint foo_get_id (Foo* self);
VALA_EXTERN void foo_set_id (Foo* self,
                 gint value);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
VALA_EXTERN gboolean get_foo_varg (const gchar* s,
                       ...);
static void _vala_main (void);

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

const gchar*
foo_get_name (Foo* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_name;
	result = _tmp0_;
	return result;
}

void
foo_set_name (Foo* self,
              const gchar* value)
{
	gchar* old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_name (self);
	if (g_strcmp0 (value, old_value) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_name);
		self->priv->_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_NAME_PROPERTY]);
	}
}

gint
foo_get_id (Foo* self)
{
	gint result;
	g_return_val_if_fail (IS_FOO (self), 0);
	result = self->priv->_id;
	return result;
}

void
foo_set_id (Foo* self,
            gint value)
{
	gint old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_id (self);
	if (old_value != value) {
		self->priv->_id = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_ID_PROPERTY]);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_NAME_PROPERTY, foo_properties[FOO_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_ID_PROPERTY, foo_properties[FOO_ID_PROPERTY] = g_param_spec_int ("id", "id", "id", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	_g_free0 (self->priv->_name);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_NAME_PROPERTY:
		g_value_set_string (value, foo_get_name (self));
		break;
		case FOO_ID_PROPERTY:
		g_value_set_int (value, foo_get_id (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_NAME_PROPERTY:
		foo_set_name (self, g_value_get_string (value));
		break;
		case FOO_ID_PROPERTY:
		foo_set_id (self, g_value_get_int (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

gboolean
get_foo_varg (const gchar* s,
              ...)
{
	va_list args = {0};
	Foo** out_foo = NULL;
	Foo** _tmp0_;
	Foo* _tmp1_;
	GObject* _tmp2_;
	gboolean result;
	g_return_val_if_fail (s != NULL, FALSE);
	va_start (args, s);
	_tmp0_ = va_arg (args, Foo**);
	out_foo = _tmp0_;
	_tmp1_ = foo_static;
	_tmp2_ = g_object_ref (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, G_TYPE_OBJECT, GObject));
	*out_foo = _tmp2_;
	result = TRUE;
	va_end (args);
	return result;
}

static void
_vala_main (void)
{
	Foo* _tmp1_;
	Foo* _tmp8_;
	{
		Foo* _tmp0_;
		_tmp0_ = foo_new ();
		_g_object_unref0 (foo_static);
		foo_static = _tmp0_;
	}
	_tmp1_ = foo_static;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo_static.ref_count == 1");
	{
		Foo* foo = NULL;
		Foo* _tmp2_ = NULL;
		Foo* _tmp3_;
		Foo* _tmp4_ = NULL;
		gboolean _tmp5_;
		Foo* _tmp7_;
		get_foo_varg ("foo", &_tmp2_, NULL);
		_g_object_unref0 (foo);
		foo = _tmp2_;
		_tmp3_ = foo;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_tmp5_ = get_foo_varg ("foo", &_tmp4_, NULL);
		_g_object_unref0 (foo);
		foo = _tmp4_;
		if (_tmp5_) {
			Foo* _tmp6_;
			_tmp6_ = foo;
			_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp6_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		}
		_tmp7_ = foo;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp7_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_g_object_unref0 (foo);
	}
	_tmp8_ = foo_static;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp8_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo_static.ref_count == 1");
	{
		Foo* _tmp9_;
		gchar* name = NULL;
		gint id = 0;
		Foo* _tmp10_;
		gchar* _tmp11_ = NULL;
		gint _tmp12_ = 0;
		_tmp9_ = foo_static;
		g_object_set (G_TYPE_CHECK_INSTANCE_CAST (_tmp9_, G_TYPE_OBJECT, GObject), "name", "foo", "id", 42, NULL);
		_tmp10_ = foo_static;
		g_object_get (G_TYPE_CHECK_INSTANCE_CAST (_tmp10_, G_TYPE_OBJECT, GObject), "name", &_tmp11_, "id", &_tmp12_, NULL);
		_g_free0 (name);
		name = _tmp11_;
		id = _tmp12_;
		_vala_assert (g_strcmp0 (name, "foo") == 0, "name == \"foo\"");
		_vala_assert (id == 42, "id == 42");
		_g_free0 (name);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

