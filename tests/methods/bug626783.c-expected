/* methods_bug626783.c generated by valac, the Vala compiler
 * generated from methods_bug626783.vala, do not modify */

#include <glib-object.h>
#include <gobject/gvaluecollector.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEST, TestClass))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define IS_TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEST))
#define TEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEST, TestClass))

typedef struct _Test Test;
typedef struct _TestClass TestClass;
typedef struct _TestPrivate TestPrivate;
typedef struct _ParamSpecTest ParamSpecTest;
#define _test_unref0(var) ((var == NULL) ? NULL : (var = (test_unref (var), NULL)))

struct _Test {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TestPrivate * priv;
};

struct _TestClass {
	GTypeClass parent_class;
	void (*finalize) (Test *self);
};

struct _TestPrivate {
	GType g_type;
	GBoxedCopyFunc g_dup_func;
	GDestroyNotify g_destroy_func;
	GType h_type;
	GBoxedCopyFunc h_dup_func;
	GDestroyNotify h_destroy_func;
};

struct _ParamSpecTest {
	GParamSpec parent_instance;
};

static gint Test_private_offset;
static gpointer test_parent_class = NULL;

VALA_EXTERN gpointer test_ref (gpointer instance);
VALA_EXTERN void test_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_test (const gchar* name,
                             const gchar* nick,
                             const gchar* blurb,
                             GType object_type,
                             GParamFlags flags);
VALA_EXTERN void value_set_test (GValue* value,
                     gpointer v_object);
VALA_EXTERN void value_take_test (GValue* value,
                      gpointer v_object);
VALA_EXTERN gpointer value_get_test (const GValue* value);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, test_unref)
VALA_EXTERN Test* test_new (GType g_type,
                GBoxedCopyFunc g_dup_func,
                GDestroyNotify g_destroy_func,
                GType h_type,
                GBoxedCopyFunc h_dup_func,
                GDestroyNotify h_destroy_func);
VALA_EXTERN Test* test_construct (GType object_type,
                      GType g_type,
                      GBoxedCopyFunc g_dup_func,
                      GDestroyNotify g_destroy_func,
                      GType h_type,
                      GBoxedCopyFunc h_dup_func,
                      GDestroyNotify h_destroy_func);
static void test_finalize (Test * obj);
static GType test_get_type_once (void);
VALA_EXTERN void foo (GType t_type,
          GBoxedCopyFunc t_dup_func,
          GDestroyNotify t_destroy_func,
          Test* t);
VALA_EXTERN void bar (GType a_type,
          GBoxedCopyFunc a_dup_func,
          GDestroyNotify a_destroy_func,
          GType b_type,
          GBoxedCopyFunc b_dup_func,
          GDestroyNotify b_destroy_func,
          Test* t);
VALA_EXTERN gconstpointer* baz (GType t_type,
                    GBoxedCopyFunc t_dup_func,
                    GDestroyNotify t_destroy_func);
static void _vala_main (void);

static inline gpointer
test_get_instance_private (Test* self)
{
	return G_STRUCT_MEMBER_P (self, Test_private_offset);
}

Test*
test_construct (GType object_type,
                GType g_type,
                GBoxedCopyFunc g_dup_func,
                GDestroyNotify g_destroy_func,
                GType h_type,
                GBoxedCopyFunc h_dup_func,
                GDestroyNotify h_destroy_func)
{
	Test* self = NULL;
	self = (Test*) g_type_create_instance (object_type);
	self->priv->g_type = g_type;
	self->priv->g_dup_func = g_dup_func;
	self->priv->g_destroy_func = g_destroy_func;
	self->priv->h_type = h_type;
	self->priv->h_dup_func = h_dup_func;
	self->priv->h_destroy_func = h_destroy_func;
	return self;
}

Test*
test_new (GType g_type,
          GBoxedCopyFunc g_dup_func,
          GDestroyNotify g_destroy_func,
          GType h_type,
          GBoxedCopyFunc h_dup_func,
          GDestroyNotify h_destroy_func)
{
	return test_construct (TYPE_TEST, g_type, g_dup_func, g_destroy_func, h_type, h_dup_func, h_destroy_func);
}

static void
value_test_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_test_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		test_unref (value->data[0].v_pointer);
	}
}

static void
value_test_copy_value (const GValue* src_value,
                       GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = test_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_test_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_test_collect_value (GValue* value,
                          guint n_collect_values,
                          GTypeCValue* collect_values,
                          guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Test * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = test_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_test_lcopy_value (const GValue* value,
                        guint n_collect_values,
                        GTypeCValue* collect_values,
                        guint collect_flags)
{
	Test ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = test_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_test (const gchar* name,
                 const gchar* nick,
                 const gchar* blurb,
                 GType object_type,
                 GParamFlags flags)
{
	ParamSpecTest* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_TEST), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_test (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST), NULL);
	return value->data[0].v_pointer;
}

void
value_set_test (GValue* value,
                gpointer v_object)
{
	Test * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_TEST));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		test_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		test_unref (old);
	}
}

void
value_take_test (GValue* value,
                 gpointer v_object)
{
	Test * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_TEST));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		test_unref (old);
	}
}

static void
test_class_init (TestClass * klass,
                 gpointer klass_data)
{
	test_parent_class = g_type_class_peek_parent (klass);
	((TestClass *) klass)->finalize = test_finalize;
	g_type_class_adjust_private_offset (klass, &Test_private_offset);
}

static void
test_instance_init (Test * self,
                    gpointer klass)
{
	self->priv = test_get_instance_private (self);
	self->ref_count = 1;
}

static void
test_finalize (Test * obj)
{
	Test * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TEST, Test);
	g_signal_handlers_destroy (self);
}

static GType
test_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_test_init, value_test_free_value, value_test_copy_value, value_test_peek_pointer, "p", value_test_collect_value, "p", value_test_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (TestClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Test), 0, (GInstanceInitFunc) test_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType test_type_id;
	test_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Test", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Test_private_offset = g_type_add_instance_private (test_type_id, sizeof (TestPrivate));
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

gpointer
test_ref (gpointer instance)
{
	Test * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
test_unref (gpointer instance)
{
	Test * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		TEST_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

void
foo (GType t_type,
     GBoxedCopyFunc t_dup_func,
     GDestroyNotify t_destroy_func,
     Test* t)
{
	g_return_if_fail (IS_TEST (t));
}

void
bar (GType a_type,
     GBoxedCopyFunc a_dup_func,
     GDestroyNotify a_destroy_func,
     GType b_type,
     GBoxedCopyFunc b_dup_func,
     GDestroyNotify b_destroy_func,
     Test* t)
{
	g_return_if_fail (IS_TEST (t));
}

gconstpointer*
baz (GType t_type,
     GBoxedCopyFunc t_dup_func,
     GDestroyNotify t_destroy_func)
{
	gconstpointer* result;
	result = NULL;
	return result;
}

static void
_vala_main (void)
{
	Test* f = NULL;
	Test* _tmp0_;
	Test* g = NULL;
	Test* _tmp1_;
	gint* i = NULL;
	gconstpointer* _tmp2_;
	_tmp0_ = test_new (G_TYPE_INT, NULL, NULL, G_TYPE_INT, NULL, NULL);
	f = _tmp0_;
	foo (G_TYPE_INT, NULL, NULL, f);
	_tmp1_ = test_new (TYPE_TEST, (GBoxedCopyFunc) test_ref, (GDestroyNotify) test_unref, G_TYPE_INT, NULL, NULL);
	g = _tmp1_;
	bar (G_TYPE_CHAR, NULL, NULL, G_TYPE_UINT, NULL, NULL, g);
	_tmp2_ = baz (G_TYPE_INT, NULL, NULL);
	i = _tmp2_;
	_test_unref0 (g);
	_test_unref0 (f);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

