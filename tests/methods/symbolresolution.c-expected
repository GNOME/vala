/* methods_symbolresolution.c generated by valac, the Vala compiler
 * generated from methods_symbolresolution.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_CLASS (class_get_type ())
#define CLASS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CLASS, Class))
#define CLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_CLASS, ClassClass))
#define IS_CLASS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CLASS))
#define IS_CLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_CLASS))
#define CLASS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CLASS, ClassClass))

typedef struct _Class Class;
typedef struct _ClassClass ClassClass;
typedef struct _ClassPrivate ClassPrivate;
typedef void (*ClassFoo) (gpointer user_data);
typedef struct _Block1Data Block1Data;
#define _class_unref0(var) ((var == NULL) ? NULL : (var = (class_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ParamSpecClass ParamSpecClass;

struct _Class {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ClassPrivate * priv;
};

struct _ClassClass {
	GTypeClass parent_class;
	void (*finalize) (Class *self);
};

struct _Block1Data {
	int _ref_count_;
	Class* self;
	ClassFoo foo;
	gpointer foo_target;
};

struct _ParamSpecClass {
	GParamSpec parent_instance;
};

static gpointer class_parent_class = NULL;

VALA_EXTERN gpointer class_ref (gpointer instance);
VALA_EXTERN void class_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_class (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags);
VALA_EXTERN void value_set_class (GValue* value,
                      gpointer v_object);
VALA_EXTERN void value_take_class (GValue* value,
                       gpointer v_object);
VALA_EXTERN gpointer value_get_class (const GValue* value);
VALA_EXTERN GType class_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Class, class_unref)
VALA_EXTERN void class_foo (Class* self);
VALA_EXTERN void class_test (Class* self,
                 ClassFoo foo,
                 gpointer foo_target);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void __vala_lambda0__class_foo (gpointer self);
static void class_active_scope (Class* self);
VALA_EXTERN Class* class_new (void);
VALA_EXTERN Class* class_construct (GType object_type);
static void class_finalize (Class * obj);
static GType class_get_type_once (void);
static void _vala_main (void);
static void _vala_lambda1_ (void);
static void __vala_lambda1__class_foo (gpointer self);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

void
class_foo (Class* self)
{
	g_return_if_fail (IS_CLASS (self));
	g_assert_not_reached ();
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		Class* self;
		self = _data1_->self;
		_class_unref0 (self);
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	Class* self;
	self = _data1_->self;
	_data1_->foo (_data1_->foo_target);
}

static void
__vala_lambda0__class_foo (gpointer self)
{
	_vala_lambda0_ (self);
}

void
class_test (Class* self,
            ClassFoo foo,
            gpointer foo_target)
{
	Block1Data* _data1_;
	ClassFoo func = NULL;
	gpointer func_target;
	GDestroyNotify func_target_destroy_notify;
	g_return_if_fail (IS_CLASS (self));
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->self = class_ref (self);
	_data1_->foo = foo;
	_data1_->foo_target = foo_target;
	func = __vala_lambda0__class_foo;
	func_target = block1_data_ref (_data1_);
	func_target_destroy_notify = block1_data_unref;
	func (func_target);
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

static void
class_active_scope (Class* self)
{
	gchar** _tmp0_;
	gchar* bar = NULL;
	gchar* _tmp2_;
	g_return_if_fail (IS_CLASS (self));
	_tmp0_ = g_new0 (gchar*, 0 + 1);
	{
		gchar** bar_collection = NULL;
		gint bar_collection_length1 = 0;
		gint _bar_collection_size_ = 0;
		gint bar_it = 0;
		bar_collection = _tmp0_;
		bar_collection_length1 = 0;
		for (bar_it = 0; bar_it < bar_collection_length1; bar_it = bar_it + 1) {
			gchar* _tmp1_;
			gchar* bar = NULL;
			_tmp1_ = g_strdup (bar_collection[bar_it]);
			bar = _tmp1_;
			{
				_g_free0 (bar);
			}
		}
		bar_collection = (_vala_array_free (bar_collection, bar_collection_length1, (GDestroyNotify) g_free), NULL);
	}
	_tmp2_ = g_strdup ("bar");
	bar = _tmp2_;
	_g_free0 (bar);
}

Class*
class_construct (GType object_type)
{
	Class* self = NULL;
	self = (Class*) g_type_create_instance (object_type);
	return self;
}

Class*
class_new (void)
{
	return class_construct (TYPE_CLASS);
}

static void
value_class_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_class_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		class_unref (value->data[0].v_pointer);
	}
}

static void
value_class_copy_value (const GValue* src_value,
                        GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = class_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_class_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_class_collect_value (GValue* value,
                           guint n_collect_values,
                           GTypeCValue* collect_values,
                           guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Class * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = class_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_class_lcopy_value (const GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	Class ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = class_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_class (const gchar* name,
                  const gchar* nick,
                  const gchar* blurb,
                  GType object_type,
                  GParamFlags flags)
{
	ParamSpecClass* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_CLASS), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_class (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_CLASS), NULL);
	return value->data[0].v_pointer;
}

void
value_set_class (GValue* value,
                 gpointer v_object)
{
	Class * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_CLASS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_CLASS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		class_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		class_unref (old);
	}
}

void
value_take_class (GValue* value,
                  gpointer v_object)
{
	Class * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_CLASS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_CLASS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		class_unref (old);
	}
}

static void
class_class_init (ClassClass * klass,
                  gpointer klass_data)
{
	class_parent_class = g_type_class_peek_parent (klass);
	((ClassClass *) klass)->finalize = class_finalize;
}

static void
class_instance_init (Class * self,
                     gpointer klass)
{
	self->ref_count = 1;
}

static void
class_finalize (Class * obj)
{
	Class * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_CLASS, Class);
	g_signal_handlers_destroy (self);
}

static GType
class_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_class_init, value_class_free_value, value_class_copy_value, value_class_peek_pointer, "p", value_class_collect_value, "p", value_class_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (ClassClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) class_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Class), 0, (GInstanceInitFunc) class_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType class_type_id;
	class_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Class", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return class_type_id;
}

GType
class_get_type (void)
{
	static volatile gsize class_type_id__once = 0;
	if (g_once_init_enter (&class_type_id__once)) {
		GType class_type_id;
		class_type_id = class_get_type_once ();
		g_once_init_leave (&class_type_id__once, class_type_id);
	}
	return class_type_id__once;
}

gpointer
class_ref (gpointer instance)
{
	Class * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
class_unref (gpointer instance)
{
	Class * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		CLASS_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
_vala_lambda1_ (void)
{
}

static void
__vala_lambda1__class_foo (gpointer self)
{
	_vala_lambda1_ ();
}

static void
_vala_main (void)
{
	Class* cl = NULL;
	Class* _tmp0_;
	_tmp0_ = class_new ();
	cl = _tmp0_;
	class_test (cl, __vala_lambda1__class_foo, NULL);
	_class_unref0 (cl);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

