/* methods_bug648320.c generated by valac, the Vala compiler
 * generated from methods_bug648320.vala, do not modify */

#include <glib-object.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define FOO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_FOO, FooIface))

typedef struct _Foo Foo;
typedef struct _FooIface FooIface;
typedef struct _Block1Data Block1Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _FooIface {
	GTypeInterface parent_iface;
	gint (*get_i) (Foo* self);
	void (*set_i) (Foo* self, gint value);
};

struct _Block1Data {
	int _ref_count_;
	Foo* self;
	gint j;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN void foo_foo (Foo* self);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static gboolean _vala_lambda0_ (Block1Data* _data1_);
VALA_EXTERN gint foo_get_i (Foo* self);
static gboolean __vala_lambda0__gsource_func (gpointer self);
VALA_EXTERN void foo_set_i (Foo* self,
                gint value);
static GType foo_get_type_once (void);
static void _vala_main (void);

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		Foo* self;
		self = _data1_->self;
		_g_object_unref0 (self);
		g_slice_free (Block1Data, _data1_);
	}
}

static gboolean
_vala_lambda0_ (Block1Data* _data1_)
{
	Foo* self;
	gint _tmp0_;
	gint _tmp1_;
	gboolean result;
	self = _data1_->self;
	_tmp0_ = foo_get_i (self);
	_tmp1_ = _tmp0_;
	result = _data1_->j == _tmp1_;
	return result;
}

static gboolean
__vala_lambda0__gsource_func (gpointer self)
{
	gboolean result;
	result = _vala_lambda0_ (self);
	return result;
}

void
foo_foo (Foo* self)
{
	Block1Data* _data1_;
	GSourceFunc bar = NULL;
	gpointer bar_target;
	GDestroyNotify bar_target_destroy_notify;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->self = g_object_ref (self);
	_data1_->j = 0;
	bar = __vala_lambda0__gsource_func;
	bar_target = block1_data_ref (_data1_);
	bar_target_destroy_notify = block1_data_unref;
	(bar_target_destroy_notify == NULL) ? NULL : (bar_target_destroy_notify (bar_target), NULL);
	bar = NULL;
	bar_target = NULL;
	bar_target_destroy_notify = NULL;
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

gint
foo_get_i (Foo* self)
{
	FooIface* _iface_;
	g_return_val_if_fail (IS_FOO (self), 0);
	_iface_ = FOO_GET_INTERFACE (self);
	if (_iface_->get_i) {
		return _iface_->get_i (self);
	}
	return -1;
}

void
foo_set_i (Foo* self,
           gint value)
{
	FooIface* _iface_;
	g_return_if_fail (IS_FOO (self));
	_iface_ = FOO_GET_INTERFACE (self);
	if (_iface_->set_i) {
		_iface_->set_i (self, value);
	}
}

static void
foo_default_init (FooIface * iface,
                  gpointer iface_data)
{
	g_object_interface_install_property (iface, g_param_spec_int ("i", "i", "i", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_INTERFACE, "Foo", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (foo_type_id, G_TYPE_OBJECT);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_main (void)
{
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

