/* methods_bug774060.c generated by valac, the Vala compiler
 * generated from methods_bug774060.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
	const gchar* (*format_virtual) (Foo* self, const gchar* bar, gint baz, const gchar* format) G_GNUC_FORMAT(4) ;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN const gchar* foo_format (Foo* self,
                         const gchar* bar,
                         gint baz,
                         const gchar* format) G_GNUC_FORMAT(4) ;
VALA_EXTERN const gchar* foo_format_pos (const gchar* bar,
                             gint baz,
                             const gchar* format,
                             Foo* self) G_GNUC_FORMAT(3) ;
static const gchar* foo_real_format_virtual (Foo* self,
                                      const gchar* bar,
                                      gint baz,
                                      const gchar* format) G_GNUC_FORMAT(4) ;
VALA_EXTERN const gchar* foo_format_static (const gchar* foo,
                                gint baz,
                                const gchar* format) G_GNUC_FORMAT(3) ;
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static GType foo_get_type_once (void);
VALA_EXTERN const gchar* format_wrapper (const gchar* format) G_GNUC_FORMAT(1) ;
static void _vala_main (void);

const gchar*
foo_format (Foo* self,
            const gchar* bar,
            gint baz,
            const gchar* format)
{
	const gchar* result;
	g_return_val_if_fail (IS_FOO (self), NULL);
	g_return_val_if_fail (bar != NULL, NULL);
	g_return_val_if_fail (format != NULL, NULL);
	result = format;
	return result;
}

const gchar*
foo_format_pos (const gchar* bar,
                gint baz,
                const gchar* format,
                Foo* self)
{
	const gchar* result;
	g_return_val_if_fail (IS_FOO (self), NULL);
	g_return_val_if_fail (bar != NULL, NULL);
	g_return_val_if_fail (format != NULL, NULL);
	result = format;
	return result;
}

static const gchar*
foo_real_format_virtual (Foo* self,
                         const gchar* bar,
                         gint baz,
                         const gchar* format)
{
	const gchar* result;
	g_return_val_if_fail (bar != NULL, NULL);
	g_return_val_if_fail (format != NULL, NULL);
	result = format;
	return result;
}

const gchar*
foo_format_static (const gchar* foo,
                   gint baz,
                   const gchar* format)
{
	const gchar* result;
	g_return_val_if_fail (foo != NULL, NULL);
	g_return_val_if_fail (format != NULL, NULL);
	result = format;
	return result;
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->format_virtual = (const gchar* (*) (Foo*, const gchar*, gint, const gchar*)) foo_real_format_virtual;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

const gchar*
format_wrapper (const gchar* format)
{
	const gchar* result;
	g_return_val_if_fail (format != NULL, NULL);
	result = format;
	return result;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	g_print (format_wrapper ("%d"), 42);
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	g_print (foo_format (foo, "", 0, "%d"), 42);
	g_print (foo_format_pos ("", 0, "%d", foo), 42);
	g_print (FOO_GET_CLASS (foo)->format_virtual (foo, "", 0, "%d"), 42);
	g_print (foo_format_static ("", 0, "%d"), 42);
	_g_object_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

