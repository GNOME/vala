/* methods_bug622570.c generated by valac, the Vala compiler
 * generated from methods_bug622570.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

typedef gint (*Deleg1) (gint* foo, gpointer user_data);
typedef void (*Deleg2) (GValue* foo, gint* bar, gpointer user_data);
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
static gint _vala_lambda0_ (gint* foo);
static gint __vala_lambda0__deleg1 (gint* foo,
                             gpointer self);
static void _vala_lambda1_ (GValue* foo,
                     gint* bar);
static void __vala_lambda1__deleg2 (GValue* foo,
                             gint* bar,
                             gpointer self);

static gint
_vala_lambda0_ (gint* foo)
{
	gint result;
	result = (*foo) + 5;
	return result;
}

static gint
__vala_lambda0__deleg1 (gint* foo,
                        gpointer self)
{
	gint result;
	result = _vala_lambda0_ (foo);
	return result;
}

static void
_vala_lambda1_ (GValue* foo,
                gint* bar)
{
	GValue _vala_foo = {0};
	GValue _tmp0_ = {0};
	g_value_init (&_tmp0_, G_TYPE_INT);
	g_value_set_int (&_tmp0_, 10);
	G_IS_VALUE (&_vala_foo) ? (g_value_unset (&_vala_foo), NULL) : NULL;
	_vala_foo = _tmp0_;
	*bar = 3;
	if (foo) {
		*foo = _vala_foo;
	} else {
		G_IS_VALUE (&_vala_foo) ? (g_value_unset (&_vala_foo), NULL) : NULL;
	}
}

static void
__vala_lambda1__deleg2 (GValue* foo,
                        gint* bar,
                        gpointer self)
{
	_vala_lambda1_ (foo, bar);
}

static void
_vala_main (void)
{
	gint a = 0;
	gint b = 0;
	GValue c = {0};
	Deleg1 d1 = NULL;
	gpointer d1_target;
	GDestroyNotify d1_target_destroy_notify;
	Deleg2 d2 = NULL;
	gpointer d2_target;
	GDestroyNotify d2_target_destroy_notify;
	gint _tmp0_;
	GValue _tmp1_ = {0};
	GValue _tmp2_;
	a = 3;
	b = 4;
	d1 = __vala_lambda0__deleg1;
	d1_target = NULL;
	d1_target_destroy_notify = NULL;
	d2 = __vala_lambda1__deleg2;
	d2_target = NULL;
	d2_target_destroy_notify = NULL;
	_tmp0_ = d1 (&a, d1_target);
	_vala_assert (_tmp0_ == 8, "d1 (ref a) == 8");
	d2 (&_tmp1_, &b, d2_target);
	G_IS_VALUE (&c) ? (g_value_unset (&c), NULL) : NULL;
	c = _tmp1_;
	_tmp2_ = c;
	_vala_assert (g_value_get_int (&_tmp2_) == 10, "c == 10");
	_vala_assert (b == 3, "b == 3");
	(d2_target_destroy_notify == NULL) ? NULL : (d2_target_destroy_notify (d2_target), NULL);
	d2 = NULL;
	d2_target = NULL;
	d2_target_destroy_notify = NULL;
	(d1_target_destroy_notify == NULL) ? NULL : (d1_target_destroy_notify (d1_target), NULL);
	d1 = NULL;
	d1_target = NULL;
	d1_target_destroy_notify = NULL;
	G_IS_VALUE (&c) ? (g_value_unset (&c), NULL) : NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

