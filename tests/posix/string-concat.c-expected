/* posix_string_concat.c generated by valac, the Vala compiler
 * generated from posix_string_concat.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <assert.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _free0(var) ((var == NULL) ? NULL : (var = (free (var), NULL)))

VALA_EXTERN const char* get_foo (void);
static void _vala_main (void);

const char*
get_foo (void)
{
	const char* result;
	result = "foo";
	return result;
}

static int
_strcmp0 (const void * s1,
          const void * s2)
{
	if (!s1) {
		return -(s1 != s2);
	}
	if (!s2) {
		return s1 != s2;
	}
	return strcmp (s1, s2);
}

static void
_vala_main (void)
{
	char* s = NULL;
	const char* _tmp0_;
	char* _tmp1_;
	char* _tmp2_;
	char* _tmp3_;
	char* _tmp4_;
	_tmp0_ = get_foo ();
	_tmp1_ = strcat (strcpy (malloc (1 + (strlen (_tmp0_) + strlen ("bar"))), _tmp0_), "bar");
	_tmp2_ = _tmp1_;
	_tmp3_ = strcat (strcpy (malloc (1 + (strlen (_tmp2_) + strlen ("!"))), _tmp2_), "!");
	_tmp4_ = _tmp3_;
	_free0 (_tmp2_);
	s = _tmp4_;
	assert (_strcmp0 (s, "foobar!") == 0);
	_free0 (s);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

