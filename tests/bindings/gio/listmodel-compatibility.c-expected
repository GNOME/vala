/* bindings_gio_listmodel_compatibility.c generated by valac, the Vala compiler
 * generated from bindings_gio_listmodel_compatibility.vala, do not modify */

#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>

#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_NOT_ALIST_VIEW (not_alist_view_get_type ())
#define NOT_ALIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_NOT_ALIST_VIEW, NotAListView))
#define NOT_ALIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_NOT_ALIST_VIEW, NotAListViewClass))
#define IS_NOT_ALIST_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_NOT_ALIST_VIEW))
#define IS_NOT_ALIST_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_NOT_ALIST_VIEW))
#define NOT_ALIST_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_NOT_ALIST_VIEW, NotAListViewClass))

typedef struct _NotAListView NotAListView;
typedef struct _NotAListViewClass NotAListViewClass;
typedef struct _NotAListViewPrivate NotAListViewPrivate;
enum  {
	NOT_ALIST_VIEW_0_PROPERTY,
	NOT_ALIST_VIEW_G_TYPE_PROPERTY,
	NOT_ALIST_VIEW_MODEL_PROPERTY,
	NOT_ALIST_VIEW_NUM_PROPERTIES
};
static GParamSpec* not_alist_view_properties[NOT_ALIST_VIEW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_MODEL_PROPERTY,
	FOO_OTHER_THING_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];

struct _NotAListView {
	GObject parent_instance;
	NotAListViewPrivate * priv;
};

struct _NotAListViewClass {
	GObjectClass parent_class;
};

struct _NotAListViewPrivate {
	GType _g_type;
	GListModel* _model;
};

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooPrivate {
	GListModel* _model;
	NotAListView* _other_thing;
};

static gint NotAListView_private_offset;
static gpointer not_alist_view_parent_class = NULL;
static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
static GListModelInterface * foo_g_list_model_parent_iface = NULL;

VALA_EXTERN GType not_alist_view_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (NotAListView, g_object_unref)
VALA_EXTERN NotAListView* not_alist_view_new_with_type (GType g_type);
VALA_EXTERN NotAListView* not_alist_view_construct_with_type (GType object_type,
                                                  GType g_type);
VALA_EXTERN NotAListView* not_alist_view_new (void);
VALA_EXTERN NotAListView* not_alist_view_construct (GType object_type);
VALA_EXTERN GType not_alist_view_get_g_type (NotAListView* self);
static void not_alist_view_set_g_type (NotAListView* self,
                                GType value);
VALA_EXTERN GListModel* not_alist_view_get_model (NotAListView* self);
VALA_EXTERN void not_alist_view_set_model (NotAListView* self,
                               GListModel* value);
static GObject * not_alist_view_constructor (GType type,
                                      guint n_construct_properties,
                                      GObjectConstructParam * construct_properties);
static void not_alist_view_finalize (GObject * obj);
static GType not_alist_view_get_type_once (void);
static void _vala_not_alist_view_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec);
static void _vala_not_alist_view_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
static GType foo_real_get_item_type (GListModel* base);
static GObject* foo_real_get_item (GListModel* base,
                            guint pos);
static guint foo_real_get_n_items (GListModel* base);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN GListModel* foo_get_model (Foo* self);
VALA_EXTERN void foo_set_model (Foo* self,
                    GListModel* value);
VALA_EXTERN NotAListView* foo_get_other_thing (Foo* self);
VALA_EXTERN void foo_set_other_thing (Foo* self,
                          NotAListView* value);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
static void _vala_main (void);

static inline gpointer
not_alist_view_get_instance_private (NotAListView* self)
{
	return G_STRUCT_MEMBER_P (self, NotAListView_private_offset);
}

NotAListView*
not_alist_view_construct_with_type (GType object_type,
                                    GType g_type)
{
	NotAListView * self = NULL;
	self = (NotAListView*) g_object_new (object_type, "g-type", g_type, NULL);
	return self;
}

NotAListView*
not_alist_view_new_with_type (GType g_type)
{
	return not_alist_view_construct_with_type (TYPE_NOT_ALIST_VIEW, g_type);
}

NotAListView*
not_alist_view_construct (GType object_type)
{
	NotAListView * self = NULL;
	self = (NotAListView*) g_object_new (object_type, NULL);
	return self;
}

NotAListView*
not_alist_view_new (void)
{
	return not_alist_view_construct (TYPE_NOT_ALIST_VIEW);
}

GType
not_alist_view_get_g_type (NotAListView* self)
{
	GType result;
	g_return_val_if_fail (IS_NOT_ALIST_VIEW (self), 0UL);
	result = self->priv->_g_type;
	return result;
}

static void
not_alist_view_set_g_type (NotAListView* self,
                           GType value)
{
	GType old_value;
	g_return_if_fail (IS_NOT_ALIST_VIEW (self));
	old_value = not_alist_view_get_g_type (self);
	if (old_value != value) {
		self->priv->_g_type = value;
		g_object_notify_by_pspec ((GObject *) self, not_alist_view_properties[NOT_ALIST_VIEW_G_TYPE_PROPERTY]);
	}
}

GListModel*
not_alist_view_get_model (NotAListView* self)
{
	GListModel* result;
	GListModel* _tmp0_;
	g_return_val_if_fail (IS_NOT_ALIST_VIEW (self), NULL);
	_tmp0_ = self->priv->_model;
	result = _tmp0_;
	return result;
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

void
not_alist_view_set_model (NotAListView* self,
                          GListModel* value)
{
	GListModel* old_value;
	g_return_if_fail (IS_NOT_ALIST_VIEW (self));
	old_value = not_alist_view_get_model (self);
	if (old_value != value) {
		GListModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_model);
		self->priv->_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, not_alist_view_properties[NOT_ALIST_VIEW_MODEL_PROPERTY]);
	}
}

static GObject *
not_alist_view_constructor (GType type,
                            guint n_construct_properties,
                            GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	NotAListView * self;
	GType _tmp0_;
	GListStore* _tmp1_;
	GListStore* _tmp2_;
	parent_class = G_OBJECT_CLASS (not_alist_view_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_NOT_ALIST_VIEW, NotAListView);
	_tmp0_ = self->priv->_g_type;
	_tmp1_ = g_list_store_new (_tmp0_);
	_tmp2_ = _tmp1_;
	not_alist_view_set_model (self, G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, g_list_model_get_type (), GListModel));
	_g_object_unref0 (_tmp2_);
	return obj;
}

static void
not_alist_view_class_init (NotAListViewClass * klass,
                           gpointer klass_data)
{
	not_alist_view_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &NotAListView_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_not_alist_view_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_not_alist_view_set_property;
	G_OBJECT_CLASS (klass)->constructor = not_alist_view_constructor;
	G_OBJECT_CLASS (klass)->finalize = not_alist_view_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), NOT_ALIST_VIEW_G_TYPE_PROPERTY, not_alist_view_properties[NOT_ALIST_VIEW_G_TYPE_PROPERTY] = g_param_spec_gtype ("g-type", "g-type", "g-type", G_TYPE_OBJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), NOT_ALIST_VIEW_MODEL_PROPERTY, not_alist_view_properties[NOT_ALIST_VIEW_MODEL_PROPERTY] = g_param_spec_object ("model", "model", "model", g_list_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
not_alist_view_instance_init (NotAListView * self,
                              gpointer klass)
{
	self->priv = not_alist_view_get_instance_private (self);
	self->priv->_g_type = G_TYPE_OBJECT;
}

static void
not_alist_view_finalize (GObject * obj)
{
	NotAListView * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_NOT_ALIST_VIEW, NotAListView);
	_g_object_unref0 (self->priv->_model);
	G_OBJECT_CLASS (not_alist_view_parent_class)->finalize (obj);
}

static GType
not_alist_view_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (NotAListViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) not_alist_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (NotAListView), 0, (GInstanceInitFunc) not_alist_view_instance_init, NULL };
	GType not_alist_view_type_id;
	not_alist_view_type_id = g_type_register_static (G_TYPE_OBJECT, "NotAListView", &g_define_type_info, 0);
	NotAListView_private_offset = g_type_add_instance_private (not_alist_view_type_id, sizeof (NotAListViewPrivate));
	return not_alist_view_type_id;
}

GType
not_alist_view_get_type (void)
{
	static volatile gsize not_alist_view_type_id__once = 0;
	if (g_once_init_enter (&not_alist_view_type_id__once)) {
		GType not_alist_view_type_id;
		not_alist_view_type_id = not_alist_view_get_type_once ();
		g_once_init_leave (&not_alist_view_type_id__once, not_alist_view_type_id);
	}
	return not_alist_view_type_id__once;
}

static void
_vala_not_alist_view_get_property (GObject * object,
                                   guint property_id,
                                   GValue * value,
                                   GParamSpec * pspec)
{
	NotAListView * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_NOT_ALIST_VIEW, NotAListView);
	switch (property_id) {
		case NOT_ALIST_VIEW_G_TYPE_PROPERTY:
		g_value_set_gtype (value, not_alist_view_get_g_type (self));
		break;
		case NOT_ALIST_VIEW_MODEL_PROPERTY:
		g_value_set_object (value, not_alist_view_get_model (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_not_alist_view_set_property (GObject * object,
                                   guint property_id,
                                   const GValue * value,
                                   GParamSpec * pspec)
{
	NotAListView * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_NOT_ALIST_VIEW, NotAListView);
	switch (property_id) {
		case NOT_ALIST_VIEW_G_TYPE_PROPERTY:
		not_alist_view_set_g_type (self, g_value_get_gtype (value));
		break;
		case NOT_ALIST_VIEW_MODEL_PROPERTY:
		not_alist_view_set_model (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

static GType
foo_real_get_item_type (GListModel* base)
{
	Foo * self;
	GType result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_FOO, Foo);
	result = G_TYPE_OBJECT;
	return result;
}

static GObject*
foo_real_get_item (GListModel* base,
                   guint pos)
{
	Foo * self;
	GObject* result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_FOO, Foo);
	result = NULL;
	return result;
}

static guint
foo_real_get_n_items (GListModel* base)
{
	Foo * self;
	guint result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_FOO, Foo);
	result = (guint) 0;
	return result;
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

GListModel*
foo_get_model (Foo* self)
{
	GListModel* result;
	GListModel* _tmp0_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_model;
	result = _tmp0_;
	return result;
}

void
foo_set_model (Foo* self,
               GListModel* value)
{
	GListModel* old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_model (self);
	if (old_value != value) {
		GListModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_model);
		self->priv->_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_MODEL_PROPERTY]);
	}
}

NotAListView*
foo_get_other_thing (Foo* self)
{
	NotAListView* result;
	NotAListView* _tmp0_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_other_thing;
	result = _tmp0_;
	return result;
}

void
foo_set_other_thing (Foo* self,
                     NotAListView* value)
{
	NotAListView* old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_other_thing (self);
	if (old_value != value) {
		NotAListView* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_other_thing);
		self->priv->_other_thing = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_OTHER_THING_PROPERTY]);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_MODEL_PROPERTY, foo_properties[FOO_MODEL_PROPERTY] = g_param_spec_object ("model", "model", "model", g_list_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_OTHER_THING_PROPERTY, foo_properties[FOO_OTHER_THING_PROPERTY] = g_param_spec_object ("other-thing", "other-thing", "other-thing", TYPE_NOT_ALIST_VIEW, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
foo_g_list_model_interface_init (GListModelInterface * iface,
                                 gpointer iface_data)
{
	foo_g_list_model_parent_iface = g_type_interface_peek_parent (iface);
	iface->get_item_type = (GType (*) (GListModel*)) foo_real_get_item_type;
	iface->get_item = (gpointer (*) (GListModel*, guint)) foo_real_get_item;
	iface->get_n_items = (guint (*) (GListModel*)) foo_real_get_n_items;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	_g_object_unref0 (self->priv->_model);
	_g_object_unref0 (self->priv->_other_thing);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	static const GInterfaceInfo g_list_model_info = { (GInterfaceInitFunc) foo_g_list_model_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	g_type_add_interface_static (foo_type_id, g_list_model_get_type (), &g_list_model_info);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_MODEL_PROPERTY:
		g_value_set_object (value, foo_get_model (self));
		break;
		case FOO_OTHER_THING_PROPERTY:
		g_value_set_object (value, foo_get_other_thing (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_MODEL_PROPERTY:
		foo_set_model (self, g_value_get_object (value));
		break;
		case FOO_OTHER_THING_PROPERTY:
		foo_set_other_thing (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	GListModel* l = NULL;
	GListStore* _tmp0_;
	GObject* o = NULL;
	GListModel* _tmp1_;
	gpointer _tmp2_;
	Foo* foo = NULL;
	Foo* _tmp3_;
	GListModel* _tmp4_;
	GListModel* _tmp5_;
	GListModel* _tmp6_;
	gpointer _tmp7_;
	NotAListView* n = NULL;
	NotAListView* _tmp8_;
	NotAListView* _tmp9_;
	GListModel* _tmp10_;
	GListModel* _tmp11_;
	gpointer _tmp12_;
	GListModel* _tmp13_;
	NotAListView* _tmp14_;
	NotAListView* _tmp15_;
	GListModel* _tmp16_;
	NotAListView* _tmp17_;
	GListModel* _tmp18_;
	GListModel* _tmp19_;
	GListModel* _tmp20_;
	_tmp0_ = g_list_store_new (g_list_model_get_type ());
	l = G_TYPE_CHECK_INSTANCE_CAST (_tmp0_, g_list_model_get_type (), GListModel);
	_tmp1_ = l;
	_tmp2_ = g_list_model_get_item (_tmp1_, (guint) 10);
	o = (GObject*) _tmp2_;
	_tmp3_ = foo_new ();
	foo = _tmp3_;
	_tmp4_ = l;
	foo_set_model (foo, _tmp4_);
	_tmp5_ = foo_get_model (foo);
	_tmp6_ = _tmp5_;
	_tmp7_ = g_list_model_get_item (_tmp6_, (guint) 0);
	_g_object_unref0 (o);
	o = (GObject*) _tmp7_;
	_tmp8_ = not_alist_view_new ();
	n = _tmp8_;
	_tmp9_ = n;
	_tmp10_ = not_alist_view_get_model (_tmp9_);
	_tmp11_ = _tmp10_;
	_tmp12_ = g_list_model_get_item (_tmp11_, (guint) 0);
	_g_object_unref0 (o);
	o = G_TYPE_CHECK_INSTANCE_CAST (_tmp12_, G_TYPE_OBJECT, GObject);
	_tmp13_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (foo, g_list_model_get_type (), GListModel));
	_g_object_unref0 (l);
	l = _tmp13_;
	_tmp14_ = not_alist_view_new ();
	_g_object_unref0 (n);
	n = _tmp14_;
	_tmp15_ = n;
	_tmp16_ = l;
	not_alist_view_set_model (_tmp15_, _tmp16_);
	_tmp17_ = n;
	_tmp18_ = not_alist_view_get_model (_tmp17_);
	_tmp19_ = _tmp18_;
	_tmp20_ = _g_object_ref0 (_tmp19_);
	_g_object_unref0 (l);
	l = _tmp20_;
	_g_object_unref0 (n);
	_g_object_unref0 (foo);
	_g_object_unref0 (o);
	_g_object_unref0 (l);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

