/* resolver_peek_inner_types.c generated by valac, the Vala compiler
 * generated from resolver_peek_inner_types.vala, do not modify */

#include <glib-object.h>
#include <gobject/gvaluecollector.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define BAZ_TYPE_FOO (baz_foo_get_type ())
#define BAZ_FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BAZ_TYPE_FOO, BazFoo))
#define BAZ_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BAZ_TYPE_FOO, BazFooClass))
#define BAZ_IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BAZ_TYPE_FOO))
#define BAZ_IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BAZ_TYPE_FOO))
#define BAZ_FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BAZ_TYPE_FOO, BazFooClass))

typedef struct _BazFoo BazFoo;
typedef struct _BazFooClass BazFooClass;
typedef struct _BazFooPrivate BazFooPrivate;

#define BAZ_FOO_TYPE_BAR1 (baz_foo_bar1_get_type ())
#define BAZ_FOO_BAR1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BAZ_FOO_TYPE_BAR1, BazFooBar1))
#define BAZ_FOO_BAR1_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BAZ_FOO_TYPE_BAR1, BazFooBar1Class))
#define BAZ_FOO_IS_BAR1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BAZ_FOO_TYPE_BAR1))
#define BAZ_FOO_IS_BAR1_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BAZ_FOO_TYPE_BAR1))
#define BAZ_FOO_BAR1_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BAZ_FOO_TYPE_BAR1, BazFooBar1Class))

typedef struct _BazFooBar1 BazFooBar1;
typedef struct _BazFooBar1Class BazFooBar1Class;
typedef struct _BazFooBar1Private BazFooBar1Private;
typedef struct _BazFooParamSpecBar1 BazFooParamSpecBar1;

#define BAZ_FOO_TYPE_IBAR1 (baz_foo_ibar1_get_type ())
#define BAZ_FOO_IBAR1(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BAZ_FOO_TYPE_IBAR1, BazFooIBar1))
#define BAZ_FOO_IS_IBAR1(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BAZ_FOO_TYPE_IBAR1))
#define BAZ_FOO_IBAR1_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BAZ_FOO_TYPE_IBAR1, BazFooIBar1Iface))

typedef struct _BazFooIBar1 BazFooIBar1;
typedef struct _BazFooIBar1Iface BazFooIBar1Iface;
typedef struct _BazParamSpecFoo BazParamSpecFoo;

#define BAZ_TYPE_IFOO (baz_ifoo_get_type ())
#define BAZ_IFOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BAZ_TYPE_IFOO, BazIFoo))
#define BAZ_IS_IFOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BAZ_TYPE_IFOO))
#define BAZ_IFOO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BAZ_TYPE_IFOO, BazIFooIface))

typedef struct _BazIFoo BazIFoo;
typedef struct _BazIFooIface BazIFooIface;

#define BAZ_IFOO_TYPE_BAR2 (baz_ifoo_bar2_get_type ())
#define BAZ_IFOO_BAR2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BAZ_IFOO_TYPE_BAR2, BazIFooBar2))
#define BAZ_IFOO_BAR2_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BAZ_IFOO_TYPE_BAR2, BazIFooBar2Class))
#define BAZ_IFOO_IS_BAR2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BAZ_IFOO_TYPE_BAR2))
#define BAZ_IFOO_IS_BAR2_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BAZ_IFOO_TYPE_BAR2))
#define BAZ_IFOO_BAR2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BAZ_IFOO_TYPE_BAR2, BazIFooBar2Class))

typedef struct _BazIFooBar2 BazIFooBar2;
typedef struct _BazIFooBar2Class BazIFooBar2Class;
typedef struct _BazIFooBar2Private BazIFooBar2Private;
typedef struct _BazIFooParamSpecBar2 BazIFooParamSpecBar2;

#define BAZ_IFOO_TYPE_IBAR2 (baz_ifoo_ibar2_get_type ())
#define BAZ_IFOO_IBAR2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BAZ_IFOO_TYPE_IBAR2, BazIFooIBar2))
#define BAZ_IFOO_IS_IBAR2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BAZ_IFOO_TYPE_IBAR2))
#define BAZ_IFOO_IBAR2_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BAZ_IFOO_TYPE_IBAR2, BazIFooIBar2Iface))

typedef struct _BazIFooIBar2 BazIFooIBar2;
typedef struct _BazIFooIBar2Iface BazIFooIBar2Iface;

#define TYPE_MANAM (manam_get_type ())
#define MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAM, Manam))
#define MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MANAM, ManamClass))
#define IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAM))
#define IS_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MANAM))
#define MANAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MANAM, ManamClass))

typedef struct _Manam Manam;
typedef struct _ManamClass ManamClass;
typedef struct _ManamPrivate ManamPrivate;
#define _baz_foo_bar1_unref0(var) ((var == NULL) ? NULL : (var = (baz_foo_bar1_unref (var), NULL)))
#define _baz_ifoo_bar2_unref0(var) ((var == NULL) ? NULL : (var = (baz_ifoo_bar2_unref (var), NULL)))
#define _baz_foo_unref0(var) ((var == NULL) ? NULL : (var = (baz_foo_unref (var), NULL)))

struct _BazFoo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BazFooPrivate * priv;
};

struct _BazFooClass {
	GTypeClass parent_class;
	void (*finalize) (BazFoo *self);
};

struct _BazFooBar1 {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BazFooBar1Private * priv;
};

struct _BazFooBar1Class {
	GTypeClass parent_class;
	void (*finalize) (BazFooBar1 *self);
};

struct _BazFooParamSpecBar1 {
	GParamSpec parent_instance;
};

struct _BazFooIBar1Iface {
	GTypeInterface parent_iface;
};

struct _BazParamSpecFoo {
	GParamSpec parent_instance;
};

struct _BazIFooIface {
	GTypeInterface parent_iface;
};

struct _BazIFooBar2 {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BazIFooBar2Private * priv;
};

struct _BazIFooBar2Class {
	GTypeClass parent_class;
	void (*finalize) (BazIFooBar2 *self);
};

struct _BazIFooParamSpecBar2 {
	GParamSpec parent_instance;
};

struct _BazIFooIBar2Iface {
	GTypeInterface parent_iface;
};

struct _Manam {
	BazFoo parent_instance;
	ManamPrivate * priv;
};

struct _ManamClass {
	BazFooClass parent_class;
};

static gpointer baz_foo_parent_class = NULL;
static gpointer baz_foo_bar1_parent_class = NULL;
static gpointer baz_ifoo_bar2_parent_class = NULL;
static gpointer manam_parent_class = NULL;
static BazIFooIface * manam_baz_ifoo_parent_iface = NULL;

VALA_EXTERN gpointer baz_foo_ref (gpointer instance);
VALA_EXTERN void baz_foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* baz_param_spec_foo (const gchar* name,
                                const gchar* nick,
                                const gchar* blurb,
                                GType object_type,
                                GParamFlags flags);
VALA_EXTERN void baz_value_set_foo (GValue* value,
                        gpointer v_object);
VALA_EXTERN void baz_value_take_foo (GValue* value,
                         gpointer v_object);
VALA_EXTERN gpointer baz_value_get_foo (const GValue* value);
VALA_EXTERN GType baz_foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BazFoo, baz_foo_unref)
VALA_EXTERN BazFoo* baz_foo_new (void);
VALA_EXTERN BazFoo* baz_foo_construct (GType object_type);
VALA_EXTERN gpointer baz_foo_bar1_ref (gpointer instance);
VALA_EXTERN void baz_foo_bar1_unref (gpointer instance);
VALA_EXTERN GParamSpec* baz_foo_param_spec_bar1 (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
VALA_EXTERN void baz_foo_value_set_bar1 (GValue* value,
                             gpointer v_object);
VALA_EXTERN void baz_foo_value_take_bar1 (GValue* value,
                              gpointer v_object);
VALA_EXTERN gpointer baz_foo_value_get_bar1 (const GValue* value);
VALA_EXTERN GType baz_foo_bar1_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BazFooBar1, baz_foo_bar1_unref)
VALA_EXTERN BazFooBar1* baz_foo_bar1_new (void);
VALA_EXTERN BazFooBar1* baz_foo_bar1_construct (GType object_type);
static void baz_foo_bar1_finalize (BazFooBar1 * obj);
static GType baz_foo_bar1_get_type_once (void);
VALA_EXTERN GType baz_foo_ibar1_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BazFooIBar1, baz_foo_bar1_unref)
static GType baz_foo_ibar1_get_type_once (void);
static void baz_foo_finalize (BazFoo * obj);
static GType baz_foo_get_type_once (void);
VALA_EXTERN GType baz_ifoo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BazIFoo, baz_foo_unref)
VALA_EXTERN gpointer baz_ifoo_bar2_ref (gpointer instance);
VALA_EXTERN void baz_ifoo_bar2_unref (gpointer instance);
VALA_EXTERN GParamSpec* baz_ifoo_param_spec_bar2 (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
VALA_EXTERN void baz_ifoo_value_set_bar2 (GValue* value,
                              gpointer v_object);
VALA_EXTERN void baz_ifoo_value_take_bar2 (GValue* value,
                               gpointer v_object);
VALA_EXTERN gpointer baz_ifoo_value_get_bar2 (const GValue* value);
VALA_EXTERN GType baz_ifoo_bar2_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BazIFooBar2, baz_ifoo_bar2_unref)
VALA_EXTERN BazIFooBar2* baz_ifoo_bar2_new (void);
VALA_EXTERN BazIFooBar2* baz_ifoo_bar2_construct (GType object_type);
static void baz_ifoo_bar2_finalize (BazIFooBar2 * obj);
static GType baz_ifoo_bar2_get_type_once (void);
VALA_EXTERN GType baz_ifoo_ibar2_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BazIFooIBar2, baz_ifoo_bar2_unref)
static GType baz_ifoo_ibar2_get_type_once (void);
static GType baz_ifoo_get_type_once (void);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Manam, baz_foo_unref)
VALA_EXTERN BazFooBar1* manam_foo1 (Manam* self);
VALA_EXTERN BazFooIBar1* manam_ifoo1 (Manam* self);
VALA_EXTERN BazIFooBar2* manam_foo2 (Manam* self);
VALA_EXTERN BazIFooIBar2* manam_ifoo2 (Manam* self);
VALA_EXTERN Manam* manam_new (void);
VALA_EXTERN Manam* manam_construct (GType object_type);
static GType manam_get_type_once (void);
static void _vala_main (void);

BazFoo*
baz_foo_construct (GType object_type)
{
	BazFoo* self = NULL;
	self = (BazFoo*) g_type_create_instance (object_type);
	return self;
}

BazFoo*
baz_foo_new (void)
{
	return baz_foo_construct (BAZ_TYPE_FOO);
}

BazFooBar1*
baz_foo_bar1_construct (GType object_type)
{
	BazFooBar1* self = NULL;
	self = (BazFooBar1*) g_type_create_instance (object_type);
	return self;
}

BazFooBar1*
baz_foo_bar1_new (void)
{
	return baz_foo_bar1_construct (BAZ_FOO_TYPE_BAR1);
}

static void
baz_foo_value_bar1_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
baz_foo_value_bar1_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		baz_foo_bar1_unref (value->data[0].v_pointer);
	}
}

static void
baz_foo_value_bar1_copy_value (const GValue* src_value,
                               GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = baz_foo_bar1_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
baz_foo_value_bar1_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
baz_foo_value_bar1_collect_value (GValue* value,
                                  guint n_collect_values,
                                  GTypeCValue* collect_values,
                                  guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		BazFooBar1 * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = baz_foo_bar1_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
baz_foo_value_bar1_lcopy_value (const GValue* value,
                                guint n_collect_values,
                                GTypeCValue* collect_values,
                                guint collect_flags)
{
	BazFooBar1 ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = baz_foo_bar1_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
baz_foo_param_spec_bar1 (const gchar* name,
                         const gchar* nick,
                         const gchar* blurb,
                         GType object_type,
                         GParamFlags flags)
{
	BazFooParamSpecBar1* spec;
	g_return_val_if_fail (g_type_is_a (object_type, BAZ_FOO_TYPE_BAR1), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
baz_foo_value_get_bar1 (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_FOO_TYPE_BAR1), NULL);
	return value->data[0].v_pointer;
}

void
baz_foo_value_set_bar1 (GValue* value,
                        gpointer v_object)
{
	BazFooBar1 * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_FOO_TYPE_BAR1));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, BAZ_FOO_TYPE_BAR1));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		baz_foo_bar1_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		baz_foo_bar1_unref (old);
	}
}

void
baz_foo_value_take_bar1 (GValue* value,
                         gpointer v_object)
{
	BazFooBar1 * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_FOO_TYPE_BAR1));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, BAZ_FOO_TYPE_BAR1));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		baz_foo_bar1_unref (old);
	}
}

static void
baz_foo_bar1_class_init (BazFooBar1Class * klass,
                         gpointer klass_data)
{
	baz_foo_bar1_parent_class = g_type_class_peek_parent (klass);
	((BazFooBar1Class *) klass)->finalize = baz_foo_bar1_finalize;
}

static void
baz_foo_bar1_instance_init (BazFooBar1 * self,
                            gpointer klass)
{
	self->ref_count = 1;
}

static void
baz_foo_bar1_finalize (BazFooBar1 * obj)
{
	BazFooBar1 * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, BAZ_FOO_TYPE_BAR1, BazFooBar1);
	g_signal_handlers_destroy (self);
}

static GType
baz_foo_bar1_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { baz_foo_value_bar1_init, baz_foo_value_bar1_free_value, baz_foo_value_bar1_copy_value, baz_foo_value_bar1_peek_pointer, "p", baz_foo_value_bar1_collect_value, "p", baz_foo_value_bar1_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BazFooBar1Class), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_foo_bar1_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (BazFooBar1), 0, (GInstanceInitFunc) baz_foo_bar1_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType baz_foo_bar1_type_id;
	baz_foo_bar1_type_id = g_type_register_fundamental (g_type_fundamental_next (), "BazFooBar1", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return baz_foo_bar1_type_id;
}

GType
baz_foo_bar1_get_type (void)
{
	static volatile gsize baz_foo_bar1_type_id__once = 0;
	if (g_once_init_enter (&baz_foo_bar1_type_id__once)) {
		GType baz_foo_bar1_type_id;
		baz_foo_bar1_type_id = baz_foo_bar1_get_type_once ();
		g_once_init_leave (&baz_foo_bar1_type_id__once, baz_foo_bar1_type_id);
	}
	return baz_foo_bar1_type_id__once;
}

gpointer
baz_foo_bar1_ref (gpointer instance)
{
	BazFooBar1 * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
baz_foo_bar1_unref (gpointer instance)
{
	BazFooBar1 * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		BAZ_FOO_BAR1_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
baz_foo_ibar1_default_init (BazFooIBar1Iface * iface,
                            gpointer iface_data)
{
}

static GType
baz_foo_ibar1_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BazFooIBar1Iface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_foo_ibar1_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType baz_foo_ibar1_type_id;
	baz_foo_ibar1_type_id = g_type_register_static (G_TYPE_INTERFACE, "BazFooIBar1", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (baz_foo_ibar1_type_id, BAZ_FOO_TYPE_BAR1);
	return baz_foo_ibar1_type_id;
}

GType
baz_foo_ibar1_get_type (void)
{
	static volatile gsize baz_foo_ibar1_type_id__once = 0;
	if (g_once_init_enter (&baz_foo_ibar1_type_id__once)) {
		GType baz_foo_ibar1_type_id;
		baz_foo_ibar1_type_id = baz_foo_ibar1_get_type_once ();
		g_once_init_leave (&baz_foo_ibar1_type_id__once, baz_foo_ibar1_type_id);
	}
	return baz_foo_ibar1_type_id__once;
}

static void
baz_value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
baz_value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		baz_foo_unref (value->data[0].v_pointer);
	}
}

static void
baz_value_foo_copy_value (const GValue* src_value,
                          GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = baz_foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
baz_value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
baz_value_foo_collect_value (GValue* value,
                             guint n_collect_values,
                             GTypeCValue* collect_values,
                             guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		BazFoo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = baz_foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
baz_value_foo_lcopy_value (const GValue* value,
                           guint n_collect_values,
                           GTypeCValue* collect_values,
                           guint collect_flags)
{
	BazFoo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = baz_foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
baz_param_spec_foo (const gchar* name,
                    const gchar* nick,
                    const gchar* blurb,
                    GType object_type,
                    GParamFlags flags)
{
	BazParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, BAZ_TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
baz_value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
baz_value_set_foo (GValue* value,
                   gpointer v_object)
{
	BazFoo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, BAZ_TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		baz_foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		baz_foo_unref (old);
	}
}

void
baz_value_take_foo (GValue* value,
                    gpointer v_object)
{
	BazFoo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, BAZ_TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		baz_foo_unref (old);
	}
}

static void
baz_foo_class_init (BazFooClass * klass,
                    gpointer klass_data)
{
	baz_foo_parent_class = g_type_class_peek_parent (klass);
	((BazFooClass *) klass)->finalize = baz_foo_finalize;
}

static void
baz_foo_instance_init (BazFoo * self,
                       gpointer klass)
{
	self->ref_count = 1;
}

static void
baz_foo_finalize (BazFoo * obj)
{
	BazFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, BAZ_TYPE_FOO, BazFoo);
	g_signal_handlers_destroy (self);
}

static GType
baz_foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { baz_value_foo_init, baz_value_foo_free_value, baz_value_foo_copy_value, baz_value_foo_peek_pointer, "p", baz_value_foo_collect_value, "p", baz_value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BazFooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (BazFoo), 0, (GInstanceInitFunc) baz_foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType baz_foo_type_id;
	baz_foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "BazFoo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return baz_foo_type_id;
}

GType
baz_foo_get_type (void)
{
	static volatile gsize baz_foo_type_id__once = 0;
	if (g_once_init_enter (&baz_foo_type_id__once)) {
		GType baz_foo_type_id;
		baz_foo_type_id = baz_foo_get_type_once ();
		g_once_init_leave (&baz_foo_type_id__once, baz_foo_type_id);
	}
	return baz_foo_type_id__once;
}

gpointer
baz_foo_ref (gpointer instance)
{
	BazFoo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
baz_foo_unref (gpointer instance)
{
	BazFoo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		BAZ_FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

BazIFooBar2*
baz_ifoo_bar2_construct (GType object_type)
{
	BazIFooBar2* self = NULL;
	self = (BazIFooBar2*) g_type_create_instance (object_type);
	return self;
}

BazIFooBar2*
baz_ifoo_bar2_new (void)
{
	return baz_ifoo_bar2_construct (BAZ_IFOO_TYPE_BAR2);
}

static void
baz_ifoo_value_bar2_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
baz_ifoo_value_bar2_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		baz_ifoo_bar2_unref (value->data[0].v_pointer);
	}
}

static void
baz_ifoo_value_bar2_copy_value (const GValue* src_value,
                                GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = baz_ifoo_bar2_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
baz_ifoo_value_bar2_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
baz_ifoo_value_bar2_collect_value (GValue* value,
                                   guint n_collect_values,
                                   GTypeCValue* collect_values,
                                   guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		BazIFooBar2 * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = baz_ifoo_bar2_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
baz_ifoo_value_bar2_lcopy_value (const GValue* value,
                                 guint n_collect_values,
                                 GTypeCValue* collect_values,
                                 guint collect_flags)
{
	BazIFooBar2 ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = baz_ifoo_bar2_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
baz_ifoo_param_spec_bar2 (const gchar* name,
                          const gchar* nick,
                          const gchar* blurb,
                          GType object_type,
                          GParamFlags flags)
{
	BazIFooParamSpecBar2* spec;
	g_return_val_if_fail (g_type_is_a (object_type, BAZ_IFOO_TYPE_BAR2), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
baz_ifoo_value_get_bar2 (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_IFOO_TYPE_BAR2), NULL);
	return value->data[0].v_pointer;
}

void
baz_ifoo_value_set_bar2 (GValue* value,
                         gpointer v_object)
{
	BazIFooBar2 * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_IFOO_TYPE_BAR2));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, BAZ_IFOO_TYPE_BAR2));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		baz_ifoo_bar2_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		baz_ifoo_bar2_unref (old);
	}
}

void
baz_ifoo_value_take_bar2 (GValue* value,
                          gpointer v_object)
{
	BazIFooBar2 * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, BAZ_IFOO_TYPE_BAR2));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, BAZ_IFOO_TYPE_BAR2));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		baz_ifoo_bar2_unref (old);
	}
}

static void
baz_ifoo_bar2_class_init (BazIFooBar2Class * klass,
                          gpointer klass_data)
{
	baz_ifoo_bar2_parent_class = g_type_class_peek_parent (klass);
	((BazIFooBar2Class *) klass)->finalize = baz_ifoo_bar2_finalize;
}

static void
baz_ifoo_bar2_instance_init (BazIFooBar2 * self,
                             gpointer klass)
{
	self->ref_count = 1;
}

static void
baz_ifoo_bar2_finalize (BazIFooBar2 * obj)
{
	BazIFooBar2 * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, BAZ_IFOO_TYPE_BAR2, BazIFooBar2);
	g_signal_handlers_destroy (self);
}

static GType
baz_ifoo_bar2_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { baz_ifoo_value_bar2_init, baz_ifoo_value_bar2_free_value, baz_ifoo_value_bar2_copy_value, baz_ifoo_value_bar2_peek_pointer, "p", baz_ifoo_value_bar2_collect_value, "p", baz_ifoo_value_bar2_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BazIFooBar2Class), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_ifoo_bar2_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (BazIFooBar2), 0, (GInstanceInitFunc) baz_ifoo_bar2_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType baz_ifoo_bar2_type_id;
	baz_ifoo_bar2_type_id = g_type_register_fundamental (g_type_fundamental_next (), "BazIFooBar2", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return baz_ifoo_bar2_type_id;
}

GType
baz_ifoo_bar2_get_type (void)
{
	static volatile gsize baz_ifoo_bar2_type_id__once = 0;
	if (g_once_init_enter (&baz_ifoo_bar2_type_id__once)) {
		GType baz_ifoo_bar2_type_id;
		baz_ifoo_bar2_type_id = baz_ifoo_bar2_get_type_once ();
		g_once_init_leave (&baz_ifoo_bar2_type_id__once, baz_ifoo_bar2_type_id);
	}
	return baz_ifoo_bar2_type_id__once;
}

gpointer
baz_ifoo_bar2_ref (gpointer instance)
{
	BazIFooBar2 * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
baz_ifoo_bar2_unref (gpointer instance)
{
	BazIFooBar2 * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		BAZ_IFOO_BAR2_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
baz_ifoo_ibar2_default_init (BazIFooIBar2Iface * iface,
                             gpointer iface_data)
{
}

static GType
baz_ifoo_ibar2_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BazIFooIBar2Iface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_ifoo_ibar2_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType baz_ifoo_ibar2_type_id;
	baz_ifoo_ibar2_type_id = g_type_register_static (G_TYPE_INTERFACE, "BazIFooIBar2", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (baz_ifoo_ibar2_type_id, BAZ_IFOO_TYPE_BAR2);
	return baz_ifoo_ibar2_type_id;
}

GType
baz_ifoo_ibar2_get_type (void)
{
	static volatile gsize baz_ifoo_ibar2_type_id__once = 0;
	if (g_once_init_enter (&baz_ifoo_ibar2_type_id__once)) {
		GType baz_ifoo_ibar2_type_id;
		baz_ifoo_ibar2_type_id = baz_ifoo_ibar2_get_type_once ();
		g_once_init_leave (&baz_ifoo_ibar2_type_id__once, baz_ifoo_ibar2_type_id);
	}
	return baz_ifoo_ibar2_type_id__once;
}

static void
baz_ifoo_default_init (BazIFooIface * iface,
                       gpointer iface_data)
{
}

static GType
baz_ifoo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BazIFooIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_ifoo_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType baz_ifoo_type_id;
	baz_ifoo_type_id = g_type_register_static (G_TYPE_INTERFACE, "BazIFoo", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (baz_ifoo_type_id, BAZ_TYPE_FOO);
	return baz_ifoo_type_id;
}

GType
baz_ifoo_get_type (void)
{
	static volatile gsize baz_ifoo_type_id__once = 0;
	if (g_once_init_enter (&baz_ifoo_type_id__once)) {
		GType baz_ifoo_type_id;
		baz_ifoo_type_id = baz_ifoo_get_type_once ();
		g_once_init_leave (&baz_ifoo_type_id__once, baz_ifoo_type_id);
	}
	return baz_ifoo_type_id__once;
}

BazFooBar1*
manam_foo1 (Manam* self)
{
	BazFooBar1* result;
	g_return_val_if_fail (IS_MANAM (self), NULL);
	result = NULL;
	return result;
}

BazFooIBar1*
manam_ifoo1 (Manam* self)
{
	BazFooIBar1* result;
	g_return_val_if_fail (IS_MANAM (self), NULL);
	result = NULL;
	return result;
}

BazIFooBar2*
manam_foo2 (Manam* self)
{
	BazIFooBar2* result;
	g_return_val_if_fail (IS_MANAM (self), NULL);
	result = NULL;
	return result;
}

BazIFooIBar2*
manam_ifoo2 (Manam* self)
{
	BazIFooIBar2* result;
	g_return_val_if_fail (IS_MANAM (self), NULL);
	result = NULL;
	return result;
}

Manam*
manam_construct (GType object_type)
{
	Manam* self = NULL;
	self = (Manam*) baz_foo_construct (object_type);
	return self;
}

Manam*
manam_new (void)
{
	return manam_construct (TYPE_MANAM);
}

static void
manam_class_init (ManamClass * klass,
                  gpointer klass_data)
{
	manam_parent_class = g_type_class_peek_parent (klass);
}

static void
manam_baz_ifoo_interface_init (BazIFooIface * iface,
                               gpointer iface_data)
{
	manam_baz_ifoo_parent_iface = g_type_interface_peek_parent (iface);
}

static void
manam_instance_init (Manam * self,
                     gpointer klass)
{
}

static GType
manam_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ManamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Manam), 0, (GInstanceInitFunc) manam_instance_init, NULL };
	static const GInterfaceInfo baz_ifoo_info = { (GInterfaceInitFunc) manam_baz_ifoo_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType manam_type_id;
	manam_type_id = g_type_register_static (BAZ_TYPE_FOO, "Manam", &g_define_type_info, 0);
	g_type_add_interface_static (manam_type_id, BAZ_TYPE_IFOO, &baz_ifoo_info);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static void
_vala_main (void)
{
	Manam* manam = NULL;
	Manam* _tmp0_;
	BazFooBar1* _tmp1_;
	BazFooBar1* _tmp2_;
	BazFooIBar1* _tmp3_;
	BazFooIBar1* _tmp4_;
	BazIFooBar2* _tmp5_;
	BazIFooBar2* _tmp6_;
	BazIFooIBar2* _tmp7_;
	BazIFooIBar2* _tmp8_;
	_tmp0_ = manam_new ();
	manam = _tmp0_;
	_tmp1_ = manam_foo1 (manam);
	_tmp2_ = _tmp1_;
	_baz_foo_bar1_unref0 (_tmp2_);
	_tmp3_ = manam_ifoo1 (manam);
	_tmp4_ = _tmp3_;
	_baz_foo_bar1_unref0 (_tmp4_);
	_tmp5_ = manam_foo2 (manam);
	_tmp6_ = _tmp5_;
	_baz_ifoo_bar2_unref0 (_tmp6_);
	_tmp7_ = manam_ifoo2 (manam);
	_tmp8_ = _tmp7_;
	_baz_ifoo_bar2_unref0 (_tmp8_);
	_baz_foo_unref0 (manam);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

