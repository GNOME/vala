/* constants_delegate_type.c generated by valac, the Vala compiler
 * generated from constants_delegate_type.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#define FOO _func_foo_func
#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef const gchar* (*FooFunc) (void);
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN const gchar* func (void);
static const gchar* _func_foo_func (void);
static void _vala_main (void);

static const gchar*
_func_foo_func (void)
{
	const gchar* result;
	result = func ();
	return result;
}

const gchar*
func (void)
{
	const gchar* result;
	result = "foo";
	return result;
}

static void
_vala_main (void)
{
	static const FooFunc foo = _func_foo_func;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	_tmp0_ = foo ();
	_vala_assert (g_strcmp0 (_tmp0_, "foo") == 0, "foo () == \"foo\"");
	_tmp1_ = FOO ();
	_vala_assert (g_strcmp0 (_tmp1_, "foo") == 0, "FOO () == \"foo\"");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

