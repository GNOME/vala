/* delegates_bug659778.c generated by valac, the Vala compiler
 * generated from delegates_bug659778.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef gpointer (*DoSomething) (gconstpointer g, gpointer user_data);
typedef enum  {
	TEST_ENUM_T
} TestEnum;

#define TYPE_TEST_ENUM (test_enum_get_type ())
typedef struct _Block1Data Block1Data;

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEST, TestClass))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define IS_TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEST))
#define TEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEST, TestClass))

typedef struct _Test Test;
typedef struct _TestClass TestClass;
typedef struct _TestPrivate TestPrivate;
typedef struct _ParamSpecTest ParamSpecTest;
#define _test_unref0(var) ((var == NULL) ? NULL : (var = (test_unref (var), NULL)))

struct _Block1Data {
	int _ref_count_;
	TestEnum self;
	gint i;
};

struct _Test {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TestPrivate * priv;
};

struct _TestClass {
	GTypeClass parent_class;
	void (*finalize) (Test *self);
};

struct _ParamSpecTest {
	GParamSpec parent_instance;
};

static gpointer test_parent_class = NULL;

VALA_EXTERN void do_something (GType g_type,
                   GBoxedCopyFunc g_dup_func,
                   GDestroyNotify g_destroy_func,
                   DoSomething f,
                   gpointer f_target);
VALA_EXTERN GType test_enum_get_type (void) G_GNUC_CONST ;
VALA_EXTERN void test_enum_f (TestEnum self);
static TestEnum _vala_lambda0_ (TestEnum self,
                         TestEnum x);
static gpointer __vala_lambda0__do_something (gconstpointer g,
                                       gpointer self);
VALA_EXTERN void test_enum_g (TestEnum self,
                  gint i);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static TestEnum _vala_lambda1_ (Block1Data* _data1_,
                         TestEnum x);
static gpointer __vala_lambda1__do_something (gconstpointer g,
                                       gpointer self);
VALA_EXTERN gpointer test_ref (gpointer instance);
VALA_EXTERN void test_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_test (const gchar* name,
                             const gchar* nick,
                             const gchar* blurb,
                             GType object_type,
                             GParamFlags flags);
VALA_EXTERN void value_set_test (GValue* value,
                     gpointer v_object);
VALA_EXTERN void value_take_test (GValue* value,
                      gpointer v_object);
VALA_EXTERN gpointer value_get_test (const GValue* value);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, test_unref)
VALA_EXTERN void test_f (Test* self);
static TestEnum test_g (TestEnum i,
                 Test* self);
static gpointer _test_g_do_something (gconstpointer g,
                               gpointer self);
static gint test_h (gint i,
             Test* self);
static gpointer _test_h_do_something (gconstpointer g,
                               gpointer self);
VALA_EXTERN Test* test_new (void);
VALA_EXTERN Test* test_construct (GType object_type);
static void test_finalize (Test * obj);
static GType test_get_type_once (void);
static gint _vala_main (void);

void
do_something (GType g_type,
              GBoxedCopyFunc g_dup_func,
              GDestroyNotify g_destroy_func,
              DoSomething f,
              gpointer f_target)
{
}

static TestEnum
_vala_lambda0_ (TestEnum self,
                TestEnum x)
{
	TestEnum result;
	switch (self) {
		case TEST_ENUM_T:
		{
			result = TEST_ENUM_T;
			return result;
		}
		default:
		{
			g_assert_not_reached ();
		}
	}
}

static gpointer
__vala_lambda0__do_something (gconstpointer g,
                              gpointer self)
{
	gpointer result;
	result = (gpointer) ((gintptr) _vala_lambda0_ ((TestEnum) ((gintptr) self), (TestEnum) ((gintptr) g)));
	return result;
}

void
test_enum_f (TestEnum self)
{
	do_something (TYPE_TEST_ENUM, NULL, NULL, __vala_lambda0__do_something, (gpointer) ((gintptr) self));
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		TestEnum self;
		self = _data1_->self;
		g_slice_free (Block1Data, _data1_);
	}
}

static TestEnum
_vala_lambda1_ (Block1Data* _data1_,
                TestEnum x)
{
	TestEnum self;
	TestEnum result;
	self = _data1_->self;
	switch (self) {
		case TEST_ENUM_T:
		{
			gint _tmp0_;
			_tmp0_ = _data1_->i;
			_data1_->i = _tmp0_ + 1;
			result = TEST_ENUM_T;
			return result;
		}
		default:
		{
			g_assert_not_reached ();
		}
	}
}

static gpointer
__vala_lambda1__do_something (gconstpointer g,
                              gpointer self)
{
	gpointer result;
	result = (gpointer) ((gintptr) _vala_lambda1_ (self, (TestEnum) ((gintptr) g)));
	return result;
}

void
test_enum_g (TestEnum self,
             gint i)
{
	Block1Data* _data1_;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->self =  (self);
	_data1_->i = i;
	do_something (TYPE_TEST_ENUM, NULL, NULL, __vala_lambda1__do_something, _data1_);
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

static GType
test_enum_get_type_once (void)
{
	static const GEnumValue values[] = {{TEST_ENUM_T, "TEST_ENUM_T", "t"}, {0, NULL, NULL}};
	GType test_enum_type_id;
	test_enum_type_id = g_enum_register_static ("TestEnum", values);
	return test_enum_type_id;
}

GType
test_enum_get_type (void)
{
	static volatile gsize test_enum_type_id__once = 0;
	if (g_once_init_enter (&test_enum_type_id__once)) {
		GType test_enum_type_id;
		test_enum_type_id = test_enum_get_type_once ();
		g_once_init_leave (&test_enum_type_id__once, test_enum_type_id);
	}
	return test_enum_type_id__once;
}

static gpointer
_test_g_do_something (gconstpointer g,
                      gpointer self)
{
	gpointer result;
	result = (gpointer) ((gintptr) test_g ((TestEnum) ((gintptr) g), (Test*) self));
	return result;
}

static gpointer
_test_h_do_something (gconstpointer g,
                      gpointer self)
{
	gpointer result;
	result = (gpointer) ((gintptr) test_h ((gint) ((gintptr) g), (Test*) self));
	return result;
}

void
test_f (Test* self)
{
	g_return_if_fail (IS_TEST (self));
	do_something (TYPE_TEST_ENUM, NULL, NULL, _test_g_do_something, self);
	do_something (G_TYPE_INT, NULL, NULL, _test_h_do_something, self);
}

static TestEnum
test_g (TestEnum i,
        Test* self)
{
	TestEnum result;
	g_return_val_if_fail (IS_TEST (self), 0);
	result = i;
	return result;
}

static gint
test_h (gint i,
        Test* self)
{
	gint result;
	g_return_val_if_fail (IS_TEST (self), 0);
	result = i;
	return result;
}

Test*
test_construct (GType object_type)
{
	Test* self = NULL;
	self = (Test*) g_type_create_instance (object_type);
	return self;
}

Test*
test_new (void)
{
	return test_construct (TYPE_TEST);
}

static void
value_test_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_test_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		test_unref (value->data[0].v_pointer);
	}
}

static void
value_test_copy_value (const GValue* src_value,
                       GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = test_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_test_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_test_collect_value (GValue* value,
                          guint n_collect_values,
                          GTypeCValue* collect_values,
                          guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Test * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = test_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_test_lcopy_value (const GValue* value,
                        guint n_collect_values,
                        GTypeCValue* collect_values,
                        guint collect_flags)
{
	Test ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = test_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_test (const gchar* name,
                 const gchar* nick,
                 const gchar* blurb,
                 GType object_type,
                 GParamFlags flags)
{
	ParamSpecTest* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_TEST), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_test (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST), NULL);
	return value->data[0].v_pointer;
}

void
value_set_test (GValue* value,
                gpointer v_object)
{
	Test * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_TEST));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		test_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		test_unref (old);
	}
}

void
value_take_test (GValue* value,
                 gpointer v_object)
{
	Test * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_TEST));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		test_unref (old);
	}
}

static void
test_class_init (TestClass * klass,
                 gpointer klass_data)
{
	test_parent_class = g_type_class_peek_parent (klass);
	((TestClass *) klass)->finalize = test_finalize;
}

static void
test_instance_init (Test * self,
                    gpointer klass)
{
	self->ref_count = 1;
}

static void
test_finalize (Test * obj)
{
	Test * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TEST, Test);
	g_signal_handlers_destroy (self);
}

static GType
test_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_test_init, value_test_free_value, value_test_copy_value, value_test_peek_pointer, "p", value_test_collect_value, "p", value_test_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (TestClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Test), 0, (GInstanceInitFunc) test_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType test_type_id;
	test_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Test", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

gpointer
test_ref (gpointer instance)
{
	Test * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
test_unref (gpointer instance)
{
	Test * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		TEST_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static gint
_vala_main (void)
{
	TestEnum t = 0;
	Test* t2 = NULL;
	Test* _tmp0_;
	gint result;
	t = TEST_ENUM_T;
	test_enum_f (t);
	test_enum_g (t, 0);
	_tmp0_ = test_new ();
	t2 = _tmp0_;
	test_f (t2);
	result = 0;
	_test_unref0 (t2);
	return result;
}

int
main (int argc,
      char ** argv)
{
	return _vala_main ();
}

