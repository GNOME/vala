/* delegates_wrapper.c generated by valac, the Vala compiler
 * generated from delegates_wrapper.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*FooFunc) (gchar** a, gpointer user_data);
typedef void (*BarFunc) (FooFunc func, gpointer func_target, GDestroyNotify func_target_destroy_notify, gpointer user_data);
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN void foo (gchar** a,
          gint a_length1);
VALA_EXTERN void bar (FooFunc func,
          gpointer func_target,
          GDestroyNotify func_target_destroy_notify);
static void _vala_main (void);
static void _foo_foo_func (gchar** a,
                    gpointer self);
static void _bar_bar_func (FooFunc func,
                    gpointer func_target,
                    GDestroyNotify func_target_destroy_notify,
                    gpointer self);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);
static gssize _vala_array_length (gpointer array);

void
foo (gchar** a,
     gint a_length1)
{
	const gchar* _tmp0_;
	_vala_assert (a_length1 == 2, "a.length == 2");
	_tmp0_ = a[1];
	_vala_assert (g_strcmp0 (_tmp0_, "bar") == 0, "a[1] == \"bar\"");
}

void
bar (FooFunc func,
     gpointer func_target,
     GDestroyNotify func_target_destroy_notify)
{
	gchar** ia = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar** _tmp2_;
	gint ia_length1;
	gint _ia_size_;
	_tmp0_ = g_strdup ("foo");
	_tmp1_ = g_strdup ("bar");
	_tmp2_ = g_new0 (gchar*, 2 + 1);
	_tmp2_[0] = _tmp0_;
	_tmp2_[1] = _tmp1_;
	ia = _tmp2_;
	ia_length1 = 2;
	_ia_size_ = ia_length1;
	func (ia, func_target);
	ia = (_vala_array_free (ia, ia_length1, (GDestroyNotify) g_free), NULL);
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
}

static void
_foo_foo_func (gchar** a,
               gpointer self)
{
	foo (a, _vala_array_length (a));
}

static void
_bar_bar_func (FooFunc func,
               gpointer func_target,
               GDestroyNotify func_target_destroy_notify,
               gpointer self)
{
	bar (func, func_target, func_target_destroy_notify);
}

static void
_vala_main (void)
{
	FooFunc f = NULL;
	gpointer f_target;
	GDestroyNotify f_target_destroy_notify;
	BarFunc b = NULL;
	gpointer b_target;
	GDestroyNotify b_target_destroy_notify;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	f = _foo_foo_func;
	f_target = NULL;
	f_target_destroy_notify = NULL;
	b = _bar_bar_func;
	b_target = NULL;
	b_target_destroy_notify = NULL;
	_tmp0_ = f;
	_tmp0__target = f_target;
	_tmp0__target_destroy_notify = f_target_destroy_notify;
	f = NULL;
	f_target = NULL;
	f_target_destroy_notify = NULL;
	b (_tmp0_, _tmp0__target, _tmp0__target_destroy_notify, b_target);
	(b_target_destroy_notify == NULL) ? NULL : (b_target_destroy_notify (b_target), NULL);
	b = NULL;
	b_target = NULL;
	b_target_destroy_notify = NULL;
	(f_target_destroy_notify == NULL) ? NULL : (f_target_destroy_notify (f_target), NULL);
	f = NULL;
	f_target = NULL;
	f_target_destroy_notify = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gssize
_vala_array_length (gpointer array)
{
	gssize length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}

