/* delegates_member_target_destroy.c generated by valac, the Vala compiler
 * generated from delegates_member_target_destroy.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef gchar* (*Foo) (gpointer user_data);
#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN gchar* bar (const gchar* s);
VALA_EXTERN void foo_free (void* data);
static void _vala_main (void);

gchar*
bar (const gchar* s)
{
	gchar* _tmp0_;
	gchar* result;
	g_return_val_if_fail (s != NULL, NULL);
	_tmp0_ = g_strdup (s);
	result = _tmp0_;
	return result;
}

void
foo_free (void* data)
{
	g_free (data);
}

static void
_vala_main (void)
{
	Foo foo = NULL;
	gpointer foo_target;
	GDestroyNotify foo_target_destroy_notify;
	const gchar* foo_data = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	foo = (Foo) bar;
	foo_target = NULL;
	foo_target_destroy_notify = NULL;
	_vala_assert (foo_target == NULL, "foo.target == null");
	_vala_assert (foo_target_destroy_notify == NULL, "foo.destroy == null");
	_tmp0_ = g_strdup ("foo");
	foo_data = _tmp0_;
	foo_target = foo_data;
	foo_target_destroy_notify = (GDestroyNotify) foo_free;
	_tmp1_ = foo (foo_target);
	_tmp2_ = _tmp1_;
	_vala_assert (g_strcmp0 (_tmp2_, "foo") == 0, "foo () == \"foo\"");
	_g_free0 (_tmp2_);
	_vala_assert (foo_target == foo_data, "foo.target == foo_data");
	_vala_assert (foo_target_destroy_notify == ((GDestroyNotify) foo_free), "foo.destroy == (GLib.DestroyNotify) foo_free");
	(foo_target_destroy_notify == NULL) ? NULL : (foo_target_destroy_notify (foo_target), NULL);
	foo = NULL;
	foo_target = NULL;
	foo_target_destroy_notify = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

