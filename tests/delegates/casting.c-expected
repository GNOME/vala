/* delegates_casting.c generated by valac, the Vala compiler
 * generated from delegates_casting.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*FooFunc) (gpointer user_data);
typedef void (*FooFuncTargetless) (void);

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void foo_baz (Foo* self,
              FooFunc f,
              gpointer f_target);
VALA_EXTERN void foo_func (Foo* self);
static void _foo_func_foo_func (gpointer self);
static void foo_bar (Foo* self,
              FooFunc f,
              gpointer f_target,
              GDestroyNotify f_target_destroy_notify);
static void foo_man (Foo* self,
              FooFuncTargetless f);
static void foo_maz (Foo* self,
              FooFuncTargetless f);
static GType foo_get_type_once (void);
VALA_EXTERN void func (void);
static void _vala_main (void);
static void _func_foo_func_targetless (void);

static void
_foo_func_foo_func (gpointer self)
{
	foo_func ((Foo*) self);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	foo_baz (self, _foo_func_foo_func, self);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
	foo_bar (self, _foo_func_foo_func, g_object_ref (self), g_object_unref);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
	foo_baz (self, (FooFunc) foo_func, self);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
	foo_bar (self, (FooFunc) foo_func, g_object_ref (self), g_object_unref);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
	foo_man (self, (FooFuncTargetless) foo_func);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
	foo_maz (self, (FooFuncTargetless) foo_func);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

void
foo_func (Foo* self)
{
	g_return_if_fail (IS_FOO (self));
}

static void
foo_baz (Foo* self,
         FooFunc f,
         gpointer f_target)
{
	g_return_if_fail (IS_FOO (self));
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
}

static void
foo_bar (Foo* self,
         FooFunc f,
         gpointer f_target,
         GDestroyNotify f_target_destroy_notify)
{
	g_return_if_fail (IS_FOO (self));
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "ref_count == 2");
	(f_target_destroy_notify == NULL) ? NULL : (f_target_destroy_notify (f_target), NULL);
	f = NULL;
	f_target = NULL;
	f_target_destroy_notify = NULL;
}

static void
foo_man (Foo* self,
         FooFuncTargetless f)
{
	g_return_if_fail (IS_FOO (self));
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
}

static void
foo_maz (Foo* self,
         FooFuncTargetless f)
{
	g_return_if_fail (IS_FOO (self));
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "ref_count == 1");
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

void
func (void)
{
}

static void
_func_foo_func_targetless (void)
{
	func ();
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	FooFunc f0 = NULL;
	gpointer f0_target;
	GDestroyNotify f0_target_destroy_notify;
	FooFunc f1 = NULL;
	gpointer f1_target;
	GDestroyNotify f1_target_destroy_notify;
	FooFunc f2 = NULL;
	gpointer f2_target;
	FooFunc f3 = NULL;
	gpointer f3_target;
	FooFuncTargetless f4 = NULL;
	FooFuncTargetless f5 = NULL;
	FooFuncTargetless f6 = NULL;
	FooFuncTargetless f7 = NULL;
	FooFuncTargetless f8 = NULL;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f0 = _foo_func_foo_func;
	f0_target = g_object_ref (foo);
	f0_target_destroy_notify = g_object_unref;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
	(f0_target_destroy_notify == NULL) ? NULL : (f0_target_destroy_notify (f0_target), NULL);
	f0 = NULL;
	f0_target = NULL;
	f0_target_destroy_notify = NULL;
	f0 = NULL;
	f0_target = NULL;
	f0_target_destroy_notify = NULL;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f1 = (FooFunc) foo_func;
	f1_target = g_object_ref (foo);
	f1_target_destroy_notify = g_object_unref;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
	(f1_target_destroy_notify == NULL) ? NULL : (f1_target_destroy_notify (f1_target), NULL);
	f1 = NULL;
	f1_target = NULL;
	f1_target_destroy_notify = NULL;
	f1 = NULL;
	f1_target = NULL;
	f1_target_destroy_notify = NULL;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f2 = _foo_func_foo_func;
	f2_target = foo;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f2 = NULL;
	f2_target = NULL;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f3 = (FooFunc) foo_func;
	f3_target = foo;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f3 = NULL;
	f3_target = NULL;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f4 = (FooFuncTargetless) foo_func;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f4 = NULL;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	f5 = _func_foo_func_targetless;
	f5 = NULL;
	f6 = (FooFuncTargetless) func;
	f6 = NULL;
	f7 = _func_foo_func_targetless;
	f7 = NULL;
	f8 = (FooFuncTargetless) func;
	f8 = NULL;
	(f1_target_destroy_notify == NULL) ? NULL : (f1_target_destroy_notify (f1_target), NULL);
	f1 = NULL;
	f1_target = NULL;
	f1_target_destroy_notify = NULL;
	(f0_target_destroy_notify == NULL) ? NULL : (f0_target_destroy_notify (f0_target), NULL);
	f0 = NULL;
	f0_target = NULL;
	f0_target_destroy_notify = NULL;
	_g_object_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

