/* delegates_lambda_mixed_instance_static.c generated by valac, the Vala compiler
 * generated from delegates_lambda_mixed_instance_static.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef gint (*FooFunc) (gint i);
typedef gint (*BarFunc) (gint i, gpointer user_data);
typedef struct _Block1Data Block1Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Block1Data {
	int _ref_count_;
	gint global;
};

VALA_EXTERN void func (FooFunc f,
           BarFunc b,
           gpointer b_target);
static void _vala_main (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static gint _vala_lambda0_ (gint i);
static gint __vala_lambda0__foo_func (gint i);
static gint _vala_lambda1_ (Block1Data* _data1_,
                     gint i);
static gint __vala_lambda1__bar_func (gint i,
                               gpointer self);

void
func (FooFunc f,
      BarFunc b,
      gpointer b_target)
{
	_vala_assert (f (42) == 42, "f (42) == 42");
	_vala_assert (b (23, b_target) == 4711, "b (23) == 4711");
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		g_slice_free (Block1Data, _data1_);
	}
}

static gint
_vala_lambda0_ (gint i)
{
	gint result;
	_vala_assert (i == 42, "i == 42");
	result = i;
	return result;
}

static gint
__vala_lambda0__foo_func (gint i)
{
	gint result;
	result = _vala_lambda0_ (i);
	return result;
}

static gint
_vala_lambda1_ (Block1Data* _data1_,
                gint i)
{
	gint result;
	_vala_assert (i == 23, "i == 23");
	result = _data1_->global;
	return result;
}

static gint
__vala_lambda1__bar_func (gint i,
                          gpointer self)
{
	gint result;
	result = _vala_lambda1_ (self, i);
	return result;
}

static void
_vala_main (void)
{
	Block1Data* _data1_;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->global = 4711;
	func (__vala_lambda0__foo_func, __vala_lambda1__bar_func, _data1_);
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

