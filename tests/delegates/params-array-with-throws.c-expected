/* delegates_params_array_with_throws.c generated by valac, the Vala compiler
 * generated from delegates_params_array_with_throws.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO_ERROR (foo_error_get_type ())
typedef void (*FooFunc) (GError** error, const gchar* _first_array, ...);
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

typedef enum  {
	FOO_ERROR_BAD,
	FOO_ERROR_WORSE
} FooError;
#define FOO_ERROR foo_error_quark ()

VALA_EXTERN GQuark foo_error_quark (void);
VALA_EXTERN GType foo_error_get_type (void) G_GNUC_CONST ;
VALA_EXTERN void foo (GError** error,
          gchar* _first_array,
          ...);
static void _vala_array_add1 (const gchar** * array,
                       gint* length,
                       gint* size,
                       const gchar* value);
VALA_EXTERN void bar (GError** error,
          gchar* _first_array,
          ...);
static void _vala_array_add2 (const gchar** * array,
                       gint* length,
                       gint* size,
                       const gchar* value);
static void _vala_main (void);

GQuark
foo_error_quark (void)
{
	return g_quark_from_static_string ("foo-error-quark");
}

static GType
foo_error_get_type_once (void)
{
	static const GEnumValue values[] = {{FOO_ERROR_BAD, "FOO_ERROR_BAD", "bad"}, {FOO_ERROR_WORSE, "FOO_ERROR_WORSE", "worse"}, {0, NULL, NULL}};
	GType foo_error_type_id;
	foo_error_type_id = g_enum_register_static ("FooError", values);
	return foo_error_type_id;
}

GType
foo_error_get_type (void)
{
	static volatile gsize foo_error_type_id__once = 0;
	if (g_once_init_enter (&foo_error_type_id__once)) {
		GType foo_error_type_id;
		foo_error_type_id = foo_error_get_type_once ();
		g_once_init_leave (&foo_error_type_id__once, foo_error_type_id);
	}
	return foo_error_type_id__once;
}

static void
_vala_array_add1 (const gchar** * array,
                  gint* length,
                  gint* size,
                  const gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (const gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}

void
foo (GError** error,
     gchar* _first_array,
     ...)
{
	const gchar* _array_element;
	va_list _va_list_array;
	const gchar** array = NULL;
	gint array_length1 = 0;
	gint _array_size_ = 0;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	array = g_new0 (const gchar*, array_length1 + 1);
	va_start (_va_list_array, _first_array);
	_array_element = _first_array;
	while (_array_element != NULL) {
		_vala_array_add1 (&array, &array_length1, &_array_size_, _array_element);
		_array_element = va_arg (_va_list_array, const gchar*);
	}
	va_end (_va_list_array);
	_vala_assert (array_length1 == 3, "array.length == 3");
	_tmp0_ = array[0];
	_vala_assert (g_strcmp0 (_tmp0_, "foo") == 0, "array[0] == \"foo\"");
	_tmp1_ = array[1];
	_vala_assert (g_strcmp0 (_tmp1_, "bar") == 0, "array[1] == \"bar\"");
	_tmp2_ = array[2];
	_vala_assert (g_strcmp0 (_tmp2_, "manam") == 0, "array[2] == \"manam\"");
	array = (g_free (array), NULL);
}

static void
_vala_array_add2 (const gchar** * array,
                  gint* length,
                  gint* size,
                  const gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (const gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}

void
bar (GError** error,
     gchar* _first_array,
     ...)
{
	const gchar* _array_element;
	va_list _va_list_array;
	const gchar** array = NULL;
	gint array_length1 = 0;
	gint _array_size_ = 0;
	GError* _tmp0_;
	GError* _inner_error0_ = NULL;
	array = g_new0 (const gchar*, array_length1 + 1);
	va_start (_va_list_array, _first_array);
	_array_element = _first_array;
	while (_array_element != NULL) {
		_vala_array_add2 (&array, &array_length1, &_array_size_, _array_element);
		_array_element = va_arg (_va_list_array, const gchar*);
	}
	va_end (_va_list_array);
	_tmp0_ = g_error_new_literal (FOO_ERROR, FOO_ERROR_BAD, "bad");
	_inner_error0_ = _tmp0_;
	if (_inner_error0_->domain == FOO_ERROR) {
		g_propagate_error (error, _inner_error0_);
		array = (g_free (array), NULL);
		return;
	} else {
		array = (g_free (array), NULL);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
}

static void
_vala_main (void)
{
	GError* _inner_error0_ = NULL;
	{
		FooFunc func = NULL;
		func = (FooFunc) foo;
		func (&_inner_error0_, "foo", "bar", "manam", NULL);
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		FooFunc func = NULL;
		func = (FooFunc) bar;
		{
			FooFunc _tmp0_;
			_tmp0_ = func;
			_tmp0_ (&_inner_error0_, "foo", "bar", "manam", NULL);
			if (G_UNLIKELY (_inner_error0_ != NULL)) {
				if (g_error_matches (_inner_error0_, FOO_ERROR, FOO_ERROR_BAD)) {
					goto __catch0_foo_error_bad;
				}
				goto __catch0_g_error;
			}
			g_assert_not_reached ();
		}
		goto __finally0;
		__catch0_foo_error_bad:
		{
			g_clear_error (&_inner_error0_);
		}
		goto __finally0;
		__catch0_g_error:
		{
			g_clear_error (&_inner_error0_);
			g_assert_not_reached ();
		}
		__finally0:
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

