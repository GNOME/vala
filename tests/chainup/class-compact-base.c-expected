/* chainup_class_compact_base.c generated by valac, the Vala compiler
 * generated from chainup_class_compact_base.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
typedef Foo Bar;
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint a;
	gint b;
};

VALA_EXTERN void foo_free (Foo * self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_free)
static void foo_instance_init (Foo * self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN gint foo_sum (Foo* self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, foo_free)
static void bar_instance_init (Bar * self);
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN gint bar_mul (Bar* self);
VALA_EXTERN gint bar_mul2 (Bar* self);
static void _vala_main (void);

Foo*
foo_new (void)
{
	Foo* self;
	self = g_slice_new0 (Foo);
	foo_instance_init (self);
	self->a = 23;
	return self;
}

gint
foo_sum (Foo* self)
{
	gint result;
	g_return_val_if_fail (self != NULL, 0);
	result = self->a + self->b;
	return result;
}

static void
foo_instance_init (Foo * self)
{
}

void
foo_free (Foo * self)
{
	g_slice_free (Foo, self);
}

Bar*
bar_new (void)
{
	Bar* self;
	self = (Bar*) foo_new ();
	bar_instance_init (self);
	((Foo*) self)->b = 42;
	return self;
}

gint
bar_mul (Bar* self)
{
	gint result;
	g_return_val_if_fail (self != NULL, 0);
	result = ((Foo*) self)->a * ((Foo*) self)->b;
	return result;
}

gint
bar_mul2 (Bar* self)
{
	gint result;
	g_return_val_if_fail (self != NULL, 0);
	result = self->a * self->b;
	return result;
}

static void
bar_instance_init (Bar * self)
{
}

static void
_vala_main (void)
{
	Bar* bar = NULL;
	Bar* _tmp0_;
	_tmp0_ = bar_new ();
	bar = _tmp0_;
	_vala_assert (((Foo*) bar)->a == 23, "bar.a == 23");
	_vala_assert (((Foo*) bar)->b == 42, "bar.b == 42");
	_vala_assert (foo_sum ((Foo*) bar) == 65, "bar.sum () == 65");
	_vala_assert (bar_mul (bar) == 966, "bar.mul () == 966");
	_vala_assert (bar_mul2 (bar) == 966, "bar.mul2 () == 966");
	_foo_free0 (bar);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

