/* chainup_bug791785.c generated by valac, the Vala compiler
 * generated from chainup_bug791785.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;

#define TYPE_ABSTRACT_BAR (abstract_bar_get_type ())
#define ABSTRACT_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ABSTRACT_BAR, AbstractBar))
#define ABSTRACT_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_ABSTRACT_BAR, AbstractBarClass))
#define IS_ABSTRACT_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ABSTRACT_BAR))
#define IS_ABSTRACT_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_ABSTRACT_BAR))
#define ABSTRACT_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ABSTRACT_BAR, AbstractBarClass))

typedef struct _AbstractBar AbstractBar;
typedef struct _AbstractBarClass AbstractBarClass;
typedef struct _AbstractBarPrivate AbstractBarPrivate;
typedef struct _ParamSpecAbstractBar ParamSpecAbstractBar;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
#define _abstract_bar_unref0(var) ((var == NULL) ? NULL : (var = (abstract_bar_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint i;
};

struct _AbstractBar {
	GTypeInstance parent_instance;
	volatile int ref_count;
	AbstractBarPrivate * priv;
	Foo foo;
};

struct _AbstractBarClass {
	GTypeClass parent_class;
	void (*finalize) (AbstractBar *self);
};

struct _ParamSpecAbstractBar {
	GParamSpec parent_instance;
};

struct _Bar {
	AbstractBar parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	AbstractBarClass parent_class;
};

static gpointer abstract_bar_parent_class = NULL;
static gpointer bar_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN gpointer abstract_bar_ref (gpointer instance);
VALA_EXTERN void abstract_bar_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_abstract_bar (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
VALA_EXTERN void value_set_abstract_bar (GValue* value,
                             gpointer v_object);
VALA_EXTERN void value_take_abstract_bar (GValue* value,
                              gpointer v_object);
VALA_EXTERN gpointer value_get_abstract_bar (const GValue* value);
VALA_EXTERN GType abstract_bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (AbstractBar, abstract_bar_unref)
VALA_EXTERN AbstractBar* abstract_bar_construct (GType object_type,
                                     Foo* foo);
static void abstract_bar_finalize (AbstractBar * obj);
static GType abstract_bar_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, abstract_bar_unref)
VALA_EXTERN Bar* bar_new (Foo* foo);
VALA_EXTERN Bar* bar_construct (GType object_type,
                    Foo* foo);
static GType bar_get_type_once (void);
static void _vala_main (void);

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	memcpy (dup, self, sizeof (Foo));
	return dup;
}

void
foo_free (Foo* self)
{
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

AbstractBar*
abstract_bar_construct (GType object_type,
                        Foo* foo)
{
	AbstractBar* self = NULL;
	Foo _tmp0_;
	g_return_val_if_fail (foo != NULL, NULL);
	self = (AbstractBar*) g_type_create_instance (object_type);
	_tmp0_ = *foo;
	self->foo = _tmp0_;
	return self;
}

static void
value_abstract_bar_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_abstract_bar_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		abstract_bar_unref (value->data[0].v_pointer);
	}
}

static void
value_abstract_bar_copy_value (const GValue* src_value,
                               GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = abstract_bar_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_abstract_bar_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_abstract_bar_collect_value (GValue* value,
                                  guint n_collect_values,
                                  GTypeCValue* collect_values,
                                  guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		AbstractBar * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = abstract_bar_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_abstract_bar_lcopy_value (const GValue* value,
                                guint n_collect_values,
                                GTypeCValue* collect_values,
                                guint collect_flags)
{
	AbstractBar ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = abstract_bar_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_abstract_bar (const gchar* name,
                         const gchar* nick,
                         const gchar* blurb,
                         GType object_type,
                         GParamFlags flags)
{
	ParamSpecAbstractBar* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_ABSTRACT_BAR), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_abstract_bar (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_ABSTRACT_BAR), NULL);
	return value->data[0].v_pointer;
}

void
value_set_abstract_bar (GValue* value,
                        gpointer v_object)
{
	AbstractBar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_ABSTRACT_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_ABSTRACT_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		abstract_bar_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		abstract_bar_unref (old);
	}
}

void
value_take_abstract_bar (GValue* value,
                         gpointer v_object)
{
	AbstractBar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_ABSTRACT_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_ABSTRACT_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		abstract_bar_unref (old);
	}
}

static void
abstract_bar_class_init (AbstractBarClass * klass,
                         gpointer klass_data)
{
	abstract_bar_parent_class = g_type_class_peek_parent (klass);
	((AbstractBarClass *) klass)->finalize = abstract_bar_finalize;
}

static void
abstract_bar_instance_init (AbstractBar * self,
                            gpointer klass)
{
	self->ref_count = 1;
}

static void
abstract_bar_finalize (AbstractBar * obj)
{
	AbstractBar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_ABSTRACT_BAR, AbstractBar);
	g_signal_handlers_destroy (self);
}

static GType
abstract_bar_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_abstract_bar_init, value_abstract_bar_free_value, value_abstract_bar_copy_value, value_abstract_bar_peek_pointer, "p", value_abstract_bar_collect_value, "p", value_abstract_bar_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (AbstractBarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) abstract_bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (AbstractBar), 0, (GInstanceInitFunc) abstract_bar_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType abstract_bar_type_id;
	abstract_bar_type_id = g_type_register_fundamental (g_type_fundamental_next (), "AbstractBar", &g_define_type_info, &g_define_type_fundamental_info, G_TYPE_FLAG_ABSTRACT);
	return abstract_bar_type_id;
}

GType
abstract_bar_get_type (void)
{
	static volatile gsize abstract_bar_type_id__once = 0;
	if (g_once_init_enter (&abstract_bar_type_id__once)) {
		GType abstract_bar_type_id;
		abstract_bar_type_id = abstract_bar_get_type_once ();
		g_once_init_leave (&abstract_bar_type_id__once, abstract_bar_type_id);
	}
	return abstract_bar_type_id__once;
}

gpointer
abstract_bar_ref (gpointer instance)
{
	AbstractBar * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
abstract_bar_unref (gpointer instance)
{
	AbstractBar * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		ABSTRACT_BAR_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

Bar*
bar_construct (GType object_type,
               Foo* foo)
{
	Bar* self = NULL;
	Foo _tmp0_;
	g_return_val_if_fail (foo != NULL, NULL);
	_tmp0_ = *foo;
	self = (Bar*) abstract_bar_construct (object_type, &_tmp0_);
	return self;
}

Bar*
bar_new (Foo* foo)
{
	return bar_construct (TYPE_BAR, foo);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (TYPE_ABSTRACT_BAR, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_main (void)
{
	Bar* bar = NULL;
	Foo _tmp0_ = {0};
	Bar* _tmp1_;
	Foo _tmp2_;
	_tmp0_.i = 42;
	_tmp1_ = bar_new (&_tmp0_);
	bar = _tmp1_;
	_tmp2_ = G_TYPE_CHECK_INSTANCE_CAST (bar, TYPE_ABSTRACT_BAR, AbstractBar)->foo;
	_vala_assert (_tmp2_.i == 42, "bar.foo.i == 42");
	_abstract_bar_unref0 (bar);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

