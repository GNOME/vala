/* chainup_struct_no_gtype_base.c generated by valac, the Vala compiler
 * generated from chainup_struct_no_gtype_base.vala, do not modify */

#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
typedef Foo Bar;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint a;
	gint b;
};

VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN gint foo_sum (Foo *self);
VALA_EXTERN Bar* bar_dup (const Bar* self);
VALA_EXTERN void bar_free (Bar* self);
VALA_EXTERN gint bar_mul (Bar *self);
VALA_EXTERN gint bar_mul2 (Bar *self);
static void _vala_main (void);

gint
foo_sum (Foo *self)
{
	gint result;
	result = (*self).a + (*self).b;
	return result;
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	memcpy (dup, self, sizeof (Foo));
	return dup;
}

void
foo_free (Foo* self)
{
	g_free (self);
}

gint
bar_mul (Bar *self)
{
	gint result;
	result = (*self).a * (*self).b;
	return result;
}

gint
bar_mul2 (Bar *self)
{
	gint result;
	result = (*self).a * (*self).b;
	return result;
}

Bar*
bar_dup (const Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	memcpy (dup, self, sizeof (Bar));
	return dup;
}

void
bar_free (Bar* self)
{
	g_free (self);
}

static void
_vala_main (void)
{
	Bar bar = {0};
	Bar _tmp0_ = {0};
	_tmp0_.a = 23;
	_tmp0_.b = 42;
	bar = _tmp0_;
	_vala_assert (foo_sum (&bar) == 65, "bar.sum () == 65");
	_vala_assert (bar_mul (&bar) == 966, "bar.mul () == 966");
	_vala_assert (bar_mul2 (&bar) == 966, "bar.mul2 () == 966");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

