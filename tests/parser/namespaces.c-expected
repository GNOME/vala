/* parser_namespaces.c generated by valac, the Vala compiler
 * generated from parser_namespaces.vala, do not modify */

#include <glib-object.h>
#include <gobject/gvaluecollector.h>
#include <stdio.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_GLOBAL_TESTCLASS (global_testclass_get_type ())
#define GLOBAL_TESTCLASS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_GLOBAL_TESTCLASS, GlobalTestClass))
#define GLOBAL_TESTCLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_GLOBAL_TESTCLASS, GlobalTestClassClass))
#define IS_GLOBAL_TESTCLASS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_GLOBAL_TESTCLASS))
#define IS_GLOBAL_TESTCLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_GLOBAL_TESTCLASS))
#define GLOBAL_TESTCLASS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_GLOBAL_TESTCLASS, GlobalTestClassClass))

typedef struct _GlobalTestClass GlobalTestClass;
typedef struct _GlobalTestClassClass GlobalTestClassClass;
typedef struct _GlobalTestClassPrivate GlobalTestClassPrivate;
typedef struct _ParamSpecGlobalTestClass ParamSpecGlobalTestClass;
#define _global_testclass_unref0(var) ((var == NULL) ? NULL : (var = (global_testclass_unref (var), NULL)))

#define FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE (foo_sub_class_in_nested_namespace_get_type ())
#define FOO_SUB_CLASS_IN_NESTED_NAMESPACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE, FooSubClassInNestedNamespace))
#define FOO_SUB_CLASS_IN_NESTED_NAMESPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE, FooSubClassInNestedNamespaceClass))
#define FOO_SUB_IS_CLASS_IN_NESTED_NAMESPACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE))
#define FOO_SUB_IS_CLASS_IN_NESTED_NAMESPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE))
#define FOO_SUB_CLASS_IN_NESTED_NAMESPACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE, FooSubClassInNestedNamespaceClass))

typedef struct _FooSubClassInNestedNamespace FooSubClassInNestedNamespace;
typedef struct _FooSubClassInNestedNamespaceClass FooSubClassInNestedNamespaceClass;
#define _foo_sub_class_in_nested_namespace_unref0(var) ((var == NULL) ? NULL : (var = (foo_sub_class_in_nested_namespace_unref (var), NULL)))

#define MAMAN_TYPE_BAR (maman_bar_get_type ())
#define MAMAN_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAMAN_TYPE_BAR, MamanBar))
#define MAMAN_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAMAN_TYPE_BAR, MamanBarClass))
#define MAMAN_IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAMAN_TYPE_BAR))
#define MAMAN_IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAMAN_TYPE_BAR))
#define MAMAN_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAMAN_TYPE_BAR, MamanBarClass))

typedef struct _MamanBar MamanBar;
typedef struct _MamanBarClass MamanBarClass;
typedef struct _MamanBarPrivate MamanBarPrivate;
enum  {
	MAMAN_BAR_0_PROPERTY,
	MAMAN_BAR_NUM_PROPERTIES
};
static GParamSpec* maman_bar_properties[MAMAN_BAR_NUM_PROPERTIES];
typedef struct _FooSubClassInNestedNamespacePrivate FooSubClassInNestedNamespacePrivate;
typedef struct _FooSubParamSpecClassInNestedNamespace FooSubParamSpecClassInNestedNamespace;

struct _GlobalTestClass {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GlobalTestClassPrivate * priv;
};

struct _GlobalTestClassClass {
	GTypeClass parent_class;
	void (*finalize) (GlobalTestClass *self);
};

struct _ParamSpecGlobalTestClass {
	GParamSpec parent_instance;
};

struct _MamanBar {
	GObject parent_instance;
	MamanBarPrivate * priv;
};

struct _MamanBarClass {
	GObjectClass parent_class;
};

struct _FooSubClassInNestedNamespace {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooSubClassInNestedNamespacePrivate * priv;
};

struct _FooSubClassInNestedNamespaceClass {
	GTypeClass parent_class;
	void (*finalize) (FooSubClassInNestedNamespace *self);
};

struct _FooSubParamSpecClassInNestedNamespace {
	GParamSpec parent_instance;
};

static gpointer global_testclass_parent_class = NULL;
static gpointer maman_bar_parent_class = NULL;
static gpointer foo_sub_class_in_nested_namespace_parent_class = NULL;

VALA_EXTERN gpointer global_testclass_ref (gpointer instance);
VALA_EXTERN void global_testclass_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_global_testclass (const gchar* name,
                                         const gchar* nick,
                                         const gchar* blurb,
                                         GType object_type,
                                         GParamFlags flags);
VALA_EXTERN void value_set_global_testclass (GValue* value,
                                 gpointer v_object);
VALA_EXTERN void value_take_global_testclass (GValue* value,
                                  gpointer v_object);
VALA_EXTERN gpointer value_get_global_testclass (const GValue* value);
VALA_EXTERN GType global_testclass_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GlobalTestClass, global_testclass_unref)
VALA_EXTERN GlobalTestClass* global_testclass_new (void);
VALA_EXTERN GlobalTestClass* global_testclass_construct (GType object_type);
static void global_testclass_finalize (GlobalTestClass * obj);
static GType global_testclass_get_type_once (void);
VALA_EXTERN void maman_run (void);
VALA_EXTERN void maman_bar_run (void);
VALA_EXTERN gpointer foo_sub_class_in_nested_namespace_ref (gpointer instance);
VALA_EXTERN void foo_sub_class_in_nested_namespace_unref (gpointer instance);
VALA_EXTERN GParamSpec* foo_sub_param_spec_class_in_nested_namespace (const gchar* name,
                                                          const gchar* nick,
                                                          const gchar* blurb,
                                                          GType object_type,
                                                          GParamFlags flags);
VALA_EXTERN void foo_sub_value_set_class_in_nested_namespace (GValue* value,
                                                  gpointer v_object);
VALA_EXTERN void foo_sub_value_take_class_in_nested_namespace (GValue* value,
                                                   gpointer v_object);
VALA_EXTERN gpointer foo_sub_value_get_class_in_nested_namespace (const GValue* value);
VALA_EXTERN GType foo_sub_class_in_nested_namespace_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (FooSubClassInNestedNamespace, foo_sub_class_in_nested_namespace_unref)
VALA_EXTERN FooSubClassInNestedNamespace* foo_sub_class_in_nested_namespace_new (void);
VALA_EXTERN FooSubClassInNestedNamespace* foo_sub_class_in_nested_namespace_construct (GType object_type);
VALA_EXTERN GType maman_bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MamanBar, g_object_unref)
VALA_EXTERN MamanBar* maman_bar_new (void);
VALA_EXTERN MamanBar* maman_bar_construct (GType object_type);
static GType maman_bar_get_type_once (void);
static void foo_sub_class_in_nested_namespace_finalize (FooSubClassInNestedNamespace * obj);
static GType foo_sub_class_in_nested_namespace_get_type_once (void);
static void _vala_main (void);

GlobalTestClass*
global_testclass_construct (GType object_type)
{
	GlobalTestClass* self = NULL;
	self = (GlobalTestClass*) g_type_create_instance (object_type);
	return self;
}

GlobalTestClass*
global_testclass_new (void)
{
	return global_testclass_construct (TYPE_GLOBAL_TESTCLASS);
}

static void
value_global_testclass_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_global_testclass_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		global_testclass_unref (value->data[0].v_pointer);
	}
}

static void
value_global_testclass_copy_value (const GValue* src_value,
                                   GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = global_testclass_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_global_testclass_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_global_testclass_collect_value (GValue* value,
                                      guint n_collect_values,
                                      GTypeCValue* collect_values,
                                      guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		GlobalTestClass * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = global_testclass_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_global_testclass_lcopy_value (const GValue* value,
                                    guint n_collect_values,
                                    GTypeCValue* collect_values,
                                    guint collect_flags)
{
	GlobalTestClass ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = global_testclass_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_global_testclass (const gchar* name,
                             const gchar* nick,
                             const gchar* blurb,
                             GType object_type,
                             GParamFlags flags)
{
	ParamSpecGlobalTestClass* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_GLOBAL_TESTCLASS), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_global_testclass (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_GLOBAL_TESTCLASS), NULL);
	return value->data[0].v_pointer;
}

void
value_set_global_testclass (GValue* value,
                            gpointer v_object)
{
	GlobalTestClass * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_GLOBAL_TESTCLASS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_GLOBAL_TESTCLASS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		global_testclass_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		global_testclass_unref (old);
	}
}

void
value_take_global_testclass (GValue* value,
                             gpointer v_object)
{
	GlobalTestClass * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_GLOBAL_TESTCLASS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_GLOBAL_TESTCLASS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		global_testclass_unref (old);
	}
}

static void
global_testclass_class_init (GlobalTestClassClass * klass,
                             gpointer klass_data)
{
	global_testclass_parent_class = g_type_class_peek_parent (klass);
	((GlobalTestClassClass *) klass)->finalize = global_testclass_finalize;
}

static void
global_testclass_instance_init (GlobalTestClass * self,
                                gpointer klass)
{
	self->ref_count = 1;
}

static void
global_testclass_finalize (GlobalTestClass * obj)
{
	GlobalTestClass * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_GLOBAL_TESTCLASS, GlobalTestClass);
	g_signal_handlers_destroy (self);
}

static GType
global_testclass_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_global_testclass_init, value_global_testclass_free_value, value_global_testclass_copy_value, value_global_testclass_peek_pointer, "p", value_global_testclass_collect_value, "p", value_global_testclass_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (GlobalTestClassClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) global_testclass_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (GlobalTestClass), 0, (GInstanceInitFunc) global_testclass_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType global_testclass_type_id;
	global_testclass_type_id = g_type_register_fundamental (g_type_fundamental_next (), "GlobalTestClass", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return global_testclass_type_id;
}

GType
global_testclass_get_type (void)
{
	static volatile gsize global_testclass_type_id__once = 0;
	if (g_once_init_enter (&global_testclass_type_id__once)) {
		GType global_testclass_type_id;
		global_testclass_type_id = global_testclass_get_type_once ();
		g_once_init_leave (&global_testclass_type_id__once, global_testclass_type_id);
	}
	return global_testclass_type_id__once;
}

gpointer
global_testclass_ref (gpointer instance)
{
	GlobalTestClass * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
global_testclass_unref (gpointer instance)
{
	GlobalTestClass * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		GLOBAL_TESTCLASS_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

void
maman_run (void)
{
	FILE* _tmp0_;
	GlobalTestClass* _tmp1_;
	GlobalTestClass* _tmp2_;
	FooSubClassInNestedNamespace* obj = NULL;
	FooSubClassInNestedNamespace* _tmp3_;
	_tmp0_ = stdout;
	fprintf (_tmp0_, "Namespace Test\n");
	maman_bar_run ();
	_tmp1_ = global_testclass_new ();
	_tmp2_ = _tmp1_;
	_global_testclass_unref0 (_tmp2_);
	_tmp3_ = foo_sub_class_in_nested_namespace_new ();
	obj = _tmp3_;
	_foo_sub_class_in_nested_namespace_unref0 (obj);
}

void
maman_bar_run (void)
{
	FILE* _tmp0_;
	_tmp0_ = stdout;
	fprintf (_tmp0_, "Class in Namespace Test\n");
}

MamanBar*
maman_bar_construct (GType object_type)
{
	MamanBar * self = NULL;
	self = (MamanBar*) g_object_new (object_type, NULL);
	return self;
}

MamanBar*
maman_bar_new (void)
{
	return maman_bar_construct (MAMAN_TYPE_BAR);
}

static void
maman_bar_class_init (MamanBarClass * klass,
                      gpointer klass_data)
{
	maman_bar_parent_class = g_type_class_peek_parent (klass);
}

static void
maman_bar_instance_init (MamanBar * self,
                         gpointer klass)
{
}

static GType
maman_bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MamanBarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maman_bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MamanBar), 0, (GInstanceInitFunc) maman_bar_instance_init, NULL };
	GType maman_bar_type_id;
	maman_bar_type_id = g_type_register_static (G_TYPE_OBJECT, "MamanBar", &g_define_type_info, 0);
	return maman_bar_type_id;
}

GType
maman_bar_get_type (void)
{
	static volatile gsize maman_bar_type_id__once = 0;
	if (g_once_init_enter (&maman_bar_type_id__once)) {
		GType maman_bar_type_id;
		maman_bar_type_id = maman_bar_get_type_once ();
		g_once_init_leave (&maman_bar_type_id__once, maman_bar_type_id);
	}
	return maman_bar_type_id__once;
}

FooSubClassInNestedNamespace*
foo_sub_class_in_nested_namespace_construct (GType object_type)
{
	FooSubClassInNestedNamespace* self = NULL;
	self = (FooSubClassInNestedNamespace*) g_type_create_instance (object_type);
	return self;
}

FooSubClassInNestedNamespace*
foo_sub_class_in_nested_namespace_new (void)
{
	return foo_sub_class_in_nested_namespace_construct (FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE);
}

static void
foo_sub_value_class_in_nested_namespace_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
foo_sub_value_class_in_nested_namespace_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_sub_class_in_nested_namespace_unref (value->data[0].v_pointer);
	}
}

static void
foo_sub_value_class_in_nested_namespace_copy_value (const GValue* src_value,
                                                    GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_sub_class_in_nested_namespace_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
foo_sub_value_class_in_nested_namespace_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
foo_sub_value_class_in_nested_namespace_collect_value (GValue* value,
                                                       guint n_collect_values,
                                                       GTypeCValue* collect_values,
                                                       guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		FooSubClassInNestedNamespace * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_sub_class_in_nested_namespace_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
foo_sub_value_class_in_nested_namespace_lcopy_value (const GValue* value,
                                                     guint n_collect_values,
                                                     GTypeCValue* collect_values,
                                                     guint collect_flags)
{
	FooSubClassInNestedNamespace ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_sub_class_in_nested_namespace_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
foo_sub_param_spec_class_in_nested_namespace (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags)
{
	FooSubParamSpecClassInNestedNamespace* spec;
	g_return_val_if_fail (g_type_is_a (object_type, FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
foo_sub_value_get_class_in_nested_namespace (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE), NULL);
	return value->data[0].v_pointer;
}

void
foo_sub_value_set_class_in_nested_namespace (GValue* value,
                                             gpointer v_object)
{
	FooSubClassInNestedNamespace * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_sub_class_in_nested_namespace_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_sub_class_in_nested_namespace_unref (old);
	}
}

void
foo_sub_value_take_class_in_nested_namespace (GValue* value,
                                              gpointer v_object)
{
	FooSubClassInNestedNamespace * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_sub_class_in_nested_namespace_unref (old);
	}
}

static void
foo_sub_class_in_nested_namespace_class_init (FooSubClassInNestedNamespaceClass * klass,
                                              gpointer klass_data)
{
	foo_sub_class_in_nested_namespace_parent_class = g_type_class_peek_parent (klass);
	((FooSubClassInNestedNamespaceClass *) klass)->finalize = foo_sub_class_in_nested_namespace_finalize;
}

static void
foo_sub_class_in_nested_namespace_instance_init (FooSubClassInNestedNamespace * self,
                                                 gpointer klass)
{
	self->ref_count = 1;
}

static void
foo_sub_class_in_nested_namespace_finalize (FooSubClassInNestedNamespace * obj)
{
	FooSubClassInNestedNamespace * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOO_SUB_TYPE_CLASS_IN_NESTED_NAMESPACE, FooSubClassInNestedNamespace);
	g_signal_handlers_destroy (self);
}

static GType
foo_sub_class_in_nested_namespace_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { foo_sub_value_class_in_nested_namespace_init, foo_sub_value_class_in_nested_namespace_free_value, foo_sub_value_class_in_nested_namespace_copy_value, foo_sub_value_class_in_nested_namespace_peek_pointer, "p", foo_sub_value_class_in_nested_namespace_collect_value, "p", foo_sub_value_class_in_nested_namespace_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooSubClassInNestedNamespaceClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_sub_class_in_nested_namespace_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FooSubClassInNestedNamespace), 0, (GInstanceInitFunc) foo_sub_class_in_nested_namespace_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_sub_class_in_nested_namespace_type_id;
	foo_sub_class_in_nested_namespace_type_id = g_type_register_fundamental (g_type_fundamental_next (), "FooSubClassInNestedNamespace", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return foo_sub_class_in_nested_namespace_type_id;
}

GType
foo_sub_class_in_nested_namespace_get_type (void)
{
	static volatile gsize foo_sub_class_in_nested_namespace_type_id__once = 0;
	if (g_once_init_enter (&foo_sub_class_in_nested_namespace_type_id__once)) {
		GType foo_sub_class_in_nested_namespace_type_id;
		foo_sub_class_in_nested_namespace_type_id = foo_sub_class_in_nested_namespace_get_type_once ();
		g_once_init_leave (&foo_sub_class_in_nested_namespace_type_id__once, foo_sub_class_in_nested_namespace_type_id);
	}
	return foo_sub_class_in_nested_namespace_type_id__once;
}

gpointer
foo_sub_class_in_nested_namespace_ref (gpointer instance)
{
	FooSubClassInNestedNamespace * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_sub_class_in_nested_namespace_unref (gpointer instance)
{
	FooSubClassInNestedNamespace * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_SUB_CLASS_IN_NESTED_NAMESPACE_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
_vala_main (void)
{
	maman_run ();
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

