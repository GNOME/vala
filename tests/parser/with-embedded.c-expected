/* parser_with_embedded.c generated by valac, the Vala compiler
 * generated from parser_with_embedded.vala, do not modify */

#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result;
	g_return_val_if_fail (self != NULL, NULL);
	result = self;
	return result;
}

static void
_vala_main (void)
{
	if (TRUE) {
		{
			const gchar* _tmp0_ = NULL;
			const gchar* _tmp1_;
			_tmp0_ = "foo";
			_tmp1_ = string_to_string (_tmp0_);
			_vala_assert (g_strcmp0 (_tmp1_, "foo") == 0, "to_string () == \"foo\"");
		}
	}
	{
		gint _tmp2_ = 0;
		gchar* _tmp3_;
		gchar* _tmp4_;
		_tmp2_ = 10;
		_tmp3_ = g_strdup_printf ("%i", _tmp2_);
		_tmp4_ = _tmp3_;
		_vala_assert (g_strcmp0 (_tmp4_, "10") == 0, "to_string () == \"10\"");
		_g_free0 (_tmp4_);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

