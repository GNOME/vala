/* parser_bug749576.c generated by valac, the Vala compiler
 * generated from parser_bug749576.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static GRegex* _tmp_regex_0 = NULL;
static GRegex* _tmp_regex_1 = NULL;
static GRegex* _tmp_regex_2 = NULL;
static GRegex* _tmp_regex_3 = NULL;

static inline GRegex*
_thread_safe_regex_init (GRegex** re,
                         const gchar * pattern,
                         GRegexCompileFlags compile_flags)
{
	if (g_once_init_enter ((volatile gsize*) re)) {
		GRegex* val = g_regex_new (pattern, compile_flags, 0, NULL);
		g_once_init_leave ((volatile gsize*) re, (gsize) val);
	}
	return *re;
}

static void
_vala_main (void)
{
	const gchar* a = NULL;
	const gchar* b = NULL;
	const gchar* c = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp9_;
	GError* _inner_error0_ = NULL;
	a = "first line\nnext line";
	b = "first line\rnext line";
	c = "first \tline\r\nnext \tline";
	_tmp0_ = a;
	_vala_assert (g_regex_match (_thread_safe_regex_init (&_tmp_regex_0, "\\Rnext", 0), _tmp0_, 0, NULL), "/\\Rnext/.match (a)");
	_tmp1_ = b;
	_vala_assert (g_regex_match (_thread_safe_regex_init (&_tmp_regex_1, "\\Rnext", 0), _tmp1_, 0, NULL), "/\\Rnext/.match (b)");
	_tmp2_ = c;
	_vala_assert (g_regex_match (_thread_safe_regex_init (&_tmp_regex_2, "\\Rnext", 0), _tmp2_, 0, NULL), "/\\Rnext/.match (c)");
	{
		GRegex* r = NULL;
		GRegex* _tmp3_;
		GRegex* _tmp4_;
		const gchar* _tmp5_;
		GRegex* r2 = NULL;
		GRegex* _tmp6_;
		GRegex* _tmp7_;
		const gchar* _tmp8_;
		_tmp3_ = g_regex_new ("\\Rnext", 0, 0, &_inner_error0_);
		r = _tmp3_;
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			goto __catch0_g_error;
		}
		_tmp4_ = r;
		_tmp5_ = a;
		_vala_assert (g_regex_match (_tmp4_, _tmp5_, 0, NULL), "r.match (a)");
		_tmp6_ = g_regex_new ("\\Rnext", 0, 0, &_inner_error0_);
		r2 = _tmp6_;
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			_g_regex_unref0 (r);
			goto __catch0_g_error;
		}
		_tmp7_ = r2;
		_tmp8_ = a;
		_vala_assert (g_regex_match (_tmp7_, _tmp8_, 0, NULL), "r2.match (a)");
		_g_regex_unref0 (r2);
		_g_regex_unref0 (r);
	}
	goto __finally0;
	__catch0_g_error:
	{
		g_clear_error (&_inner_error0_);
	}
	__finally0:
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp9_ = c;
	_vala_assert (g_regex_match (_thread_safe_regex_init (&_tmp_regex_3, "\\Nline", 0), _tmp9_, 0, NULL), "/\\Nline/.match (c)");
	{
		GRegex* r = NULL;
		GRegex* _tmp10_;
		GRegex* _tmp11_;
		const gchar* _tmp12_;
		GRegex* r2 = NULL;
		GRegex* _tmp13_;
		GRegex* _tmp14_;
		const gchar* _tmp15_;
		_tmp10_ = g_regex_new ("\\Nline", 0, 0, &_inner_error0_);
		r = _tmp10_;
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			goto __catch1_g_error;
		}
		_tmp11_ = r;
		_tmp12_ = c;
		_vala_assert (g_regex_match (_tmp11_, _tmp12_, 0, NULL), "r.match (c)");
		_tmp13_ = g_regex_new ("\\Nline", 0, 0, &_inner_error0_);
		r2 = _tmp13_;
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			_g_regex_unref0 (r);
			goto __catch1_g_error;
		}
		_tmp14_ = r2;
		_tmp15_ = c;
		_vala_assert (g_regex_match (_tmp14_, _tmp15_, 0, NULL), "r2.match (c)");
		_g_regex_unref0 (r2);
		_g_regex_unref0 (r);
	}
	goto __finally1;
	__catch1_g_error:
	{
		g_clear_error (&_inner_error0_);
	}
	__finally1:
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

