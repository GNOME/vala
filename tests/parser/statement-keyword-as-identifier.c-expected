/* parser_statement_keyword_as_identifier.c generated by valac, the Vala compiler
 * generated from parser_statement_keyword_as_identifier.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	{
		gint _if_ = 0;
		_if_ = 1;
		_vala_assert (_if_ == 1, "if == 1");
	}
	{
		gint _switch_ = 0;
		_switch_ = 2;
		_vala_assert (_switch_ == 2, "switch == 2");
	}
	{
		gint _while_ = 0;
		_while_ = 3;
		_vala_assert (_while_ == 3, "while == 3");
	}
	{
		gint _do_ = 0;
		_do_ = 4;
		_vala_assert (_do_ == 4, "do == 4");
	}
	{
		gint _for_ = 0;
		_for_ = 5;
		_vala_assert (_for_ == 5, "for == 5");
	}
	{
		gint foreach = 0;
		foreach = 6;
		_vala_assert (foreach == 6, "foreach == 6");
	}
	{
	}
	{
	}
	{
		gint _return_ = 0;
		_return_ = 9;
		_vala_assert (_return_ == 9, "return == 9");
	}
	{
	}
	{
		gint throw = 0;
		throw = 11;
		_vala_assert (throw == 11, "throw == 11");
	}
	{
		gint try = 0;
		try = 12;
		_vala_assert (try == 12, "try == 12");
	}
	{
		gint lock = 0;
		lock = 13;
		_vala_assert (lock == 13, "lock == 13");
	}
	{
		gint unlock = 0;
		unlock = 14;
		_vala_assert (unlock == 14, "unlock == 14");
	}
	{
		gint delete = 0;
		delete = 15;
		_vala_assert (delete == 15, "delete == 15");
	}
	{
		gint with = 0;
		with = 16;
		_vala_assert (with == 16, "with == 16");
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

