/* parser_do_statement.c generated by valac, the Vala compiler
 * generated from parser_do_statement.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	gint i = 0;
	i = 0;
	{
		gboolean _tmp0_ = FALSE;
		_tmp0_ = TRUE;
		while (TRUE) {
			gint _tmp1_;
			if (!_tmp0_) {
				if (!(i < 2)) {
					break;
				}
			}
			_tmp0_ = FALSE;
			_tmp1_ = i;
			i = _tmp1_ + 1;
		}
	}
	_vala_assert (i == 2, "i == 2");
	while (TRUE) {
		i = 42;
		break;
	}
	_vala_assert (i == 42, "i == 42");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

