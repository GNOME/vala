[CCode (gir_namespace = "GirTest", gir_version = "1.0")]
namespace GirTest {
	[CCode (cheader_filename = "girtest.h")]
	public abstract class AbstractObjectTest : GLib.Object {
		protected AbstractObjectTest ();
		public abstract void method_int8_in (int8 param);
		public abstract void method_int8_inout (ref int8 param);
		public abstract void method_int8_out (out int8 param);
		public abstract void method_throw () throws GirTest.ErrorTest;
	}
	[CCode (cheader_filename = "girtest.h")]
	[Version (deprecated = true, deprecated_since = "0.1.2", since = "0.1.0")]
	public class DeprecatedClassTest {
		public DeprecatedClassTest ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public class GenericsObjectTest<G,T> : GLib.Object {
		public GenericsObjectTest ();
		public void method<K> (K[] param);
	}
	[CCode (cheader_filename = "girtest.h")]
	public class GenericsTest<G,T> {
		public GenericsTest (owned GirTest.DelegateTest cb);
		public void method (T param);
	}
	[CCode (cheader_filename = "girtest.h")]
	public class ImplementionTest : GLib.Object, GirTest.InterfaceTest {
		public ImplementionTest ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public class ObjectTest : GLib.Object {
		public int field;
		public int fixed_array_field[23];
		public string? nullable_field;
		public ObjectTest ();
		public void array_in (int[] array);
		public void array_inout (ref int[] array);
		public void array_out (out int[] array);
		public int[] array_return ();
		public int[] array_return_int_in_delegate_out (int i1, out GirTest.DelegateTest d);
		public (unowned string)[] container_return ();
		public async void coroutine_async ();
		public virtual async void coroutine_method_throw (int i1, out int o1) throws GirTest.ErrorTest;
		public GirTest.DelegateTest delegate_return ();
		public GirTest.DelegateTest delegate_return_int_in_array_out (int i1, out int[] a);
		public static void full_inout (ref GirTest.ObjectTest obj);
		public static void full_out (out GirTest.ObjectTest obj);
		public static GirTest.ObjectTest full_return ();
		public GLib.GenericArray<weak string>? generic_array_container_return ();
		public void int8_in (int8 param);
		public void int8_out (out int8 param);
		public void int_in_int_in_array_out (int param1, int param2, out int[] array);
		public int[] int_in_int_in_array_return (int param1, int param2);
		public void method ();
		public virtual void method_throw () throws GirTest.ErrorTest;
		public void method_valist (int param, va_list vargs);
		public void method_varargs (int param, ...);
		public virtual void method_with_default_impl (int8 param);
		public ObjectTest.new_valist (int param, va_list vargs);
		public ObjectTest.newv (int param, ...);
		public void none_in ();
		public static void none_inout (ref unowned GirTest.ObjectTest obj);
		public static void none_out (out unowned GirTest.ObjectTest obj);
		public static unowned GirTest.ObjectTest none_return ();
		public GLib.EqualFunc simple_delegate_return ();
		public void simple_throw () throws GirTest.ErrorTest;
		[GIR (visible = false)]
		public void skipped_method ();
		public static void static_method ();
		public void string_array_out (out string[] array);
		public string[] string_array_return ();
		public ObjectTest.with_int (int param);
		public string construct_only_property { construct; }
		[GIR (visible = false)]
		public string skipped_property { get; set construct; }
		public string some_property { get; set construct; }
		public string write_only_property { set; }
		public virtual signal void signal_with_default_handlder (int i1);
		[GIR (visible = false)]
		public signal void skipped_signal (int param);
		public signal void some_signal (int param);
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public class SkippedClass {
		public SkippedClass ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public class SubTypeTest : GirTest.TypeTest {
		public string[] array_field;
		public GirTest.DelegateTest delegate_field;
		public SubTypeTest ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public class TypeTest {
		public TypeTest ();
		public string some_property { get; set; }
	}
	[CCode (cheader_filename = "girtest.h")]
	public interface InterfaceTest : GLib.Object {
		public virtual async void coroutine_async ();
		public virtual void int8_in (int8 param);
		public abstract int property { get; set construct; }
	}
	[CCode (cheader_filename = "girtest.h")]
	public interface PrerequisiteTest : GirTest.InterfaceTest {
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public interface SkippedInterface {
	}
	[CCode (cheader_filename = "girtest.h")]
	public struct BoxedStruct {
		public int field_name;
		public BoxedStruct ();
		public void inv ();
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public struct SkippedStruct {
		public int field_name;
	}
	[CCode (cheader_filename = "girtest.h", has_type_id = false)]
	public struct Struct {
		public int field_name;
		public Struct ();
		public void inv ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public enum EnumTest {
		VALUE1,
		VALUE2,
		VALUE3
	}
	[CCode (cheader_filename = "girtest.h")]
	[Flags]
	public enum FlagsTest {
		VALUE1,
		VALUE2,
		VALUE3
	}
	[CCode (cheader_filename = "girtest.h", has_type_id = false)]
	public enum PlainEnumTest {
		VALUE1,
		VALUE2,
		VALUE3
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public enum SkippedEnum {
		VALUE1
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public enum SkippedFlags {
		VALUE1
	}
	[CCode (cheader_filename = "girtest.h")]
	public errordomain ErrorTest {
		FAILED,
		SMELLY,
		FISHY
	}
	[CCode (cheader_filename = "girtest.h")]
	public delegate bool DelegateTest (void* a, void* b);
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public delegate void SkippedDelegate ();
	[CCode (cheader_filename = "girtest.h")]
	public const int CONSTANT_NUMBER;
	[CCode (cheader_filename = "girtest.h")]
	public const string CONSTANT_STRING;
}
