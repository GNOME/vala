[CCode (gir_namespace = "GirTest", gir_version = "1.0")]
namespace GirTest {
	namespace Nested {
		[CCode (cheader_filename = "girtest.h")]
		public static void function ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public abstract class AbstractObjectTest : GLib.Object {
		protected AbstractObjectTest ();
		public abstract void method_implicit_params (int[] param1, owned GirTest.DelegateTest param2);
		public abstract void method_int8_in (int8 param);
		public abstract void method_int8_inout (ref int8 param);
		public abstract void method_int8_out (out int8 param);
		public abstract void method_throw () throws GirTest.ErrorTest;
		public abstract void method_valist (int param, va_list vargs);
		[NoWrapper]
		public abstract void no_wrapper_method ();
		[NoWrapper]
		public abstract async void no_wrapper_method_async ();
		[GIR (visible = false)]
		public abstract async void skipped_coroutine_method (int param);
	}
	[CCode (cheader_filename = "girtest.h")]
	[Compact]
	public class CompactClass {
		public int i;
		public string s;
		public CompactClass ();
	}
	[CCode (cheader_filename = "girtest.h")]
	[Version (deprecated = true, deprecated_since = "0.1.2", since = "0.1.0")]
	public class DeprecatedClassTest {
		public DeprecatedClassTest ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public class GenericsObjectTest<G,T> : GLib.Object {
		public GenericsObjectTest ();
		public void method<K> (K[] param);
	}
	[CCode (cheader_filename = "girtest.h")]
	public class GenericsTest<G,T> {
		public GenericsTest (owned GirTest.DelegateTest cb);
		public void method (T? param);
		public GenericsTest.typed (owned GirTest.DelegateGenericsTest<G,T> cb);
	}
	[CCode (cheader_filename = "girtest.h")]
	public class ImplementionTest : GLib.Object, GirTest.InterfaceTest {
		public ImplementionTest ();
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (name = "RenamedClass")]
	public class NamedClass {
		public NamedClass ();
	}
	[CCode (cheader_filename = "girtest.h")]
	[Compact]
	[GIR (name = "RenamedCompactClass")]
	public class NamedCompactClass {
		public int i;
		public string s;
		public NamedCompactClass ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public class ObjectTest : GLib.Object {
		public int field;
		public int fixed_array_field[23];
		public string? nullable_field;
		public GirTest.Struct struct_field;
		public ObjectTest ();
		public void array_in (int[] array);
		public void array_inout (ref int[] array);
		public void array_out (out int[] array);
		public int[] array_return ();
		public int[] array_return_int_in_delegate_out (int i1, out GirTest.DelegateTest d);
		public int[:size_t] array_size_t_length (int[:size_t] array, out int[:size_t] array2);
		public (unowned string)[] container_return ();
		public async void coroutine_async ();
		public virtual async void coroutine_method_throw (int i1, out int o1) throws GirTest.ErrorTest;
		public virtual async void coroutine_virtual_async ();
		public GirTest.DelegateTest delegate_return ();
		public GirTest.DelegateTest delegate_return_int_in_array_out (int i1, out int[] a);
		public static void full_inout (ref GirTest.ObjectTest obj);
		public static void full_out (out GirTest.ObjectTest obj);
		public static GirTest.ObjectTest full_return ();
		public GLib.GenericArray<weak string>? generic_array_container_return ();
		public void int8_in (int8 param);
		public void int8_out (out int8 param);
		public void int_in_int_in_array_out (int param1, int param2, out int[] array);
		public int[] int_in_int_in_array_return (int param1, int param2);
		public ObjectTest.may_fail (int param) throws GirTest.ErrorTest;
		public void method ();
		public virtual void method_implicit_params (int[] param1, owned GirTest.DelegateTest param2);
		public virtual void method_throw () throws GirTest.ErrorTest;
		public void method_valist (int param, va_list vargs);
		public void method_varargs (int param, ...);
		public void method_with_default (int i = GLib.Priority.HIGH);
		public virtual void method_with_default_impl (int8 param);
		public ObjectTest.new_valist (int param, va_list vargs);
		public ObjectTest.newv (int param, ...);
		[NoWrapper]
		public virtual void no_wrapper_method ();
		[NoWrapper]
		public virtual async void no_wrapper_method_async ();
		public void none_in ();
		public static void none_inout (ref unowned GirTest.ObjectTest obj);
		public static void none_out (out unowned GirTest.ObjectTest obj);
		public static unowned GirTest.ObjectTest none_return ();
		public GLib.EqualFunc<string> simple_delegate_return ();
		public void simple_throw () throws GirTest.ErrorTest;
		[GIR (visible = false)]
		public void skipped_method ();
		public static void static_method ();
		public void string_array_out (out string[] array);
		public string[] string_array_return ();
		public ObjectTest.with_int (int param);
		public string construct_only_property { construct; }
		[GIR (visible = false)]
		public string skipped_property { get; set construct; }
		public string some_property { get; set construct; }
		public string write_only_property { set; }
		public virtual signal void signal_with_default_handlder (int i1);
		[GIR (visible = false)]
		public signal void skipped_signal (int param);
		public signal void some_signal (int param);
	}
	[CCode (cheader_filename = "girtest.h")]
	public sealed class SealedObjectTest : GLib.Object {
		public SealedObjectTest ();
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public class SkippedClass {
		public SkippedClass ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public class SubTypeTest : GirTest.TypeTest {
		public string[] array_field;
		public GirTest.DelegateTest delegate_field;
		public SubTypeTest ();
	}
	[CCode (cheader_filename = "girtest.h")]
	public class TypeTest {
		public TypeTest ();
		public string some_property { get; set; }
	}
	[CCode (cheader_filename = "girtest.h")]
	public interface InterfaceTest : GLib.Object {
		public virtual async void coroutine_async ();
		public virtual void int8_in (int8 param);
		public virtual void method_implicit_params (int[] param1, owned GirTest.DelegateTest param2);
		public virtual void method_valist (int param, va_list vargs);
		[NoWrapper]
		public virtual void no_wrapper_method ();
		[NoWrapper]
		public virtual async void no_wrapper_method_async ();
		[GIR (visible = false)]
		public virtual async void skipped_coroutine_method (int param);
		public static void static_method ();
		public abstract int property { get; set construct; }
		[HasEmitter]
		public signal void some_signal (int param);
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (name = "RenamedInterface")]
	public interface NamedInterface : GLib.Object {
	}
	[CCode (cheader_filename = "girtest.h")]
	public interface PrerequisiteTest : GirTest.InterfaceTest {
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public interface SkippedInterface {
	}
	[CCode (cheader_filename = "girtest.h")]
	public struct BoxedStruct {
		public int field_name;
		public int internal_field_name;
		public BoxedStruct ();
		public BoxedStruct.foo (int param1, int param2);
		public void inv ();
		public GirTest.BoxedStruct ret ();
		public void @set (GirTest.BoxedStruct param1);
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (name = "RenamedStruct")]
	public struct NamedStruct {
		public int field_name;
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public struct SkippedStruct {
		public int field_name;
	}
	[CCode (cheader_filename = "girtest.h", has_type_id = false)]
	public struct Struct {
		public int field_name;
		public int internal_field_name;
		public Struct ();
		public Struct.foo (int param1, int param2);
		public void inv ();
		public GirTest.Struct ret ();
		public void @set (GirTest.Struct param1);
	}
	[CCode (cheader_filename = "girtest.h")]
	public enum EnumTest {
		VALUE1,
		VALUE2,
		VALUE3
	}
	[CCode (cheader_filename = "girtest.h")]
	[Flags]
	public enum FlagsTest {
		VALUE1,
		VALUE2,
		VALUE3
	}
	[CCode (cheader_filename = "girtest.h")]
	[Flags]
	[GIR (name = "RenamedBitfield")]
	public enum NamedBitfield {
		VALUE1
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (name = "RenamedEnumeration")]
	public enum NamedEnumeration {
		VALUE1
	}
	[CCode (cheader_filename = "girtest.h", has_type_id = false)]
	public enum PlainEnumTest {
		VALUE1,
		VALUE2,
		VALUE3
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public enum SkippedEnum {
		VALUE1
	}
	[CCode (cheader_filename = "girtest.h")]
	[Flags]
	[GIR (visible = false)]
	public enum SkippedFlags {
		VALUE1
	}
	[CCode (cheader_filename = "girtest.h")]
	public errordomain ErrorTest {
		FAILED,
		SMELLY,
		FISHY
	}
	[CCode (cheader_filename = "girtest.h")]
	[GIR (name = "RenamedError")]
	public errordomain NamedError {
		FAILED
	}
	[CCode (cheader_filename = "girtest.h", has_type_id = false)]
	public errordomain PlainErrorTest {
		FAILED,
		SMELLY,
		FISHY
	}
	[CCode (cheader_filename = "girtest.h")]
	public delegate bool DelegateErrorTest () throws GirTest.ErrorTest;
	[CCode (cheader_filename = "girtest.h")]
	public delegate bool DelegateGenericsTest<G,T> (G g, T? t);
	[CCode (cheader_filename = "girtest.h")]
	public delegate bool DelegateTest (void* a, void* b);
	[CCode (cheader_filename = "girtest.h")]
	[GIR (name = "RenamedDelegate")]
	public delegate void NamedDelegate ();
	[CCode (cheader_filename = "girtest.h")]
	[GIR (visible = false)]
	public delegate void SkippedDelegate ();
	[CCode (cheader_filename = "girtest.h")]
	public const char CHAR_LITERAL;
	[CCode (cheader_filename = "girtest.h")]
	public const int CONSTANT_NUMBER;
	[CCode (cheader_filename = "girtest.h")]
	public const string CONSTANT_STRING;
	[CCode (cheader_filename = "girtest.h")]
	public const bool FALSE_LITERAL;
	[CCode (cheader_filename = "girtest.h")]
	public const float FLOAT_LITERAL;
	[CCode (cheader_filename = "girtest.h")]
	public const int INTEGER_LITERAL;
	[CCode (cheader_filename = "girtest.h")]
	[GIR (name = "RENAMED_CONSTANT")]
	public const int NAMED_CONSTANT;
	[CCode (cheader_filename = "girtest.h")]
	public const double REAL_LITERAL;
	[CCode (cheader_filename = "girtest.h")]
	public const bool TRUE_LITERAL;
	[CCode (cheader_filename = "girtest.h")]
	public static GirTest.NamedClass use_renamed_class (GirTest.NamedClass param);
	[CCode (cheader_filename = "girtest.h")]
	public static unowned GirTest.NamedCompactClass use_renamed_compact_class (GirTest.NamedCompactClass param);
	[CCode (cheader_filename = "girtest.h")]
	public static unowned GirTest.NamedDelegate use_renamed_delegate (GirTest.NamedDelegate param);
	[CCode (cheader_filename = "girtest.h")]
	public static GirTest.NamedEnumeration use_renamed_enumeration (GirTest.NamedEnumeration param);
	[CCode (cheader_filename = "girtest.h")]
	public static GirTest.NamedError use_renamed_error (GirTest.NamedError param);
	[CCode (cheader_filename = "girtest.h")]
	public static GirTest.NamedBitfield use_renamed_flags (GirTest.NamedBitfield param);
	[CCode (cheader_filename = "girtest.h")]
	public static GirTest.NamedInterface use_renamed_interface (GirTest.NamedInterface param);
	[CCode (cheader_filename = "girtest.h")]
	public static GirTest.NamedStruct? use_renamed_struct (GirTest.NamedStruct param);
}
[CCode (cheader_filename = "girtest.h")]
public enum InvalidEnum {
	VALUE
}
[CCode (cheader_filename = "girtest.h")]
public errordomain InvalidError {
	FAILED
}
[CCode (cheader_filename = "girtest.h")]
public class InvalidClass {
	public InvalidClass ();
}
[CCode (cheader_filename = "girtest.h")]
public interface InvalidIface {
}
[CCode (cheader_filename = "girtest.h")]
public struct InvalidStruct {
	public int i;
}
[CCode (cheader_filename = "girtest.h")]
public delegate void InvalidFunc ();
[CCode (cheader_filename = "girtest.h")]
public const int INVALID_CONST;
[CCode (cheader_filename = "girtest.h")]
public static int invalid_field;
[CCode (cheader_filename = "girtest.h")]
public static void invalid_method ();
