/* errors_bug639589.c generated by valac, the Vala compiler
 * generated from errors_bug639589.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

VALA_EXTERN void foo (GError** error);
static void _vala_main (void);

static gpointer
_g_error_copy0 (gpointer self)
{
	return self ? g_error_copy (self) : NULL;
}

void
foo (GError** error)
{
	GObject* bar = NULL;
	GObject* _tmp0_;
	GError* _inner_error0_ = NULL;
	_tmp0_ = g_object_new (G_TYPE_OBJECT, NULL);
	bar = _tmp0_;
	{
		GError* _tmp1_;
		_tmp1_ = g_error_new_literal (G_FILE_ERROR, G_FILE_ERROR_EXIST, "");
		_inner_error0_ = _tmp1_;
		goto __catch0_g_error;
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp2_;
		e = _inner_error0_;
		_inner_error0_ = NULL;
		_tmp2_ = _g_error_copy0 (e);
		_inner_error0_ = _tmp2_;
		_g_error_free0 (e);
		goto __finally0;
	}
	__finally0:
	{
		GError* _inner_error1_ = NULL;
		gchar* _tmp3_;
		_tmp3_ = g_strdup ("bar");
		g_object_set_data_full (bar, "foo", _tmp3_, g_free);
	}
	g_propagate_error (error, _inner_error0_);
	_g_object_unref0 (bar);
	return;
}

static void
_vala_main (void)
{
	GError* _inner_error0_ = NULL;
	{
		foo (&_inner_error0_);
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		g_clear_error (&_inner_error0_);
	}
	__finally0:
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

