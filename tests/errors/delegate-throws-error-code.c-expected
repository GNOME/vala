/* errors_delegate_throws_error_code.c generated by valac, the Vala compiler
 * generated from errors_delegate_throws_error_code.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO_ERROR (foo_error_get_type ())
typedef void (*FooFunc) (gpointer user_data, GError** error);

typedef enum  {
	FOO_ERROR_FOO,
	FOO_ERROR_BAR
} FooError;
#define FOO_ERROR foo_error_quark ()

VALA_EXTERN GQuark foo_error_quark (void);
VALA_EXTERN GType foo_error_get_type (void) G_GNUC_CONST ;
static void _vala_main (void);
static void _vala_lambda0_ (GError** error);
static void __vala_lambda0__foo_func (gpointer self,
                               GError** error);

GQuark
foo_error_quark (void)
{
	return g_quark_from_static_string ("foo-error-quark");
}

static GType
foo_error_get_type_once (void)
{
	static const GEnumValue values[] = {{FOO_ERROR_FOO, "FOO_ERROR_FOO", "foo"}, {FOO_ERROR_BAR, "FOO_ERROR_BAR", "bar"}, {0, NULL, NULL}};
	GType foo_error_type_id;
	foo_error_type_id = g_enum_register_static ("FooError", values);
	return foo_error_type_id;
}

GType
foo_error_get_type (void)
{
	static volatile gsize foo_error_type_id__once = 0;
	if (g_once_init_enter (&foo_error_type_id__once)) {
		GType foo_error_type_id;
		foo_error_type_id = foo_error_get_type_once ();
		g_once_init_leave (&foo_error_type_id__once, foo_error_type_id);
	}
	return foo_error_type_id__once;
}

static void
_vala_lambda0_ (GError** error)
{
}

static void
__vala_lambda0__foo_func (gpointer self,
                          GError** error)
{
	_vala_lambda0_ (error);
}

static void
_vala_main (void)
{
	FooFunc foo = NULL;
	gpointer foo_target;
	GDestroyNotify foo_target_destroy_notify;
	GError* _inner_error0_ = NULL;
	foo = __vala_lambda0__foo_func;
	foo_target = NULL;
	foo_target_destroy_notify = NULL;
	foo (foo_target, &_inner_error0_);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		(foo_target_destroy_notify == NULL) ? NULL : (foo_target_destroy_notify (foo_target), NULL);
		foo = NULL;
		foo_target = NULL;
		foo_target_destroy_notify = NULL;
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	(foo_target_destroy_notify == NULL) ? NULL : (foo_target_destroy_notify (foo_target), NULL);
	foo = NULL;
	foo_target = NULL;
	foo_target_destroy_notify = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

