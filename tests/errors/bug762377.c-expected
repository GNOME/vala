/* errors_bug762377.c generated by valac, the Vala compiler
 * generated from errors_bug762377.vala, do not modify */

#include <gio/gio.h>
#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO_OUTPUT_STREAM (foo_output_stream_get_type ())
#define FOO_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO_OUTPUT_STREAM, FooOutputStream))
#define FOO_OUTPUT_STREAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO_OUTPUT_STREAM, FooOutputStreamClass))
#define IS_FOO_OUTPUT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO_OUTPUT_STREAM))
#define IS_FOO_OUTPUT_STREAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO_OUTPUT_STREAM))
#define FOO_OUTPUT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO_OUTPUT_STREAM, FooOutputStreamClass))

typedef struct _FooOutputStream FooOutputStream;
typedef struct _FooOutputStreamClass FooOutputStreamClass;
typedef struct _FooOutputStreamPrivate FooOutputStreamPrivate;
enum  {
	FOO_OUTPUT_STREAM_0_PROPERTY,
	FOO_OUTPUT_STREAM_NUM_PROPERTIES
};
static GParamSpec* foo_output_stream_properties[FOO_OUTPUT_STREAM_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _FooOutputStream {
	GOutputStream parent_instance;
	FooOutputStreamPrivate * priv;
};

struct _FooOutputStreamClass {
	GOutputStreamClass parent_class;
};

static gpointer foo_output_stream_parent_class = NULL;

VALA_EXTERN GType foo_output_stream_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (FooOutputStream, g_object_unref)
static gssize foo_output_stream_real_write (GOutputStream* base,
                                     guint8* buffer,
                                     gsize buffer_length1,
                                     GCancellable* cancellable,
                                     GError** error);
static gboolean foo_output_stream_real_close (GOutputStream* base,
                                       GCancellable* cancellable,
                                       GError** error);
VALA_EXTERN FooOutputStream* foo_output_stream_new (void);
VALA_EXTERN FooOutputStream* foo_output_stream_construct (GType object_type);
static GType foo_output_stream_get_type_once (void);
static void _vala_main (void);

static gssize
foo_output_stream_real_write (GOutputStream* base,
                              guint8* buffer,
                              gsize buffer_length1,
                              GCancellable* cancellable,
                              GError** error)
{
	FooOutputStream * self;
	GError* _tmp0_;
	GError* _inner_error0_ = NULL;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_FOO_OUTPUT_STREAM, FooOutputStream);
	g_return_val_if_fail ((cancellable == NULL) || G_TYPE_CHECK_INSTANCE_TYPE (cancellable, g_cancellable_get_type ()), 0L);
	_tmp0_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_FAILED, "");
	_inner_error0_ = _tmp0_;
	if (_inner_error0_->domain == G_IO_ERROR) {
		gssize _tmp1_ = -1L;
		g_propagate_error (error, _inner_error0_);
		return _tmp1_;
	} else {
		gssize _tmp2_ = -1L;
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return _tmp2_;
	}
}

static gboolean
foo_output_stream_real_close (GOutputStream* base,
                              GCancellable* cancellable,
                              GError** error)
{
	FooOutputStream * self;
	gboolean result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_FOO_OUTPUT_STREAM, FooOutputStream);
	g_return_val_if_fail ((cancellable == NULL) || G_TYPE_CHECK_INSTANCE_TYPE (cancellable, g_cancellable_get_type ()), FALSE);
	result = TRUE;
	return result;
}

FooOutputStream*
foo_output_stream_construct (GType object_type)
{
	FooOutputStream * self = NULL;
	self = (FooOutputStream*) g_object_new (object_type, NULL);
	return self;
}

FooOutputStream*
foo_output_stream_new (void)
{
	return foo_output_stream_construct (TYPE_FOO_OUTPUT_STREAM);
}

static void
foo_output_stream_class_init (FooOutputStreamClass * klass,
                              gpointer klass_data)
{
	foo_output_stream_parent_class = g_type_class_peek_parent (klass);
	((GOutputStreamClass *) klass)->write_fn = (gssize (*) (GOutputStream*, guint8*, gsize, GCancellable*, GError**)) foo_output_stream_real_write;
	((GOutputStreamClass *) klass)->close_fn = (gboolean (*) (GOutputStream*, GCancellable*, GError**)) foo_output_stream_real_close;
}

static void
foo_output_stream_instance_init (FooOutputStream * self,
                                 gpointer klass)
{
}

static GType
foo_output_stream_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooOutputStreamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_output_stream_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FooOutputStream), 0, (GInstanceInitFunc) foo_output_stream_instance_init, NULL };
	GType foo_output_stream_type_id;
	foo_output_stream_type_id = g_type_register_static (g_output_stream_get_type (), "FooOutputStream", &g_define_type_info, 0);
	return foo_output_stream_type_id;
}

GType
foo_output_stream_get_type (void)
{
	static volatile gsize foo_output_stream_type_id__once = 0;
	if (g_once_init_enter (&foo_output_stream_type_id__once)) {
		GType foo_output_stream_type_id;
		foo_output_stream_type_id = foo_output_stream_get_type_once ();
		g_once_init_leave (&foo_output_stream_type_id__once, foo_output_stream_type_id);
	}
	return foo_output_stream_type_id__once;
}

static guint8*
string_get_data (const gchar* self,
                 gint* result_length1)
{
	guint8* result;
	guint8* res = NULL;
	gint res_length1;
	gint _res_size_;
	gint _tmp0_;
	gint _tmp1_;
	guint8* _tmp2_;
	gint _tmp2__length1;
	g_return_val_if_fail (self != NULL, NULL);
	res = (guint8*) self;
	res_length1 = -1;
	_res_size_ = res_length1;
	_tmp0_ = strlen (self);
	_tmp1_ = _tmp0_;
	res_length1 = (gint) _tmp1_;
	_tmp2_ = res;
	_tmp2__length1 = res_length1;
	if (result_length1) {
		*result_length1 = _tmp2__length1;
	}
	result = _tmp2_;
	return result;
}

static void
_vala_main (void)
{
	GError* _inner_error0_ = NULL;
	{
		FooOutputStream* output = NULL;
		FooOutputStream* _tmp0_;
		gsize bytes_written = 0UL;
		guint8* _tmp1_;
		gint _tmp1__length1;
		gint _tmp2_ = 0;
		guint8* _tmp3_;
		gint _tmp3__length1;
		gsize _tmp4_ = 0UL;
		_tmp0_ = foo_output_stream_new ();
		output = _tmp0_;
		_tmp1_ = string_get_data ("Hello world!", &_tmp2_);
		_tmp1__length1 = _tmp2_;
		_tmp3_ = _tmp1_;
		_tmp3__length1 = _tmp1__length1;
		g_output_stream_write_all (G_TYPE_CHECK_INSTANCE_CAST (output, g_output_stream_get_type (), GOutputStream), _tmp3_, (gsize) _tmp3__length1, &_tmp4_, NULL, &_inner_error0_);
		bytes_written = _tmp4_;
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			_g_object_unref0 (output);
			if (_inner_error0_->domain == G_IO_ERROR) {
				goto __catch0_g_io_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
		_g_object_unref0 (output);
	}
	goto __finally0;
	__catch0_g_io_error:
	{
		g_clear_error (&_inner_error0_);
	}
	__finally0:
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

