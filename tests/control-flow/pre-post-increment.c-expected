/* control_flow_pre_post_increment.c generated by valac, the Vala compiler
 * generated from control_flow_pre_post_increment.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	{
		gint i = 0;
		gint _tmp0_;
		i = 0;
		_tmp0_ = i;
		i = _tmp0_ + 1;
		i = _tmp0_ + 1;
		_vala_assert (i == 1, "i == 1");
	}
	{
		gint i = 0;
		gint _tmp1_;
		i = 0;
		_tmp1_ = i;
		i = _tmp1_ + 1;
		_vala_assert (_tmp1_ == 0, "i++ == 0");
	}
	{
		gint i = 0;
		gint _tmp2_;
		i = 0;
		i = i + 1;
		_tmp2_ = i;
		i = _tmp2_ + 1;
		_vala_assert (i == 2, "i == 2");
	}
	{
		gint i = 0;
		gint _tmp3_;
		i = 0;
		i = i + 1;
		_tmp3_ = i;
		_vala_assert (_tmp3_ == 1, "++i == 1");
	}
	{
		gint i = 0;
		gint _tmp4_;
		i = 1;
		_tmp4_ = i;
		i = _tmp4_ + 1;
		i -= _tmp4_ % 2;
		_vala_assert (i == 1, "i == 1");
	}
	{
		gint i = 0;
		gint _tmp5_;
		i = 1;
		i = i + 1;
		_tmp5_ = i;
		i -= _tmp5_ % 2;
		_vala_assert (i == 2, "i == 2");
	}
	{
		gint i = 0;
		gint _tmp6_;
		i = 1;
		_tmp6_ = i;
		i = _tmp6_ + 1;
		i += _tmp6_ % 2;
		_vala_assert (i == 3, "i == 3");
	}
	{
		gint i = 0;
		gint _tmp7_;
		i = 1;
		i = i + 1;
		_tmp7_ = i;
		i += _tmp7_ % 2;
		_vala_assert (i == 2, "i == 2");
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

