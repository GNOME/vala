/* control_flow_coalesce_short_circuit.c generated by valac, the Vala compiler
 * generated from control_flow_coalesce_short_circuit.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN gchar* get_foo (void);
static void _vala_main (void);

gchar*
get_foo (void)
{
	g_assert_not_reached ();
}

static void
_vala_main (void)
{
	{
		gchar* _tmp0_ = NULL;
		gchar* _tmp1_;
		gchar* foo = NULL;
		gchar* _tmp3_;
		const gchar* _tmp4_;
		_tmp1_ = g_strdup ("foo");
		_tmp0_ = _tmp1_;
		if (_tmp0_ == NULL) {
			gchar* _tmp2_;
			_tmp2_ = get_foo ();
			_g_free0 (_tmp0_);
			_tmp0_ = _tmp2_;
		}
		_tmp3_ = _tmp0_;
		_tmp0_ = NULL;
		foo = _tmp3_;
		_tmp4_ = foo;
		_vala_assert (g_strcmp0 (_tmp4_, "foo") == 0, "foo == \"foo\"");
		_g_free0 (foo);
		_g_free0 (_tmp0_);
	}
	{
		gchar* _tmp5_ = NULL;
		gchar* _tmp6_;
		gchar* foo = NULL;
		gchar* _tmp11_;
		_tmp6_ = g_strdup ("foo");
		_tmp5_ = _tmp6_;
		if (_tmp5_ == NULL) {
			gchar* _tmp7_ = NULL;
			gchar* _tmp8_;
			gchar* _tmp10_;
			_tmp8_ = get_foo ();
			_tmp7_ = _tmp8_;
			if (_tmp7_ == NULL) {
				gchar* _tmp9_;
				_tmp9_ = get_foo ();
				_g_free0 (_tmp7_);
				_tmp7_ = _tmp9_;
			}
			_tmp10_ = _tmp7_;
			_tmp7_ = NULL;
			_g_free0 (_tmp5_);
			_tmp5_ = _tmp10_;
			_g_free0 (_tmp7_);
		}
		_tmp11_ = _tmp5_;
		_tmp5_ = NULL;
		foo = _tmp11_;
		_vala_assert (g_strcmp0 (foo, "foo") == 0, "foo == \"foo\"");
		_g_free0 (foo);
		_g_free0 (_tmp5_);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

