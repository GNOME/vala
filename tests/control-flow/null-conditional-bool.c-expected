/* control_flow_null_conditional_bool.c generated by valac, the Vala compiler
 * generated from control_flow_null_conditional_bool.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;
#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
	gboolean bar;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN Foo* foo_new (gboolean b);
VALA_EXTERN Foo* foo_construct (GType object_type,
                    gboolean b);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
static void _vala_main (void);
static gboolean* _bool_dup (gboolean* self);

Foo*
foo_construct (GType object_type,
               gboolean b)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	self->bar = b;
	return self;
}

Foo*
foo_new (gboolean b)
{
	return foo_construct (TYPE_FOO, b);
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static gboolean*
_bool_dup (gboolean* self)
{
	gboolean* dup;
	dup = g_new0 (gboolean, 1);
	memcpy (dup, self, sizeof (gboolean));
	return dup;
}

static gpointer
__bool_dup0 (gpointer self)
{
	return self ? _bool_dup (self) : NULL;
}

static void
_vala_main (void)
{
	{
		Foo* foo = NULL;
		Foo* _tmp0_ = NULL;
		Foo* _tmp1_;
		gboolean* _tmp2_ = NULL;
		gboolean* _tmp4_ = NULL;
		gboolean* _tmp5_;
		foo = NULL;
		_tmp1_ = foo;
		_tmp0_ = _tmp1_;
		_tmp2_ = NULL;
		if (_tmp0_ != NULL) {
			gboolean* _tmp3_;
			_tmp3_ = __bool_dup0 (&_tmp0_->bar);
			_g_free0 (_tmp2_);
			_tmp2_ = _tmp3_;
		}
		_tmp5_ = __bool_dup0 (_tmp2_);
		_tmp4_ = _tmp5_;
		if (_tmp4_ == NULL) {
			gboolean _tmp6_;
			gboolean* _tmp7_;
			_tmp6_ = TRUE;
			_tmp7_ = __bool_dup0 (&_tmp6_);
			_g_free0 (_tmp4_);
			_tmp4_ = _tmp7_;
		}
		if (*_tmp4_) {
		} else {
			g_assert_not_reached ();
		}
		_g_free0 (_tmp4_);
		_g_free0 (_tmp2_);
		_foo_unref0 (foo);
	}
	{
		Foo* foo = NULL;
		Foo* _tmp8_ = NULL;
		Foo* _tmp9_;
		gboolean* _tmp10_ = NULL;
		gboolean* _tmp12_ = NULL;
		gboolean* _tmp13_;
		foo = NULL;
		_tmp9_ = foo;
		_tmp8_ = _tmp9_;
		_tmp10_ = NULL;
		if (_tmp8_ != NULL) {
			gboolean* _tmp11_;
			_tmp11_ = __bool_dup0 (&_tmp8_->bar);
			_g_free0 (_tmp10_);
			_tmp10_ = _tmp11_;
		}
		_tmp13_ = __bool_dup0 (_tmp10_);
		_tmp12_ = _tmp13_;
		if (_tmp12_ == NULL) {
			gboolean _tmp14_;
			gboolean* _tmp15_;
			_tmp14_ = FALSE;
			_tmp15_ = __bool_dup0 (&_tmp14_);
			_g_free0 (_tmp12_);
			_tmp12_ = _tmp15_;
		}
		if (*_tmp12_) {
			g_assert_not_reached ();
		} else {
		}
		_g_free0 (_tmp12_);
		_g_free0 (_tmp10_);
		_foo_unref0 (foo);
	}
	{
		Foo* foo = NULL;
		Foo* _tmp16_;
		Foo* _tmp17_ = NULL;
		Foo* _tmp18_;
		gboolean* _tmp19_ = NULL;
		gboolean* _tmp21_ = NULL;
		gboolean* _tmp22_;
		_tmp16_ = foo_new (TRUE);
		foo = _tmp16_;
		_tmp18_ = foo;
		_tmp17_ = _tmp18_;
		_tmp19_ = NULL;
		if (_tmp17_ != NULL) {
			gboolean* _tmp20_;
			_tmp20_ = __bool_dup0 (&_tmp17_->bar);
			_g_free0 (_tmp19_);
			_tmp19_ = _tmp20_;
		}
		_tmp22_ = __bool_dup0 (_tmp19_);
		_tmp21_ = _tmp22_;
		if (_tmp21_ == NULL) {
			gboolean _tmp23_;
			gboolean* _tmp24_;
			_tmp23_ = FALSE;
			_tmp24_ = __bool_dup0 (&_tmp23_);
			_g_free0 (_tmp21_);
			_tmp21_ = _tmp24_;
		}
		if (*_tmp21_) {
		} else {
			g_assert_not_reached ();
		}
		_g_free0 (_tmp21_);
		_g_free0 (_tmp19_);
		_foo_unref0 (foo);
	}
	{
		Foo* foo = NULL;
		Foo* _tmp25_;
		Foo* _tmp26_ = NULL;
		Foo* _tmp27_;
		gboolean* _tmp28_ = NULL;
		gboolean* _tmp30_ = NULL;
		gboolean* _tmp31_;
		_tmp25_ = foo_new (FALSE);
		foo = _tmp25_;
		_tmp27_ = foo;
		_tmp26_ = _tmp27_;
		_tmp28_ = NULL;
		if (_tmp26_ != NULL) {
			gboolean* _tmp29_;
			_tmp29_ = __bool_dup0 (&_tmp26_->bar);
			_g_free0 (_tmp28_);
			_tmp28_ = _tmp29_;
		}
		_tmp31_ = __bool_dup0 (_tmp28_);
		_tmp30_ = _tmp31_;
		if (_tmp30_ == NULL) {
			gboolean _tmp32_;
			gboolean* _tmp33_;
			_tmp32_ = TRUE;
			_tmp33_ = __bool_dup0 (&_tmp32_);
			_g_free0 (_tmp30_);
			_tmp30_ = _tmp33_;
		}
		if (*_tmp30_) {
			g_assert_not_reached ();
		} else {
		}
		_g_free0 (_tmp30_);
		_g_free0 (_tmp28_);
		_foo_unref0 (foo);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

