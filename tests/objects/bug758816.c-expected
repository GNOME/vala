/* objects_bug758816.c generated by valac, the Vala compiler
 * generated from objects_bug758816.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	BAR_FAIL,
	BAR_FOO,
	BAR_BAR,
	BAR_BAZ
} Bar;

#define TYPE_BAR (bar_get_type ())

#define TYPE_MANAM (manam_get_type ())
typedef struct _Manam Manam;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _manam_free0(var) ((var == NULL) ? NULL : (var = (manam_free (var), NULL)))
enum  {
	FOO_BAR_SIGNAL,
	FOO_BAR2_SIGNAL,
	FOO_MANAM_SIGNAL,
	FOO_MANAM2_SIGNAL,
	FOO_NUM_SIGNALS
};
static guint foo_signals[FOO_NUM_SIGNALS] = {0};
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Manam {
	gint i;
	gint j;
};

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Manam* manam_dup (const Manam* self);
VALA_EXTERN void manam_free (Manam* self);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN void foo_emit_bar (Foo* self);
static gboolean _bar_equal (const Bar * s1,
                     const Bar * s2);
VALA_EXTERN void foo_emit_bar2 (Foo* self);
VALA_EXTERN void foo_emit_manam (Foo* self);
static gboolean _manam_equal (const Manam * s1,
                       const Manam * s2);
VALA_EXTERN void foo_emit_manam2 (Foo* self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void g_cclosure_user_marshal_POINTER__VOID (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);
static void g_cclosure_user_marshal_POINTER__POINTER (GClosure * closure,
                                               GValue * return_value,
                                               guint n_param_values,
                                               const GValue * param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data);
static GType foo_get_type_once (void);
VALA_EXTERN Bar* callback_bar (void);
static Bar* _bar_dup (Bar* self);
VALA_EXTERN Bar* callback_bar2 (Bar* bar);
VALA_EXTERN Manam* callback_manam (void);
VALA_EXTERN Manam* callback_manam2 (Manam* manam);
static void _vala_main (void);
static Bar* _callback_bar_foo_bar (Foo* _sender,
                            gpointer self);
static Bar* _callback_bar2_foo_bar2 (Foo* _sender,
                              Bar* bar,
                              gpointer self);
static Manam* _callback_manam_foo_manam (Foo* _sender,
                                  gpointer self);
static Manam* _callback_manam2_foo_manam2 (Foo* _sender,
                                    Manam* manam,
                                    gpointer self);

static GType
bar_get_type_once (void)
{
	static const GEnumValue values[] = {{BAR_FAIL, "BAR_FAIL", "fail"}, {BAR_FOO, "BAR_FOO", "foo"}, {BAR_BAR, "BAR_BAR", "bar"}, {BAR_BAZ, "BAR_BAZ", "baz"}, {0, NULL, NULL}};
	GType bar_type_id;
	bar_type_id = g_enum_register_static ("Bar", values);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

Manam*
manam_dup (const Manam* self)
{
	Manam* dup;
	dup = g_new0 (Manam, 1);
	memcpy (dup, self, sizeof (Manam));
	return dup;
}

void
manam_free (Manam* self)
{
	g_free (self);
}

static GType
manam_get_type_once (void)
{
	GType manam_type_id;
	manam_type_id = g_boxed_type_register_static ("Manam", (GBoxedCopyFunc) manam_dup, (GBoxedFreeFunc) manam_free);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static gboolean
_bar_equal (const Bar * s1,
            const Bar * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

void
foo_emit_bar (Foo* self)
{
	Bar* _tmp0_ = NULL;
	Bar* _tmp1_;
	Bar _tmp2_;
	g_return_if_fail (IS_FOO (self));
	g_signal_emit (self, foo_signals[FOO_BAR_SIGNAL], 0, &_tmp0_);
	_tmp1_ = _tmp0_;
	_tmp2_ = BAR_FOO;
	_vala_assert (_bar_equal (_tmp1_, &_tmp2_) == TRUE, "bar () == Bar.FOO");
	_g_free0 (_tmp1_);
}

void
foo_emit_bar2 (Foo* self)
{
	Bar _tmp0_;
	Bar* _tmp1_ = NULL;
	Bar* _tmp2_;
	Bar _tmp3_;
	g_return_if_fail (IS_FOO (self));
	_tmp0_ = BAR_BAZ;
	g_signal_emit (self, foo_signals[FOO_BAR2_SIGNAL], 0, &_tmp0_, &_tmp1_);
	_tmp2_ = _tmp1_;
	_tmp3_ = BAR_BAZ;
	_vala_assert (_bar_equal (_tmp2_, &_tmp3_) == TRUE, "bar2 (Bar.BAZ) == Bar.BAZ");
	_g_free0 (_tmp2_);
}

static gpointer
_manam_dup0 (gpointer self)
{
	return self ? manam_dup (self) : NULL;
}

static gboolean
_manam_equal (const Manam * s1,
              const Manam * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (s1->i != s2->i) {
		return FALSE;
	}
	if (s1->j != s2->j) {
		return FALSE;
	}
	return TRUE;
}

void
foo_emit_manam (Foo* self)
{
	Manam* m = NULL;
	Manam _tmp0_ = {0};
	Manam* _tmp1_;
	Manam* _tmp2_ = NULL;
	Manam* _tmp3_;
	g_return_if_fail (IS_FOO (self));
	_tmp0_.i = 23;
	_tmp0_.j = 42;
	_tmp1_ = _manam_dup0 (&_tmp0_);
	m = _tmp1_;
	g_signal_emit (self, foo_signals[FOO_MANAM_SIGNAL], 0, &_tmp2_);
	_tmp3_ = _tmp2_;
	_vala_assert (_manam_equal (_tmp3_, m) == TRUE, "manam () == m");
	_manam_free0 (_tmp3_);
	_manam_free0 (m);
}

void
foo_emit_manam2 (Foo* self)
{
	Manam* m = NULL;
	Manam _tmp0_ = {0};
	Manam* _tmp1_;
	Manam _tmp2_ = {0};
	Manam* _tmp3_ = NULL;
	Manam* _tmp4_;
	g_return_if_fail (IS_FOO (self));
	_tmp0_.i = 23;
	_tmp0_.j = 42;
	_tmp1_ = _manam_dup0 (&_tmp0_);
	m = _tmp1_;
	_tmp2_.i = 23;
	_tmp2_.j = 42;
	g_signal_emit (self, foo_signals[FOO_MANAM2_SIGNAL], 0, &_tmp2_, &_tmp3_);
	_tmp4_ = _tmp3_;
	_vala_assert (_manam_equal (_tmp4_, m) == TRUE, "manam2 ({23, 42}) == m");
	_manam_free0 (_tmp4_);
	_manam_free0 (m);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
g_cclosure_user_marshal_POINTER__VOID (GClosure * closure,
                                       GValue * return_value,
                                       guint n_param_values,
                                       const GValue * param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data)
{
	typedef gpointer (*GMarshalFunc_POINTER__VOID) (gpointer data1, gpointer data2);
	register GMarshalFunc_POINTER__VOID callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	gpointer v_return;
	cc = (GCClosure *) closure;
	g_return_if_fail (return_value != NULL);
	g_return_if_fail (n_param_values == 1);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_POINTER__VOID) (marshal_data ? marshal_data : cc->callback);
	v_return = callback (data1, data2);
	g_value_set_pointer (return_value, v_return);
}

static void
g_cclosure_user_marshal_POINTER__POINTER (GClosure * closure,
                                          GValue * return_value,
                                          guint n_param_values,
                                          const GValue * param_values,
                                          gpointer invocation_hint,
                                          gpointer marshal_data)
{
	typedef gpointer (*GMarshalFunc_POINTER__POINTER) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_POINTER__POINTER callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	gpointer v_return;
	cc = (GCClosure *) closure;
	g_return_if_fail (return_value != NULL);
	g_return_if_fail (n_param_values == 2);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_POINTER__POINTER) (marshal_data ? marshal_data : cc->callback);
	v_return = callback (data1, g_value_get_pointer (param_values + 1), data2);
	g_value_set_pointer (return_value, v_return);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	foo_signals[FOO_BAR_SIGNAL] = g_signal_new ("bar", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_POINTER__VOID, G_TYPE_POINTER, 0);
	foo_signals[FOO_BAR2_SIGNAL] = g_signal_new ("bar2", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_POINTER__POINTER, G_TYPE_POINTER, 1, G_TYPE_POINTER);
	foo_signals[FOO_MANAM_SIGNAL] = g_signal_new ("manam", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_POINTER__VOID, G_TYPE_POINTER, 0);
	foo_signals[FOO_MANAM2_SIGNAL] = g_signal_new ("manam2", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_POINTER__POINTER, G_TYPE_POINTER, 1, G_TYPE_POINTER);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static Bar*
_bar_dup (Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	memcpy (dup, self, sizeof (Bar));
	return dup;
}

static gpointer
__bar_dup0 (gpointer self)
{
	return self ? _bar_dup (self) : NULL;
}

Bar*
callback_bar (void)
{
	Bar _tmp0_;
	Bar* _tmp1_;
	Bar* result;
	_tmp0_ = BAR_FOO;
	_tmp1_ = __bar_dup0 (&_tmp0_);
	result = _tmp1_;
	return result;
}

Bar*
callback_bar2 (Bar* bar)
{
	Bar _tmp0_;
	Bar* _tmp1_;
	Bar* result;
	_tmp0_ = BAR_BAZ;
	_vala_assert (_bar_equal (bar, &_tmp0_) == TRUE, "bar == Bar.BAZ");
	_tmp1_ = __bar_dup0 (bar);
	result = _tmp1_;
	return result;
}

Manam*
callback_manam (void)
{
	Manam _tmp0_ = {0};
	Manam* _tmp1_;
	Manam* result;
	_tmp0_.i = 23;
	_tmp0_.j = 42;
	_tmp1_ = _manam_dup0 (&_tmp0_);
	result = _tmp1_;
	return result;
}

Manam*
callback_manam2 (Manam* manam)
{
	Manam* m = NULL;
	Manam _tmp0_ = {0};
	Manam* _tmp1_;
	Manam* _tmp2_;
	Manam* result;
	_tmp0_.i = 23;
	_tmp0_.j = 42;
	_tmp1_ = _manam_dup0 (&_tmp0_);
	m = _tmp1_;
	_vala_assert (_manam_equal (manam, m) == TRUE, "manam == m");
	_tmp2_ = _manam_dup0 (manam);
	result = _tmp2_;
	_manam_free0 (m);
	return result;
}

static Bar*
_callback_bar_foo_bar (Foo* _sender,
                       gpointer self)
{
	Bar* result;
	result = callback_bar ();
	return result;
}

static Bar*
_callback_bar2_foo_bar2 (Foo* _sender,
                         Bar* bar,
                         gpointer self)
{
	Bar* result;
	result = callback_bar2 (bar);
	return result;
}

static Manam*
_callback_manam_foo_manam (Foo* _sender,
                           gpointer self)
{
	Manam* result;
	result = callback_manam ();
	return result;
}

static Manam*
_callback_manam2_foo_manam2 (Foo* _sender,
                             Manam* manam,
                             gpointer self)
{
	Manam* result;
	result = callback_manam2 (manam);
	return result;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	g_signal_connect (foo, "bar", (GCallback) _callback_bar_foo_bar, NULL);
	foo_emit_bar (foo);
	g_signal_connect (foo, "bar2", (GCallback) _callback_bar2_foo_bar2, NULL);
	foo_emit_bar2 (foo);
	g_signal_connect (foo, "manam", (GCallback) _callback_manam_foo_manam, NULL);
	foo_emit_manam (foo);
	g_signal_connect (foo, "manam2", (GCallback) _callback_manam2_foo_manam2, NULL);
	foo_emit_manam2 (foo);
	_g_object_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

