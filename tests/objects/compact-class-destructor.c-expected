/* objects_compact_class_destructor.c generated by valac, the Vala compiler
 * generated from objects_compact_class_destructor.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
typedef struct _ParamSpecBar ParamSpecBar;
#define _bar_unref0(var) ((var == NULL) ? NULL : (var = (bar_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	int dummy;
};

struct _Bar {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BarPrivate * priv;
};

struct _BarClass {
	GTypeClass parent_class;
	void (*finalize) (Bar *self);
};

struct _BarPrivate {
	Foo* faz;
};

struct _ParamSpecBar {
	GParamSpec parent_instance;
};

static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;
VALA_EXTERN Foo* faz;
Foo* faz = NULL;

VALA_EXTERN void foo_free (Foo * self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_free)
static void foo_instance_init (Foo * self);
VALA_EXTERN gint foo_destroy (Foo* self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN void bar (GError** error);
VALA_EXTERN Foo* get_foo (void);
VALA_EXTERN gpointer bar_ref (gpointer instance);
VALA_EXTERN void bar_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_bar (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_bar (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_bar (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_bar (const GValue* value);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, bar_unref)
VALA_EXTERN void bar_instance_simple (Bar* self);
VALA_EXTERN void bar_instance_field (Bar* self);
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static void bar_finalize (Bar * obj);
static GType bar_get_type_once (void);
VALA_EXTERN void field (void);
VALA_EXTERN void local (void);
VALA_EXTERN void parameter (Foo* foo);
VALA_EXTERN void simple (void);
VALA_EXTERN void returned (void);
static void _vala_main (void);

gint
foo_destroy (Foo* self)
{
	gint result;
	g_return_val_if_fail (self != NULL, 0);
	g_slice_free1 ((gsize) sizeof (gint), self);
	result = 42;
	return result;
}

Foo*
foo_new (void)
{
	Foo* self;
	self = g_slice_new0 (Foo);
	foo_instance_init (self);
	return self;
}

static void
foo_instance_init (Foo * self)
{
}

void
foo_free (Foo * self)
{
	g_slice_free (Foo, self);
}

void
bar (GError** error)
{
}

Foo*
get_foo (void)
{
	Foo* _tmp0_;
	Foo* result;
	_tmp0_ = foo_new ();
	result = _tmp0_;
	return result;
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

void
bar_instance_simple (Bar* self)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	gint res = 0;
	Foo* _tmp1_;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_tmp1_ = foo;
	foo = NULL;
	res = foo_destroy (_tmp1_);
	_vala_assert (foo == NULL, "foo == null");
	_vala_assert (res == 42, "res == 42");
	_foo_free0 (foo);
}

void
bar_instance_field (Bar* self)
{
	Foo* _tmp0_;
	gint res = 0;
	Foo* _tmp1_;
	Foo* _tmp2_;
	GError* _inner_error0_ = NULL;
	g_return_if_fail (IS_BAR (self));
	bar (&_inner_error0_);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp0_ = foo_new ();
	_foo_free0 (self->priv->faz);
	self->priv->faz = _tmp0_;
	_tmp1_ = self->priv->faz;
	self->priv->faz = NULL;
	res = foo_destroy (_tmp1_);
	_tmp2_ = self->priv->faz;
	_vala_assert (_tmp2_ == NULL, "faz == null");
	_vala_assert (res == 42, "res == 42");
}

Bar*
bar_construct (GType object_type)
{
	Bar* self = NULL;
	self = (Bar*) g_type_create_instance (object_type);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
value_bar_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_bar_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		bar_unref (value->data[0].v_pointer);
	}
}

static void
value_bar_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = bar_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_bar_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_bar_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Bar * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = bar_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_bar_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Bar ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = bar_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_bar (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecBar* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_BAR), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_bar (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR), NULL);
	return value->data[0].v_pointer;
}

void
value_set_bar (GValue* value,
               gpointer v_object)
{
	Bar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		bar_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bar_unref (old);
	}
}

void
value_take_bar (GValue* value,
                gpointer v_object)
{
	Bar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bar_unref (old);
	}
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	((BarClass *) klass)->finalize = bar_finalize;
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
	self->ref_count = 1;
}

static void
bar_finalize (Bar * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	g_signal_handlers_destroy (self);
	_foo_free0 (self->priv->faz);
}

static GType
bar_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_bar_init, value_bar_free_value, value_bar_copy_value, value_bar_peek_pointer, "p", value_bar_collect_value, "p", value_bar_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType bar_type_id;
	bar_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Bar", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

gpointer
bar_ref (gpointer instance)
{
	Bar * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
bar_unref (gpointer instance)
{
	Bar * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		BAR_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

void
field (void)
{
	Foo* _tmp0_;
	gint res = 0;
	Foo* _tmp1_;
	Foo* _tmp2_;
	GError* _inner_error0_ = NULL;
	bar (&_inner_error0_);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp0_ = foo_new ();
	_foo_free0 (faz);
	faz = _tmp0_;
	_tmp1_ = faz;
	faz = NULL;
	res = foo_destroy (_tmp1_);
	_tmp2_ = faz;
	_vala_assert (_tmp2_ == NULL, "faz == null");
	_vala_assert (res == 42, "res == 42");
}

void
local (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	gint res = 0;
	Foo* _tmp1_;
	Foo* _tmp2_;
	GError* _inner_error0_ = NULL;
	bar (&_inner_error0_);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_tmp1_ = foo;
	foo = NULL;
	res = foo_destroy (_tmp1_);
	_tmp2_ = foo;
	_vala_assert (_tmp2_ == NULL, "foo == null");
	_vala_assert (res == 42, "res == 42");
	_foo_free0 (foo);
}

void
parameter (Foo* foo)
{
	gint res = 0;
	Foo* _tmp0_;
	GError* _inner_error0_ = NULL;
	g_return_if_fail (foo != NULL);
	bar (&_inner_error0_);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_foo_free0 (foo);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp0_ = foo;
	foo = NULL;
	res = foo_destroy (_tmp0_);
	_vala_assert (foo == NULL, "foo == null");
	_vala_assert (res == 42, "res == 42");
	_foo_free0 (foo);
}

void
simple (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	gint res = 0;
	Foo* _tmp1_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_tmp1_ = foo;
	foo = NULL;
	res = foo_destroy (_tmp1_);
	_vala_assert (foo == NULL, "foo == null");
	_vala_assert (res == 42, "res == 42");
	_foo_free0 (foo);
}

void
returned (void)
{
	gint res = 0;
	Foo* _tmp0_;
	GError* _inner_error0_ = NULL;
	bar (&_inner_error0_);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp0_ = get_foo ();
	res = foo_destroy (_tmp0_);
	_vala_assert (res == 42, "res == 42");
}

static void
_vala_main (void)
{
	Foo* _tmp0_;
	Bar* bar = NULL;
	Bar* _tmp1_;
	simple ();
	field ();
	local ();
	_tmp0_ = foo_new ();
	parameter (_tmp0_);
	returned ();
	_tmp1_ = bar_new ();
	bar = _tmp1_;
	bar_instance_simple (bar);
	bar_instance_field (bar);
	_bar_unref0 (bar);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

