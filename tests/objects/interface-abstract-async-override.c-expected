/* objects_interface_abstract_async_override.c generated by valac, the Vala compiler
 * generated from objects_interface_abstract_async_override.vala, do not modify */

#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_IFOO (ifoo_get_type ())
#define IFOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IFOO, IFoo))
#define IS_IFOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IFOO))
#define IFOO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IFOO, IFooIface))

typedef struct _IFoo IFoo;
typedef struct _IFooIface IFooIface;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _BarFooData BarFooData;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _IFooIface {
	GTypeInterface parent_iface;
	void (*foo) (IFoo* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*foo_finish) (IFoo* self, GAsyncResult* _res_);
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
};

struct _BarFooData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	Bar* self;
	gint result;
};

static gpointer bar_parent_class = NULL;
static IFooIface * bar_ifoo_parent_iface = NULL;
VALA_EXTERN GMainLoop* loop;
GMainLoop* loop = NULL;

VALA_EXTERN GType ifoo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (IFoo, g_object_unref)
VALA_EXTERN void ifoo_foo (IFoo* self,
               GAsyncReadyCallback _callback_,
               gpointer _user_data_);
VALA_EXTERN gint ifoo_foo_finish (IFoo* self,
                      GAsyncResult* _res_);
static GType ifoo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
static void bar_real_foo_data_free (gpointer _data);
static void bar_real_foo (IFoo* base,
                   GAsyncReadyCallback _callback_,
                   gpointer _user_data_);
static gboolean bar_real_foo_co (BarFooData* _data_);
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static GType bar_get_type_once (void);
static void _vala_main (void);
static void _vala_lambda0_ (GObject* o,
                     GAsyncResult* r);
static void __vala_lambda0__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);

void
ifoo_foo (IFoo* self,
          GAsyncReadyCallback _callback_,
          gpointer _user_data_)
{
	IFooIface* _iface_;
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->foo) {
		_iface_->foo (self, _callback_, _user_data_);
	}
}

gint
ifoo_foo_finish (IFoo* self,
                 GAsyncResult* _res_)
{
	IFooIface* _iface_;
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->foo_finish) {
		return _iface_->foo_finish (self, _res_);
	}
	return -1;
}

static void
ifoo_default_init (IFooIface * iface,
                   gpointer iface_data)
{
}

static GType
ifoo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (IFooIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) ifoo_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType ifoo_type_id;
	ifoo_type_id = g_type_register_static (G_TYPE_INTERFACE, "IFoo", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (ifoo_type_id, G_TYPE_OBJECT);
	return ifoo_type_id;
}

GType
ifoo_get_type (void)
{
	static volatile gsize ifoo_type_id__once = 0;
	if (g_once_init_enter (&ifoo_type_id__once)) {
		GType ifoo_type_id;
		ifoo_type_id = ifoo_get_type_once ();
		g_once_init_leave (&ifoo_type_id__once, ifoo_type_id);
	}
	return ifoo_type_id__once;
}

static void
bar_real_foo_data_free (gpointer _data)
{
	BarFooData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (BarFooData, _data_);
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

static void
bar_real_foo (IFoo* base,
              GAsyncReadyCallback _callback_,
              gpointer _user_data_)
{
	Bar * self;
	BarFooData* _data_;
	Bar* _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_data_ = g_slice_new0 (BarFooData);
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, bar_real_foo_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	bar_real_foo_co (_data_);
}

static gint
bar_foo_finish (IFoo* base,
                GAsyncResult* _res_)
{
	gint result;
	BarFooData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
	result = _data_->result;
	return result;
}

static gboolean
bar_real_foo_co (BarFooData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->result = 42;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
}

static void
bar_ifoo_interface_init (IFooIface * iface,
                         gpointer iface_data)
{
	bar_ifoo_parent_iface = g_type_interface_peek_parent (iface);
	iface->foo = (void (*) (IFoo*, GAsyncReadyCallback, gpointer)) bar_real_foo;
	iface->foo_finish = (gint (*) (IFoo*, GAsyncResult*)) bar_foo_finish;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	static const GInterfaceInfo ifoo_info = { (GInterfaceInitFunc) bar_ifoo_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	g_type_add_interface_static (bar_type_id, TYPE_IFOO, &ifoo_info);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_lambda0_ (GObject* o,
                GAsyncResult* r)
{
	GMainLoop* _tmp0_;
	g_return_if_fail ((o == NULL) || G_TYPE_CHECK_INSTANCE_TYPE (o, G_TYPE_OBJECT));
	g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (r, g_async_result_get_type ()));
	_vala_assert (ifoo_foo_finish (G_TYPE_CHECK_INSTANCE_CAST (o, TYPE_IFOO, IFoo), r) == 42, "((IFoo) o).foo.end (r) == 42");
	_tmp0_ = loop;
	g_main_loop_quit (_tmp0_);
}

static void
__vala_lambda0__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
	_vala_lambda0_ (source_object, res);
}

static void
_vala_main (void)
{
	GMainLoop* _tmp0_;
	IFoo* bar = NULL;
	Bar* _tmp1_;
	GMainLoop* _tmp2_;
	_tmp0_ = g_main_loop_new (NULL, FALSE);
	_g_main_loop_unref0 (loop);
	loop = _tmp0_;
	_tmp1_ = bar_new ();
	bar = G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, TYPE_IFOO, IFoo);
	ifoo_foo (bar, __vala_lambda0__gasync_ready_callback, NULL);
	_tmp2_ = loop;
	g_main_loop_run (_tmp2_);
	_g_object_unref0 (bar);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

