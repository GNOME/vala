/* objects_property_notify_owned_getter.c generated by valac, the Vala compiler
 * generated from objects_property_notify_owned_getter.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];

#define TYPE_MANAM (manam_get_type ())
typedef struct _Manam Manam;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_O_PROPERTY,
	FOO_ST_PROPERTY,
	FOO_STN_PROPERTY,
	FOO_S_PROPERTY,
	FOO_STRV_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _manam_free0(var) ((var == NULL) ? NULL : (var = (manam_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
};

struct _Manam {
	gchar* s;
};

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooPrivate {
	Bar* _o;
	Manam _st;
	Manam* _stn;
	gchar* _s;
	gchar** _strv;
	gint _strv_length1;
	gint __strv_size_;
};

static gpointer bar_parent_class = NULL;
static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
VALA_EXTERN Bar* bar;
Bar* bar = NULL;

VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static GType bar_get_type_once (void);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Manam* manam_dup (const Manam* self);
VALA_EXTERN void manam_free (Manam* self);
VALA_EXTERN void manam_copy (const Manam* self,
                 Manam* dest);
VALA_EXTERN void manam_destroy (Manam* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Manam, manam_destroy)
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN Bar* foo_get_o (Foo* self);
VALA_EXTERN void foo_set_o (Foo* self,
                Bar* value);
VALA_EXTERN void foo_get_st (Foo* self,
                 Manam * result);
VALA_EXTERN void foo_set_st (Foo* self,
                 Manam * value);
static gboolean _manam_equal (const Manam * s1,
                       const Manam * s2);
VALA_EXTERN Manam* foo_get_stn (Foo* self);
VALA_EXTERN void foo_set_stn (Foo* self,
                  Manam* value);
VALA_EXTERN gchar* foo_get_s (Foo* self);
VALA_EXTERN void foo_set_s (Foo* self,
                const gchar* value);
VALA_EXTERN gchar** foo_get_strv (Foo* self,
                      gint* result_length1);
static gchar** _vala_array_dup1 (gchar** self,
                          gssize length);
VALA_EXTERN void foo_set_strv (Foo* self,
                   gchar** value,
                   gint value_length1);
static gchar** _vala_array_dup2 (gchar** self,
                          gssize length);
static GObject * foo_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

void
manam_copy (const Manam* self,
            Manam* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
}

void
manam_destroy (Manam* self)
{
	_g_free0 ((*self).s);
}

Manam*
manam_dup (const Manam* self)
{
	Manam* dup;
	dup = g_new0 (Manam, 1);
	manam_copy (self, dup);
	return dup;
}

void
manam_free (Manam* self)
{
	manam_destroy (self);
	g_free (self);
}

static GType
manam_get_type_once (void)
{
	GType manam_type_id;
	manam_type_id = g_boxed_type_register_static ("Manam", (GBoxedCopyFunc) manam_dup, (GBoxedFreeFunc) manam_free);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

Bar*
foo_get_o (Foo* self)
{
	Bar* result;
	Bar* _tmp0_;
	Bar* _tmp1_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_o;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	result = _tmp1_;
	return result;
}

void
foo_set_o (Foo* self,
           Bar* value)
{
	Bar* old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_o (self);
	if (old_value != value) {
		Bar* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_o);
		self->priv->_o = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_O_PROPERTY]);
	}
	_g_object_unref0 (old_value);
}

void
foo_get_st (Foo* self,
            Manam * result)
{
	Manam _tmp0_;
	Manam _tmp1_;
	Manam _tmp2_ = {0};
	g_return_if_fail (IS_FOO (self));
	_tmp0_ = self->priv->_st;
	_tmp1_ = _tmp0_;
	manam_copy (&_tmp1_, &_tmp2_);
	*result = _tmp2_;
	return;
}

static gboolean
_manam_equal (const Manam * s1,
              const Manam * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (g_strcmp0 (s1->s, s2->s)) {
		return FALSE;
	}
	return TRUE;
}

void
foo_set_st (Foo* self,
            Manam * value)
{
	Manam old_value;
	g_return_if_fail (IS_FOO (self));
	foo_get_st (self, &old_value);
	if (_manam_equal (value, &old_value) != TRUE) {
		Manam _tmp0_;
		Manam _tmp1_;
		Manam _tmp2_ = {0};
		_tmp0_ = *value;
		_tmp1_ = _tmp0_;
		manam_copy (&_tmp1_, &_tmp2_);
		manam_destroy (&self->priv->_st);
		self->priv->_st = _tmp2_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_ST_PROPERTY]);
	}
	manam_destroy (&old_value);
}

static gpointer
_manam_dup0 (gpointer self)
{
	return self ? manam_dup (self) : NULL;
}

Manam*
foo_get_stn (Foo* self)
{
	Manam* result;
	Manam* _tmp0_;
	Manam* _tmp1_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_stn;
	_tmp1_ = _manam_dup0 (_tmp0_);
	result = _tmp1_;
	return result;
}

void
foo_set_stn (Foo* self,
             Manam* value)
{
	Manam* old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_stn (self);
	if (_manam_equal (value, old_value) != TRUE) {
		Manam* _tmp0_;
		_tmp0_ = _manam_dup0 (value);
		_manam_free0 (self->priv->_stn);
		self->priv->_stn = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_STN_PROPERTY]);
	}
	_manam_free0 (old_value);
}

gchar*
foo_get_s (Foo* self)
{
	gchar* result;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_s;
	_tmp1_ = g_strdup (_tmp0_);
	result = _tmp1_;
	return result;
}

void
foo_set_s (Foo* self,
           const gchar* value)
{
	gchar* old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_s (self);
	if (g_strcmp0 (value, old_value) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_s);
		self->priv->_s = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_S_PROPERTY]);
	}
	_g_free0 (old_value);
}

static gchar**
_vala_array_dup1 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

gchar**
foo_get_strv (Foo* self,
              gint* result_length1)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	gchar** _tmp2_;
	gint _tmp2__length1;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_strv;
	_tmp0__length1 = self->priv->_strv_length1;
	_tmp1_ = (_tmp0_ != NULL) ? _vala_array_dup1 (_tmp0_, _tmp0__length1) : _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	_tmp2_ = _tmp1_;
	_tmp2__length1 = _tmp1__length1;
	if (result_length1) {
		*result_length1 = _tmp2__length1;
	}
	result = _tmp2_;
	return result;
}

static gchar**
_vala_array_dup2 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
foo_set_strv (Foo* self,
              gchar** value,
              gint value_length1)
{
	gchar** old_value;
	gint old_value_length;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_strv (self, &old_value_length);
	if (old_value != value) {
		gchar** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup2 (value, value_length1) : value;
		_tmp0__length1 = value_length1;
		self->priv->_strv = (_vala_array_free (self->priv->_strv, self->priv->_strv_length1, (GDestroyNotify) g_free), NULL);
		self->priv->_strv = _tmp0_;
		self->priv->_strv_length1 = _tmp0__length1;
		self->priv->__strv_size_ = self->priv->_strv_length1;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_STRV_PROPERTY]);
	}
	old_value = (_vala_array_free (old_value, old_value_length, (GDestroyNotify) g_free), NULL);
}

static GObject *
foo_constructor (GType type,
                 guint n_construct_properties,
                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	Foo * self;
	Bar* _tmp0_;
	Manam _tmp1_ = {0};
	Manam _tmp2_ = {0};
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar** _tmp5_;
	gchar** _tmp6_;
	gint _tmp6__length1;
	parent_class = G_OBJECT_CLASS (foo_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	_tmp0_ = bar;
	foo_set_o (self, _tmp0_);
	_g_free0 (_tmp1_.s);
	_tmp1_.s = "foo";
	foo_set_st (self, &_tmp1_);
	_g_free0 (_tmp2_.s);
	_tmp2_.s = "bar";
	foo_set_stn (self, &_tmp2_);
	foo_set_s (self, "foo");
	_tmp3_ = g_strdup ("foo");
	_tmp4_ = g_strdup ("bar");
	_tmp5_ = g_new0 (gchar*, 2 + 1);
	_tmp5_[0] = _tmp3_;
	_tmp5_[1] = _tmp4_;
	_tmp6_ = _tmp5_;
	_tmp6__length1 = 2;
	foo_set_strv (self, _tmp6_, 2);
	_tmp6_ = (_vala_array_free (_tmp6_, _tmp6__length1, (GDestroyNotify) g_free), NULL);
	return obj;
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	G_OBJECT_CLASS (klass)->constructor = foo_constructor;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_O_PROPERTY, foo_properties[FOO_O_PROPERTY] = g_param_spec_object ("o", "o", "o", TYPE_BAR, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_ST_PROPERTY, foo_properties[FOO_ST_PROPERTY] = g_param_spec_boxed ("st", "st", "st", TYPE_MANAM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_STN_PROPERTY, foo_properties[FOO_STN_PROPERTY] = g_param_spec_boxed ("stn", "stn", "stn", TYPE_MANAM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_S_PROPERTY, foo_properties[FOO_S_PROPERTY] = g_param_spec_string ("s", "s", "s", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_STRV_PROPERTY, foo_properties[FOO_STRV_PROPERTY] = g_param_spec_boxed ("strv", "strv", "strv", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	_g_object_unref0 (self->priv->_o);
	manam_destroy (&self->priv->_st);
	_manam_free0 (self->priv->_stn);
	_g_free0 (self->priv->_s);
	self->priv->_strv = (_vala_array_free (self->priv->_strv, self->priv->_strv_length1, (GDestroyNotify) g_free), NULL);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_O_PROPERTY:
		g_value_take_object (value, foo_get_o (self));
		break;
		case FOO_ST_PROPERTY:
		{
			Manam boxed;
			foo_get_st (self, &boxed);
			g_value_set_boxed (value, &boxed);
			manam_destroy (&boxed);
		}
		break;
		case FOO_STN_PROPERTY:
		{
			Manam* boxed;
			boxed = foo_get_stn (self);
			g_value_set_boxed (value, boxed);
			_manam_free0 (boxed);
		}
		break;
		case FOO_S_PROPERTY:
		g_value_take_string (value, foo_get_s (self));
		break;
		case FOO_STRV_PROPERTY:
		{
			int length;
			g_value_take_boxed (value, foo_get_strv (self, &length));
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_O_PROPERTY:
		foo_set_o (self, g_value_get_object (value));
		break;
		case FOO_ST_PROPERTY:
		foo_set_st (self, g_value_get_boxed (value));
		break;
		case FOO_STN_PROPERTY:
		foo_set_stn (self, g_value_get_boxed (value));
		break;
		case FOO_S_PROPERTY:
		foo_set_s (self, g_value_get_string (value));
		break;
		case FOO_STRV_PROPERTY:
		{
			gpointer boxed;
			boxed = g_value_get_boxed (value);
			foo_set_strv (self, boxed, (boxed == NULL) ? 0 : g_strv_length (boxed));
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	Bar* _tmp0_;
	Bar* _tmp1_;
	Foo* foo = NULL;
	Foo* _tmp2_;
	Bar* _tmp3_;
	Bar* _tmp4_;
	Bar* _tmp5_;
	Manam _tmp6_ = {0};
	Manam _tmp7_;
	Manam _tmp8_;
	const gchar* _tmp9_;
	Manam _tmp10_ = {0};
	Manam _tmp11_ = {0};
	Manam _tmp12_;
	Manam _tmp13_;
	const gchar* _tmp14_;
	Manam* _tmp15_;
	Manam* _tmp16_;
	Manam* _tmp17_;
	const gchar* _tmp18_;
	Manam _tmp19_ = {0};
	Manam* _tmp20_;
	Manam* _tmp21_;
	Manam* _tmp22_;
	const gchar* _tmp23_;
	gchar* _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_;
	gchar* _tmp27_;
	gchar* _tmp28_;
	gchar* _tmp29_;
	gchar** _tmp30_;
	gint _tmp30__length1;
	gint _tmp31_ = 0;
	gchar** _tmp32_;
	gint _tmp32__length1;
	gchar** _tmp33_;
	gint _tmp33__length1;
	const gchar* _tmp34_;
	gchar* _tmp35_;
	gchar* _tmp36_;
	gchar** _tmp37_;
	gchar** _tmp38_;
	gint _tmp38__length1;
	gchar** _tmp39_;
	gint _tmp39__length1;
	gint _tmp40_ = 0;
	gchar** _tmp41_;
	gint _tmp41__length1;
	gchar** _tmp42_;
	gint _tmp42__length1;
	const gchar* _tmp43_;
	_tmp0_ = bar_new ();
	_g_object_unref0 (bar);
	bar = _tmp0_;
	_tmp1_ = bar;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "bar.ref_count == 1");
	_tmp2_ = foo_new ();
	foo = _tmp2_;
	_tmp3_ = bar;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "bar.ref_count == 2");
	_tmp4_ = bar;
	foo_set_o (foo, _tmp4_);
	_tmp5_ = bar;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp5_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "bar.ref_count == 2");
	foo_get_st (foo, &_tmp6_);
	_tmp7_ = _tmp6_;
	_tmp8_ = _tmp7_;
	_tmp9_ = _tmp8_.s;
	_vala_assert (g_strcmp0 (_tmp9_, "foo") == 0, "foo.st.s == \"foo\"");
	manam_destroy (&_tmp8_);
	_g_free0 (_tmp10_.s);
	_tmp10_.s = "manam";
	foo_set_st (foo, &_tmp10_);
	foo_get_st (foo, &_tmp11_);
	_tmp12_ = _tmp11_;
	_tmp13_ = _tmp12_;
	_tmp14_ = _tmp13_.s;
	_vala_assert (g_strcmp0 (_tmp14_, "manam") == 0, "foo.st.s == \"manam\"");
	manam_destroy (&_tmp13_);
	_tmp15_ = foo_get_stn (foo);
	_tmp16_ = _tmp15_;
	_tmp17_ = _tmp16_;
	_tmp18_ = (*_tmp17_).s;
	_vala_assert (g_strcmp0 (_tmp18_, "bar") == 0, "foo.stn.s == \"bar\"");
	_manam_free0 (_tmp17_);
	_g_free0 (_tmp19_.s);
	_tmp19_.s = "minim";
	foo_set_stn (foo, &_tmp19_);
	_tmp20_ = foo_get_stn (foo);
	_tmp21_ = _tmp20_;
	_tmp22_ = _tmp21_;
	_tmp23_ = (*_tmp22_).s;
	_vala_assert (g_strcmp0 (_tmp23_, "minim") == 0, "foo.stn.s == \"minim\"");
	_manam_free0 (_tmp22_);
	_tmp24_ = foo_get_s (foo);
	_tmp25_ = _tmp24_;
	_tmp26_ = _tmp25_;
	_vala_assert (g_strcmp0 (_tmp26_, "foo") == 0, "foo.s == \"foo\"");
	_g_free0 (_tmp26_);
	foo_set_s (foo, "manam");
	_tmp27_ = foo_get_s (foo);
	_tmp28_ = _tmp27_;
	_tmp29_ = _tmp28_;
	_vala_assert (g_strcmp0 (_tmp29_, "manam") == 0, "foo.s == \"manam\"");
	_g_free0 (_tmp29_);
	_tmp30_ = foo_get_strv (foo, &_tmp31_);
	_tmp30__length1 = _tmp31_;
	_tmp32_ = _tmp30_;
	_tmp32__length1 = _tmp30__length1;
	_tmp33_ = _tmp32_;
	_tmp33__length1 = _tmp32__length1;
	_tmp34_ = _tmp33_[1];
	_vala_assert (g_strcmp0 (_tmp34_, "bar") == 0, "foo.strv[1] == \"bar\"");
	_tmp33_ = (_vala_array_free (_tmp33_, _tmp33__length1, (GDestroyNotify) g_free), NULL);
	_tmp35_ = g_strdup ("manam");
	_tmp36_ = g_strdup ("minim");
	_tmp37_ = g_new0 (gchar*, 2 + 1);
	_tmp37_[0] = _tmp35_;
	_tmp37_[1] = _tmp36_;
	_tmp38_ = _tmp37_;
	_tmp38__length1 = 2;
	foo_set_strv (foo, _tmp38_, 2);
	_tmp38_ = (_vala_array_free (_tmp38_, _tmp38__length1, (GDestroyNotify) g_free), NULL);
	_tmp39_ = foo_get_strv (foo, &_tmp40_);
	_tmp39__length1 = _tmp40_;
	_tmp41_ = _tmp39_;
	_tmp41__length1 = _tmp39__length1;
	_tmp42_ = _tmp41_;
	_tmp42__length1 = _tmp41__length1;
	_tmp43_ = _tmp42_[1];
	_vala_assert (g_strcmp0 (_tmp43_, "minim") == 0, "foo.strv[1] == \"minim\"");
	_tmp42_ = (_vala_array_free (_tmp42_, _tmp42__length1, (GDestroyNotify) g_free), NULL);
	_g_object_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

