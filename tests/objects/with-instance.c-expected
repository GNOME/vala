/* objects_with_instance.c generated by valac, the Vala compiler
 * generated from objects_with_instance.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ParamSpecFoo ParamSpecFoo;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;

#define TYPE_TEST_FOO (test_foo_get_type ())
#define TEST_FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST_FOO, TestFoo))
#define TEST_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEST_FOO, TestFooClass))
#define IS_TEST_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST_FOO))
#define IS_TEST_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEST_FOO))
#define TEST_FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEST_FOO, TestFooClass))

typedef struct _TestFoo TestFoo;
typedef struct _TestFooClass TestFooClass;
typedef struct _TestFooPrivate TestFooPrivate;
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
typedef struct _ParamSpecTestFoo ParamSpecTestFoo;

#define TYPE_TEST_BAR (test_bar_get_type ())
#define TEST_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST_BAR, TestBar))
#define TEST_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEST_BAR, TestBarClass))
#define IS_TEST_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST_BAR))
#define IS_TEST_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEST_BAR))
#define TEST_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEST_BAR, TestBarClass))

typedef struct _TestBar TestBar;
typedef struct _TestBarClass TestBarClass;
typedef struct _TestBarPrivate TestBarPrivate;
typedef struct _ParamSpecTestBar ParamSpecTestBar;
#define _test_foo_unref0(var) ((var == NULL) ? NULL : (var = (test_foo_unref (var), NULL)))
#define _test_bar_unref0(var) ((var == NULL) ? NULL : (var = (test_bar_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
	gint field;
	gboolean method_called;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
};

struct _FooPrivate {
	gchar* _prop;
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

struct _Bar {
	Foo parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	FooClass parent_class;
};

struct _TestFoo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TestFooPrivate * priv;
	gint instance_field;
};

struct _TestFooClass {
	GTypeClass parent_class;
	void (*finalize) (TestFoo *self);
};

struct _ParamSpecTestFoo {
	GParamSpec parent_instance;
};

struct _TestBar {
	GTypeInstance parent_instance;
	volatile int ref_count;
	TestBarPrivate * priv;
	gint instance_field;
};

struct _TestBarClass {
	GTypeClass parent_class;
	void (*finalize) (TestBar *self);
};

struct _ParamSpecTestBar {
	GParamSpec parent_instance;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
static gpointer bar_parent_class = NULL;
static gpointer test_foo_parent_class = NULL;
VALA_EXTERN gint test_foo_class_field;
gint test_foo_class_field = 0;
static gpointer test_bar_parent_class = NULL;
VALA_EXTERN gint test_bar_class_field;
gint test_bar_class_field = 0;

VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN void foo_method (Foo* self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN const gchar* foo_get_prop (Foo* self);
VALA_EXTERN void foo_set_prop (Foo* self,
                   const gchar* value);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, foo_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static GType bar_get_type_once (void);
VALA_EXTERN gpointer test_foo_ref (gpointer instance);
VALA_EXTERN void test_foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_test_foo (const gchar* name,
                                 const gchar* nick,
                                 const gchar* blurb,
                                 GType object_type,
                                 GParamFlags flags);
VALA_EXTERN void value_set_test_foo (GValue* value,
                         gpointer v_object);
VALA_EXTERN void value_take_test_foo (GValue* value,
                          gpointer v_object);
VALA_EXTERN gpointer value_get_test_foo (const GValue* value);
VALA_EXTERN GType test_foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TestFoo, test_foo_unref)
VALA_EXTERN void test_foo_test (TestFoo* self);
VALA_EXTERN TestFoo* test_foo_new (void);
VALA_EXTERN TestFoo* test_foo_construct (GType object_type);
static void test_foo_finalize (TestFoo * obj);
static GType test_foo_get_type_once (void);
VALA_EXTERN gpointer test_bar_ref (gpointer instance);
VALA_EXTERN void test_bar_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_test_bar (const gchar* name,
                                 const gchar* nick,
                                 const gchar* blurb,
                                 GType object_type,
                                 GParamFlags flags);
VALA_EXTERN void value_set_test_bar (GValue* value,
                         gpointer v_object);
VALA_EXTERN void value_take_test_bar (GValue* value,
                          gpointer v_object);
VALA_EXTERN gpointer value_get_test_bar (const GValue* value);
VALA_EXTERN GType test_bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TestBar, test_bar_unref)
VALA_EXTERN void test_bar_test (TestBar* self);
VALA_EXTERN TestBar* test_bar_new (void);
VALA_EXTERN TestBar* test_bar_construct (GType object_type);
static void test_bar_finalize (TestBar * obj);
static GType test_bar_get_type_once (void);
static void _vala_main (void);

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

void
foo_method (Foo* self)
{
	g_return_if_fail (IS_FOO (self));
	self->method_called = TRUE;
}

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

const gchar*
foo_get_prop (Foo* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_prop;
	result = _tmp0_;
	return result;
}

void
foo_set_prop (Foo* self,
              const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (IS_FOO (self));
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_prop);
	self->priv->_prop = _tmp0_;
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
	self->method_called = FALSE;
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
	_g_free0 (self->priv->_prop);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

Bar*
bar_construct (GType object_type)
{
	Bar* self = NULL;
	self = (Bar*) foo_construct (object_type);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (TYPE_FOO, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

void
test_foo_test (TestFoo* self)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	gint local_field = 0;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_if_fail (IS_TEST_FOO (self));
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	local_field = 0;
	{
		foo->field = 10;
		foo_set_prop (foo, "prop");
		foo_method (foo);
		local_field = 20;
		test_foo_class_field = 30;
		self->instance_field = 40;
	}
	_vala_assert (foo->field == 10, "foo.field == 10");
	_tmp1_ = foo_get_prop (foo);
	_tmp2_ = _tmp1_;
	_vala_assert (g_strcmp0 (_tmp2_, "prop") == 0, "foo.prop == \"prop\"");
	_vala_assert (foo->method_called, "foo.method_called");
	_vala_assert (local_field == 20, "local_field == 20");
	_vala_assert (test_foo_class_field == 30, "class_field == 30");
	_vala_assert (self->instance_field == 40, "instance_field == 40");
	_foo_unref0 (foo);
}

TestFoo*
test_foo_construct (GType object_type)
{
	TestFoo* self = NULL;
	self = (TestFoo*) g_type_create_instance (object_type);
	return self;
}

TestFoo*
test_foo_new (void)
{
	return test_foo_construct (TYPE_TEST_FOO);
}

static void
value_test_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_test_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		test_foo_unref (value->data[0].v_pointer);
	}
}

static void
value_test_foo_copy_value (const GValue* src_value,
                           GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = test_foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_test_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_test_foo_collect_value (GValue* value,
                              guint n_collect_values,
                              GTypeCValue* collect_values,
                              guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		TestFoo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = test_foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_test_foo_lcopy_value (const GValue* value,
                            guint n_collect_values,
                            GTypeCValue* collect_values,
                            guint collect_flags)
{
	TestFoo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = test_foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_test_foo (const gchar* name,
                     const gchar* nick,
                     const gchar* blurb,
                     GType object_type,
                     GParamFlags flags)
{
	ParamSpecTestFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_TEST_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_test_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_test_foo (GValue* value,
                    gpointer v_object)
{
	TestFoo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_TEST_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		test_foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		test_foo_unref (old);
	}
}

void
value_take_test_foo (GValue* value,
                     gpointer v_object)
{
	TestFoo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_TEST_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		test_foo_unref (old);
	}
}

static void
test_foo_class_init (TestFooClass * klass,
                     gpointer klass_data)
{
	test_foo_parent_class = g_type_class_peek_parent (klass);
	((TestFooClass *) klass)->finalize = test_foo_finalize;
}

static void
test_foo_instance_init (TestFoo * self,
                        gpointer klass)
{
	self->ref_count = 1;
}

static void
test_foo_finalize (TestFoo * obj)
{
	TestFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TEST_FOO, TestFoo);
	g_signal_handlers_destroy (self);
}

static GType
test_foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_test_foo_init, value_test_foo_free_value, value_test_foo_copy_value, value_test_foo_peek_pointer, "p", value_test_foo_collect_value, "p", value_test_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (TestFooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (TestFoo), 0, (GInstanceInitFunc) test_foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType test_foo_type_id;
	test_foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "TestFoo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return test_foo_type_id;
}

GType
test_foo_get_type (void)
{
	static volatile gsize test_foo_type_id__once = 0;
	if (g_once_init_enter (&test_foo_type_id__once)) {
		GType test_foo_type_id;
		test_foo_type_id = test_foo_get_type_once ();
		g_once_init_leave (&test_foo_type_id__once, test_foo_type_id);
	}
	return test_foo_type_id__once;
}

gpointer
test_foo_ref (gpointer instance)
{
	TestFoo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
test_foo_unref (gpointer instance)
{
	TestFoo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		TEST_FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

void
test_bar_test (TestBar* self)
{
	Bar* foo = NULL;
	Bar* _tmp0_;
	gint local_field = 0;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_if_fail (IS_TEST_BAR (self));
	_tmp0_ = bar_new ();
	foo = _tmp0_;
	local_field = 0;
	{
		G_TYPE_CHECK_INSTANCE_CAST (foo, TYPE_FOO, Foo)->field = 10;
		foo_set_prop (G_TYPE_CHECK_INSTANCE_CAST (foo, TYPE_FOO, Foo), "prop");
		foo_method (G_TYPE_CHECK_INSTANCE_CAST (foo, TYPE_FOO, Foo));
		local_field = 20;
		test_bar_class_field = 30;
		self->instance_field = 40;
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, TYPE_FOO, Foo)->field == 10, "foo.field == 10");
	_tmp1_ = foo_get_prop (G_TYPE_CHECK_INSTANCE_CAST (foo, TYPE_FOO, Foo));
	_tmp2_ = _tmp1_;
	_vala_assert (g_strcmp0 (_tmp2_, "prop") == 0, "foo.prop == \"prop\"");
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, TYPE_FOO, Foo)->method_called, "foo.method_called");
	_vala_assert (local_field == 20, "local_field == 20");
	_vala_assert (test_bar_class_field == 30, "class_field == 30");
	_vala_assert (self->instance_field == 40, "instance_field == 40");
	_foo_unref0 (foo);
}

TestBar*
test_bar_construct (GType object_type)
{
	TestBar* self = NULL;
	self = (TestBar*) g_type_create_instance (object_type);
	return self;
}

TestBar*
test_bar_new (void)
{
	return test_bar_construct (TYPE_TEST_BAR);
}

static void
value_test_bar_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_test_bar_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		test_bar_unref (value->data[0].v_pointer);
	}
}

static void
value_test_bar_copy_value (const GValue* src_value,
                           GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = test_bar_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_test_bar_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_test_bar_collect_value (GValue* value,
                              guint n_collect_values,
                              GTypeCValue* collect_values,
                              guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		TestBar * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = test_bar_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_test_bar_lcopy_value (const GValue* value,
                            guint n_collect_values,
                            GTypeCValue* collect_values,
                            guint collect_flags)
{
	TestBar ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = test_bar_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_test_bar (const gchar* name,
                     const gchar* nick,
                     const gchar* blurb,
                     GType object_type,
                     GParamFlags flags)
{
	ParamSpecTestBar* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_TEST_BAR), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_test_bar (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST_BAR), NULL);
	return value->data[0].v_pointer;
}

void
value_set_test_bar (GValue* value,
                    gpointer v_object)
{
	TestBar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_TEST_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		test_bar_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		test_bar_unref (old);
	}
}

void
value_take_test_bar (GValue* value,
                     gpointer v_object)
{
	TestBar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_TEST_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_TEST_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		test_bar_unref (old);
	}
}

static void
test_bar_class_init (TestBarClass * klass,
                     gpointer klass_data)
{
	test_bar_parent_class = g_type_class_peek_parent (klass);
	((TestBarClass *) klass)->finalize = test_bar_finalize;
}

static void
test_bar_instance_init (TestBar * self,
                        gpointer klass)
{
	self->ref_count = 1;
}

static void
test_bar_finalize (TestBar * obj)
{
	TestBar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TEST_BAR, TestBar);
	g_signal_handlers_destroy (self);
}

static GType
test_bar_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_test_bar_init, value_test_bar_free_value, value_test_bar_copy_value, value_test_bar_peek_pointer, "p", value_test_bar_collect_value, "p", value_test_bar_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (TestBarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (TestBar), 0, (GInstanceInitFunc) test_bar_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType test_bar_type_id;
	test_bar_type_id = g_type_register_fundamental (g_type_fundamental_next (), "TestBar", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return test_bar_type_id;
}

GType
test_bar_get_type (void)
{
	static volatile gsize test_bar_type_id__once = 0;
	if (g_once_init_enter (&test_bar_type_id__once)) {
		GType test_bar_type_id;
		test_bar_type_id = test_bar_get_type_once ();
		g_once_init_leave (&test_bar_type_id__once, test_bar_type_id);
	}
	return test_bar_type_id__once;
}

gpointer
test_bar_ref (gpointer instance)
{
	TestBar * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
test_bar_unref (gpointer instance)
{
	TestBar * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		TEST_BAR_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
_vala_main (void)
{
	TestFoo* _tmp0_;
	TestFoo* _tmp1_;
	TestBar* _tmp2_;
	TestBar* _tmp3_;
	_tmp0_ = test_foo_new ();
	_tmp1_ = _tmp0_;
	test_foo_test (_tmp1_);
	_test_foo_unref0 (_tmp1_);
	_tmp2_ = test_bar_new ();
	_tmp3_ = _tmp2_;
	test_bar_test (_tmp3_);
	_test_bar_unref0 (_tmp3_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

