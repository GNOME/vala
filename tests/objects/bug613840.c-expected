/* objects_bug613840.c generated by valac, the Vala compiler
 * generated from objects_bug613840.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
static void _vala_array_copy1 (GObject* * self,
                        GObject* * dest);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

static void
_vala_array_copy1 (GObject* * self,
                   GObject* * dest)
{
	gint i;
	for (i = 0; i < 1; i++) {
		GObject* _tmp0_;
		_tmp0_ = _g_object_ref0 (self[i]);
		dest[i] = _tmp0_;
	}
}

static void
_vala_main (void)
{
	GObject* a[1] = {0};
	GObject* _tmp0_;
	GObject* _tmp1_[1] = {0};
	GObject* b[1] = {0};
	GObject* _tmp2_[1];
	gint _tmp2__length1;
	GObject* _tmp3_;
	GObject* _tmp4_;
	_tmp0_ = g_object_new (G_TYPE_OBJECT, NULL);
	_tmp1_[0] = _tmp0_;
	memcpy (a, _tmp1_, 1 * sizeof (GObject*));
	_vala_array_copy1 (a, _tmp2_);
	memcpy (b, _tmp2_, 1 * sizeof (GObject*));
	_tmp3_ = a[0];
	_tmp4_ = b[0];
	_vala_assert (_tmp3_ == _tmp4_, "a[0] == b[0]");
	_vala_array_destroy (b, 1, (GDestroyNotify) g_object_unref);
	_vala_array_destroy (a, 1, (GDestroyNotify) g_object_unref);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

