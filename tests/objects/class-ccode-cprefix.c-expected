/* objects_class_ccode_cprefix.c generated by valac, the Vala compiler
 * generated from objects_class_ccode_cprefix.vala, do not modify */

#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];

#define TYPE_MANAM (manam_get_type ())
#define MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAM, Manam))
#define MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MANAM, ManamClass))
#define IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAM))
#define IS_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MANAM))
#define MANAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MANAM, ManamClass))

typedef struct _Manam Manam;
typedef struct _ManamClass ManamClass;
typedef struct _ManamPrivate ManamPrivate;
typedef struct _ParamSpecManam ParamSpecManam;

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _Manam {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ManamPrivate * priv;
};

struct _ManamClass {
	GTypeClass parent_class;
	void (*finalize) (Manam *self);
};

struct _ParamSpecManam {
	GParamSpec parent_instance;
};

static gpointer foo_parent_class = NULL;
static gpointer manam_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* bar_new (void);
VALA_EXTERN Foo* bar_construct (GType object_type);
static GObject * bar_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties);
static void bar_finalize (GObject * obj);
static GType foo_get_type_once (void);
VALA_EXTERN gpointer baz_ref (gpointer instance);
VALA_EXTERN void baz_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_manam (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags);
VALA_EXTERN void value_set_manam (GValue* value,
                      gpointer v_object);
VALA_EXTERN void value_take_manam (GValue* value,
                       gpointer v_object);
VALA_EXTERN gpointer value_get_manam (const GValue* value);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Manam, baz_unref)
VALA_EXTERN Manam* baz_new (void);
VALA_EXTERN Manam* baz_construct (GType object_type);
static void baz_finalize (Manam * obj);
static GType manam_get_type_once (void);
static void _vala_main (void);

Foo*
bar_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
bar_new (void)
{
	return bar_construct (TYPE_FOO);
}

static GObject *
bar_constructor (GType type,
                 guint n_construct_properties,
                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	Foo * self;
	parent_class = G_OBJECT_CLASS (foo_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	return obj;
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->constructor = bar_constructor;
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static void
bar_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

Manam*
baz_construct (GType object_type)
{
	Manam* self = NULL;
	self = (Manam*) g_type_create_instance (object_type);
	return self;
}

Manam*
baz_new (void)
{
	return baz_construct (TYPE_MANAM);
}

static void
value_manam_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_manam_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		baz_unref (value->data[0].v_pointer);
	}
}

static void
value_manam_copy_value (const GValue* src_value,
                        GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = baz_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_manam_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_manam_collect_value (GValue* value,
                           guint n_collect_values,
                           GTypeCValue* collect_values,
                           guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Manam * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = baz_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_manam_lcopy_value (const GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	Manam ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = baz_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_manam (const gchar* name,
                  const gchar* nick,
                  const gchar* blurb,
                  GType object_type,
                  GParamFlags flags)
{
	ParamSpecManam* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_MANAM), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_manam (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM), NULL);
	return value->data[0].v_pointer;
}

void
value_set_manam (GValue* value,
                 gpointer v_object)
{
	Manam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		baz_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		baz_unref (old);
	}
}

void
value_take_manam (GValue* value,
                  gpointer v_object)
{
	Manam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		baz_unref (old);
	}
}

static void
manam_class_init (ManamClass * klass,
                  gpointer klass_data)
{
	manam_parent_class = g_type_class_peek_parent (klass);
	((ManamClass *) klass)->finalize = baz_finalize;
}

static void
manam_instance_init (Manam * self,
                     gpointer klass)
{
	self->ref_count = 1;
}

static void
baz_finalize (Manam * obj)
{
	Manam * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MANAM, Manam);
	g_signal_handlers_destroy (self);
}

static GType
manam_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_manam_init, value_manam_free_value, value_manam_copy_value, value_manam_peek_pointer, "p", value_manam_collect_value, "p", value_manam_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (ManamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Manam), 0, (GInstanceInitFunc) manam_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType manam_type_id;
	manam_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Manam", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

gpointer
baz_ref (gpointer instance)
{
	Manam * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
baz_unref (gpointer instance)
{
	Manam * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		MANAM_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
_vala_main (void)
{
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

