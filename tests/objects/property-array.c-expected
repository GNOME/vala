/* objects_property_array.c generated by valac, the Vala compiler
 * generated from objects_property_array.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>
#include <stdlib.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_MANAM (manam_get_type ())
typedef struct _Manam Manam;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_ARRAY_PROPERTY,
	BAR_ARRAY_V_PROPERTY,
	BAR_STRV_PROPERTY,
	BAR_STRV_V_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Manam {
	gint i;
};

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
	Manam** (*get_array_v) (Foo* self, gint* result_length1);
	void (*set_array_v) (Foo* self, Manam** value, gint value_length1);
	Manam** (*get_array_no_length_v) (Foo* self);
	void (*set_array_no_length_v) (Foo* self, Manam** value);
	gchar** (*get_strv_v) (Foo* self);
	void (*set_strv_v) (Foo* self, gchar** value);
};

struct _FooPrivate {
	Manam** _array;
	gint _array_length1;
	gint __array_size_;
	Manam** _array_v;
	gint _array_v_length1;
	gint __array_v_size_;
	Manam** _array_no_length;
	gint _array_no_length_length1;
	gint __array_no_length_size_;
	Manam** _array_no_length_v;
	gint _array_no_length_v_length1;
	gint __array_no_length_v_size_;
	gchar** _strv;
	gint _strv_length1;
	gint __strv_size_;
	gchar** _strv_v;
	gint _strv_v_length1;
	gint __strv_v_size_;
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
	Manam** (*get_array_v) (Bar* self);
	void (*set_array_v) (Bar* self, Manam** value);
	gchar** (*get_strv_v) (Bar* self);
	void (*set_strv_v) (Bar* self, gchar** value);
};

struct _BarPrivate {
	Manam** _array;
	gint _array_length1;
	gint __array_size_;
	Manam** _array_v;
	gint _array_v_length1;
	gint __array_v_size_;
	gchar** _strv;
	gint _strv_length1;
	gint __strv_size_;
	gchar** _strv_v;
	gint _strv_v_length1;
	gint __strv_v_size_;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;

VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Manam* manam_dup (const Manam* self);
VALA_EXTERN void manam_free (Manam* self);
VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN Manam** foo_get_array_v (Foo* self,
                         gint* result_length1);
VALA_EXTERN void foo_set_array_v (Foo* self,
                      Manam** value,
                      gint value_length1);
VALA_EXTERN Manam** foo_get_array_no_length_v (Foo* self);
VALA_EXTERN void foo_set_array_no_length_v (Foo* self,
                                Manam** value);
VALA_EXTERN gchar** foo_get_strv_v (Foo* self);
VALA_EXTERN void foo_set_strv_v (Foo* self,
                     gchar** value);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN Manam** foo_get_array (Foo* self,
                       gint* result_length1);
VALA_EXTERN void foo_set_array (Foo* self,
                    Manam** value,
                    gint value_length1);
static Manam** _vala_array_dup1 (Manam** self,
                          gssize length);
static Manam** _vala_array_dup2 (Manam** self,
                          gssize length);
VALA_EXTERN Manam** foo_get_array_no_length (Foo* self);
VALA_EXTERN void foo_set_array_no_length (Foo* self,
                              Manam** value);
static Manam** _vala_array_dup3 (Manam** self,
                          gssize length);
static Manam** _vala_array_dup4 (Manam** self,
                          gssize length);
VALA_EXTERN gchar** foo_get_strv (Foo* self);
VALA_EXTERN void foo_set_strv (Foo* self,
                   gchar** value);
static gchar** _vala_array_dup5 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup6 (gchar** self,
                          gssize length);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Manam** bar_get_array_v (Bar* self);
VALA_EXTERN void bar_set_array_v (Bar* self,
                      Manam** value);
VALA_EXTERN gchar** bar_get_strv_v (Bar* self);
VALA_EXTERN void bar_set_strv_v (Bar* self,
                     gchar** value);
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
VALA_EXTERN Manam** bar_get_array (Bar* self);
VALA_EXTERN void bar_set_array (Bar* self,
                    Manam** value);
static Manam** _vala_array_dup7 (Manam** self,
                          gssize length);
static Manam** _vala_array_dup8 (Manam** self,
                          gssize length);
VALA_EXTERN gchar** bar_get_strv (Bar* self);
VALA_EXTERN void bar_set_strv (Bar* self,
                   gchar** value);
static gchar** _vala_array_dup9 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup10 (gchar** self,
                           gssize length);
static void bar_finalize (GObject * obj);
static GType bar_get_type_once (void);
static void _vala_bar_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_bar_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);
static gssize _vala_array_length (gpointer array);

Manam*
manam_dup (const Manam* self)
{
	Manam* dup;
	dup = g_new0 (Manam, 1);
	memcpy (dup, self, sizeof (Manam));
	return dup;
}

void
manam_free (Manam* self)
{
	g_free (self);
}

static GType
manam_get_type_once (void)
{
	GType manam_type_id;
	manam_type_id = g_boxed_type_register_static ("Manam", (GBoxedCopyFunc) manam_dup, (GBoxedFreeFunc) manam_free);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

Manam**
foo_get_array (Foo* self,
               gint* result_length1)
{
	Manam** result;
	Manam** _tmp0_;
	gint _tmp0__length1;
	Manam** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_array;
	_tmp0__length1 = self->priv->_array_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}

static gpointer
_manam_dup0 (gpointer self)
{
	return self ? manam_dup (self) : NULL;
}

static Manam**
_vala_array_dup1 (Manam** self,
                  gssize length)
{
	if (length > 0) {
		Manam** result;
		gssize i;
		result = g_new0 (Manam*, length);
		for (i = 0; i < length; i++) {
			Manam* _tmp0_;
			_tmp0_ = _manam_dup0 (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
foo_set_array (Foo* self,
               Manam** value,
               gint value_length1)
{
	Manam** _tmp0_;
	gint _tmp0__length1;
	g_return_if_fail (IS_FOO (self));
	_tmp0_ = (value != NULL) ? _vala_array_dup1 (value, value_length1) : value;
	_tmp0__length1 = value_length1;
	self->priv->_array = (_vala_array_free (self->priv->_array, self->priv->_array_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_array = _tmp0_;
	self->priv->_array_length1 = _tmp0__length1;
	self->priv->__array_size_ = self->priv->_array_length1;
}

Manam**
foo_get_array_v (Foo* self,
                 gint* result_length1)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->get_array_v) {
		return _klass_->get_array_v (self, result_length1);
	}
	return NULL;
}

static Manam**
foo_real_get_array_v (Foo* base,
                      gint* result_length1)
{
	Manam** result;
	Foo* self;
	Manam** _tmp0_;
	gint _tmp0__length1;
	Manam** _tmp1_;
	gint _tmp1__length1;
	self = base;
	_tmp0_ = self->priv->_array_v;
	_tmp0__length1 = self->priv->_array_v_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}

void
foo_set_array_v (Foo* self,
                 Manam** value,
                 gint value_length1)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->set_array_v) {
		_klass_->set_array_v (self, value, value_length1);
	}
}

static Manam**
_vala_array_dup2 (Manam** self,
                  gssize length)
{
	if (length > 0) {
		Manam** result;
		gssize i;
		result = g_new0 (Manam*, length);
		for (i = 0; i < length; i++) {
			Manam* _tmp0_;
			_tmp0_ = _manam_dup0 (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static void
foo_real_set_array_v (Foo* base,
                      Manam** value,
                      gint value_length1)
{
	Foo* self;
	Manam** _tmp0_;
	gint _tmp0__length1;
	self = base;
	_tmp0_ = (value != NULL) ? _vala_array_dup2 (value, value_length1) : value;
	_tmp0__length1 = value_length1;
	self->priv->_array_v = (_vala_array_free (self->priv->_array_v, self->priv->_array_v_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_array_v = _tmp0_;
	self->priv->_array_v_length1 = _tmp0__length1;
	self->priv->__array_v_size_ = self->priv->_array_v_length1;
}

Manam**
foo_get_array_no_length (Foo* self)
{
	Manam** result;
	Manam** _tmp0_;
	gint _tmp0__length1;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_array_no_length;
	_tmp0__length1 = self->priv->_array_no_length_length1;
	result = _tmp0_;
	return result;
}

static Manam**
_vala_array_dup3 (Manam** self,
                  gssize length)
{
	if (length > 0) {
		Manam** result;
		gssize i;
		result = g_new0 (Manam*, length);
		for (i = 0; i < length; i++) {
			Manam* _tmp0_;
			_tmp0_ = _manam_dup0 (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
foo_set_array_no_length (Foo* self,
                         Manam** value)
{
	Manam** _tmp0_;
	gint _tmp0__length1;
	g_return_if_fail (IS_FOO (self));
	_tmp0_ = (value != NULL) ? _vala_array_dup3 (value, _vala_array_length (value)) : value;
	_tmp0__length1 = _vala_array_length (value);
	self->priv->_array_no_length = (_vala_array_free (self->priv->_array_no_length, self->priv->_array_no_length_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_array_no_length = _tmp0_;
	self->priv->_array_no_length_length1 = _tmp0__length1;
	self->priv->__array_no_length_size_ = self->priv->_array_no_length_length1;
}

Manam**
foo_get_array_no_length_v (Foo* self)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->get_array_no_length_v) {
		return _klass_->get_array_no_length_v (self);
	}
	return NULL;
}

static Manam**
foo_real_get_array_no_length_v (Foo* base)
{
	Manam** result;
	Foo* self;
	Manam** _tmp0_;
	gint _tmp0__length1;
	self = base;
	_tmp0_ = self->priv->_array_no_length_v;
	_tmp0__length1 = self->priv->_array_no_length_v_length1;
	result = _tmp0_;
	return result;
}

void
foo_set_array_no_length_v (Foo* self,
                           Manam** value)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->set_array_no_length_v) {
		_klass_->set_array_no_length_v (self, value);
	}
}

static Manam**
_vala_array_dup4 (Manam** self,
                  gssize length)
{
	if (length > 0) {
		Manam** result;
		gssize i;
		result = g_new0 (Manam*, length);
		for (i = 0; i < length; i++) {
			Manam* _tmp0_;
			_tmp0_ = _manam_dup0 (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static void
foo_real_set_array_no_length_v (Foo* base,
                                Manam** value)
{
	Foo* self;
	Manam** _tmp0_;
	gint _tmp0__length1;
	self = base;
	_tmp0_ = (value != NULL) ? _vala_array_dup4 (value, _vala_array_length (value)) : value;
	_tmp0__length1 = _vala_array_length (value);
	self->priv->_array_no_length_v = (_vala_array_free (self->priv->_array_no_length_v, self->priv->_array_no_length_v_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_array_no_length_v = _tmp0_;
	self->priv->_array_no_length_v_length1 = _tmp0__length1;
	self->priv->__array_no_length_v_size_ = self->priv->_array_no_length_v_length1;
}

gchar**
foo_get_strv (Foo* self)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_strv;
	_tmp0__length1 = self->priv->_strv_length1;
	result = _tmp0_;
	return result;
}

static gchar**
_vala_array_dup5 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
foo_set_strv (Foo* self,
              gchar** value)
{
	gchar** _tmp0_;
	gint _tmp0__length1;
	g_return_if_fail (IS_FOO (self));
	_tmp0_ = (value != NULL) ? _vala_array_dup5 (value, _vala_array_length (value)) : value;
	_tmp0__length1 = _vala_array_length (value);
	self->priv->_strv = (_vala_array_free (self->priv->_strv, self->priv->_strv_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_strv = _tmp0_;
	self->priv->_strv_length1 = _tmp0__length1;
	self->priv->__strv_size_ = self->priv->_strv_length1;
}

gchar**
foo_get_strv_v (Foo* self)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->get_strv_v) {
		return _klass_->get_strv_v (self);
	}
	return NULL;
}

static gchar**
foo_real_get_strv_v (Foo* base)
{
	gchar** result;
	Foo* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
	self = base;
	_tmp0_ = self->priv->_strv_v;
	_tmp0__length1 = self->priv->_strv_v_length1;
	result = _tmp0_;
	return result;
}

void
foo_set_strv_v (Foo* self,
                gchar** value)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->set_strv_v) {
		_klass_->set_strv_v (self, value);
	}
}

static gchar**
_vala_array_dup6 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static void
foo_real_set_strv_v (Foo* base,
                     gchar** value)
{
	Foo* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
	self = base;
	_tmp0_ = (value != NULL) ? _vala_array_dup6 (value, _vala_array_length (value)) : value;
	_tmp0__length1 = _vala_array_length (value);
	self->priv->_strv_v = (_vala_array_free (self->priv->_strv_v, self->priv->_strv_v_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_strv_v = _tmp0_;
	self->priv->_strv_v_length1 = _tmp0__length1;
	self->priv->__strv_v_size_ = self->priv->_strv_v_length1;
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	FOO_CLASS (klass)->get_array_v = (Manam** (*) (Foo*, gint*)) foo_real_get_array_v;
	FOO_CLASS (klass)->set_array_v = (void (*) (Foo*, Manam**, gint)) foo_real_set_array_v;
	FOO_CLASS (klass)->get_array_no_length_v = (Manam** (*) (Foo*)) foo_real_get_array_no_length_v;
	FOO_CLASS (klass)->set_array_no_length_v = (void (*) (Foo*, Manam**)) foo_real_set_array_no_length_v;
	FOO_CLASS (klass)->get_strv_v = (gchar** (*) (Foo*)) foo_real_get_strv_v;
	FOO_CLASS (klass)->set_strv_v = (void (*) (Foo*, gchar**)) foo_real_set_strv_v;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
	self->priv->_array = (_vala_array_free (self->priv->_array, self->priv->_array_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_array_v = (_vala_array_free (self->priv->_array_v, self->priv->_array_v_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_array_no_length = (_vala_array_free (self->priv->_array_no_length, self->priv->_array_no_length_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_array_no_length_v = (_vala_array_free (self->priv->_array_no_length_v, self->priv->_array_no_length_v_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_strv = (_vala_array_free (self->priv->_strv, self->priv->_strv_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_strv_v = (_vala_array_free (self->priv->_strv_v, self->priv->_strv_v_length1, (GDestroyNotify) g_free), NULL);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

Manam**
bar_get_array (Bar* self)
{
	Manam** result;
	Manam** _tmp0_;
	gint _tmp0__length1;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_array;
	_tmp0__length1 = self->priv->_array_length1;
	result = _tmp0_;
	return result;
}

static Manam**
_vala_array_dup7 (Manam** self,
                  gssize length)
{
	if (length > 0) {
		Manam** result;
		gssize i;
		result = g_new0 (Manam*, length);
		for (i = 0; i < length; i++) {
			Manam* _tmp0_;
			_tmp0_ = _manam_dup0 (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
bar_set_array (Bar* self,
               Manam** value)
{
	Manam** old_value;
	g_return_if_fail (IS_BAR (self));
	old_value = bar_get_array (self);
	if (old_value != value) {
		Manam** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup7 (value, _vala_array_length (value)) : value;
		_tmp0__length1 = _vala_array_length (value);
		self->priv->_array = (_vala_array_free (self->priv->_array, self->priv->_array_length1, (GDestroyNotify) manam_free), NULL);
		self->priv->_array = _tmp0_;
		self->priv->_array_length1 = _tmp0__length1;
		self->priv->__array_size_ = self->priv->_array_length1;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_ARRAY_PROPERTY]);
	}
}

Manam**
bar_get_array_v (Bar* self)
{
	BarClass* _klass_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_klass_ = BAR_GET_CLASS (self);
	if (_klass_->get_array_v) {
		return _klass_->get_array_v (self);
	}
	return NULL;
}

static Manam**
bar_real_get_array_v (Bar* base)
{
	Manam** result;
	Bar* self;
	Manam** _tmp0_;
	gint _tmp0__length1;
	self = base;
	_tmp0_ = self->priv->_array_v;
	_tmp0__length1 = self->priv->_array_v_length1;
	result = _tmp0_;
	return result;
}

void
bar_set_array_v (Bar* self,
                 Manam** value)
{
	BarClass* _klass_;
	g_return_if_fail (IS_BAR (self));
	_klass_ = BAR_GET_CLASS (self);
	if (_klass_->set_array_v) {
		_klass_->set_array_v (self, value);
	}
}

static Manam**
_vala_array_dup8 (Manam** self,
                  gssize length)
{
	if (length > 0) {
		Manam** result;
		gssize i;
		result = g_new0 (Manam*, length);
		for (i = 0; i < length; i++) {
			Manam* _tmp0_;
			_tmp0_ = _manam_dup0 (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static void
bar_real_set_array_v (Bar* base,
                      Manam** value)
{
	Bar* self;
	Manam** old_value;
	self = base;
	old_value = bar_real_get_array_v (base);
	if (old_value != value) {
		Manam** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup8 (value, _vala_array_length (value)) : value;
		_tmp0__length1 = _vala_array_length (value);
		self->priv->_array_v = (_vala_array_free (self->priv->_array_v, self->priv->_array_v_length1, (GDestroyNotify) manam_free), NULL);
		self->priv->_array_v = _tmp0_;
		self->priv->_array_v_length1 = _tmp0__length1;
		self->priv->__array_v_size_ = self->priv->_array_v_length1;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_ARRAY_V_PROPERTY]);
	}
}

gchar**
bar_get_strv (Bar* self)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_strv;
	_tmp0__length1 = self->priv->_strv_length1;
	result = _tmp0_;
	return result;
}

static gchar**
_vala_array_dup9 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
bar_set_strv (Bar* self,
              gchar** value)
{
	gchar** old_value;
	g_return_if_fail (IS_BAR (self));
	old_value = bar_get_strv (self);
	if (old_value != value) {
		gchar** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup9 (value, _vala_array_length (value)) : value;
		_tmp0__length1 = _vala_array_length (value);
		self->priv->_strv = (_vala_array_free (self->priv->_strv, self->priv->_strv_length1, (GDestroyNotify) g_free), NULL);
		self->priv->_strv = _tmp0_;
		self->priv->_strv_length1 = _tmp0__length1;
		self->priv->__strv_size_ = self->priv->_strv_length1;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_STRV_PROPERTY]);
	}
}

gchar**
bar_get_strv_v (Bar* self)
{
	BarClass* _klass_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_klass_ = BAR_GET_CLASS (self);
	if (_klass_->get_strv_v) {
		return _klass_->get_strv_v (self);
	}
	return NULL;
}

static gchar**
bar_real_get_strv_v (Bar* base)
{
	gchar** result;
	Bar* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
	self = base;
	_tmp0_ = self->priv->_strv_v;
	_tmp0__length1 = self->priv->_strv_v_length1;
	result = _tmp0_;
	return result;
}

void
bar_set_strv_v (Bar* self,
                gchar** value)
{
	BarClass* _klass_;
	g_return_if_fail (IS_BAR (self));
	_klass_ = BAR_GET_CLASS (self);
	if (_klass_->set_strv_v) {
		_klass_->set_strv_v (self, value);
	}
}

static gchar**
_vala_array_dup10 (gchar** self,
                   gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static void
bar_real_set_strv_v (Bar* base,
                     gchar** value)
{
	Bar* self;
	gchar** old_value;
	self = base;
	old_value = bar_real_get_strv_v (base);
	if (old_value != value) {
		gchar** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup10 (value, _vala_array_length (value)) : value;
		_tmp0__length1 = _vala_array_length (value);
		self->priv->_strv_v = (_vala_array_free (self->priv->_strv_v, self->priv->_strv_v_length1, (GDestroyNotify) g_free), NULL);
		self->priv->_strv_v = _tmp0_;
		self->priv->_strv_v_length1 = _tmp0__length1;
		self->priv->__strv_v_size_ = self->priv->_strv_v_length1;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_STRV_V_PROPERTY]);
	}
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
	BAR_CLASS (klass)->get_array_v = (Manam** (*) (Bar*)) bar_real_get_array_v;
	BAR_CLASS (klass)->set_array_v = (void (*) (Bar*, Manam**)) bar_real_set_array_v;
	BAR_CLASS (klass)->get_strv_v = (gchar** (*) (Bar*)) bar_real_get_strv_v;
	BAR_CLASS (klass)->set_strv_v = (void (*) (Bar*, gchar**)) bar_real_set_strv_v;
	G_OBJECT_CLASS (klass)->get_property = _vala_bar_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_bar_set_property;
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_ARRAY_PROPERTY, bar_properties[BAR_ARRAY_PROPERTY] = g_param_spec_pointer ("array", "array", "array", G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_ARRAY_V_PROPERTY, bar_properties[BAR_ARRAY_V_PROPERTY] = g_param_spec_pointer ("array-v", "array-v", "array-v", G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_STRV_PROPERTY, bar_properties[BAR_STRV_PROPERTY] = g_param_spec_boxed ("strv", "strv", "strv", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_STRV_V_PROPERTY, bar_properties[BAR_STRV_V_PROPERTY] = g_param_spec_boxed ("strv-v", "strv-v", "strv-v", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
}

static void
bar_finalize (GObject * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	self->priv->_array = (_vala_array_free (self->priv->_array, self->priv->_array_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_array_v = (_vala_array_free (self->priv->_array_v, self->priv->_array_v_length1, (GDestroyNotify) manam_free), NULL);
	self->priv->_strv = (_vala_array_free (self->priv->_strv, self->priv->_strv_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_strv_v = (_vala_array_free (self->priv->_strv_v, self->priv->_strv_v_length1, (GDestroyNotify) g_free), NULL);
	G_OBJECT_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_bar_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_ARRAY_PROPERTY:
		g_value_set_pointer (value, bar_get_array (self));
		break;
		case BAR_ARRAY_V_PROPERTY:
		g_value_set_pointer (value, bar_get_array_v (self));
		break;
		case BAR_STRV_PROPERTY:
		g_value_set_boxed (value, bar_get_strv (self));
		break;
		case BAR_STRV_V_PROPERTY:
		g_value_set_boxed (value, bar_get_strv_v (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_bar_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_ARRAY_PROPERTY:
		bar_set_array (self, g_value_get_pointer (value));
		break;
		case BAR_ARRAY_V_PROPERTY:
		bar_set_array_v (self, g_value_get_pointer (value));
		break;
		case BAR_STRV_PROPERTY:
		{
			gpointer boxed;
			boxed = g_value_get_boxed (value);
			bar_set_strv (self, boxed);
		}
		break;
		case BAR_STRV_V_PROPERTY:
		{
			gpointer boxed;
			boxed = g_value_get_boxed (value);
			bar_set_strv_v (self, boxed);
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	Manam** manam = NULL;
	Manam _tmp0_ = {0};
	Manam* _tmp1_;
	Manam _tmp2_ = {0};
	Manam* _tmp3_;
	Manam** _tmp4_;
	gint manam_length1;
	gint _manam_size_;
	gchar** minim = NULL;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar** _tmp7_;
	gint minim_length1;
	gint _minim_size_;
	memset (&_tmp0_, 0, sizeof (Manam));
	_tmp0_.i = 23;
	_tmp1_ = _manam_dup0 (&_tmp0_);
	memset (&_tmp2_, 0, sizeof (Manam));
	_tmp2_.i = 42;
	_tmp3_ = _manam_dup0 (&_tmp2_);
	_tmp4_ = g_new0 (Manam*, 3);
	_tmp4_[0] = _tmp1_;
	_tmp4_[1] = _tmp3_;
	_tmp4_[2] = NULL;
	manam = _tmp4_;
	manam_length1 = 3;
	_manam_size_ = manam_length1;
	_tmp5_ = g_strdup ("foo");
	_tmp6_ = g_strdup ("bar");
	_tmp7_ = g_new0 (gchar*, 3 + 1);
	_tmp7_[0] = _tmp5_;
	_tmp7_[1] = _tmp6_;
	_tmp7_[2] = NULL;
	minim = _tmp7_;
	minim_length1 = 3;
	_minim_size_ = minim_length1;
	{
		Foo* foo = NULL;
		Foo* _tmp8_;
		Manam** _tmp9_;
		gint _tmp9__length1;
		gint _tmp10_ = 0;
		Manam** _tmp11_;
		gint _tmp11__length1;
		Manam* _tmp12_;
		Manam** _tmp13_;
		gint _tmp13__length1;
		gint _tmp14_ = 0;
		Manam** _tmp15_;
		gint _tmp15__length1;
		Manam* _tmp16_;
		Manam** _tmp17_;
		gint _tmp17__length1;
		Manam** _tmp18_;
		gint _tmp18__length1;
		Manam* _tmp19_;
		Manam** _tmp20_;
		gint _tmp20__length1;
		Manam** _tmp21_;
		gint _tmp21__length1;
		Manam* _tmp22_;
		gchar** _tmp23_;
		gint _tmp23__length1;
		gchar** _tmp24_;
		gint _tmp24__length1;
		const gchar* _tmp25_;
		gchar** _tmp26_;
		gint _tmp26__length1;
		gchar** _tmp27_;
		gint _tmp27__length1;
		const gchar* _tmp28_;
		_tmp8_ = foo_new ();
		foo = _tmp8_;
		foo_set_array (foo, manam, manam_length1);
		_tmp9_ = foo_get_array (foo, &_tmp10_);
		_tmp9__length1 = _tmp10_;
		_tmp11_ = _tmp9_;
		_tmp11__length1 = _tmp9__length1;
		_tmp12_ = _tmp11_[0];
		_vala_assert ((*_tmp12_).i == 23, "foo.array[0].i == 23");
		foo_set_array_v (foo, manam, manam_length1);
		_tmp13_ = foo_get_array_v (foo, &_tmp14_);
		_tmp13__length1 = _tmp14_;
		_tmp15_ = _tmp13_;
		_tmp15__length1 = _tmp13__length1;
		_tmp16_ = _tmp15_[1];
		_vala_assert ((*_tmp16_).i == 42, "foo.array_v[1].i == 42");
		foo_set_array_no_length (foo, manam);
		_tmp17_ = foo_get_array_no_length (foo);
		_tmp17__length1 = _vala_array_length (_tmp17_);
		_tmp18_ = _tmp17_;
		_tmp18__length1 = _tmp17__length1;
		_tmp19_ = _tmp18_[0];
		_vala_assert ((*_tmp19_).i == 23, "foo.array_no_length[0].i == 23");
		foo_set_array_no_length_v (foo, manam);
		_tmp20_ = foo_get_array_no_length_v (foo);
		_tmp20__length1 = _vala_array_length (_tmp20_);
		_tmp21_ = _tmp20_;
		_tmp21__length1 = _tmp20__length1;
		_tmp22_ = _tmp21_[1];
		_vala_assert ((*_tmp22_).i == 42, "foo.array_no_length_v[1].i == 42");
		foo_set_strv (foo, minim);
		_tmp23_ = foo_get_strv (foo);
		_tmp23__length1 = _vala_array_length (_tmp23_);
		_tmp24_ = _tmp23_;
		_tmp24__length1 = _tmp23__length1;
		_tmp25_ = _tmp24_[0];
		_vala_assert (g_strcmp0 (_tmp25_, "foo") == 0, "foo.strv[0] == \"foo\"");
		foo_set_strv_v (foo, minim);
		_tmp26_ = foo_get_strv_v (foo);
		_tmp26__length1 = _vala_array_length (_tmp26_);
		_tmp27_ = _tmp26_;
		_tmp27__length1 = _tmp26__length1;
		_tmp28_ = _tmp27_[1];
		_vala_assert (g_strcmp0 (_tmp28_, "bar") == 0, "foo.strv_v[1] == \"bar\"");
		_foo_unref0 (foo);
	}
	{
		Bar* bar = NULL;
		Bar* _tmp29_;
		Manam** _tmp30_;
		gint _tmp30__length1;
		Manam** _tmp31_;
		gint _tmp31__length1;
		Manam* _tmp32_;
		Manam** _tmp33_;
		gint _tmp33__length1;
		Manam** _tmp34_;
		gint _tmp34__length1;
		Manam* _tmp35_;
		gchar** _tmp36_;
		gint _tmp36__length1;
		gchar** _tmp37_;
		gint _tmp37__length1;
		const gchar* _tmp38_;
		gchar** _tmp39_;
		gint _tmp39__length1;
		gchar** _tmp40_;
		gint _tmp40__length1;
		const gchar* _tmp41_;
		Manam** res = NULL;
		gint res_length1 = 0;
		gint _res_size_ = 0;
		Manam** _tmp42_ = NULL;
		Manam** _tmp43_;
		gint _tmp43__length1;
		Manam* _tmp44_;
		Manam** _tmp45_ = NULL;
		Manam** _tmp46_;
		gint _tmp46__length1;
		Manam* _tmp47_;
		gchar** strv = NULL;
		gint strv_length1 = 0;
		gint _strv_size_ = 0;
		gchar** _tmp48_ = NULL;
		gchar** _tmp49_;
		gint _tmp49__length1;
		const gchar* _tmp50_;
		gchar** _tmp51_ = NULL;
		gchar** _tmp52_;
		gint _tmp52__length1;
		const gchar* _tmp53_;
		_tmp29_ = bar_new ();
		bar = _tmp29_;
		bar_set_array (bar, manam);
		_tmp30_ = bar_get_array (bar);
		_tmp30__length1 = _vala_array_length (_tmp30_);
		_tmp31_ = _tmp30_;
		_tmp31__length1 = _tmp30__length1;
		_tmp32_ = _tmp31_[0];
		_vala_assert ((*_tmp32_).i == 23, "bar.array[0].i == 23");
		bar_set_array_v (bar, manam);
		_tmp33_ = bar_get_array_v (bar);
		_tmp33__length1 = _vala_array_length (_tmp33_);
		_tmp34_ = _tmp33_;
		_tmp34__length1 = _tmp33__length1;
		_tmp35_ = _tmp34_[1];
		_vala_assert ((*_tmp35_).i == 42, "bar.array_v[1].i == 42");
		bar_set_strv (bar, minim);
		_tmp36_ = bar_get_strv (bar);
		_tmp36__length1 = _vala_array_length (_tmp36_);
		_tmp37_ = _tmp36_;
		_tmp37__length1 = _tmp36__length1;
		_tmp38_ = _tmp37_[0];
		_vala_assert (g_strcmp0 (_tmp38_, "foo") == 0, "bar.strv[0] == \"foo\"");
		bar_set_strv_v (bar, minim);
		_tmp39_ = bar_get_strv_v (bar);
		_tmp39__length1 = _vala_array_length (_tmp39_);
		_tmp40_ = _tmp39_;
		_tmp40__length1 = _tmp39__length1;
		_tmp41_ = _tmp40_[1];
		_vala_assert (g_strcmp0 (_tmp41_, "bar") == 0, "bar.strv_v[1] == \"bar\"");
		g_object_get (G_TYPE_CHECK_INSTANCE_CAST (bar, G_TYPE_OBJECT, GObject), "array", &_tmp42_, NULL);
		res = _tmp42_;
		res_length1 = -1;
		_res_size_ = res_length1;
		_tmp43_ = res;
		_tmp43__length1 = res_length1;
		_tmp44_ = _tmp43_[0];
		_vala_assert ((*_tmp44_).i == 23, "res[0].i == 23");
		g_object_get (G_TYPE_CHECK_INSTANCE_CAST (bar, G_TYPE_OBJECT, GObject), "array-v", &_tmp45_, NULL);
		res = _tmp45_;
		res_length1 = -1;
		_res_size_ = res_length1;
		_tmp46_ = res;
		_tmp46__length1 = res_length1;
		_tmp47_ = _tmp46_[1];
		_vala_assert ((*_tmp47_).i == 42, "res[1].i == 42");
		g_object_get (G_TYPE_CHECK_INSTANCE_CAST (bar, G_TYPE_OBJECT, GObject), "strv", &_tmp48_, NULL);
		strv = _tmp48_;
		strv_length1 = -1;
		_strv_size_ = strv_length1;
		_tmp49_ = strv;
		_tmp49__length1 = strv_length1;
		_tmp50_ = _tmp49_[0];
		_vala_assert (g_strcmp0 (_tmp50_, "foo") == 0, "strv[0] == \"foo\"");
		g_object_get (G_TYPE_CHECK_INSTANCE_CAST (bar, G_TYPE_OBJECT, GObject), "strv-v", &_tmp51_, NULL);
		strv = _tmp51_;
		strv_length1 = -1;
		_strv_size_ = strv_length1;
		_tmp52_ = strv;
		_tmp52__length1 = strv_length1;
		_tmp53_ = _tmp52_[1];
		_vala_assert (g_strcmp0 (_tmp53_, "bar") == 0, "strv[1] == \"bar\"");
		_g_object_unref0 (bar);
	}
	minim = (_vala_array_free (minim, minim_length1, (GDestroyNotify) g_free), NULL);
	manam = (_vala_array_free (manam, manam_length1, (GDestroyNotify) manam_free), NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static gssize
_vala_array_length (gpointer array)
{
	gssize length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}

