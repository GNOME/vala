/* objects_signals_delegate.c generated by valac, the Vala compiler
 * generated from objects_signals_delegate.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef gchar* (*FooFunc) (Foo* foo, const gchar* s, gpointer user_data);
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
enum  {
	FOO_TEST_SIGNAL,
	FOO_NUM_SIGNALS
};
static guint foo_signals[FOO_NUM_SIGNALS] = {0};

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
enum  {
	BAR_TEST_SIGNAL,
	BAR_NUM_SIGNALS
};
static guint bar_signals[BAR_NUM_SIGNALS] = {0};
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
};

struct _BarPrivate {
	gint i;
};

static gpointer foo_parent_class = NULL;
static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN void foo_add (Foo* self,
              FooFunc func,
              gpointer func_target);
VALA_EXTERN void foo_add_owned (Foo* self,
                    FooFunc func,
                    gpointer func_target,
                    GDestroyNotify func_target_destroy_notify);
VALA_EXTERN void foo_add_remove (Foo* self,
                     FooFunc func,
                     gpointer func_target);
VALA_EXTERN void foo_add_remove_owned (Foo* self,
                           FooFunc func,
                           gpointer func_target,
                           GDestroyNotify func_target_destroy_notify);
VALA_EXTERN void foo_invoke_test (Foo* self);
VALA_EXTERN void foo_invoke_test_empty (Foo* self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void g_cclosure_user_marshal_STRING__STRING (GClosure * closure,
                                             GValue * return_value,
                                             guint n_param_values,
                                             const GValue * param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (Foo* foo);
VALA_EXTERN Bar* bar_construct (GType object_type,
                    Foo* foo);
static gchar* bar_instance_callback (Bar* self,
                              Foo* foo,
                              const gchar* s);
static gchar* _bar_instance_callback_foo_func (Foo* foo,
                                        const gchar* s,
                                        gpointer self);
VALA_EXTERN Bar* bar_new_owned (Foo* foo);
VALA_EXTERN Bar* bar_construct_owned (GType object_type,
                          Foo* foo);
VALA_EXTERN Bar* bar_new_remove (Foo* foo);
VALA_EXTERN Bar* bar_construct_remove (GType object_type,
                           Foo* foo);
VALA_EXTERN Bar* bar_new_remove_owned (Foo* foo);
VALA_EXTERN Bar* bar_construct_remove_owned (GType object_type,
                                 Foo* foo);
static void bar_finalize (GObject * obj);
static GType bar_get_type_once (void);
VALA_EXTERN gchar* callback_static (Foo* foo,
                        const gchar* s);
static void _vala_main (void);

void
foo_add (Foo* self,
         FooFunc func,
         gpointer func_target)
{
	g_return_if_fail (IS_FOO (self));
	g_signal_connect (self, "test", (GCallback) func, func_target);
}

void
foo_add_owned (Foo* self,
               FooFunc func,
               gpointer func_target,
               GDestroyNotify func_target_destroy_notify)
{
	g_return_if_fail (IS_FOO (self));
	g_signal_connect_data (self, "test", (GCallback) func, func_target, (GClosureNotify) NULL, 0);
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
}

void
foo_add_remove (Foo* self,
                FooFunc func,
                gpointer func_target)
{
	guint _tmp0_;
	g_return_if_fail (IS_FOO (self));
	g_signal_connect (self, "test", (GCallback) func, func_target);
	g_signal_parse_name ("test", TYPE_FOO, &_tmp0_, NULL, FALSE);
	g_signal_handlers_disconnect_matched (self, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, 0, NULL, (GCallback) func, func_target);
}

void
foo_add_remove_owned (Foo* self,
                      FooFunc func,
                      gpointer func_target,
                      GDestroyNotify func_target_destroy_notify)
{
	guint _tmp0_;
	g_return_if_fail (IS_FOO (self));
	g_signal_connect_data (self, "test", (GCallback) func, func_target, (GClosureNotify) NULL, 0);
	g_signal_parse_name ("test", TYPE_FOO, &_tmp0_, NULL, FALSE);
	g_signal_handlers_disconnect_matched (self, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, 0, NULL, (GCallback) func, func_target);
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
}

void
foo_invoke_test (Foo* self)
{
	gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
	g_return_if_fail (IS_FOO (self));
	g_signal_emit (self, foo_signals[FOO_TEST_SIGNAL], 0, "bar", &_tmp0_);
	_tmp1_ = _tmp0_;
	_vala_assert (g_strcmp0 (_tmp1_, "foo") == 0, "test (\"bar\") == \"foo\"");
	_g_free0 (_tmp1_);
}

void
foo_invoke_test_empty (Foo* self)
{
	gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
	g_return_if_fail (IS_FOO (self));
	g_signal_emit (self, foo_signals[FOO_TEST_SIGNAL], 0, "bar", &_tmp0_);
	_tmp1_ = _tmp0_;
	_vala_assert (_tmp1_ == NULL, "test (\"bar\") == null");
	_g_free0 (_tmp1_);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
g_cclosure_user_marshal_STRING__STRING (GClosure * closure,
                                        GValue * return_value,
                                        guint n_param_values,
                                        const GValue * param_values,
                                        gpointer invocation_hint,
                                        gpointer marshal_data)
{
	typedef const char* (*GMarshalFunc_STRING__STRING) (gpointer data1, const char* arg_1, gpointer data2);
	register GMarshalFunc_STRING__STRING callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	const char* v_return;
	cc = (GCClosure *) closure;
	g_return_if_fail (return_value != NULL);
	g_return_if_fail (n_param_values == 2);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_STRING__STRING) (marshal_data ? marshal_data : cc->callback);
	v_return = callback (data1, g_value_get_string (param_values + 1), data2);
	g_value_take_string (return_value, v_return);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	foo_signals[FOO_TEST_SIGNAL] = g_signal_new ("test", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_STRING__STRING, G_TYPE_STRING, 1, G_TYPE_STRING);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

static gchar*
_bar_instance_callback_foo_func (Foo* foo,
                                 const gchar* s,
                                 gpointer self)
{
	gchar* result;
	result = bar_instance_callback ((Bar*) self, foo, s);
	return result;
}

Bar*
bar_construct (GType object_type,
               Foo* foo)
{
	Bar * self = NULL;
	g_return_val_if_fail (IS_FOO (foo), NULL);
	self = (Bar*) g_object_new (object_type, NULL);
	self->priv->i = 42;
	foo_add (foo, _bar_instance_callback_foo_func, self);
	return self;
}

Bar*
bar_new (Foo* foo)
{
	return bar_construct (TYPE_BAR, foo);
}

Bar*
bar_construct_owned (GType object_type,
                     Foo* foo)
{
	Bar * self = NULL;
	g_return_val_if_fail (IS_FOO (foo), NULL);
	self = (Bar*) g_object_new (object_type, NULL);
	self->priv->i = 42;
	foo_add_owned (foo, _bar_instance_callback_foo_func, g_object_ref (self), g_object_unref);
	return self;
}

Bar*
bar_new_owned (Foo* foo)
{
	return bar_construct_owned (TYPE_BAR, foo);
}

Bar*
bar_construct_remove (GType object_type,
                      Foo* foo)
{
	Bar * self = NULL;
	g_return_val_if_fail (IS_FOO (foo), NULL);
	self = (Bar*) g_object_new (object_type, NULL);
	self->priv->i = 42;
	foo_add_remove (foo, _bar_instance_callback_foo_func, self);
	return self;
}

Bar*
bar_new_remove (Foo* foo)
{
	return bar_construct_remove (TYPE_BAR, foo);
}

Bar*
bar_construct_remove_owned (GType object_type,
                            Foo* foo)
{
	Bar * self = NULL;
	g_return_val_if_fail (IS_FOO (foo), NULL);
	self = (Bar*) g_object_new (object_type, NULL);
	self->priv->i = 42;
	foo_add_remove_owned (foo, _bar_instance_callback_foo_func, g_object_ref (self), g_object_unref);
	return self;
}

Bar*
bar_new_remove_owned (Foo* foo)
{
	return bar_construct_remove_owned (TYPE_BAR, foo);
}

static gchar*
bar_instance_callback (Bar* self,
                       Foo* foo,
                       const gchar* s)
{
	gchar* _tmp0_;
	gchar* result;
	g_return_val_if_fail (IS_BAR (self), NULL);
	g_return_val_if_fail (IS_FOO (foo), NULL);
	g_return_val_if_fail (s != NULL, NULL);
	_vala_assert (IS_FOO (foo), "foo is Foo");
	_vala_assert (IS_BAR (self), "this is Bar");
	_vala_assert (g_strcmp0 (s, "bar") == 0, "s == \"bar\"");
	_vala_assert (self->priv->i == 42, "i == 42");
	_tmp0_ = g_strdup ("foo");
	result = _tmp0_;
	return result;
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
	bar_signals[BAR_TEST_SIGNAL] = g_signal_new ("test", TYPE_BAR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_STRING__STRING, G_TYPE_STRING, 1, G_TYPE_STRING);
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
}

static void
bar_finalize (GObject * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	G_OBJECT_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

gchar*
callback_static (Foo* foo,
                 const gchar* s)
{
	gchar* _tmp0_;
	gchar* result;
	g_return_val_if_fail (IS_FOO (foo), NULL);
	g_return_val_if_fail (s != NULL, NULL);
	_vala_assert (IS_FOO (foo), "foo is Foo");
	_vala_assert (g_strcmp0 (s, "bar") == 0, "s == \"bar\"");
	_tmp0_ = g_strdup ("foo");
	result = _tmp0_;
	return result;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Bar* bar = NULL;
	Foo* _tmp0_;
	Foo* _tmp1_;
	Foo* _tmp2_;
	Foo* _tmp3_;
	Foo* _tmp4_;
	Foo* _tmp5_;
	Foo* _tmp6_;
	Foo* _tmp7_;
	Foo* _tmp8_;
	Foo* _tmp9_;
	Foo* _tmp10_;
	Foo* _tmp11_;
	Foo* _tmp12_;
	Foo* _tmp13_;
	Bar* _tmp14_;
	Foo* _tmp15_;
	Foo* _tmp16_;
	Foo* _tmp17_;
	Bar* _tmp18_;
	Foo* _tmp19_;
	Foo* _tmp20_;
	Foo* _tmp21_;
	Bar* _tmp22_;
	Foo* _tmp23_;
	Foo* _tmp24_;
	Foo* _tmp25_;
	Bar* _tmp26_;
	Foo* _tmp27_;
	_tmp0_ = foo_new ();
	_g_object_unref0 (foo);
	foo = _tmp0_;
	_tmp1_ = foo;
	foo_add (_tmp1_, (FooFunc) callback_static, NULL);
	_tmp2_ = foo;
	foo_invoke_test (_tmp2_);
	_tmp3_ = foo_new ();
	_g_object_unref0 (foo);
	foo = _tmp3_;
	_tmp4_ = foo;
	foo_add_owned (_tmp4_, (FooFunc) callback_static, NULL, NULL);
	_tmp5_ = foo;
	foo_invoke_test (_tmp5_);
	_tmp6_ = foo_new ();
	_g_object_unref0 (foo);
	foo = _tmp6_;
	_tmp7_ = foo;
	foo_add_remove (_tmp7_, (FooFunc) callback_static, NULL);
	_tmp8_ = foo;
	foo_invoke_test_empty (_tmp8_);
	_tmp9_ = foo_new ();
	_g_object_unref0 (foo);
	foo = _tmp9_;
	_tmp10_ = foo;
	foo_add_remove_owned (_tmp10_, (FooFunc) callback_static, NULL, NULL);
	_tmp11_ = foo;
	foo_invoke_test_empty (_tmp11_);
	_tmp12_ = foo_new ();
	_g_object_unref0 (foo);
	foo = _tmp12_;
	_tmp13_ = foo;
	_tmp14_ = bar_new (_tmp13_);
	_g_object_unref0 (bar);
	bar = _tmp14_;
	_tmp15_ = foo;
	foo_invoke_test (_tmp15_);
	_tmp16_ = foo_new ();
	_g_object_unref0 (foo);
	foo = _tmp16_;
	_tmp17_ = foo;
	_tmp18_ = bar_new_owned (_tmp17_);
	_g_object_unref0 (bar);
	bar = _tmp18_;
	_tmp19_ = foo;
	foo_invoke_test (_tmp19_);
	_tmp20_ = foo_new ();
	_g_object_unref0 (foo);
	foo = _tmp20_;
	_tmp21_ = foo;
	_tmp22_ = bar_new_remove (_tmp21_);
	_g_object_unref0 (bar);
	bar = _tmp22_;
	_tmp23_ = foo;
	foo_invoke_test_empty (_tmp23_);
	_tmp24_ = foo_new ();
	_g_object_unref0 (foo);
	foo = _tmp24_;
	_tmp25_ = foo;
	_tmp26_ = bar_new_remove_owned (_tmp25_);
	_g_object_unref0 (bar);
	bar = _tmp26_;
	_tmp27_ = foo;
	foo_invoke_test_empty (_tmp27_);
	_g_object_unref0 (bar);
	_g_object_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

