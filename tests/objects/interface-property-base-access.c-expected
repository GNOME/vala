/* objects_interface_property_base_access.c generated by valac, the Vala compiler
 * generated from objects_interface_property_base_access.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>
#include <stdlib.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_MANAM (manam_get_type ())
typedef struct _Manam Manam;

#define TYPE_IFOO (ifoo_get_type ())
#define IFOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IFOO, IFoo))
#define IS_IFOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IFOO))
#define IFOO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IFOO, IFooIface))

typedef struct _IFoo IFoo;
typedef struct _IFooIface IFooIface;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ParamSpecBar ParamSpecBar;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
#define _bar_unref0(var) ((var == NULL) ? NULL : (var = (bar_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Manam {
	gint i;
};

struct _IFooIface {
	GTypeInterface parent_iface;
	const gchar* (*get_foo) (IFoo* self);
	void (*set_foo) (IFoo* self, const gchar* value);
	void (*get_manam) (IFoo* self, Manam * result);
	void (*set_manam) (IFoo* self, Manam * value);
};

struct _Bar {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BarPrivate * priv;
};

struct _BarClass {
	GTypeClass parent_class;
	void (*finalize) (Bar *self);
};

struct _BarPrivate {
	gchar* _foo;
	Manam _manam;
};

struct _ParamSpecBar {
	GParamSpec parent_instance;
};

struct _Foo {
	Bar parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	BarClass parent_class;
};

static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;
static IFooIface * bar_ifoo_parent_iface = NULL;
static gpointer foo_parent_class = NULL;

VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Manam* manam_dup (const Manam* self);
VALA_EXTERN void manam_free (Manam* self);
VALA_EXTERN GType ifoo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN const gchar* ifoo_get_foo (IFoo* self);
VALA_EXTERN void ifoo_set_foo (IFoo* self,
                   const gchar* value);
VALA_EXTERN void ifoo_get_manam (IFoo* self,
                     Manam * result);
VALA_EXTERN void ifoo_set_manam (IFoo* self,
                     Manam * value);
static GType ifoo_get_type_once (void);
VALA_EXTERN gpointer bar_ref (gpointer instance);
VALA_EXTERN void bar_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_bar (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_bar (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_bar (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_bar (const GValue* value);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, bar_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static void bar_finalize (Bar * obj);
static GType bar_get_type_once (void);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, bar_unref)
VALA_EXTERN gchar* foo_bar (Foo* self,
                const gchar* s);
VALA_EXTERN void foo_baz (Foo* self,
              Manam* m,
              Manam* result);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static GType foo_get_type_once (void);
static void _vala_main (void);
static gboolean _manam_equal (const Manam * s1,
                       const Manam * s2);

Manam*
manam_dup (const Manam* self)
{
	Manam* dup;
	dup = g_new0 (Manam, 1);
	memcpy (dup, self, sizeof (Manam));
	return dup;
}

void
manam_free (Manam* self)
{
	g_free (self);
}

static GType
manam_get_type_once (void)
{
	GType manam_type_id;
	manam_type_id = g_boxed_type_register_static ("Manam", (GBoxedCopyFunc) manam_dup, (GBoxedFreeFunc) manam_free);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

const gchar*
ifoo_get_foo (IFoo* self)
{
	IFooIface* _iface_;
	g_return_val_if_fail (IS_IFOO (self), NULL);
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->get_foo) {
		return _iface_->get_foo (self);
	}
	return NULL;
}

void
ifoo_set_foo (IFoo* self,
              const gchar* value)
{
	IFooIface* _iface_;
	g_return_if_fail (IS_IFOO (self));
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->set_foo) {
		_iface_->set_foo (self, value);
	}
}

void
ifoo_get_manam (IFoo* self,
                Manam * result)
{
	IFooIface* _iface_;
	g_return_if_fail (IS_IFOO (self));
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->get_manam) {
		_iface_->get_manam (self, result);
	}
	return;
}

void
ifoo_set_manam (IFoo* self,
                Manam * value)
{
	IFooIface* _iface_;
	g_return_if_fail (IS_IFOO (self));
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->set_manam) {
		_iface_->set_manam (self, value);
	}
}

static void
ifoo_default_init (IFooIface * iface,
                   gpointer iface_data)
{
}

static GType
ifoo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (IFooIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) ifoo_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType ifoo_type_id;
	ifoo_type_id = g_type_register_static (G_TYPE_INTERFACE, "IFoo", &g_define_type_info, 0);
	return ifoo_type_id;
}

GType
ifoo_get_type (void)
{
	static volatile gsize ifoo_type_id__once = 0;
	if (g_once_init_enter (&ifoo_type_id__once)) {
		GType ifoo_type_id;
		ifoo_type_id = ifoo_get_type_once ();
		g_once_init_leave (&ifoo_type_id__once, ifoo_type_id);
	}
	return ifoo_type_id__once;
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

Bar*
bar_construct (GType object_type)
{
	Bar* self = NULL;
	self = (Bar*) g_type_create_instance (object_type);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static const gchar*
bar_real_get_foo (IFoo* base)
{
	const gchar* result;
	Bar* self;
	const gchar* _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = self->priv->_foo;
	result = _tmp0_;
	return result;
}

static void
bar_real_set_foo (IFoo* base,
                  const gchar* value)
{
	Bar* self;
	gchar* _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_foo);
	self->priv->_foo = _tmp0_;
}

static void
bar_real_get_manam (IFoo* base,
                    Manam * result)
{
	Bar* self;
	Manam _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = self->priv->_manam;
	*result = _tmp0_;
	return;
}

static void
bar_real_set_manam (IFoo* base,
                    Manam * value)
{
	Bar* self;
	Manam _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = *value;
	self->priv->_manam = _tmp0_;
}

static void
value_bar_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_bar_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		bar_unref (value->data[0].v_pointer);
	}
}

static void
value_bar_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = bar_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_bar_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_bar_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Bar * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = bar_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_bar_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Bar ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = bar_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_bar (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecBar* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_BAR), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_bar (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR), NULL);
	return value->data[0].v_pointer;
}

void
value_set_bar (GValue* value,
               gpointer v_object)
{
	Bar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		bar_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bar_unref (old);
	}
}

void
value_take_bar (GValue* value,
                gpointer v_object)
{
	Bar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bar_unref (old);
	}
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	((BarClass *) klass)->finalize = bar_finalize;
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
}

static void
bar_ifoo_interface_init (IFooIface * iface,
                         gpointer iface_data)
{
	bar_ifoo_parent_iface = g_type_interface_peek_parent (iface);
	iface->get_foo = bar_real_get_foo;
	iface->set_foo = bar_real_set_foo;
	iface->get_manam = bar_real_get_manam;
	iface->set_manam = bar_real_set_manam;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
	self->ref_count = 1;
}

static void
bar_finalize (Bar * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	g_signal_handlers_destroy (self);
	_g_free0 (self->priv->_foo);
}

static GType
bar_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_bar_init, value_bar_free_value, value_bar_copy_value, value_bar_peek_pointer, "p", value_bar_collect_value, "p", value_bar_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	static const GInterfaceInfo ifoo_info = { (GInterfaceInitFunc) bar_ifoo_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType bar_type_id;
	bar_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Bar", &g_define_type_info, &g_define_type_fundamental_info, 0);
	g_type_add_interface_static (bar_type_id, TYPE_IFOO, &ifoo_info);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

gpointer
bar_ref (gpointer instance)
{
	Bar * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
bar_unref (gpointer instance)
{
	Bar * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		BAR_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

gchar*
foo_bar (Foo* self,
         const gchar* s)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* result;
	g_return_val_if_fail (IS_FOO (self), NULL);
	g_return_val_if_fail (s != NULL, NULL);
	IFOO_GET_INTERFACE (self)->set_foo (G_TYPE_CHECK_INSTANCE_CAST (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BAR, Bar), TYPE_IFOO, IFoo), s);
	_tmp0_ = IFOO_GET_INTERFACE (self)->get_foo (G_TYPE_CHECK_INSTANCE_CAST (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BAR, Bar), TYPE_IFOO, IFoo));
	_tmp1_ = g_strdup (_tmp0_);
	result = _tmp1_;
	return result;
}

void
foo_baz (Foo* self,
         Manam* m,
         Manam* result)
{
	Manam _tmp0_;
	Manam _tmp1_;
	Manam _tmp2_;
	g_return_if_fail (IS_FOO (self));
	g_return_if_fail (m != NULL);
	_tmp0_ = *m;
	IFOO_GET_INTERFACE (self)->set_manam (G_TYPE_CHECK_INSTANCE_CAST (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BAR, Bar), TYPE_IFOO, IFoo), &_tmp0_);
	IFOO_GET_INTERFACE (self)->get_manam (G_TYPE_CHECK_INSTANCE_CAST (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BAR, Bar), TYPE_IFOO, IFoo), &_tmp1_);
	_tmp2_ = _tmp1_;
	*result = _tmp2_;
	return;
}

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) bar_construct (object_type);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (TYPE_BAR, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gboolean
_manam_equal (const Manam * s1,
              const Manam * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (s1->i != s2->i) {
		return FALSE;
	}
	return TRUE;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	Manam manam = {0};
	Manam _tmp3_ = {0};
	Manam _tmp4_;
	Manam _tmp5_ = {0};
	Manam _tmp6_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_vala_assert (IS_IFOO (foo), "foo is IFoo");
	_tmp1_ = foo_bar (foo, "foo");
	_tmp2_ = _tmp1_;
	_vala_assert (g_strcmp0 (_tmp2_, "foo") == 0, "foo.bar (\"foo\") == \"foo\"");
	_g_free0 (_tmp2_);
	_tmp3_.i = 42;
	manam = _tmp3_;
	_tmp4_ = manam;
	foo_baz (foo, &_tmp4_, &_tmp5_);
	_tmp6_ = manam;
	_vala_assert (_manam_equal (&_tmp5_, &_tmp6_) == TRUE, "foo.baz (manam) == manam");
	_bar_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

