/* objects_bug620675.c generated by valac, the Vala compiler
 * generated from objects_bug620675.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
#define _g_ptr_array_unref0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ParamSpecFoo ParamSpecFoo;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
	GPtrArray* paramlist;
	gboolean used_test;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

struct _Bar {
	Foo parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	FooClass parent_class;
};

static gpointer foo_parent_class = NULL;
static gpointer bar_parent_class = NULL;

VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN Foo* foo_new (const gchar* msg,
              GError** error,
              ...);
VALA_EXTERN Foo* foo_construct (GType object_type,
                    const gchar* msg,
                    GError** error,
                    ...);
VALA_EXTERN Foo* foo_constructv (GType object_type,
                     const gchar* msg,
                     GError** error,
                     va_list _vala_va_list);
static void _g_free0_ (gpointer var);
VALA_EXTERN Foo* foo_new_test (const gchar* msg);
VALA_EXTERN Foo* foo_construct_test (GType object_type,
                         const gchar* msg);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, foo_unref)
VALA_EXTERN Bar* bar_new (const gchar* text,
              GError** error);
VALA_EXTERN Bar* bar_construct (GType object_type,
                    const gchar* text,
                    GError** error);
VALA_EXTERN Bar* bar_new_other (gint num,
                    ...);
VALA_EXTERN Bar* bar_construct_other (GType object_type,
                          gint num,
                          ...);
VALA_EXTERN Bar* bar_constructv_other (GType object_type,
                           gint num,
                           va_list _vala_va_list);
static GType bar_get_type_once (void);
static void _vala_main (void);

static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}

Foo*
foo_constructv (GType object_type,
                const gchar* msg,
                GError** error,
                va_list _vala_va_list)
{
	Foo* self = NULL;
	gchar* arg = NULL;
	gchar* _tmp0_;
	va_list args = {0};
	GPtrArray* _tmp1_;
	g_return_val_if_fail (msg != NULL, NULL);
	self = (Foo*) g_type_create_instance (object_type);
	_tmp0_ = g_strdup (msg);
	arg = _tmp0_;
	va_copy (args, _vala_va_list);
	_tmp1_ = g_ptr_array_new_full ((guint) 0, _g_free0_);
	_g_ptr_array_unref0 (self->paramlist);
	self->paramlist = _tmp1_;
	while (TRUE) {
		const gchar* _tmp2_;
		GPtrArray* _tmp3_;
		const gchar* _tmp4_;
		gchar* _tmp5_;
		const gchar* _tmp6_;
		gchar* _tmp7_;
		_tmp2_ = arg;
		if (!(_tmp2_ != NULL)) {
			break;
		}
		_tmp3_ = self->paramlist;
		_tmp4_ = arg;
		_tmp5_ = g_strdup (_tmp4_);
		g_ptr_array_add (_tmp3_, _tmp5_);
		_tmp6_ = va_arg (args, gchar*);
		_tmp7_ = g_strdup (_tmp6_);
		_g_free0 (arg);
		arg = _tmp7_;
	}
	self->used_test = FALSE;
	va_end (args);
	_g_free0 (arg);
	return self;
}

Foo*
foo_new (const gchar* msg,
         GError** error,
         ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, error);
	return foo_constructv (TYPE_FOO, msg, error, _vala_va_list_obj);
}

Foo*
foo_construct (GType object_type,
               const gchar* msg,
               GError** error,
               ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, error);
	return foo_constructv (object_type, msg, error, _vala_va_list_obj);
}

Foo*
foo_construct_test (GType object_type,
                    const gchar* msg)
{
	Foo* self = NULL;
	GPtrArray* _tmp0_;
	GPtrArray* _tmp1_;
	gchar* _tmp2_;
	g_return_val_if_fail (msg != NULL, NULL);
	self = (Foo*) g_type_create_instance (object_type);
	_tmp0_ = g_ptr_array_new_full ((guint) 0, _g_free0_);
	_g_ptr_array_unref0 (self->paramlist);
	self->paramlist = _tmp0_;
	_tmp1_ = self->paramlist;
	_tmp2_ = g_strdup (msg);
	g_ptr_array_add (_tmp1_, _tmp2_);
	self->used_test = TRUE;
	return self;
}

Foo*
foo_new_test (const gchar* msg)
{
	return foo_construct_test (TYPE_FOO, msg);
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
	_g_ptr_array_unref0 (self->paramlist);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

Bar*
bar_construct (GType object_type,
               const gchar* text,
               GError** error)
{
	Bar* self = NULL;
	GError* _inner_error0_ = NULL;
	g_return_val_if_fail (text != NULL, NULL);
	self = (Bar*) foo_construct (object_type, text, &_inner_error0_, "bye", NULL);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_propagate_error (error, _inner_error0_);
		_foo_unref0 (self);
		return NULL;
	}
	return self;
}

Bar*
bar_new (const gchar* text,
         GError** error)
{
	return bar_construct (TYPE_BAR, text, error);
}

Bar*
bar_constructv_other (GType object_type,
                      gint num,
                      va_list _vala_va_list)
{
	Bar* self = NULL;
	GError* _inner_error0_ = NULL;
	{
		self = (Bar*) foo_construct (object_type, "hey", &_inner_error0_, NULL);
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		g_clear_error (&_inner_error0_);
	}
	__finally0:
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return NULL;
	}
	return self;
}

Bar*
bar_new_other (gint num,
               ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, num);
	return bar_constructv_other (TYPE_BAR, num, _vala_va_list_obj);
}

Bar*
bar_construct_other (GType object_type,
                     gint num,
                     ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, num);
	return bar_constructv_other (object_type, num, _vala_va_list_obj);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (TYPE_FOO, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static gint
vala_g_ptr_array_get_length (GPtrArray* self)
{
	gint result;
	g_return_val_if_fail (self != NULL, 0);
	result = (gint) self->len;
	return result;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_ = NULL;
	Foo* _tmp1_;
	Foo* _tmp2_;
	Foo* _tmp3_;
	Foo* _tmp4_;
	GPtrArray* _tmp5_;
	gint _tmp6_;
	gint _tmp7_;
	Foo* _tmp8_;
	GPtrArray* _tmp9_;
	gconstpointer _tmp10_;
	Foo* _tmp11_;
	GPtrArray* _tmp12_;
	gconstpointer _tmp13_;
	Foo* _tmp14_;
	GPtrArray* _tmp15_;
	gconstpointer _tmp16_;
	Foo* _tmp17_;
	Foo* _tmp18_;
	Foo* _tmp19_;
	GPtrArray* _tmp20_;
	gint _tmp21_;
	gint _tmp22_;
	Foo* _tmp23_;
	GPtrArray* _tmp24_;
	gconstpointer _tmp25_;
	Bar* _tmp26_ = NULL;
	Bar* _tmp27_;
	Bar* _tmp28_;
	Foo* _tmp29_;
	Foo* _tmp30_;
	GPtrArray* _tmp31_;
	gint _tmp32_;
	gint _tmp33_;
	Foo* _tmp34_;
	GPtrArray* _tmp35_;
	gconstpointer _tmp36_;
	Foo* _tmp37_;
	GPtrArray* _tmp38_;
	gconstpointer _tmp39_;
	Bar* _tmp40_;
	Foo* _tmp41_;
	Foo* _tmp42_;
	GPtrArray* _tmp43_;
	gint _tmp44_;
	gint _tmp45_;
	Foo* _tmp46_;
	GPtrArray* _tmp47_;
	gconstpointer _tmp48_;
	GError* _inner_error0_ = NULL;
	_tmp1_ = foo_new ("one", &_inner_error0_, "two", "three", NULL);
	_tmp0_ = _tmp1_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_foo_unref0 (foo);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp2_ = _tmp0_;
	_tmp0_ = NULL;
	_foo_unref0 (foo);
	foo = _tmp2_;
	_tmp3_ = foo;
	_vala_assert (!_tmp3_->used_test, "!foo.used_test");
	_tmp4_ = foo;
	_tmp5_ = _tmp4_->paramlist;
	_tmp6_ = vala_g_ptr_array_get_length (_tmp5_);
	_tmp7_ = _tmp6_;
	_vala_assert (_tmp7_ == 3, "foo.paramlist.length == 3");
	_tmp8_ = foo;
	_tmp9_ = _tmp8_->paramlist;
	_tmp10_ = g_ptr_array_index (_tmp9_, (guint) 0);
	_vala_assert (g_strcmp0 ((const gchar*) _tmp10_, "one") == 0, "foo.paramlist[0] == \"one\"");
	_tmp11_ = foo;
	_tmp12_ = _tmp11_->paramlist;
	_tmp13_ = g_ptr_array_index (_tmp12_, (guint) 1);
	_vala_assert (g_strcmp0 ((const gchar*) _tmp13_, "two") == 0, "foo.paramlist[1] == \"two\"");
	_tmp14_ = foo;
	_tmp15_ = _tmp14_->paramlist;
	_tmp16_ = g_ptr_array_index (_tmp15_, (guint) 2);
	_vala_assert (g_strcmp0 ((const gchar*) _tmp16_, "three") == 0, "foo.paramlist[2] == \"three\"");
	_tmp17_ = foo_new_test ("meh");
	_foo_unref0 (foo);
	foo = _tmp17_;
	_tmp18_ = foo;
	_vala_assert (_tmp18_->used_test, "foo.used_test");
	_tmp19_ = foo;
	_tmp20_ = _tmp19_->paramlist;
	_tmp21_ = vala_g_ptr_array_get_length (_tmp20_);
	_tmp22_ = _tmp21_;
	_vala_assert (_tmp22_ == 1, "foo.paramlist.length == 1");
	_tmp23_ = foo;
	_tmp24_ = _tmp23_->paramlist;
	_tmp25_ = g_ptr_array_index (_tmp24_, (guint) 0);
	_vala_assert (g_strcmp0 ((const gchar*) _tmp25_, "meh") == 0, "foo.paramlist[0] == \"meh\"");
	_tmp27_ = bar_new ("hello", &_inner_error0_);
	_tmp26_ = _tmp27_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_foo_unref0 (_tmp0_);
		_foo_unref0 (foo);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp28_ = _tmp26_;
	_tmp26_ = NULL;
	_foo_unref0 (foo);
	foo = G_TYPE_CHECK_INSTANCE_CAST (_tmp28_, TYPE_FOO, Foo);
	_tmp29_ = foo;
	_vala_assert (!_tmp29_->used_test, "!foo.used_test");
	_tmp30_ = foo;
	_tmp31_ = _tmp30_->paramlist;
	_tmp32_ = vala_g_ptr_array_get_length (_tmp31_);
	_tmp33_ = _tmp32_;
	_vala_assert (_tmp33_ == 2, "foo.paramlist.length == 2");
	_tmp34_ = foo;
	_tmp35_ = _tmp34_->paramlist;
	_tmp36_ = g_ptr_array_index (_tmp35_, (guint) 0);
	_vala_assert (g_strcmp0 ((const gchar*) _tmp36_, "hello") == 0, "foo.paramlist[0] == \"hello\"");
	_tmp37_ = foo;
	_tmp38_ = _tmp37_->paramlist;
	_tmp39_ = g_ptr_array_index (_tmp38_, (guint) 1);
	_vala_assert (g_strcmp0 ((const gchar*) _tmp39_, "bye") == 0, "foo.paramlist[1] == \"bye\"");
	_tmp40_ = bar_new_other (1, 2, 3, NULL);
	_foo_unref0 (foo);
	foo = G_TYPE_CHECK_INSTANCE_CAST (_tmp40_, TYPE_FOO, Foo);
	_tmp41_ = foo;
	_vala_assert (!_tmp41_->used_test, "!foo.used_test");
	_tmp42_ = foo;
	_tmp43_ = _tmp42_->paramlist;
	_tmp44_ = vala_g_ptr_array_get_length (_tmp43_);
	_tmp45_ = _tmp44_;
	_vala_assert (_tmp45_ == 1, "foo.paramlist.length == 1");
	_tmp46_ = foo;
	_tmp47_ = _tmp46_->paramlist;
	_tmp48_ = g_ptr_array_index (_tmp47_, (guint) 0);
	_vala_assert (g_strcmp0 ((const gchar*) _tmp48_, "hey") == 0, "foo.paramlist[0] == \"hey\"");
	_foo_unref0 (_tmp26_);
	_foo_unref0 (_tmp0_);
	_foo_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

