/* objects_bug566909.c generated by valac, the Vala compiler
 * generated from objects_bug566909.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define MAMAN_TYPE_FOO (maman_foo_get_type ())
#define MAMAN_FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAMAN_TYPE_FOO, MamanFoo))
#define MAMAN_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAMAN_TYPE_FOO, MamanFooClass))
#define MAMAN_IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAMAN_TYPE_FOO))
#define MAMAN_IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAMAN_TYPE_FOO))
#define MAMAN_FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAMAN_TYPE_FOO, MamanFooClass))

typedef struct _MamanFoo MamanFoo;
typedef struct _MamanFooClass MamanFooClass;
typedef struct _MamanFooPrivate MamanFooPrivate;
enum  {
	MAMAN_FOO_0_PROPERTY,
	MAMAN_FOO_NUM_PROPERTIES
};
static GParamSpec* maman_foo_properties[MAMAN_FOO_NUM_PROPERTIES];
enum  {
	MAMAN_FOO_BAR_SIGNAL,
	MAMAN_FOO_NUM_SIGNALS
};
static guint maman_foo_signals[MAMAN_FOO_NUM_SIGNALS] = {0};
typedef struct _Block1Data Block1Data;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _MamanFoo {
	GObject parent_instance;
	MamanFooPrivate * priv;
};

struct _MamanFooClass {
	GObjectClass parent_class;
};

struct _Block1Data {
	int _ref_count_;
	gboolean detailed1;
	gboolean detailed2;
	gboolean detailed3;
};

static gpointer maman_foo_parent_class = NULL;

VALA_EXTERN GType maman_foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MamanFoo, g_object_unref)
VALA_EXTERN MamanFoo* maman_foo_new (void);
VALA_EXTERN MamanFoo* maman_foo_construct (GType object_type);
static GType maman_foo_get_type_once (void);
static void _vala_main (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void __vala_lambda0__maman_foo_bar (MamanFoo* _sender,
                                    gpointer self);
static void _vala_lambda1_ (Block1Data* _data1_);
static void __vala_lambda1__maman_foo_bar (MamanFoo* _sender,
                                    gpointer self);
static void _vala_lambda2_ (Block1Data* _data1_);
static void __vala_lambda2__maman_foo_bar (MamanFoo* _sender,
                                    gpointer self);

MamanFoo*
maman_foo_construct (GType object_type)
{
	MamanFoo * self = NULL;
	self = (MamanFoo*) g_object_new (object_type, NULL);
	return self;
}

MamanFoo*
maman_foo_new (void)
{
	return maman_foo_construct (MAMAN_TYPE_FOO);
}

static void
maman_foo_class_init (MamanFooClass * klass,
                      gpointer klass_data)
{
	maman_foo_parent_class = g_type_class_peek_parent (klass);
	maman_foo_signals[MAMAN_FOO_BAR_SIGNAL] = g_signal_new ("bar", MAMAN_TYPE_FOO, G_SIGNAL_RUN_LAST | G_SIGNAL_DETAILED, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}

static void
maman_foo_instance_init (MamanFoo * self,
                         gpointer klass)
{
}

static GType
maman_foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MamanFooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maman_foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MamanFoo), 0, (GInstanceInitFunc) maman_foo_instance_init, NULL };
	GType maman_foo_type_id;
	maman_foo_type_id = g_type_register_static (G_TYPE_OBJECT, "MamanFoo", &g_define_type_info, 0);
	return maman_foo_type_id;
}

GType
maman_foo_get_type (void)
{
	static volatile gsize maman_foo_type_id__once = 0;
	if (g_once_init_enter (&maman_foo_type_id__once)) {
		GType maman_foo_type_id;
		maman_foo_type_id = maman_foo_get_type_once ();
		g_once_init_leave (&maman_foo_type_id__once, maman_foo_type_id);
	}
	return maman_foo_type_id__once;
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	_data1_->detailed1 = TRUE;
}

static void
__vala_lambda0__maman_foo_bar (MamanFoo* _sender,
                               gpointer self)
{
	_vala_lambda0_ (self);
}

static void
_vala_lambda1_ (Block1Data* _data1_)
{
	_data1_->detailed2 = TRUE;
}

static void
__vala_lambda1__maman_foo_bar (MamanFoo* _sender,
                               gpointer self)
{
	_vala_lambda1_ (self);
}

static void
_vala_lambda2_ (Block1Data* _data1_)
{
	_data1_->detailed3 = TRUE;
}

static void
__vala_lambda2__maman_foo_bar (MamanFoo* _sender,
                               gpointer self)
{
	_vala_lambda2_ (self);
}

static void
_vala_main (void)
{
	Block1Data* _data1_;
	gchar* detail1 = NULL;
	gchar* _tmp0_;
	gchar* detail2 = NULL;
	gchar* _tmp1_;
	MamanFoo* foo = NULL;
	MamanFoo* _tmp2_;
	MamanFoo* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	MamanFoo* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	MamanFoo* _tmp9_;
	MamanFoo* _tmp10_;
	const gchar* _tmp11_;
	MamanFoo* _tmp12_;
	const gchar* _tmp13_;
	MamanFoo* _tmp14_;
	gboolean _tmp15_ = FALSE;
	gboolean _tmp16_ = FALSE;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->detailed1 = FALSE;
	_data1_->detailed2 = FALSE;
	_data1_->detailed3 = FALSE;
	_tmp0_ = g_strdup ("detail1");
	detail1 = _tmp0_;
	_tmp1_ = g_strdup ("detail2");
	detail2 = _tmp1_;
	_tmp2_ = maman_foo_new ();
	foo = _tmp2_;
	_tmp3_ = foo;
	_tmp4_ = detail1;
	_tmp5_ = g_strconcat ("bar::", _tmp4_, NULL);
	g_signal_connect_data (_tmp3_, _tmp5_, (GCallback) __vala_lambda0__maman_foo_bar, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
	_g_free0 (_tmp5_);
	_tmp6_ = foo;
	_tmp7_ = detail2;
	_tmp8_ = g_strconcat ("bar::", _tmp7_, NULL);
	g_signal_connect_data (_tmp6_, _tmp8_, (GCallback) __vala_lambda1__maman_foo_bar, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
	_g_free0 (_tmp8_);
	_tmp9_ = foo;
	g_signal_connect_data (_tmp9_, "bar::detail3", (GCallback) __vala_lambda2__maman_foo_bar, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
	_tmp10_ = foo;
	_tmp11_ = detail1;
	g_signal_emit (_tmp10_, maman_foo_signals[MAMAN_FOO_BAR_SIGNAL], g_quark_from_string (_tmp11_));
	_tmp12_ = foo;
	_tmp13_ = detail2;
	g_signal_emit (_tmp12_, maman_foo_signals[MAMAN_FOO_BAR_SIGNAL], g_quark_from_string (_tmp13_));
	_tmp14_ = foo;
	g_signal_emit (_tmp14_, maman_foo_signals[MAMAN_FOO_BAR_SIGNAL], g_quark_from_static_string ("detail3"));
	if (_data1_->detailed1) {
		_tmp16_ = _data1_->detailed2;
	} else {
		_tmp16_ = FALSE;
	}
	if (_tmp16_) {
		_tmp15_ = _data1_->detailed3;
	} else {
		_tmp15_ = FALSE;
	}
	_vala_assert (_tmp15_, "detailed1 && detailed2 && detailed3");
	_g_object_unref0 (foo);
	_g_free0 (detail2);
	_g_free0 (detail1);
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

