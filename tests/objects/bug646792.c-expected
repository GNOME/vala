/* objects_bug646792.c generated by valac, the Vala compiler
 * generated from objects_bug646792.vala, do not modify */

#include <glib-object.h>
#include <gobject/gvaluecollector.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_WRAPPER (wrapper_get_type ())
#define WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_WRAPPER, Wrapper))
#define WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_WRAPPER, WrapperClass))
#define IS_WRAPPER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_WRAPPER))
#define IS_WRAPPER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_WRAPPER))
#define WRAPPER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_WRAPPER, WrapperClass))

typedef struct _Wrapper Wrapper;
typedef struct _WrapperClass WrapperClass;
typedef struct _WrapperPrivate WrapperPrivate;
typedef struct _ParamSpecWrapper ParamSpecWrapper;
#define _wrapper_unref0(var) ((var == NULL) ? NULL : (var = (wrapper_unref (var), NULL)))

struct _Wrapper {
	GTypeInstance parent_instance;
	volatile int ref_count;
	WrapperPrivate * priv;
	gpointer item;
	gconstpointer* ptr;
};

struct _WrapperClass {
	GTypeClass parent_class;
	void (*finalize) (Wrapper *self);
};

struct _WrapperPrivate {
	GType g_type;
	GBoxedCopyFunc g_dup_func;
	GDestroyNotify g_destroy_func;
};

struct _ParamSpecWrapper {
	GParamSpec parent_instance;
};

static gint Wrapper_private_offset;
static gpointer wrapper_parent_class = NULL;

VALA_EXTERN gpointer wrapper_ref (gpointer instance);
VALA_EXTERN void wrapper_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_wrapper (const gchar* name,
                                const gchar* nick,
                                const gchar* blurb,
                                GType object_type,
                                GParamFlags flags);
VALA_EXTERN void value_set_wrapper (GValue* value,
                        gpointer v_object);
VALA_EXTERN void value_take_wrapper (GValue* value,
                         gpointer v_object);
VALA_EXTERN gpointer value_get_wrapper (const GValue* value);
VALA_EXTERN GType wrapper_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Wrapper, wrapper_unref)
VALA_EXTERN Wrapper* wrapper_new (GType g_type,
                      GBoxedCopyFunc g_dup_func,
                      GDestroyNotify g_destroy_func);
VALA_EXTERN Wrapper* wrapper_construct (GType object_type,
                            GType g_type,
                            GBoxedCopyFunc g_dup_func,
                            GDestroyNotify g_destroy_func);
static void wrapper_finalize (Wrapper * obj);
static GType wrapper_get_type_once (void);
static void _vala_main (void);

static inline gpointer
wrapper_get_instance_private (Wrapper* self)
{
	return G_STRUCT_MEMBER_P (self, Wrapper_private_offset);
}

Wrapper*
wrapper_construct (GType object_type,
                   GType g_type,
                   GBoxedCopyFunc g_dup_func,
                   GDestroyNotify g_destroy_func)
{
	Wrapper* self = NULL;
	self = (Wrapper*) g_type_create_instance (object_type);
	self->priv->g_type = g_type;
	self->priv->g_dup_func = g_dup_func;
	self->priv->g_destroy_func = g_destroy_func;
	return self;
}

Wrapper*
wrapper_new (GType g_type,
             GBoxedCopyFunc g_dup_func,
             GDestroyNotify g_destroy_func)
{
	return wrapper_construct (TYPE_WRAPPER, g_type, g_dup_func, g_destroy_func);
}

static void
value_wrapper_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_wrapper_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		wrapper_unref (value->data[0].v_pointer);
	}
}

static void
value_wrapper_copy_value (const GValue* src_value,
                          GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = wrapper_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_wrapper_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_wrapper_collect_value (GValue* value,
                             guint n_collect_values,
                             GTypeCValue* collect_values,
                             guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Wrapper * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = wrapper_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_wrapper_lcopy_value (const GValue* value,
                           guint n_collect_values,
                           GTypeCValue* collect_values,
                           guint collect_flags)
{
	Wrapper ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = wrapper_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_wrapper (const gchar* name,
                    const gchar* nick,
                    const gchar* blurb,
                    GType object_type,
                    GParamFlags flags)
{
	ParamSpecWrapper* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_WRAPPER), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_wrapper (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_WRAPPER), NULL);
	return value->data[0].v_pointer;
}

void
value_set_wrapper (GValue* value,
                   gpointer v_object)
{
	Wrapper * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_WRAPPER));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_WRAPPER));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		wrapper_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		wrapper_unref (old);
	}
}

void
value_take_wrapper (GValue* value,
                    gpointer v_object)
{
	Wrapper * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_WRAPPER));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_WRAPPER));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		wrapper_unref (old);
	}
}

static void
wrapper_class_init (WrapperClass * klass,
                    gpointer klass_data)
{
	wrapper_parent_class = g_type_class_peek_parent (klass);
	((WrapperClass *) klass)->finalize = wrapper_finalize;
	g_type_class_adjust_private_offset (klass, &Wrapper_private_offset);
}

static void
wrapper_instance_init (Wrapper * self,
                       gpointer klass)
{
	self->priv = wrapper_get_instance_private (self);
	self->ref_count = 1;
}

static void
wrapper_finalize (Wrapper * obj)
{
	Wrapper * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_WRAPPER, Wrapper);
	g_signal_handlers_destroy (self);
	((self->item == NULL) || (self->priv->g_destroy_func == NULL)) ? NULL : (self->item = (self->priv->g_destroy_func (self->item), NULL));
}

static GType
wrapper_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_wrapper_init, value_wrapper_free_value, value_wrapper_copy_value, value_wrapper_peek_pointer, "p", value_wrapper_collect_value, "p", value_wrapper_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (WrapperClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) wrapper_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Wrapper), 0, (GInstanceInitFunc) wrapper_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType wrapper_type_id;
	wrapper_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Wrapper", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Wrapper_private_offset = g_type_add_instance_private (wrapper_type_id, sizeof (WrapperPrivate));
	return wrapper_type_id;
}

GType
wrapper_get_type (void)
{
	static volatile gsize wrapper_type_id__once = 0;
	if (g_once_init_enter (&wrapper_type_id__once)) {
		GType wrapper_type_id;
		wrapper_type_id = wrapper_get_type_once ();
		g_once_init_leave (&wrapper_type_id__once, wrapper_type_id);
	}
	return wrapper_type_id__once;
}

gpointer
wrapper_ref (gpointer instance)
{
	Wrapper * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
wrapper_unref (gpointer instance)
{
	Wrapper * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		WRAPPER_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static gpointer
_wrapper_ref0 (gpointer self)
{
	return self ? wrapper_ref (self) : NULL;
}

static void
_vala_main (void)
{
	Wrapper* item = NULL;
	Wrapper* _tmp0_;
	Wrapper* inner_item = NULL;
	gconstpointer _tmp1_;
	Wrapper* _tmp2_;
	Wrapper* inner_ptr = NULL;
	gconstpointer* _tmp3_;
	_tmp0_ = wrapper_new (TYPE_WRAPPER, (GBoxedCopyFunc) wrapper_ref, (GDestroyNotify) wrapper_unref);
	item = _tmp0_;
	_tmp1_ = item->item;
	_tmp2_ = _wrapper_ref0 ((Wrapper*) _tmp1_);
	inner_item = _tmp2_;
	_tmp3_ = item->ptr;
	inner_ptr = _tmp3_;
	_wrapper_unref0 (inner_item);
	_wrapper_unref0 (item);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

