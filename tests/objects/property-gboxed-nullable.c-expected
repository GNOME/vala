/* objects_property_gboxed_nullable.c generated by valac, the Vala compiler
 * generated from objects_property_gboxed_nullable.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_BAR (bar_get_type ())
typedef struct _Bar Bar;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_BAR_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _bar_free0(var) ((var == NULL) ? NULL : (var = (bar_free (var), NULL)))

#define TYPE_FAZ (faz_get_type ())
#define FAZ(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FAZ, Faz))
#define FAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FAZ, FazClass))
#define IS_FAZ(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FAZ))
#define IS_FAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FAZ))
#define FAZ_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FAZ, FazClass))

typedef struct _Faz Faz;
typedef struct _FazClass FazClass;
typedef struct _FazPrivate FazPrivate;
enum  {
	FAZ_0_PROPERTY,
	FAZ_BAZ_PROPERTY,
	FAZ_NUM_PROPERTIES
};
static GParamSpec* faz_properties[FAZ_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Bar {
	gchar* s;
};

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooPrivate {
	Bar* _bar;
};

struct _Faz {
	GObject parent_instance;
	FazPrivate * priv;
};

struct _FazClass {
	GObjectClass parent_class;
};

struct _FazPrivate {
	Bar* _baz;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
static gint Faz_private_offset;
static gpointer faz_parent_class = NULL;

VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Bar* bar_dup (const Bar* self);
VALA_EXTERN void bar_free (Bar* self);
VALA_EXTERN void bar_copy (const Bar* self,
               Bar* dest);
VALA_EXTERN void bar_destroy (Bar* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Bar, bar_destroy)
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (Bar* bar);
VALA_EXTERN Foo* foo_construct (GType object_type,
                    Bar* bar);
VALA_EXTERN Bar* foo_get_bar (Foo* self);
VALA_EXTERN void foo_set_bar (Foo* self,
                  Bar* value);
static gboolean _bar_equal (const Bar * s1,
                     const Bar * s2);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
VALA_EXTERN GType faz_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Faz, g_object_unref)
VALA_EXTERN Faz* faz_new (void);
VALA_EXTERN Faz* faz_construct (GType object_type);
VALA_EXTERN Bar* faz_get_baz (Faz* self);
VALA_EXTERN void faz_set_baz (Faz* self,
                  Bar* value);
static void faz_finalize (GObject * obj);
static GType faz_get_type_once (void);
static void _vala_faz_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_faz_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
static void _vala_main (void);

void
bar_copy (const Bar* self,
          Bar* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
}

void
bar_destroy (Bar* self)
{
	_g_free0 ((*self).s);
}

Bar*
bar_dup (const Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	bar_copy (self, dup);
	return dup;
}

void
bar_free (Bar* self)
{
	bar_destroy (self);
	g_free (self);
}

static GType
bar_get_type_once (void)
{
	GType bar_type_id;
	bar_type_id = g_boxed_type_register_static ("Bar", (GBoxedCopyFunc) bar_dup, (GBoxedFreeFunc) bar_free);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type,
               Bar* bar)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, "bar", bar, NULL);
	return self;
}

Foo*
foo_new (Bar* bar)
{
	return foo_construct (TYPE_FOO, bar);
}

Bar*
foo_get_bar (Foo* self)
{
	Bar* result;
	Bar* _tmp0_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_bar;
	result = _tmp0_;
	return result;
}

static gboolean
_bar_equal (const Bar * s1,
            const Bar * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (g_strcmp0 (s1->s, s2->s)) {
		return FALSE;
	}
	return TRUE;
}

static gpointer
_bar_dup0 (gpointer self)
{
	return self ? bar_dup (self) : NULL;
}

void
foo_set_bar (Foo* self,
             Bar* value)
{
	Bar* old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_bar (self);
	if (_bar_equal (value, old_value) != TRUE) {
		Bar* _tmp0_;
		_tmp0_ = _bar_dup0 (value);
		_bar_free0 (self->priv->_bar);
		self->priv->_bar = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_BAR_PROPERTY]);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_BAR_PROPERTY, foo_properties[FOO_BAR_PROPERTY] = g_param_spec_boxed ("bar", "bar", "bar", TYPE_BAR, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	_bar_free0 (self->priv->_bar);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_BAR_PROPERTY:
		{
			Bar* boxed;
			boxed = foo_get_bar (self);
			g_value_set_boxed (value, boxed);
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_BAR_PROPERTY:
		foo_set_bar (self, g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static inline gpointer
faz_get_instance_private (Faz* self)
{
	return G_STRUCT_MEMBER_P (self, Faz_private_offset);
}

Faz*
faz_construct (GType object_type)
{
	Faz * self = NULL;
	self = (Faz*) g_object_new (object_type, NULL);
	return self;
}

Faz*
faz_new (void)
{
	return faz_construct (TYPE_FAZ);
}

Bar*
faz_get_baz (Faz* self)
{
	Bar* result;
	Bar* _tmp0_;
	Bar* _tmp1_;
	g_return_val_if_fail (IS_FAZ (self), NULL);
	_tmp0_ = self->priv->_baz;
	_tmp1_ = _bar_dup0 (_tmp0_);
	result = _tmp1_;
	return result;
}

void
faz_set_baz (Faz* self,
             Bar* value)
{
	Bar* old_value;
	g_return_if_fail (IS_FAZ (self));
	old_value = faz_get_baz (self);
	if (_bar_equal (value, old_value) != TRUE) {
		Bar* _tmp0_;
		_tmp0_ = _bar_dup0 (value);
		_bar_free0 (self->priv->_baz);
		self->priv->_baz = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, faz_properties[FAZ_BAZ_PROPERTY]);
	}
	_bar_free0 (old_value);
}

static void
faz_class_init (FazClass * klass,
                gpointer klass_data)
{
	faz_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Faz_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_faz_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_faz_set_property;
	G_OBJECT_CLASS (klass)->finalize = faz_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FAZ_BAZ_PROPERTY, faz_properties[FAZ_BAZ_PROPERTY] = g_param_spec_boxed ("baz", "baz", "baz", TYPE_BAR, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
faz_instance_init (Faz * self,
                   gpointer klass)
{
	self->priv = faz_get_instance_private (self);
}

static void
faz_finalize (GObject * obj)
{
	Faz * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FAZ, Faz);
	_bar_free0 (self->priv->_baz);
	G_OBJECT_CLASS (faz_parent_class)->finalize (obj);
}

static GType
faz_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FazClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) faz_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Faz), 0, (GInstanceInitFunc) faz_instance_init, NULL };
	GType faz_type_id;
	faz_type_id = g_type_register_static (G_TYPE_OBJECT, "Faz", &g_define_type_info, 0);
	Faz_private_offset = g_type_add_instance_private (faz_type_id, sizeof (FazPrivate));
	return faz_type_id;
}

GType
faz_get_type (void)
{
	static volatile gsize faz_type_id__once = 0;
	if (g_once_init_enter (&faz_type_id__once)) {
		GType faz_type_id;
		faz_type_id = faz_get_type_once ();
		g_once_init_leave (&faz_type_id__once, faz_type_id);
	}
	return faz_type_id__once;
}

static void
_vala_faz_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Faz * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FAZ, Faz);
	switch (property_id) {
		case FAZ_BAZ_PROPERTY:
		{
			Bar* boxed;
			boxed = faz_get_baz (self);
			g_value_set_boxed (value, boxed);
			_bar_free0 (boxed);
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_faz_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Faz * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FAZ, Faz);
	switch (property_id) {
		case FAZ_BAZ_PROPERTY:
		faz_set_baz (self, g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	{
		Foo* foo = NULL;
		Foo* _tmp0_;
		Bar* _tmp1_;
		Bar* _tmp2_;
		_tmp0_ = foo_new (NULL);
		foo = _tmp0_;
		_tmp1_ = foo_get_bar (foo);
		_tmp2_ = _tmp1_;
		_vala_assert (_tmp2_ == NULL, "foo.bar == null");
		_g_object_unref0 (foo);
	}
	{
		Bar bar = {0};
		gchar* _tmp3_;
		Bar _tmp4_ = {0};
		Foo* foo = NULL;
		Bar _tmp5_;
		GObject* _tmp6_;
		GObject* _tmp7_;
		Bar* _tmp8_;
		Bar* _tmp9_;
		Bar _tmp10_;
		Bar* _tmp11_;
		Bar* _tmp12_;
		const gchar* _tmp13_;
		Bar* _tmp14_;
		Bar* _tmp15_;
		_tmp3_ = g_strdup ("foo");
		_g_free0 (_tmp4_.s);
		_tmp4_.s = _tmp3_;
		bar = _tmp4_;
		_tmp5_ = bar;
		_tmp6_ = g_object_new (TYPE_FOO, "bar", &_tmp5_, NULL);
		_tmp7_ = G_IS_INITIALLY_UNOWNED (_tmp6_) ? g_object_ref_sink (_tmp6_) : _tmp6_;
		foo = G_TYPE_CHECK_INSTANCE_CAST (_tmp7_, TYPE_FOO, Foo);
		_tmp8_ = foo_get_bar (foo);
		_tmp9_ = _tmp8_;
		_tmp10_ = bar;
		_vala_assert (_bar_equal (_tmp9_, &_tmp10_) == TRUE, "foo.bar == bar");
		_tmp11_ = foo_get_bar (foo);
		_tmp12_ = _tmp11_;
		_tmp13_ = (*_tmp12_).s;
		_vala_assert (g_strcmp0 (_tmp13_, "foo") == 0, "foo.bar.s == \"foo\"");
		foo_set_bar (foo, NULL);
		_tmp14_ = foo_get_bar (foo);
		_tmp15_ = _tmp14_;
		_vala_assert (_tmp15_ == NULL, "foo.bar == null");
		_g_object_unref0 (foo);
		bar_destroy (&bar);
	}
	{
		Bar bar = {0};
		gchar* _tmp16_;
		Bar _tmp17_ = {0};
		Foo* foo = NULL;
		GObject* _tmp18_;
		GObject* _tmp19_;
		Bar* _tmp20_;
		Bar* _tmp21_;
		Bar _tmp22_;
		Bar* _tmp23_;
		Bar* _tmp24_;
		Bar _tmp25_;
		_tmp16_ = g_strdup ("foo");
		_g_free0 (_tmp17_.s);
		_tmp17_.s = _tmp16_;
		bar = _tmp17_;
		_tmp18_ = g_object_new (TYPE_FOO, "bar", NULL, NULL);
		_tmp19_ = G_IS_INITIALLY_UNOWNED (_tmp18_) ? g_object_ref_sink (_tmp18_) : _tmp18_;
		foo = G_TYPE_CHECK_INSTANCE_CAST (_tmp19_, TYPE_FOO, Foo);
		_tmp20_ = foo_get_bar (foo);
		_tmp21_ = _tmp20_;
		_vala_assert (_tmp21_ == NULL, "foo.bar == null");
		_tmp22_ = bar;
		foo_set_bar (foo, &_tmp22_);
		_tmp23_ = foo_get_bar (foo);
		_tmp24_ = _tmp23_;
		_tmp25_ = bar;
		_vala_assert (_bar_equal (_tmp24_, &_tmp25_) == TRUE, "foo.bar == bar");
		_g_object_unref0 (foo);
		bar_destroy (&bar);
	}
	{
		Bar bar = {0};
		gchar* _tmp26_;
		Bar _tmp27_ = {0};
		Faz* faz = NULL;
		Faz* _tmp28_;
		Bar* _tmp29_;
		Bar* _tmp30_;
		Bar* _tmp31_;
		Bar _tmp32_;
		Bar* _tmp33_;
		Bar* _tmp34_;
		Bar* _tmp35_;
		Bar _tmp36_;
		Bar* _tmp37_;
		Bar* _tmp38_;
		Bar* _tmp39_;
		const gchar* _tmp40_;
		Bar* _tmp41_;
		Bar* _tmp42_;
		Bar* _tmp43_;
		_tmp26_ = g_strdup ("foo");
		_g_free0 (_tmp27_.s);
		_tmp27_.s = _tmp26_;
		bar = _tmp27_;
		_tmp28_ = faz_new ();
		faz = _tmp28_;
		g_object_get (faz, "baz", &_tmp29_, NULL);
		_tmp30_ = _tmp29_;
		_tmp31_ = _tmp30_;
		_vala_assert (_tmp31_ == NULL, "faz.baz == null");
		_bar_free0 (_tmp31_);
		_tmp32_ = bar;
		g_object_set (faz, "baz", &_tmp32_, NULL);
		g_object_get (faz, "baz", &_tmp33_, NULL);
		_tmp34_ = _tmp33_;
		_tmp35_ = _tmp34_;
		_tmp36_ = bar;
		_vala_assert (_bar_equal (_tmp35_, &_tmp36_) == TRUE, "faz.baz == bar");
		_bar_free0 (_tmp35_);
		g_object_get (faz, "baz", &_tmp37_, NULL);
		_tmp38_ = _tmp37_;
		_tmp39_ = _tmp38_;
		_tmp40_ = (*_tmp39_).s;
		_vala_assert (g_strcmp0 (_tmp40_, "foo") == 0, "faz.baz.s == \"foo\"");
		_bar_free0 (_tmp39_);
		g_object_set (faz, "baz", NULL, NULL);
		g_object_get (faz, "baz", &_tmp41_, NULL);
		_tmp42_ = _tmp41_;
		_tmp43_ = _tmp42_;
		_vala_assert (_tmp43_ == NULL, "faz.baz == null");
		_bar_free0 (_tmp43_);
		_g_object_unref0 (faz);
		bar_destroy (&bar);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

