/* objects_signals_struct_return.c generated by valac, the Vala compiler
 * generated from objects_signals_struct_return.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
enum  {
	BAR_ON_FOO_SIGNAL,
	BAR_ON_FOO_WITH_ARG_SIGNAL,
	BAR_ON_BAR_SIGNAL,
	BAR_ON_BAR_WITH_ARG_SIGNAL,
	BAR_NUM_SIGNALS
};
static guint bar_signals[BAR_NUM_SIGNALS] = {0};
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gchar* s;
	gint i;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
};

static gpointer bar_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Foo, foo_destroy)
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static void g_cclosure_user_marshal_VOID__STRING_POINTER (GClosure * closure,
                                                   GValue * return_value,
                                                   guint n_param_values,
                                                   const GValue * param_values,
                                                   gpointer invocation_hint,
                                                   gpointer marshal_data);
static void g_cclosure_user_marshal_POINTER__VOID (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);
static void g_cclosure_user_marshal_POINTER__STRING (GClosure * closure,
                                              GValue * return_value,
                                              guint n_param_values,
                                              const GValue * param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);
static GType bar_get_type_once (void);
static void _vala_main (void);
static void _vala_lambda0_ (Foo* result);
static void __vala_lambda0__bar_on_foo (Bar* _sender,
                                 Foo* result,
                                 gpointer self);
static void _vala_lambda1_ (const gchar* s,
                     Foo* result);
static void __vala_lambda1__bar_on_foo_with_arg (Bar* _sender,
                                          const gchar* s,
                                          Foo* result,
                                          gpointer self);
static Foo* _vala_lambda2_ (void);
static Foo* __vala_lambda2__bar_on_bar (Bar* _sender,
                                 gpointer self);
static Foo* _vala_lambda3_ (const gchar* s);
static Foo* __vala_lambda3__bar_on_bar_with_arg (Bar* _sender,
                                          const gchar* s,
                                          gpointer self);

void
foo_copy (const Foo* self,
          Foo* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
	(*dest).i = (*self).i;
}

void
foo_destroy (Foo* self)
{
	_g_free0 ((*self).s);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
g_cclosure_user_marshal_VOID__STRING_POINTER (GClosure * closure,
                                              GValue * return_value,
                                              guint n_param_values,
                                              const GValue * param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_POINTER) (gpointer data1, const char* arg_1, gpointer arg_2, gpointer data2);
	register GMarshalFunc_VOID__STRING_POINTER callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 3);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_string (param_values + 1), g_value_get_pointer (param_values + 2), data2);
}

static void
g_cclosure_user_marshal_POINTER__VOID (GClosure * closure,
                                       GValue * return_value,
                                       guint n_param_values,
                                       const GValue * param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data)
{
	typedef gpointer (*GMarshalFunc_POINTER__VOID) (gpointer data1, gpointer data2);
	register GMarshalFunc_POINTER__VOID callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	gpointer v_return;
	cc = (GCClosure *) closure;
	g_return_if_fail (return_value != NULL);
	g_return_if_fail (n_param_values == 1);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_POINTER__VOID) (marshal_data ? marshal_data : cc->callback);
	v_return = callback (data1, data2);
	g_value_set_pointer (return_value, v_return);
}

static void
g_cclosure_user_marshal_POINTER__STRING (GClosure * closure,
                                         GValue * return_value,
                                         guint n_param_values,
                                         const GValue * param_values,
                                         gpointer invocation_hint,
                                         gpointer marshal_data)
{
	typedef gpointer (*GMarshalFunc_POINTER__STRING) (gpointer data1, const char* arg_1, gpointer data2);
	register GMarshalFunc_POINTER__STRING callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	gpointer v_return;
	cc = (GCClosure *) closure;
	g_return_if_fail (return_value != NULL);
	g_return_if_fail (n_param_values == 2);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_POINTER__STRING) (marshal_data ? marshal_data : cc->callback);
	v_return = callback (data1, g_value_get_string (param_values + 1), data2);
	g_value_set_pointer (return_value, v_return);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	bar_signals[BAR_ON_FOO_SIGNAL] = g_signal_new ("on-foo", TYPE_BAR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, G_TYPE_POINTER);
	bar_signals[BAR_ON_FOO_WITH_ARG_SIGNAL] = g_signal_new ("on-foo-with-arg", TYPE_BAR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_POINTER, G_TYPE_NONE, 2, G_TYPE_STRING, G_TYPE_POINTER);
	bar_signals[BAR_ON_BAR_SIGNAL] = g_signal_new ("on-bar", TYPE_BAR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_POINTER__VOID, G_TYPE_POINTER, 0);
	bar_signals[BAR_ON_BAR_WITH_ARG_SIGNAL] = g_signal_new ("on-bar-with-arg", TYPE_BAR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_POINTER__STRING, G_TYPE_POINTER, 1, G_TYPE_STRING);
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_lambda0_ (Foo* result)
{
	gchar* _tmp0_;
	Foo _tmp1_ = {0};
	_tmp0_ = g_strdup ("foo");
	_g_free0 (_tmp1_.s);
	_tmp1_.s = _tmp0_;
	_tmp1_.i = 23;
	*result = _tmp1_;
	return;
}

static void
__vala_lambda0__bar_on_foo (Bar* _sender,
                            Foo* result,
                            gpointer self)
{
	_vala_lambda0_ (result);
}

static void
_vala_lambda1_ (const gchar* s,
                Foo* result)
{
	gchar* _tmp0_;
	Foo _tmp1_ = {0};
	g_return_if_fail (s != NULL);
	_vala_assert (g_strcmp0 (s, "foo") == 0, "s == \"foo\"");
	_tmp0_ = g_strdup ("foo");
	_g_free0 (_tmp1_.s);
	_tmp1_.s = _tmp0_;
	_tmp1_.i = 42;
	*result = _tmp1_;
	return;
}

static void
__vala_lambda1__bar_on_foo_with_arg (Bar* _sender,
                                     const gchar* s,
                                     Foo* result,
                                     gpointer self)
{
	_vala_lambda1_ (s, result);
}

static gpointer
_foo_dup0 (gpointer self)
{
	return self ? foo_dup (self) : NULL;
}

static Foo*
_vala_lambda2_ (void)
{
	gchar* _tmp0_;
	Foo _tmp1_ = {0};
	Foo _tmp2_;
	Foo* _tmp3_;
	Foo* _tmp4_;
	Foo* result;
	_tmp0_ = g_strdup ("bar");
	_g_free0 (_tmp1_.s);
	_tmp1_.s = _tmp0_;
	_tmp1_.i = 42;
	_tmp2_ = _tmp1_;
	_tmp3_ = _foo_dup0 (&_tmp2_);
	_tmp4_ = _tmp3_;
	foo_destroy (&_tmp2_);
	result = _tmp4_;
	return result;
}

static Foo*
__vala_lambda2__bar_on_bar (Bar* _sender,
                            gpointer self)
{
	Foo* result;
	result = _vala_lambda2_ ();
	return result;
}

static Foo*
_vala_lambda3_ (const gchar* s)
{
	gchar* _tmp0_;
	Foo _tmp1_ = {0};
	Foo _tmp2_;
	Foo* _tmp3_;
	Foo* _tmp4_;
	Foo* result;
	g_return_val_if_fail (s != NULL, NULL);
	_vala_assert (g_strcmp0 (s, "bar") == 0, "s == \"bar\"");
	_tmp0_ = g_strdup ("bar");
	_g_free0 (_tmp1_.s);
	_tmp1_.s = _tmp0_;
	_tmp1_.i = 23;
	_tmp2_ = _tmp1_;
	_tmp3_ = _foo_dup0 (&_tmp2_);
	_tmp4_ = _tmp3_;
	foo_destroy (&_tmp2_);
	result = _tmp4_;
	return result;
}

static Foo*
__vala_lambda3__bar_on_bar_with_arg (Bar* _sender,
                                     const gchar* s,
                                     gpointer self)
{
	Foo* result;
	result = _vala_lambda3_ (s);
	return result;
}

static void
_vala_main (void)
{
	{
		Bar* bar = NULL;
		Bar* _tmp0_;
		Foo foo = {0};
		Foo _tmp1_ = {0};
		Foo _tmp2_;
		const gchar* _tmp3_;
		Foo _tmp4_;
		Foo foo2 = {0};
		Foo _tmp5_ = {0};
		Foo _tmp6_;
		const gchar* _tmp7_;
		Foo _tmp8_;
		_tmp0_ = bar_new ();
		bar = _tmp0_;
		g_signal_connect (bar, "on-foo", (GCallback) __vala_lambda0__bar_on_foo, NULL);
		g_signal_connect (bar, "on-foo-with-arg", (GCallback) __vala_lambda1__bar_on_foo_with_arg, NULL);
		g_signal_emit (bar, bar_signals[BAR_ON_FOO_SIGNAL], 0, &_tmp1_);
		foo = _tmp1_;
		_tmp2_ = foo;
		_tmp3_ = _tmp2_.s;
		_vala_assert (g_strcmp0 (_tmp3_, "foo") == 0, "foo.s == \"foo\"");
		_tmp4_ = foo;
		_vala_assert (_tmp4_.i == 23, "foo.i == 23");
		g_signal_emit (bar, bar_signals[BAR_ON_FOO_WITH_ARG_SIGNAL], 0, "foo", &_tmp5_);
		foo2 = _tmp5_;
		_tmp6_ = foo2;
		_tmp7_ = _tmp6_.s;
		_vala_assert (g_strcmp0 (_tmp7_, "foo") == 0, "foo2.s == \"foo\"");
		_tmp8_ = foo2;
		_vala_assert (_tmp8_.i == 42, "foo2.i == 42");
		foo_destroy (&foo2);
		foo_destroy (&foo);
		_g_object_unref0 (bar);
	}
	{
		Bar* bar = NULL;
		Bar* _tmp9_;
		Foo* foo = NULL;
		Foo* _tmp10_ = NULL;
		const gchar* _tmp11_;
		Foo* foo2 = NULL;
		Foo* _tmp12_ = NULL;
		const gchar* _tmp13_;
		_tmp9_ = bar_new ();
		bar = _tmp9_;
		g_signal_connect (bar, "on-bar", (GCallback) __vala_lambda2__bar_on_bar, NULL);
		g_signal_connect (bar, "on-bar-with-arg", (GCallback) __vala_lambda3__bar_on_bar_with_arg, NULL);
		g_signal_emit (bar, bar_signals[BAR_ON_BAR_SIGNAL], 0, &_tmp10_);
		foo = _tmp10_;
		_tmp11_ = (*foo).s;
		_vala_assert (g_strcmp0 (_tmp11_, "bar") == 0, "foo.s == \"bar\"");
		_vala_assert ((*foo).i == 42, "foo.i == 42");
		g_signal_emit (bar, bar_signals[BAR_ON_BAR_WITH_ARG_SIGNAL], 0, "bar", &_tmp12_);
		foo2 = _tmp12_;
		_tmp13_ = (*foo2).s;
		_vala_assert (g_strcmp0 (_tmp13_, "bar") == 0, "foo2.s == \"bar\"");
		_vala_assert ((*foo2).i == 23, "foo2.i == 23");
		_foo_free0 (foo2);
		_foo_free0 (foo);
		_g_object_unref0 (bar);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

