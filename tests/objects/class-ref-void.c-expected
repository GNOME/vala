/* objects_class_ref_void.c generated by valac, the Vala compiler
 * generated from objects_class_ref_void.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))

struct _Foo {
	int dummy;
};

VALA_EXTERN void foo_free (Foo * self);
static void foo_instance_init (Foo * self);
VALA_EXTERN void foo_ref (Foo* self);
VALA_EXTERN void foo_unref (Foo* self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN void bar (GType g_type,
          GBoxedCopyFunc g_dup_func,
          GDestroyNotify g_destroy_func,
          gconstpointer g);
static void _vala_main (void);
static Foo* _vala_foo_ref (Foo* self);

void
foo_ref (Foo* self)
{
	g_return_if_fail (self != NULL);
}

void
foo_unref (Foo* self)
{
	g_return_if_fail (self != NULL);
}

Foo*
foo_new (void)
{
	Foo* self;
	self = g_slice_new0 (Foo);
	foo_instance_init (self);
	return self;
}

static void
foo_instance_init (Foo * self)
{
}

void
foo_free (Foo * self)
{
	g_slice_free (Foo, self);
}

void
bar (GType g_type,
     GBoxedCopyFunc g_dup_func,
     GDestroyNotify g_destroy_func,
     gconstpointer g)
{
	void* foo = NULL;
	void* _tmp0_;
	_tmp0_ = g_dup_func (g);
	foo = _tmp0_;
	g_destroy_func (foo);
}

static Foo*
_vala_foo_ref (Foo* self)
{
	if (self != NULL) {
		foo_ref (self);
	}
	return self;
}

static void
_vala_main (void)
{
	Foo* _tmp0_;
	Foo* _tmp1_;
	_tmp0_ = foo_new ();
	_tmp1_ = _tmp0_;
	bar (G_TYPE_POINTER, (GBoxedCopyFunc) _vala_foo_ref, (GDestroyNotify) foo_unref, _tmp1_);
	_foo_unref0 (_tmp1_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

