/* objects_bug783897.c generated by valac, the Vala compiler
 * generated from objects_bug783897.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	BAZ_VALUE = 42
} Baz;

#define TYPE_BAZ (baz_get_type ())

#define TYPE_BAR (bar_get_type ())
typedef struct _Bar Bar;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;
enum  {
	FOO_SIGNAL_ENUM_SIGNAL,
	FOO_SIGNAL_SIMPLE_TYPE_SIGNAL,
	FOO_SIGNAL_STRUCT_SIGNAL,
	FOO_SIGNAL_CUSTOM_SIGNAL,
	FOO_SIGNAL_CUSTOM2_SIGNAL,
	FOO_NUM_SIGNALS
};
static guint foo_signals[FOO_NUM_SIGNALS] = {0};
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Bar {
	gint i;
};

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN GType baz_get_type (void) G_GNUC_CONST ;
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Bar* bar_dup (const Bar* self);
VALA_EXTERN void bar_free (Bar* self);
VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN void foo_run (Foo* self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void g_cclosure_user_marshal_VOID__FOO_POINTER_POINTER_POINTER (GClosure * closure,
                                                                GValue * return_value,
                                                                guint n_param_values,
                                                                const GValue * param_values,
                                                                gpointer invocation_hint,
                                                                gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__FOO_ENUM_INT_BOXED (GClosure * closure,
                                                       GValue * return_value,
                                                       guint n_param_values,
                                                       const GValue * param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN void callback_enum (Baz* e);
static gboolean _baz_equal (const Baz * s1,
                     const Baz * s2);
VALA_EXTERN void callback_simple_type (gint* t);
static gboolean _int_equal (const gint * s1,
                     const gint * s2);
VALA_EXTERN void callback_struct (Bar* s);
VALA_EXTERN void callback_custom (Foo* f,
                      Baz* e,
                      gint* t,
                      Bar* s);
VALA_EXTERN void callback_custom2 (Foo* f,
                       Baz e,
                       gint t,
                       Bar* s);
static void _vala_main (void);
static void _callback_enum_foo_signal_enum (Foo* _sender,
                                     Baz* e,
                                     gpointer self);
static void _callback_simple_type_foo_signal_simple_type (Foo* _sender,
                                                   gint* t,
                                                   gpointer self);
static void _callback_struct_foo_signal_struct (Foo* _sender,
                                         Bar* s,
                                         gpointer self);
static void _callback_custom_foo_signal_custom (Foo* _sender,
                                         Foo* f,
                                         Baz* e,
                                         gint* t,
                                         Bar* s,
                                         gpointer self);
static void _callback_custom2_foo_signal_custom2 (Foo* _sender,
                                           Foo* f,
                                           Baz e,
                                           gint t,
                                           Bar* s,
                                           gpointer self);

static GType
baz_get_type_once (void)
{
	static const GEnumValue values[] = {{BAZ_VALUE, "BAZ_VALUE", "value"}, {0, NULL, NULL}};
	GType baz_type_id;
	baz_type_id = g_enum_register_static ("Baz", values);
	return baz_type_id;
}

GType
baz_get_type (void)
{
	static volatile gsize baz_type_id__once = 0;
	if (g_once_init_enter (&baz_type_id__once)) {
		GType baz_type_id;
		baz_type_id = baz_get_type_once ();
		g_once_init_leave (&baz_type_id__once, baz_type_id);
	}
	return baz_type_id__once;
}

Bar*
bar_dup (const Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	memcpy (dup, self, sizeof (Bar));
	return dup;
}

void
bar_free (Bar* self)
{
	g_free (self);
}

static GType
bar_get_type_once (void)
{
	GType bar_type_id;
	bar_type_id = g_boxed_type_register_static ("Bar", (GBoxedCopyFunc) bar_dup, (GBoxedFreeFunc) bar_free);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

void
foo_run (Foo* self)
{
	Baz _tmp0_;
	gint _tmp1_;
	Bar _tmp2_ = {0};
	Baz _tmp3_;
	gint _tmp4_;
	Bar _tmp5_ = {0};
	Bar _tmp6_ = {0};
	g_return_if_fail (IS_FOO (self));
	_tmp0_ = BAZ_VALUE;
	g_signal_emit (self, foo_signals[FOO_SIGNAL_ENUM_SIGNAL], 0, &_tmp0_);
	_tmp1_ = 23;
	g_signal_emit (self, foo_signals[FOO_SIGNAL_SIMPLE_TYPE_SIGNAL], 0, &_tmp1_);
	_tmp2_.i = 4711;
	g_signal_emit (self, foo_signals[FOO_SIGNAL_STRUCT_SIGNAL], 0, &_tmp2_);
	_tmp3_ = BAZ_VALUE;
	_tmp4_ = 23;
	_tmp5_.i = 4711;
	g_signal_emit (self, foo_signals[FOO_SIGNAL_CUSTOM_SIGNAL], 0, self, &_tmp3_, &_tmp4_, &_tmp5_);
	_tmp6_.i = 4711;
	g_signal_emit (self, foo_signals[FOO_SIGNAL_CUSTOM2_SIGNAL], 0, self, BAZ_VALUE, 23, &_tmp6_);
}

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
g_cclosure_user_marshal_VOID__FOO_POINTER_POINTER_POINTER (GClosure * closure,
                                                           GValue * return_value,
                                                           guint n_param_values,
                                                           const GValue * param_values,
                                                           gpointer invocation_hint,
                                                           gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__FOO_POINTER_POINTER_POINTER) (gpointer data1, gpointer arg_1, gpointer arg_2, gpointer arg_3, gpointer arg_4, gpointer data2);
	register GMarshalFunc_VOID__FOO_POINTER_POINTER_POINTER callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 5);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__FOO_POINTER_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);
	callback (data1, value_get_foo (param_values + 1), g_value_get_pointer (param_values + 2), g_value_get_pointer (param_values + 3), g_value_get_pointer (param_values + 4), data2);
}

static void
g_cclosure_user_marshal_VOID__FOO_ENUM_INT_BOXED (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__FOO_ENUM_INT_BOXED) (gpointer data1, gpointer arg_1, gint arg_2, gint arg_3, gpointer arg_4, gpointer data2);
	register GMarshalFunc_VOID__FOO_ENUM_INT_BOXED callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 5);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__FOO_ENUM_INT_BOXED) (marshal_data ? marshal_data : cc->callback);
	callback (data1, value_get_foo (param_values + 1), g_value_get_enum (param_values + 2), g_value_get_int (param_values + 3), g_value_get_boxed (param_values + 4), data2);
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	foo_signals[FOO_SIGNAL_ENUM_SIGNAL] = g_signal_new ("signal-enum", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, G_TYPE_POINTER);
	foo_signals[FOO_SIGNAL_SIMPLE_TYPE_SIGNAL] = g_signal_new ("signal-simple-type", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, G_TYPE_POINTER);
	foo_signals[FOO_SIGNAL_STRUCT_SIGNAL] = g_signal_new ("signal-struct", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, G_TYPE_POINTER);
	foo_signals[FOO_SIGNAL_CUSTOM_SIGNAL] = g_signal_new ("signal-custom", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__FOO_POINTER_POINTER_POINTER, G_TYPE_NONE, 4, TYPE_FOO, G_TYPE_POINTER, G_TYPE_POINTER, G_TYPE_POINTER);
	foo_signals[FOO_SIGNAL_CUSTOM2_SIGNAL] = g_signal_new ("signal-custom2", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__FOO_ENUM_INT_BOXED, G_TYPE_NONE, 4, TYPE_FOO, TYPE_BAZ, G_TYPE_INT, TYPE_BAR);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static gboolean
_baz_equal (const Baz * s1,
            const Baz * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

void
callback_enum (Baz* e)
{
	Baz _tmp0_;
	_tmp0_ = BAZ_VALUE;
	_vala_assert (_baz_equal (e, &_tmp0_) == TRUE, "e == Baz.VALUE");
}

static gboolean
_int_equal (const gint * s1,
            const gint * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

void
callback_simple_type (gint* t)
{
	gint _tmp0_;
	_tmp0_ = 23;
	_vala_assert (_int_equal (t, &_tmp0_) == TRUE, "t == 23");
}

void
callback_struct (Bar* s)
{
	_vala_assert ((*s).i == 4711, "s.i == 4711");
}

void
callback_custom (Foo* f,
                 Baz* e,
                 gint* t,
                 Bar* s)
{
	Baz _tmp0_;
	gint _tmp1_;
	g_return_if_fail (IS_FOO (f));
	_tmp0_ = BAZ_VALUE;
	_vala_assert (_baz_equal (e, &_tmp0_) == TRUE, "e == Baz.VALUE");
	_tmp1_ = 23;
	_vala_assert (_int_equal (t, &_tmp1_) == TRUE, "t == 23");
	_vala_assert ((*s).i == 4711, "s.i == 4711");
}

void
callback_custom2 (Foo* f,
                  Baz e,
                  gint t,
                  Bar* s)
{
	Bar _tmp0_;
	g_return_if_fail (IS_FOO (f));
	g_return_if_fail (s != NULL);
	_vala_assert (e == BAZ_VALUE, "e == Baz.VALUE");
	_vala_assert (t == 23, "t == 23");
	_tmp0_ = *s;
	_vala_assert (_tmp0_.i == 4711, "s.i == 4711");
}

static void
_callback_enum_foo_signal_enum (Foo* _sender,
                                Baz* e,
                                gpointer self)
{
	callback_enum (e);
}

static void
_callback_simple_type_foo_signal_simple_type (Foo* _sender,
                                              gint* t,
                                              gpointer self)
{
	callback_simple_type (t);
}

static void
_callback_struct_foo_signal_struct (Foo* _sender,
                                    Bar* s,
                                    gpointer self)
{
	callback_struct (s);
}

static void
_callback_custom_foo_signal_custom (Foo* _sender,
                                    Foo* f,
                                    Baz* e,
                                    gint* t,
                                    Bar* s,
                                    gpointer self)
{
	callback_custom (f, e, t, s);
}

static void
_callback_custom2_foo_signal_custom2 (Foo* _sender,
                                      Foo* f,
                                      Baz e,
                                      gint t,
                                      Bar* s,
                                      gpointer self)
{
	callback_custom2 (f, e, t, s);
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	g_signal_connect (foo, "signal-enum", (GCallback) _callback_enum_foo_signal_enum, NULL);
	g_signal_connect (foo, "signal-simple-type", (GCallback) _callback_simple_type_foo_signal_simple_type, NULL);
	g_signal_connect (foo, "signal-struct", (GCallback) _callback_struct_foo_signal_struct, NULL);
	g_signal_connect (foo, "signal-custom", (GCallback) _callback_custom_foo_signal_custom, NULL);
	g_signal_connect (foo, "signal-custom2", (GCallback) _callback_custom2_foo_signal_custom2, NULL);
	foo_run (foo);
	_foo_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

