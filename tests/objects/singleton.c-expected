/* objects_singleton.c generated by valac, the Vala compiler
 * generated from objects_singleton.vala, do not modify */

#include <glib-object.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
	gint bar;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
	gint foo;
};

struct _BarClass {
	GObjectClass parent_class;
};

static gpointer foo_parent_class = NULL;
static gpointer bar_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static GObject * foo_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static GObject * bar_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties);
static void bar_finalize (GObject * obj);
static GType bar_get_type_once (void);
VALA_EXTERN void lifetime_1 (void);
VALA_EXTERN void lifetime_2 (void);
VALA_EXTERN void lifetime_3 (void);
static void _vala_main (void);

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static GObject *
foo_constructor (GType type,
                 guint n_construct_properties,
                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	static GWeakRef Foo_singleton__ref;
	static GMutex Foo_singleton__lock;
	Foo * self;
	g_mutex_lock (&Foo_singleton__lock);
	obj = g_weak_ref_get (&Foo_singleton__ref);
	if (obj != NULL) {
		g_mutex_unlock (&Foo_singleton__lock);
		return obj;
	}
	parent_class = G_OBJECT_CLASS (foo_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_weak_ref_set (&Foo_singleton__ref, obj);
	g_mutex_unlock (&Foo_singleton__lock);
	return obj;
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->constructor = foo_constructor;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->bar = 42;
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static GObject *
bar_constructor (GType type,
                 guint n_construct_properties,
                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	static GWeakRef Bar_singleton__ref;
	static GMutex Bar_singleton__lock;
	Bar * self;
	g_mutex_lock (&Bar_singleton__lock);
	obj = g_weak_ref_get (&Bar_singleton__ref);
	if (obj != NULL) {
		g_mutex_unlock (&Bar_singleton__lock);
		return obj;
	}
	parent_class = G_OBJECT_CLASS (bar_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	g_weak_ref_set (&Bar_singleton__ref, obj);
	g_mutex_unlock (&Bar_singleton__lock);
	return obj;
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->constructor = bar_constructor;
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->foo = 42;
}

static void
bar_finalize (GObject * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	G_OBJECT_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

void
lifetime_1 (void)
{
	Foo* a = NULL;
	Foo* _tmp0_;
	Foo* b = NULL;
	GObject* _tmp1_;
	GObject* _tmp2_;
	_tmp0_ = foo_new ();
	a = _tmp0_;
	_tmp1_ = g_object_new (TYPE_FOO, NULL);
	_tmp2_ = G_IS_INITIALLY_UNOWNED (_tmp1_) ? g_object_ref_sink (_tmp1_) : _tmp1_;
	b = G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, TYPE_FOO, Foo);
	_vala_assert (a == b, "a == b");
	_vala_assert (a->bar == 23, "a.bar == 23");
	_g_object_unref0 (b);
	_g_object_unref0 (a);
}

void
lifetime_2 (void)
{
	Foo* a = NULL;
	Foo* _tmp0_;
	Foo* b = NULL;
	GObject* _tmp1_;
	GObject* _tmp2_;
	_tmp0_ = foo_new ();
	a = _tmp0_;
	_tmp1_ = g_object_new (TYPE_FOO, NULL);
	_tmp2_ = G_IS_INITIALLY_UNOWNED (_tmp1_) ? g_object_ref_sink (_tmp1_) : _tmp1_;
	b = G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, TYPE_FOO, Foo);
	_vala_assert (a == b, "a == b");
	_vala_assert (a->bar == 42, "a.bar == 42");
	_g_object_unref0 (b);
	_g_object_unref0 (a);
}

void
lifetime_3 (void)
{
	Bar* a = NULL;
	Bar* _tmp0_;
	Bar* b = NULL;
	GObject* _tmp1_;
	GObject* _tmp2_;
	_tmp0_ = bar_new ();
	a = _tmp0_;
	_tmp1_ = g_object_new (TYPE_BAR, NULL);
	_tmp2_ = G_IS_INITIALLY_UNOWNED (_tmp1_) ? g_object_ref_sink (_tmp1_) : _tmp1_;
	b = G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, TYPE_BAR, Bar);
	_vala_assert (a == b, "a == b");
	_vala_assert (a->foo == 23, "a.foo == 23");
	_g_object_unref0 (b);
	_g_object_unref0 (a);
}

static void
_vala_main (void)
{
	{
		Foo* singleton = NULL;
		Foo* _tmp0_;
		_tmp0_ = foo_new ();
		singleton = _tmp0_;
		singleton->bar = 23;
		lifetime_1 ();
		_g_object_unref0 (singleton);
	}
	{
		Foo* singleton = NULL;
		Foo* _tmp1_;
		_tmp1_ = foo_new ();
		singleton = _tmp1_;
		_vala_assert (singleton->bar == 42, "singleton.bar == 42");
		lifetime_2 ();
		_g_object_unref0 (singleton);
	}
	{
		Bar* singleton = NULL;
		Bar* _tmp2_;
		_tmp2_ = bar_new ();
		singleton = _tmp2_;
		singleton->foo = 23;
		lifetime_3 ();
		_g_object_unref0 (singleton);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

