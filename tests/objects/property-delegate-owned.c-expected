/* objects_property_delegate_owned.c generated by valac, the Vala compiler
 * generated from objects_property_delegate_owned.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*FooFunc) (gpointer user_data);

#define TYPE_IFOO (ifoo_get_type ())
#define IFOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IFOO, IFoo))
#define IS_IFOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IFOO))
#define IFOO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IFOO, IFooIface))

typedef struct _IFoo IFoo;
typedef struct _IFooIface IFooIface;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))

struct _IFooIface {
	GTypeInterface parent_iface;
	FooFunc (*get_foo) (IFoo* self, gpointer* result_target);
	void (*set_foo) (IFoo* self, FooFunc value, gpointer value_target, GDestroyNotify value_target_destroy_notify);
	FooFunc (*get_bar) (IFoo* self, gpointer* result_target);
	void (*set_bar) (IFoo* self, FooFunc value, gpointer value_target, GDestroyNotify value_target_destroy_notify);
};

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
	FooFunc (*get_foo) (Foo* self, gpointer* result_target);
	void (*set_foo) (Foo* self, FooFunc value, gpointer value_target, GDestroyNotify value_target_destroy_notify);
	FooFunc (*get_bar) (Foo* self, gpointer* result_target);
	void (*set_bar) (Foo* self, FooFunc value, gpointer value_target, GDestroyNotify value_target_destroy_notify);
};

struct _FooPrivate {
	FooFunc _bar;
	gpointer _bar_target;
	GDestroyNotify _bar_target_destroy_notify;
	FooFunc _foo;
	gpointer _foo_target;
	GDestroyNotify _foo_target_destroy_notify;
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

struct _Bar {
	Foo parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	FooClass parent_class;
};

struct _BarPrivate {
	FooFunc _bar;
	gpointer _bar_target;
	GDestroyNotify _bar_target_destroy_notify;
	FooFunc _foo;
	gpointer _foo_target;
	GDestroyNotify _foo_target_destroy_notify;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
static IFooIface * foo_ifoo_parent_iface = NULL;
static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;

VALA_EXTERN GType ifoo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN FooFunc ifoo_get_foo (IFoo* self,
                      gpointer* result_target);
VALA_EXTERN void ifoo_set_foo (IFoo* self,
                   FooFunc value,
                   gpointer value_target,
                   GDestroyNotify value_target_destroy_notify);
VALA_EXTERN FooFunc ifoo_get_bar (IFoo* self,
                      gpointer* result_target);
VALA_EXTERN void ifoo_set_bar (IFoo* self,
                   FooFunc value,
                   gpointer value_target,
                   GDestroyNotify value_target_destroy_notify);
static GType ifoo_get_type_once (void);
VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN FooFunc foo_get_foo (Foo* self,
                     gpointer* result_target);
VALA_EXTERN void foo_set_foo (Foo* self,
                  FooFunc value,
                  gpointer value_target,
                  GDestroyNotify value_target_destroy_notify);
VALA_EXTERN FooFunc foo_get_bar (Foo* self,
                     gpointer* result_target);
VALA_EXTERN void foo_set_bar (Foo* self,
                  FooFunc value,
                  gpointer value_target,
                  GDestroyNotify value_target_destroy_notify);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void _vala_lambda0_ (Foo* self);
static void __vala_lambda0__foo_func (gpointer self);
static void _vala_lambda1_ (Foo* self);
static void __vala_lambda1__foo_func (gpointer self);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, foo_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static void _vala_lambda2_ (Bar* self);
static void __vala_lambda2__foo_func (gpointer self);
static void _vala_lambda3_ (Bar* self);
static void __vala_lambda3__foo_func (gpointer self);
static void bar_finalize (Foo * obj);
static GType bar_get_type_once (void);
static void _vala_main (void);

FooFunc
ifoo_get_foo (IFoo* self,
              gpointer* result_target)
{
	IFooIface* _iface_;
	g_return_val_if_fail (IS_IFOO (self), NULL);
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->get_foo) {
		return _iface_->get_foo (self, result_target);
	}
	return NULL;
}

void
ifoo_set_foo (IFoo* self,
              FooFunc value,
              gpointer value_target,
              GDestroyNotify value_target_destroy_notify)
{
	IFooIface* _iface_;
	g_return_if_fail (IS_IFOO (self));
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->set_foo) {
		_iface_->set_foo (self, value, value_target, value_target_destroy_notify);
	}
}

FooFunc
ifoo_get_bar (IFoo* self,
              gpointer* result_target)
{
	IFooIface* _iface_;
	g_return_val_if_fail (IS_IFOO (self), NULL);
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->get_bar) {
		return _iface_->get_bar (self, result_target);
	}
	return NULL;
}

void
ifoo_set_bar (IFoo* self,
              FooFunc value,
              gpointer value_target,
              GDestroyNotify value_target_destroy_notify)
{
	IFooIface* _iface_;
	g_return_if_fail (IS_IFOO (self));
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->set_bar) {
		_iface_->set_bar (self, value, value_target, value_target_destroy_notify);
	}
}

static void
ifoo_default_init (IFooIface * iface,
                   gpointer iface_data)
{
}

static GType
ifoo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (IFooIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) ifoo_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType ifoo_type_id;
	ifoo_type_id = g_type_register_static (G_TYPE_INTERFACE, "IFoo", &g_define_type_info, 0);
	return ifoo_type_id;
}

GType
ifoo_get_type (void)
{
	static volatile gsize ifoo_type_id__once = 0;
	if (g_once_init_enter (&ifoo_type_id__once)) {
		GType ifoo_type_id;
		ifoo_type_id = ifoo_get_type_once ();
		g_once_init_leave (&ifoo_type_id__once, ifoo_type_id);
	}
	return ifoo_type_id__once;
}

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

static void
_vala_lambda0_ (Foo* self)
{
}

static void
__vala_lambda0__foo_func (gpointer self)
{
	_vala_lambda0_ ((Foo*) self);
}

static void
_vala_lambda1_ (Foo* self)
{
}

static void
__vala_lambda1__foo_func (gpointer self)
{
	_vala_lambda1_ ((Foo*) self);
}

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	foo_set_foo (self, __vala_lambda0__foo_func, foo_ref (self), foo_unref);
	foo_set_bar (self, __vala_lambda1__foo_func, foo_ref (self), foo_unref);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

FooFunc
foo_get_foo (Foo* self,
             gpointer* result_target)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->get_foo) {
		return _klass_->get_foo (self, result_target);
	}
	return NULL;
}

static FooFunc
foo_real_get_foo (Foo* base,
                  gpointer* result_target)
{
	FooFunc result;
	Foo* self;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	FooFunc _tmp1_;
	gpointer _tmp1__target;
	self = base;
	_tmp0_ = self->priv->_foo;
	_tmp0__target = self->priv->_foo_target;
	_tmp1_ = _tmp0_;
	_tmp1__target = _tmp0__target;
	*result_target = _tmp1__target;
	result = _tmp1_;
	return result;
}

void
foo_set_foo (Foo* self,
             FooFunc value,
             gpointer value_target,
             GDestroyNotify value_target_destroy_notify)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->set_foo) {
		_klass_->set_foo (self, value, value_target, value_target_destroy_notify);
	}
}

static void
foo_real_set_foo (Foo* base,
                  FooFunc value,
                  gpointer value_target,
                  GDestroyNotify value_target_destroy_notify)
{
	Foo* self;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	self = base;
	_tmp0_ = value;
	_tmp0__target = value_target;
	_tmp0__target_destroy_notify = value_target_destroy_notify;
	value = NULL;
	value_target = NULL;
	value_target_destroy_notify = NULL;
	(self->priv->_foo_target_destroy_notify == NULL) ? NULL : (self->priv->_foo_target_destroy_notify (self->priv->_foo_target), NULL);
	self->priv->_foo = NULL;
	self->priv->_foo_target = NULL;
	self->priv->_foo_target_destroy_notify = NULL;
	self->priv->_foo = _tmp0_;
	self->priv->_foo_target = _tmp0__target;
	self->priv->_foo_target_destroy_notify = _tmp0__target_destroy_notify;
	(value_target_destroy_notify == NULL) ? NULL : (value_target_destroy_notify (value_target), NULL);
	value = NULL;
	value_target = NULL;
	value_target_destroy_notify = NULL;
}

FooFunc
foo_get_bar (Foo* self,
             gpointer* result_target)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->get_bar) {
		return _klass_->get_bar (self, result_target);
	}
	return NULL;
}

static FooFunc
foo_real_get_bar (Foo* base,
                  gpointer* result_target)
{
	FooFunc result;
	Foo* self;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	FooFunc _tmp1_;
	gpointer _tmp1__target;
	self = base;
	_tmp0_ = self->priv->_bar;
	_tmp0__target = self->priv->_bar_target;
	_tmp1_ = _tmp0_;
	_tmp1__target = _tmp0__target;
	*result_target = _tmp1__target;
	result = _tmp1_;
	return result;
}

void
foo_set_bar (Foo* self,
             FooFunc value,
             gpointer value_target,
             GDestroyNotify value_target_destroy_notify)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->set_bar) {
		_klass_->set_bar (self, value, value_target, value_target_destroy_notify);
	}
}

static void
foo_real_set_bar (Foo* base,
                  FooFunc value,
                  gpointer value_target,
                  GDestroyNotify value_target_destroy_notify)
{
	Foo* self;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	self = base;
	_tmp0_ = value;
	_tmp0__target = value_target;
	_tmp0__target_destroy_notify = value_target_destroy_notify;
	value = NULL;
	value_target = NULL;
	value_target_destroy_notify = NULL;
	(self->priv->_bar_target_destroy_notify == NULL) ? NULL : (self->priv->_bar_target_destroy_notify (self->priv->_bar_target), NULL);
	self->priv->_bar = NULL;
	self->priv->_bar_target = NULL;
	self->priv->_bar_target_destroy_notify = NULL;
	self->priv->_bar = _tmp0_;
	self->priv->_bar_target = _tmp0__target;
	self->priv->_bar_target_destroy_notify = _tmp0__target_destroy_notify;
	(value_target_destroy_notify == NULL) ? NULL : (value_target_destroy_notify (value_target), NULL);
	value = NULL;
	value_target = NULL;
	value_target_destroy_notify = NULL;
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	FOO_CLASS (klass)->get_foo = (FooFunc (*) (Foo*, gpointer*)) foo_real_get_foo;
	FOO_CLASS (klass)->set_foo = (void (*) (Foo*, FooFunc, gpointer, GDestroyNotify)) foo_real_set_foo;
	FOO_CLASS (klass)->get_bar = (FooFunc (*) (Foo*, gpointer*)) foo_real_get_bar;
	FOO_CLASS (klass)->set_bar = (void (*) (Foo*, FooFunc, gpointer, GDestroyNotify)) foo_real_set_bar;
}

static void
foo_ifoo_interface_init (IFooIface * iface,
                         gpointer iface_data)
{
	foo_ifoo_parent_iface = g_type_interface_peek_parent (iface);
	iface->get_foo = (FooFunc (*) (IFoo*, gpointer*)) foo_get_foo;
	iface->set_foo = (void (*) (IFoo*, FooFunc, gpointer, GDestroyNotify)) foo_set_foo;
	iface->get_bar = (FooFunc (*) (IFoo*, gpointer*)) foo_get_bar;
	iface->set_bar = (void (*) (IFoo*, FooFunc, gpointer, GDestroyNotify)) foo_set_bar;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
	(self->priv->_bar_target_destroy_notify == NULL) ? NULL : (self->priv->_bar_target_destroy_notify (self->priv->_bar_target), NULL);
	self->priv->_bar = NULL;
	self->priv->_bar_target = NULL;
	self->priv->_bar_target_destroy_notify = NULL;
	(self->priv->_foo_target_destroy_notify == NULL) ? NULL : (self->priv->_foo_target_destroy_notify (self->priv->_foo_target), NULL);
	self->priv->_foo = NULL;
	self->priv->_foo_target = NULL;
	self->priv->_foo_target_destroy_notify = NULL;
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	static const GInterfaceInfo ifoo_info = { (GInterfaceInitFunc) foo_ifoo_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	g_type_add_interface_static (foo_type_id, TYPE_IFOO, &ifoo_info);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

static void
_vala_lambda2_ (Bar* self)
{
}

static void
__vala_lambda2__foo_func (gpointer self)
{
	_vala_lambda2_ ((Bar*) self);
}

static void
_vala_lambda3_ (Bar* self)
{
}

static void
__vala_lambda3__foo_func (gpointer self)
{
	_vala_lambda3_ ((Bar*) self);
}

Bar*
bar_construct (GType object_type)
{
	Bar* self = NULL;
	self = (Bar*) foo_construct (object_type);
	foo_set_foo (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo), __vala_lambda2__foo_func, foo_ref (self), foo_unref);
	foo_set_bar (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo), __vala_lambda3__foo_func, foo_ref (self), foo_unref);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static FooFunc
bar_real_get_foo (Foo* base,
                  gpointer* result_target)
{
	FooFunc result;
	Bar* self;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	FooFunc _tmp1_;
	gpointer _tmp1__target;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = self->priv->_foo;
	_tmp0__target = self->priv->_foo_target;
	_tmp1_ = _tmp0_;
	_tmp1__target = _tmp0__target;
	*result_target = _tmp1__target;
	result = _tmp1_;
	return result;
}

static void
bar_real_set_foo (Foo* base,
                  FooFunc value,
                  gpointer value_target,
                  GDestroyNotify value_target_destroy_notify)
{
	Bar* self;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = value;
	_tmp0__target = value_target;
	_tmp0__target_destroy_notify = value_target_destroy_notify;
	value = NULL;
	value_target = NULL;
	value_target_destroy_notify = NULL;
	(self->priv->_foo_target_destroy_notify == NULL) ? NULL : (self->priv->_foo_target_destroy_notify (self->priv->_foo_target), NULL);
	self->priv->_foo = NULL;
	self->priv->_foo_target = NULL;
	self->priv->_foo_target_destroy_notify = NULL;
	self->priv->_foo = _tmp0_;
	self->priv->_foo_target = _tmp0__target;
	self->priv->_foo_target_destroy_notify = _tmp0__target_destroy_notify;
	(value_target_destroy_notify == NULL) ? NULL : (value_target_destroy_notify (value_target), NULL);
	value = NULL;
	value_target = NULL;
	value_target_destroy_notify = NULL;
}

static FooFunc
bar_real_get_bar (Foo* base,
                  gpointer* result_target)
{
	FooFunc result;
	Bar* self;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	FooFunc _tmp1_;
	gpointer _tmp1__target;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = self->priv->_bar;
	_tmp0__target = self->priv->_bar_target;
	_tmp1_ = _tmp0_;
	_tmp1__target = _tmp0__target;
	*result_target = _tmp1__target;
	result = _tmp1_;
	return result;
}

static void
bar_real_set_bar (Foo* base,
                  FooFunc value,
                  gpointer value_target,
                  GDestroyNotify value_target_destroy_notify)
{
	Bar* self;
	FooFunc _tmp0_;
	gpointer _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = value;
	_tmp0__target = value_target;
	_tmp0__target_destroy_notify = value_target_destroy_notify;
	value = NULL;
	value_target = NULL;
	value_target_destroy_notify = NULL;
	(self->priv->_bar_target_destroy_notify == NULL) ? NULL : (self->priv->_bar_target_destroy_notify (self->priv->_bar_target), NULL);
	self->priv->_bar = NULL;
	self->priv->_bar_target = NULL;
	self->priv->_bar_target_destroy_notify = NULL;
	self->priv->_bar = _tmp0_;
	self->priv->_bar_target = _tmp0__target;
	self->priv->_bar_target_destroy_notify = _tmp0__target_destroy_notify;
	(value_target_destroy_notify == NULL) ? NULL : (value_target_destroy_notify (value_target), NULL);
	value = NULL;
	value_target = NULL;
	value_target_destroy_notify = NULL;
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = bar_finalize;
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
	FOO_CLASS (klass)->get_foo = (FooFunc (*) (Foo*, gpointer*)) bar_real_get_foo;
	FOO_CLASS (klass)->set_foo = (void (*) (Foo*, FooFunc, gpointer, GDestroyNotify)) bar_real_set_foo;
	FOO_CLASS (klass)->get_bar = (FooFunc (*) (Foo*, gpointer*)) bar_real_get_bar;
	FOO_CLASS (klass)->set_bar = (void (*) (Foo*, FooFunc, gpointer, GDestroyNotify)) bar_real_set_bar;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
}

static void
bar_finalize (Foo * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	(self->priv->_bar_target_destroy_notify == NULL) ? NULL : (self->priv->_bar_target_destroy_notify (self->priv->_bar_target), NULL);
	self->priv->_bar = NULL;
	self->priv->_bar_target = NULL;
	self->priv->_bar_target_destroy_notify = NULL;
	(self->priv->_foo_target_destroy_notify == NULL) ? NULL : (self->priv->_foo_target_destroy_notify (self->priv->_foo_target), NULL);
	self->priv->_foo = NULL;
	self->priv->_foo_target = NULL;
	self->priv->_foo_target_destroy_notify = NULL;
	FOO_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (TYPE_FOO, "Bar", &g_define_type_info, 0);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	FooFunc _tmp1_ = NULL;
	gpointer _tmp1__target = NULL;
	FooFunc _tmp2_;
	gpointer _tmp2__target;
	Bar* bar = NULL;
	Bar* _tmp3_;
	FooFunc _tmp4_ = NULL;
	gpointer _tmp4__target = NULL;
	FooFunc _tmp5_;
	gpointer _tmp5__target;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_tmp1_ = foo_get_foo (foo, &_tmp1__target);
	_tmp2_ = _tmp1_;
	_tmp2__target = _tmp1__target;
	_tmp2_ (_tmp2__target);
	_tmp3_ = bar_new ();
	bar = _tmp3_;
	_tmp4_ = foo_get_bar (G_TYPE_CHECK_INSTANCE_CAST (bar, TYPE_FOO, Foo), &_tmp4__target);
	_tmp5_ = _tmp4_;
	_tmp5__target = _tmp4__target;
	_tmp5_ (_tmp5__target);
	_foo_unref0 (bar);
	_foo_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

