/* objects_property_ownership.c generated by valac, the Vala compiler
 * generated from objects_property_ownership.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_FOO_PROPERTY,
	BAR_FOO_OWNED_PROPERTY,
	BAR_FOO_WEAK_PROPERTY,
	BAR_FOO_WEAK_OWNED_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_MANAM (manam_get_type ())
#define MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAM, Manam))
#define MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MANAM, ManamClass))
#define IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAM))
#define IS_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MANAM))
#define MANAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MANAM, ManamClass))

typedef struct _Manam Manam;
typedef struct _ManamClass ManamClass;
typedef struct _ManamPrivate ManamPrivate;
typedef struct _ParamSpecManam ParamSpecManam;
#define _manam_unref0(var) ((var == NULL) ? NULL : (var = (manam_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
};

struct _BarPrivate {
	Foo* _foo;
	Foo* _foo_owned;
	Foo* _foo_weak;
	Foo* _foo_weak_owned;
};

struct _Manam {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ManamPrivate * priv;
};

struct _ManamClass {
	GTypeClass parent_class;
	void (*finalize) (Manam *self);
};

struct _ManamPrivate {
	Foo* _foo;
	Foo* _foo_owned;
	Foo* _foo_weak;
	Foo* _foo_weak_owned;
};

struct _ParamSpecManam {
	GParamSpec parent_instance;
};

static gpointer foo_parent_class = NULL;
static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;
static gint Manam_private_offset;
static gpointer manam_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
VALA_EXTERN Foo* bar_get_foo (Bar* self);
VALA_EXTERN void bar_set_foo (Bar* self,
                  Foo* value);
VALA_EXTERN Foo* bar_get_foo_owned (Bar* self);
VALA_EXTERN void bar_set_foo_owned (Bar* self,
                        Foo* value);
VALA_EXTERN Foo* bar_get_foo_weak (Bar* self);
VALA_EXTERN void bar_set_foo_weak (Bar* self,
                       Foo* value);
VALA_EXTERN Foo* bar_get_foo_weak_owned (Bar* self);
VALA_EXTERN void bar_set_foo_weak_owned (Bar* self,
                             Foo* value);
static void bar_finalize (GObject * obj);
static GType bar_get_type_once (void);
static void _vala_bar_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_bar_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
VALA_EXTERN gpointer manam_ref (gpointer instance);
VALA_EXTERN void manam_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_manam (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags);
VALA_EXTERN void value_set_manam (GValue* value,
                      gpointer v_object);
VALA_EXTERN void value_take_manam (GValue* value,
                       gpointer v_object);
VALA_EXTERN gpointer value_get_manam (const GValue* value);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Manam, manam_unref)
VALA_EXTERN Manam* manam_new (void);
VALA_EXTERN Manam* manam_construct (GType object_type);
VALA_EXTERN Foo* manam_get_foo (Manam* self);
VALA_EXTERN void manam_set_foo (Manam* self,
                    Foo* value);
VALA_EXTERN Foo* manam_get_foo_owned (Manam* self);
VALA_EXTERN void manam_set_foo_owned (Manam* self,
                          Foo* value);
VALA_EXTERN Foo* manam_get_foo_weak (Manam* self);
VALA_EXTERN void manam_set_foo_weak (Manam* self,
                         Foo* value);
VALA_EXTERN Foo* manam_get_foo_weak_owned (Manam* self);
VALA_EXTERN void manam_set_foo_weak_owned (Manam* self,
                               Foo* value);
static void manam_finalize (Manam * obj);
static GType manam_get_type_once (void);
static void _vala_main (void);

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

Foo*
bar_get_foo (Bar* self)
{
	Foo* result;
	Foo* _tmp0_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_foo;
	result = _tmp0_;
	return result;
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

void
bar_set_foo (Bar* self,
             Foo* value)
{
	Foo* old_value;
	g_return_if_fail (IS_BAR (self));
	old_value = bar_get_foo (self);
	if (old_value != value) {
		Foo* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_foo);
		self->priv->_foo = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_FOO_PROPERTY]);
	}
}

Foo*
bar_get_foo_owned (Bar* self)
{
	Foo* result;
	Foo* _tmp0_;
	Foo* _tmp1_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_foo_owned;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	result = _tmp1_;
	return result;
}

void
bar_set_foo_owned (Bar* self,
                   Foo* value)
{
	Foo* old_value;
	g_return_if_fail (IS_BAR (self));
	old_value = bar_get_foo_owned (self);
	if (old_value != value) {
		Foo* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_foo_owned);
		self->priv->_foo_owned = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_FOO_OWNED_PROPERTY]);
	}
	_g_object_unref0 (old_value);
}

Foo*
bar_get_foo_weak (Bar* self)
{
	Foo* result;
	Foo* _tmp0_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_foo_weak;
	result = _tmp0_;
	return result;
}

void
bar_set_foo_weak (Bar* self,
                  Foo* value)
{
	Foo* old_value;
	g_return_if_fail (IS_BAR (self));
	old_value = bar_get_foo_weak (self);
	if (old_value != value) {
		self->priv->_foo_weak = value;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_FOO_WEAK_PROPERTY]);
	}
}

Foo*
bar_get_foo_weak_owned (Bar* self)
{
	Foo* result;
	Foo* _tmp0_;
	Foo* _tmp1_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_foo_weak_owned;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	result = _tmp1_;
	return result;
}

void
bar_set_foo_weak_owned (Bar* self,
                        Foo* value)
{
	Foo* old_value;
	g_return_if_fail (IS_BAR (self));
	old_value = bar_get_foo_weak_owned (self);
	if (old_value != value) {
		self->priv->_foo_weak_owned = value;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_FOO_WEAK_OWNED_PROPERTY]);
	}
	_g_object_unref0 (old_value);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_bar_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_bar_set_property;
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_FOO_PROPERTY, bar_properties[BAR_FOO_PROPERTY] = g_param_spec_object ("foo", "foo", "foo", TYPE_FOO, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_FOO_OWNED_PROPERTY, bar_properties[BAR_FOO_OWNED_PROPERTY] = g_param_spec_object ("foo-owned", "foo-owned", "foo-owned", TYPE_FOO, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_FOO_WEAK_PROPERTY, bar_properties[BAR_FOO_WEAK_PROPERTY] = g_param_spec_object ("foo-weak", "foo-weak", "foo-weak", TYPE_FOO, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_FOO_WEAK_OWNED_PROPERTY, bar_properties[BAR_FOO_WEAK_OWNED_PROPERTY] = g_param_spec_object ("foo-weak-owned", "foo-weak-owned", "foo-weak-owned", TYPE_FOO, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
}

static void
bar_finalize (GObject * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	_g_object_unref0 (self->priv->_foo);
	_g_object_unref0 (self->priv->_foo_owned);
	G_OBJECT_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_bar_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_FOO_PROPERTY:
		g_value_set_object (value, bar_get_foo (self));
		break;
		case BAR_FOO_OWNED_PROPERTY:
		g_value_take_object (value, bar_get_foo_owned (self));
		break;
		case BAR_FOO_WEAK_PROPERTY:
		g_value_set_object (value, bar_get_foo_weak (self));
		break;
		case BAR_FOO_WEAK_OWNED_PROPERTY:
		g_value_take_object (value, bar_get_foo_weak_owned (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_bar_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_FOO_PROPERTY:
		bar_set_foo (self, g_value_get_object (value));
		break;
		case BAR_FOO_OWNED_PROPERTY:
		bar_set_foo_owned (self, g_value_get_object (value));
		break;
		case BAR_FOO_WEAK_PROPERTY:
		bar_set_foo_weak (self, g_value_get_object (value));
		break;
		case BAR_FOO_WEAK_OWNED_PROPERTY:
		bar_set_foo_weak_owned (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static inline gpointer
manam_get_instance_private (Manam* self)
{
	return G_STRUCT_MEMBER_P (self, Manam_private_offset);
}

Manam*
manam_construct (GType object_type)
{
	Manam* self = NULL;
	self = (Manam*) g_type_create_instance (object_type);
	return self;
}

Manam*
manam_new (void)
{
	return manam_construct (TYPE_MANAM);
}

Foo*
manam_get_foo (Manam* self)
{
	Foo* result;
	Foo* _tmp0_;
	g_return_val_if_fail (IS_MANAM (self), NULL);
	_tmp0_ = self->priv->_foo;
	result = _tmp0_;
	return result;
}

void
manam_set_foo (Manam* self,
               Foo* value)
{
	Foo* _tmp0_;
	g_return_if_fail (IS_MANAM (self));
	_tmp0_ = _g_object_ref0 (value);
	_g_object_unref0 (self->priv->_foo);
	self->priv->_foo = _tmp0_;
}

Foo*
manam_get_foo_owned (Manam* self)
{
	Foo* result;
	Foo* _tmp0_;
	Foo* _tmp1_;
	g_return_val_if_fail (IS_MANAM (self), NULL);
	_tmp0_ = self->priv->_foo_owned;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	result = _tmp1_;
	return result;
}

void
manam_set_foo_owned (Manam* self,
                     Foo* value)
{
	Foo* _tmp0_;
	g_return_if_fail (IS_MANAM (self));
	_tmp0_ = _g_object_ref0 (value);
	_g_object_unref0 (self->priv->_foo_owned);
	self->priv->_foo_owned = _tmp0_;
}

Foo*
manam_get_foo_weak (Manam* self)
{
	Foo* result;
	Foo* _tmp0_;
	g_return_val_if_fail (IS_MANAM (self), NULL);
	_tmp0_ = self->priv->_foo_weak;
	result = _tmp0_;
	return result;
}

void
manam_set_foo_weak (Manam* self,
                    Foo* value)
{
	g_return_if_fail (IS_MANAM (self));
	self->priv->_foo_weak = value;
}

Foo*
manam_get_foo_weak_owned (Manam* self)
{
	Foo* result;
	Foo* _tmp0_;
	Foo* _tmp1_;
	g_return_val_if_fail (IS_MANAM (self), NULL);
	_tmp0_ = self->priv->_foo_weak_owned;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	result = _tmp1_;
	return result;
}

void
manam_set_foo_weak_owned (Manam* self,
                          Foo* value)
{
	g_return_if_fail (IS_MANAM (self));
	self->priv->_foo_weak_owned = value;
}

static void
value_manam_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_manam_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		manam_unref (value->data[0].v_pointer);
	}
}

static void
value_manam_copy_value (const GValue* src_value,
                        GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = manam_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_manam_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_manam_collect_value (GValue* value,
                           guint n_collect_values,
                           GTypeCValue* collect_values,
                           guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Manam * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = manam_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_manam_lcopy_value (const GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	Manam ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = manam_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_manam (const gchar* name,
                  const gchar* nick,
                  const gchar* blurb,
                  GType object_type,
                  GParamFlags flags)
{
	ParamSpecManam* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_MANAM), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_manam (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM), NULL);
	return value->data[0].v_pointer;
}

void
value_set_manam (GValue* value,
                 gpointer v_object)
{
	Manam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		manam_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_unref (old);
	}
}

void
value_take_manam (GValue* value,
                  gpointer v_object)
{
	Manam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_unref (old);
	}
}

static void
manam_class_init (ManamClass * klass,
                  gpointer klass_data)
{
	manam_parent_class = g_type_class_peek_parent (klass);
	((ManamClass *) klass)->finalize = manam_finalize;
	g_type_class_adjust_private_offset (klass, &Manam_private_offset);
}

static void
manam_instance_init (Manam * self,
                     gpointer klass)
{
	self->priv = manam_get_instance_private (self);
	self->ref_count = 1;
}

static void
manam_finalize (Manam * obj)
{
	Manam * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MANAM, Manam);
	g_signal_handlers_destroy (self);
	_g_object_unref0 (self->priv->_foo);
	_g_object_unref0 (self->priv->_foo_owned);
}

static GType
manam_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_manam_init, value_manam_free_value, value_manam_copy_value, value_manam_peek_pointer, "p", value_manam_collect_value, "p", value_manam_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (ManamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Manam), 0, (GInstanceInitFunc) manam_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType manam_type_id;
	manam_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Manam", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Manam_private_offset = g_type_add_instance_private (manam_type_id, sizeof (ManamPrivate));
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

gpointer
manam_ref (gpointer instance)
{
	Manam * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
manam_unref (gpointer instance)
{
	Manam * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		MANAM_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	{
		Bar* bar = NULL;
		Bar* _tmp1_;
		Foo* f = NULL;
		Foo* _tmp2_;
		Foo* _tmp3_;
		_tmp1_ = bar_new ();
		bar = _tmp1_;
		bar_set_foo (bar, foo);
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_tmp2_ = bar_get_foo (bar);
		_tmp3_ = _tmp2_;
		f = _tmp3_;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_g_object_unref0 (bar);
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	{
		Bar* bar = NULL;
		Bar* _tmp4_;
		Foo* f = NULL;
		Foo* _tmp5_;
		Foo* _tmp6_;
		_tmp4_ = bar_new ();
		bar = _tmp4_;
		bar_set_foo_owned (bar, foo);
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_tmp5_ = bar_get_foo_owned (bar);
		_tmp6_ = _tmp5_;
		f = _tmp6_;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 3), "foo.ref_count == 3");
		_g_object_unref0 (f);
		_g_object_unref0 (bar);
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	{
		Bar* bar = NULL;
		Bar* _tmp7_;
		Foo* f_weak = NULL;
		Foo* _tmp8_;
		Foo* _tmp9_;
		_tmp7_ = bar_new ();
		bar = _tmp7_;
		bar_set_foo_weak (bar, foo);
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_tmp8_ = bar_get_foo_weak (bar);
		_tmp9_ = _tmp8_;
		f_weak = _tmp9_;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_g_object_unref0 (bar);
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	{
		Bar* bar = NULL;
		Bar* _tmp10_;
		Foo* f_weak_owned = NULL;
		Foo* _tmp11_;
		Foo* _tmp12_;
		_tmp10_ = bar_new ();
		bar = _tmp10_;
		bar_set_foo_weak_owned (bar, foo);
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_tmp11_ = bar_get_foo_weak_owned (bar);
		_tmp12_ = _tmp11_;
		f_weak_owned = _tmp12_;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_g_object_unref0 (f_weak_owned);
		_g_object_unref0 (bar);
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	{
		Manam* manam = NULL;
		Manam* _tmp13_;
		Foo* f = NULL;
		Foo* _tmp14_;
		Foo* _tmp15_;
		_tmp13_ = manam_new ();
		manam = _tmp13_;
		manam_set_foo (manam, foo);
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_tmp14_ = manam_get_foo (manam);
		_tmp15_ = _tmp14_;
		f = _tmp15_;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_manam_unref0 (manam);
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	{
		Manam* manam = NULL;
		Manam* _tmp16_;
		Foo* f = NULL;
		Foo* _tmp17_;
		Foo* _tmp18_;
		_tmp16_ = manam_new ();
		manam = _tmp16_;
		manam_set_foo_owned (manam, foo);
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_tmp17_ = manam_get_foo_owned (manam);
		_tmp18_ = _tmp17_;
		f = _tmp18_;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 3), "foo.ref_count == 3");
		_g_object_unref0 (f);
		_manam_unref0 (manam);
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	{
		Manam* manam = NULL;
		Manam* _tmp19_;
		Foo* f_weak = NULL;
		Foo* _tmp20_;
		Foo* _tmp21_;
		_tmp19_ = manam_new ();
		manam = _tmp19_;
		manam_set_foo_weak (manam, foo);
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_tmp20_ = manam_get_foo_weak (manam);
		_tmp21_ = _tmp20_;
		f_weak = _tmp21_;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_manam_unref0 (manam);
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	{
		Manam* manam = NULL;
		Manam* _tmp22_;
		Foo* f_weak_owned = NULL;
		Foo* _tmp23_;
		Foo* _tmp24_;
		_tmp22_ = manam_new ();
		manam = _tmp22_;
		manam_set_foo_weak_owned (manam, foo);
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_tmp23_ = manam_get_foo_weak_owned (manam);
		_tmp24_ = _tmp23_;
		f_weak_owned = _tmp24_;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		_g_object_unref0 (f_weak_owned);
		_manam_unref0 (manam);
	}
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
	_g_object_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

