/* objects_property_delegate.c generated by valac, the Vala compiler
 * generated from objects_property_delegate.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef const gchar* (*Manam) (gpointer user_data);

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_DELEG_PROPERTY,
	BAR_DELEG_V_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
	Manam (*get_deleg_v) (Foo* self, gpointer* result_target);
	void (*set_deleg_v) (Foo* self, Manam value, gpointer value_target);
	Manam (*get_deleg_no_target_v) (Foo* self);
	void (*set_deleg_no_target_v) (Foo* self, Manam value);
};

struct _FooPrivate {
	Manam _deleg;
	gpointer _deleg_target;
	GDestroyNotify _deleg_target_destroy_notify;
	Manam _deleg_v;
	gpointer _deleg_v_target;
	GDestroyNotify _deleg_v_target_destroy_notify;
	Manam _deleg_no_target;
	gpointer _deleg_no_target_target;
	GDestroyNotify _deleg_no_target_target_destroy_notify;
	Manam _deleg_no_target_v;
	gpointer _deleg_no_target_v_target;
	GDestroyNotify _deleg_no_target_v_target_destroy_notify;
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
	Manam (*get_deleg_v) (Bar* self);
	void (*set_deleg_v) (Bar* self, Manam value);
};

struct _BarPrivate {
	Manam _deleg;
	gpointer _deleg_target;
	GDestroyNotify _deleg_target_destroy_notify;
	Manam _deleg_v;
	gpointer _deleg_v_target;
	GDestroyNotify _deleg_v_target_destroy_notify;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;

VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN Manam foo_get_deleg_v (Foo* self,
                       gpointer* result_target);
VALA_EXTERN void foo_set_deleg_v (Foo* self,
                      Manam value,
                      gpointer value_target);
VALA_EXTERN Manam foo_get_deleg_no_target_v (Foo* self);
VALA_EXTERN void foo_set_deleg_no_target_v (Foo* self,
                                Manam value);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN Manam foo_get_deleg (Foo* self,
                     gpointer* result_target);
VALA_EXTERN void foo_set_deleg (Foo* self,
                    Manam value,
                    gpointer value_target);
VALA_EXTERN Manam foo_get_deleg_no_target (Foo* self);
VALA_EXTERN void foo_set_deleg_no_target (Foo* self,
                              Manam value);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Manam bar_get_deleg_v (Bar* self);
VALA_EXTERN void bar_set_deleg_v (Bar* self,
                      Manam value);
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
VALA_EXTERN Manam bar_get_deleg (Bar* self);
VALA_EXTERN void bar_set_deleg (Bar* self,
                    Manam value);
static void bar_finalize (GObject * obj);
static GType bar_get_type_once (void);
static void _vala_bar_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_bar_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
VALA_EXTERN const gchar* manam (void);
static void _vala_main (void);

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

Manam
foo_get_deleg (Foo* self,
               gpointer* result_target)
{
	Manam result;
	Manam _tmp0_;
	gpointer _tmp0__target;
	Manam _tmp1_;
	gpointer _tmp1__target;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_deleg;
	_tmp0__target = self->priv->_deleg_target;
	_tmp1_ = _tmp0_;
	_tmp1__target = _tmp0__target;
	*result_target = _tmp1__target;
	result = _tmp1_;
	return result;
}

void
foo_set_deleg (Foo* self,
               Manam value,
               gpointer value_target)
{
	g_return_if_fail (IS_FOO (self));
	(self->priv->_deleg_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_target_destroy_notify (self->priv->_deleg_target), NULL);
	self->priv->_deleg = NULL;
	self->priv->_deleg_target = NULL;
	self->priv->_deleg_target_destroy_notify = NULL;
	self->priv->_deleg = value;
	self->priv->_deleg_target = value_target;
	self->priv->_deleg_target_destroy_notify = NULL;
}

Manam
foo_get_deleg_v (Foo* self,
                 gpointer* result_target)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->get_deleg_v) {
		return _klass_->get_deleg_v (self, result_target);
	}
	return NULL;
}

static Manam
foo_real_get_deleg_v (Foo* base,
                      gpointer* result_target)
{
	Manam result;
	Foo* self;
	Manam _tmp0_;
	gpointer _tmp0__target;
	Manam _tmp1_;
	gpointer _tmp1__target;
	self = base;
	_tmp0_ = self->priv->_deleg_v;
	_tmp0__target = self->priv->_deleg_v_target;
	_tmp1_ = _tmp0_;
	_tmp1__target = _tmp0__target;
	*result_target = _tmp1__target;
	result = _tmp1_;
	return result;
}

void
foo_set_deleg_v (Foo* self,
                 Manam value,
                 gpointer value_target)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->set_deleg_v) {
		_klass_->set_deleg_v (self, value, value_target);
	}
}

static void
foo_real_set_deleg_v (Foo* base,
                      Manam value,
                      gpointer value_target)
{
	Foo* self;
	self = base;
	(self->priv->_deleg_v_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_v_target_destroy_notify (self->priv->_deleg_v_target), NULL);
	self->priv->_deleg_v = NULL;
	self->priv->_deleg_v_target = NULL;
	self->priv->_deleg_v_target_destroy_notify = NULL;
	self->priv->_deleg_v = value;
	self->priv->_deleg_v_target = value_target;
	self->priv->_deleg_v_target_destroy_notify = NULL;
}

Manam
foo_get_deleg_no_target (Foo* self)
{
	Manam result;
	Manam _tmp0_;
	gpointer _tmp0__target;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_deleg_no_target;
	_tmp0__target = self->priv->_deleg_no_target_target;
	result = _tmp0_;
	return result;
}

void
foo_set_deleg_no_target (Foo* self,
                         Manam value)
{
	g_return_if_fail (IS_FOO (self));
	(self->priv->_deleg_no_target_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_no_target_target_destroy_notify (self->priv->_deleg_no_target_target), NULL);
	self->priv->_deleg_no_target = NULL;
	self->priv->_deleg_no_target_target = NULL;
	self->priv->_deleg_no_target_target_destroy_notify = NULL;
	self->priv->_deleg_no_target = value;
	self->priv->_deleg_no_target_target = NULL;
	self->priv->_deleg_no_target_target_destroy_notify = NULL;
}

Manam
foo_get_deleg_no_target_v (Foo* self)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->get_deleg_no_target_v) {
		return _klass_->get_deleg_no_target_v (self);
	}
	return NULL;
}

static Manam
foo_real_get_deleg_no_target_v (Foo* base)
{
	Manam result;
	Foo* self;
	Manam _tmp0_;
	gpointer _tmp0__target;
	self = base;
	_tmp0_ = self->priv->_deleg_no_target_v;
	_tmp0__target = self->priv->_deleg_no_target_v_target;
	result = _tmp0_;
	return result;
}

void
foo_set_deleg_no_target_v (Foo* self,
                           Manam value)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->set_deleg_no_target_v) {
		_klass_->set_deleg_no_target_v (self, value);
	}
}

static void
foo_real_set_deleg_no_target_v (Foo* base,
                                Manam value)
{
	Foo* self;
	self = base;
	(self->priv->_deleg_no_target_v_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_no_target_v_target_destroy_notify (self->priv->_deleg_no_target_v_target), NULL);
	self->priv->_deleg_no_target_v = NULL;
	self->priv->_deleg_no_target_v_target = NULL;
	self->priv->_deleg_no_target_v_target_destroy_notify = NULL;
	self->priv->_deleg_no_target_v = value;
	self->priv->_deleg_no_target_v_target = NULL;
	self->priv->_deleg_no_target_v_target_destroy_notify = NULL;
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	FOO_CLASS (klass)->get_deleg_v = (Manam (*) (Foo*, gpointer*)) foo_real_get_deleg_v;
	FOO_CLASS (klass)->set_deleg_v = (void (*) (Foo*, Manam, gpointer)) foo_real_set_deleg_v;
	FOO_CLASS (klass)->get_deleg_no_target_v = (Manam (*) (Foo*)) foo_real_get_deleg_no_target_v;
	FOO_CLASS (klass)->set_deleg_no_target_v = (void (*) (Foo*, Manam)) foo_real_set_deleg_no_target_v;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
	(self->priv->_deleg_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_target_destroy_notify (self->priv->_deleg_target), NULL);
	self->priv->_deleg = NULL;
	self->priv->_deleg_target = NULL;
	self->priv->_deleg_target_destroy_notify = NULL;
	(self->priv->_deleg_v_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_v_target_destroy_notify (self->priv->_deleg_v_target), NULL);
	self->priv->_deleg_v = NULL;
	self->priv->_deleg_v_target = NULL;
	self->priv->_deleg_v_target_destroy_notify = NULL;
	(self->priv->_deleg_no_target_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_no_target_target_destroy_notify (self->priv->_deleg_no_target_target), NULL);
	self->priv->_deleg_no_target = NULL;
	self->priv->_deleg_no_target_target = NULL;
	self->priv->_deleg_no_target_target_destroy_notify = NULL;
	(self->priv->_deleg_no_target_v_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_no_target_v_target_destroy_notify (self->priv->_deleg_no_target_v_target), NULL);
	self->priv->_deleg_no_target_v = NULL;
	self->priv->_deleg_no_target_v_target = NULL;
	self->priv->_deleg_no_target_v_target_destroy_notify = NULL;
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

Manam
bar_get_deleg (Bar* self)
{
	Manam result;
	Manam _tmp0_;
	gpointer _tmp0__target;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_deleg;
	_tmp0__target = self->priv->_deleg_target;
	result = _tmp0_;
	return result;
}

void
bar_set_deleg (Bar* self,
               Manam value)
{
	Manam old_value;
	g_return_if_fail (IS_BAR (self));
	old_value = bar_get_deleg (self);
	if (old_value != value) {
		(self->priv->_deleg_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_target_destroy_notify (self->priv->_deleg_target), NULL);
		self->priv->_deleg = NULL;
		self->priv->_deleg_target = NULL;
		self->priv->_deleg_target_destroy_notify = NULL;
		self->priv->_deleg = value;
		self->priv->_deleg_target = NULL;
		self->priv->_deleg_target_destroy_notify = NULL;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_DELEG_PROPERTY]);
	}
}

Manam
bar_get_deleg_v (Bar* self)
{
	BarClass* _klass_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_klass_ = BAR_GET_CLASS (self);
	if (_klass_->get_deleg_v) {
		return _klass_->get_deleg_v (self);
	}
	return NULL;
}

static Manam
bar_real_get_deleg_v (Bar* base)
{
	Manam result;
	Bar* self;
	Manam _tmp0_;
	gpointer _tmp0__target;
	self = base;
	_tmp0_ = self->priv->_deleg_v;
	_tmp0__target = self->priv->_deleg_v_target;
	result = _tmp0_;
	return result;
}

void
bar_set_deleg_v (Bar* self,
                 Manam value)
{
	BarClass* _klass_;
	g_return_if_fail (IS_BAR (self));
	_klass_ = BAR_GET_CLASS (self);
	if (_klass_->set_deleg_v) {
		_klass_->set_deleg_v (self, value);
	}
}

static void
bar_real_set_deleg_v (Bar* base,
                      Manam value)
{
	Bar* self;
	Manam old_value;
	self = base;
	old_value = bar_real_get_deleg_v (base);
	if (old_value != value) {
		(self->priv->_deleg_v_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_v_target_destroy_notify (self->priv->_deleg_v_target), NULL);
		self->priv->_deleg_v = NULL;
		self->priv->_deleg_v_target = NULL;
		self->priv->_deleg_v_target_destroy_notify = NULL;
		self->priv->_deleg_v = value;
		self->priv->_deleg_v_target = NULL;
		self->priv->_deleg_v_target_destroy_notify = NULL;
		g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_DELEG_V_PROPERTY]);
	}
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
	BAR_CLASS (klass)->get_deleg_v = (Manam (*) (Bar*)) bar_real_get_deleg_v;
	BAR_CLASS (klass)->set_deleg_v = (void (*) (Bar*, Manam)) bar_real_set_deleg_v;
	G_OBJECT_CLASS (klass)->get_property = _vala_bar_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_bar_set_property;
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_DELEG_PROPERTY, bar_properties[BAR_DELEG_PROPERTY] = g_param_spec_pointer ("deleg", "deleg", "deleg", G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_DELEG_V_PROPERTY, bar_properties[BAR_DELEG_V_PROPERTY] = g_param_spec_pointer ("deleg-v", "deleg-v", "deleg-v", G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
}

static void
bar_finalize (GObject * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	(self->priv->_deleg_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_target_destroy_notify (self->priv->_deleg_target), NULL);
	self->priv->_deleg = NULL;
	self->priv->_deleg_target = NULL;
	self->priv->_deleg_target_destroy_notify = NULL;
	(self->priv->_deleg_v_target_destroy_notify == NULL) ? NULL : (self->priv->_deleg_v_target_destroy_notify (self->priv->_deleg_v_target), NULL);
	self->priv->_deleg_v = NULL;
	self->priv->_deleg_v_target = NULL;
	self->priv->_deleg_v_target_destroy_notify = NULL;
	G_OBJECT_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_bar_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_DELEG_PROPERTY:
		g_value_set_pointer (value, bar_get_deleg (self));
		break;
		case BAR_DELEG_V_PROPERTY:
		g_value_set_pointer (value, bar_get_deleg_v (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_bar_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_DELEG_PROPERTY:
		bar_set_deleg (self, g_value_get_pointer (value));
		break;
		case BAR_DELEG_V_PROPERTY:
		bar_set_deleg_v (self, g_value_get_pointer (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

const gchar*
manam (void)
{
	const gchar* result;
	result = "manam";
	return result;
}

static void
_vala_main (void)
{
	{
		Foo* foo = NULL;
		Foo* _tmp0_;
		Manam _tmp1_ = NULL;
		gpointer _tmp1__target = NULL;
		Manam _tmp2_;
		gpointer _tmp2__target;
		const gchar* _tmp3_;
		Manam _tmp4_ = NULL;
		gpointer _tmp4__target = NULL;
		Manam _tmp5_;
		gpointer _tmp5__target;
		const gchar* _tmp6_;
		Manam _tmp7_ = NULL;
		gpointer _tmp7__target = NULL;
		Manam _tmp8_;
		gpointer _tmp8__target;
		const gchar* _tmp9_;
		Manam _tmp10_ = NULL;
		gpointer _tmp10__target = NULL;
		Manam _tmp11_;
		gpointer _tmp11__target;
		const gchar* _tmp12_;
		_tmp0_ = foo_new ();
		foo = _tmp0_;
		foo_set_deleg (foo, (Manam) manam, NULL);
		_tmp1_ = foo_get_deleg (foo, &_tmp1__target);
		_tmp2_ = _tmp1_;
		_tmp2__target = _tmp1__target;
		_tmp3_ = _tmp2_ (_tmp2__target);
		_vala_assert (g_strcmp0 (_tmp3_, "manam") == 0, "foo.deleg () == \"manam\"");
		foo_set_deleg_v (foo, (Manam) manam, NULL);
		_tmp4_ = foo_get_deleg_v (foo, &_tmp4__target);
		_tmp5_ = _tmp4_;
		_tmp5__target = _tmp4__target;
		_tmp6_ = _tmp5_ (_tmp5__target);
		_vala_assert (g_strcmp0 (_tmp6_, "manam") == 0, "foo.deleg_v () == \"manam\"");
		foo_set_deleg_no_target (foo, (Manam) manam);
		_tmp7_ = foo_get_deleg_no_target (foo);
		_tmp7__target = NULL;
		_tmp8_ = _tmp7_;
		_tmp8__target = _tmp7__target;
		_tmp9_ = _tmp8_ (_tmp8__target);
		_vala_assert (g_strcmp0 (_tmp9_, "manam") == 0, "foo.deleg_no_target () == \"manam\"");
		foo_set_deleg_no_target_v (foo, (Manam) manam);
		_tmp10_ = foo_get_deleg_no_target_v (foo);
		_tmp10__target = NULL;
		_tmp11_ = _tmp10_;
		_tmp11__target = _tmp10__target;
		_tmp12_ = _tmp11_ (_tmp11__target);
		_vala_assert (g_strcmp0 (_tmp12_, "manam") == 0, "foo.deleg_no_target_v () == \"manam\"");
		_foo_unref0 (foo);
	}
	{
		Bar* bar = NULL;
		Bar* _tmp13_;
		Manam _tmp14_ = NULL;
		gpointer _tmp14__target = NULL;
		Manam _tmp15_;
		gpointer _tmp15__target;
		const gchar* _tmp16_;
		Manam _tmp17_ = NULL;
		gpointer _tmp17__target = NULL;
		Manam _tmp18_;
		gpointer _tmp18__target;
		const gchar* _tmp19_;
		Manam func = NULL;
		gpointer func_target = NULL;
		GDestroyNotify func_target_destroy_notify = NULL;
		Manam _tmp20_ = NULL;
		Manam _tmp21_;
		gpointer _tmp21__target;
		const gchar* _tmp22_;
		Manam _tmp23_ = NULL;
		Manam _tmp24_;
		gpointer _tmp24__target;
		const gchar* _tmp25_;
		_tmp13_ = bar_new ();
		bar = _tmp13_;
		bar_set_deleg (bar, (Manam) manam);
		_tmp14_ = bar_get_deleg (bar);
		_tmp14__target = NULL;
		_tmp15_ = _tmp14_;
		_tmp15__target = _tmp14__target;
		_tmp16_ = _tmp15_ (_tmp15__target);
		_vala_assert (g_strcmp0 (_tmp16_, "manam") == 0, "bar.deleg () == \"manam\"");
		bar_set_deleg_v (bar, (Manam) manam);
		_tmp17_ = bar_get_deleg_v (bar);
		_tmp17__target = NULL;
		_tmp18_ = _tmp17_;
		_tmp18__target = _tmp17__target;
		_tmp19_ = _tmp18_ (_tmp18__target);
		_vala_assert (g_strcmp0 (_tmp19_, "manam") == 0, "bar.deleg_v () == \"manam\"");
		g_object_get (G_TYPE_CHECK_INSTANCE_CAST (bar, G_TYPE_OBJECT, GObject), "deleg", &_tmp20_, NULL);
		(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
		func = NULL;
		func_target = NULL;
		func_target_destroy_notify = NULL;
		func = _tmp20_;
		func_target = NULL;
		func_target_destroy_notify = NULL;
		_tmp21_ = func;
		_tmp21__target = func_target;
		_tmp22_ = _tmp21_ (_tmp21__target);
		_vala_assert (g_strcmp0 (_tmp22_, "manam") == 0, "func () == \"manam\"");
		g_object_get (G_TYPE_CHECK_INSTANCE_CAST (bar, G_TYPE_OBJECT, GObject), "deleg-v", &_tmp23_, NULL);
		(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
		func = NULL;
		func_target = NULL;
		func_target_destroy_notify = NULL;
		func = _tmp23_;
		func_target = NULL;
		func_target_destroy_notify = NULL;
		_tmp24_ = func;
		_tmp24__target = func_target;
		_tmp25_ = _tmp24_ (_tmp24__target);
		_vala_assert (g_strcmp0 (_tmp25_, "manam") == 0, "func () == \"manam\"");
		(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
		func = NULL;
		func_target = NULL;
		func_target_destroy_notify = NULL;
		_g_object_unref0 (bar);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

