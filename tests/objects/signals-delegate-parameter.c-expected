/* objects_signals_delegate_parameter.c generated by valac, the Vala compiler
 * generated from objects_signals_delegate_parameter.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*FooFunc) (gpointer user_data);
typedef void (*BarFunc) (void);

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
enum  {
	FOO_DELEGATE_PARAM_NO_TARGET_SIGNAL,
	FOO_DELEGATE_PARAM_WITH_TARGET_SIGNAL,
	FOO_DELEGATE_PARAM_WITH_DESTROY_SIGNAL,
	FOO_NUM_SIGNALS
};
static guint foo_signals[FOO_NUM_SIGNALS] = {0};

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
};

struct _BarPrivate {
	Foo* foo;
	gboolean success2;
	gboolean success3;
};

static gpointer foo_parent_class = NULL;
VALA_EXTERN gboolean success1;
gboolean success1 = FALSE;
static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void g_cclosure_user_marshal_VOID__POINTER_POINTER (GClosure * closure,
                                                    GValue * return_value,
                                                    guint n_param_values,
                                                    const GValue * param_values,
                                                    gpointer invocation_hint,
                                                    gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__POINTER_POINTER_POINTER (GClosure * closure,
                                                            GValue * return_value,
                                                            guint n_param_values,
                                                            const GValue * param_values,
                                                            gpointer invocation_hint,
                                                            gpointer marshal_data);
static GType foo_get_type_once (void);
VALA_EXTERN void no_target_cb (BarFunc f);
VALA_EXTERN void with_target_cb (FooFunc f,
                     gpointer f_target);
VALA_EXTERN void with_destroy_cb (FooFunc f,
                      gpointer f_target,
                      GDestroyNotify f_target_destroy_notify);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
VALA_EXTERN void bar_test_no_target (Bar* self);
static void _no_target_cb_foo_delegate_param_no_target (Foo* _sender,
                                                 BarFunc f,
                                                 gpointer self);
static void _vala_lambda0_ (void);
static void __vala_lambda0__bar_func (void);
VALA_EXTERN void bar_test_with_target (Bar* self);
static void _with_target_cb_foo_delegate_param_with_target (Foo* _sender,
                                                     FooFunc f,
                                                     gpointer f_target,
                                                     gpointer self);
static void _vala_lambda1_ (Bar* self);
static void __vala_lambda1__foo_func (gpointer self);
VALA_EXTERN void bar_test_with_destroy (Bar* self);
static void _with_destroy_cb_foo_delegate_param_with_destroy (Foo* _sender,
                                                       FooFunc f,
                                                       gpointer f_target,
                                                       GDestroyNotify f_target_destroy_notify,
                                                       gpointer self);
static void _vala_lambda2_ (Bar* self);
static void __vala_lambda2__foo_func (gpointer self);
static void bar_finalize (GObject * obj);
static GType bar_get_type_once (void);
static void _vala_main (void);

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
g_cclosure_user_marshal_VOID__POINTER_POINTER (GClosure * closure,
                                               GValue * return_value,
                                               guint n_param_values,
                                               const GValue * param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__POINTER_POINTER) (gpointer data1, gpointer arg_1, gpointer arg_2, gpointer data2);
	register GMarshalFunc_VOID__POINTER_POINTER callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 3);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_pointer (param_values + 1), g_value_get_pointer (param_values + 2), data2);
}

static void
g_cclosure_user_marshal_VOID__POINTER_POINTER_POINTER (GClosure * closure,
                                                       GValue * return_value,
                                                       guint n_param_values,
                                                       const GValue * param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__POINTER_POINTER_POINTER) (gpointer data1, gpointer arg_1, gpointer arg_2, GDestroyNotify arg_3, gpointer data2);
	register GMarshalFunc_VOID__POINTER_POINTER_POINTER callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 4);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__POINTER_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_pointer (param_values + 1), g_value_get_pointer (param_values + 2), g_value_get_pointer (param_values + 3), data2);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	foo_signals[FOO_DELEGATE_PARAM_NO_TARGET_SIGNAL] = g_signal_new ("delegate-param-no-target", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__POINTER, G_TYPE_NONE, 1, G_TYPE_POINTER);
	foo_signals[FOO_DELEGATE_PARAM_WITH_TARGET_SIGNAL] = g_signal_new ("delegate-param-with-target", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__POINTER_POINTER, G_TYPE_NONE, 2, G_TYPE_POINTER, G_TYPE_POINTER);
	foo_signals[FOO_DELEGATE_PARAM_WITH_DESTROY_SIGNAL] = g_signal_new ("delegate-param-with-destroy", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__POINTER_POINTER_POINTER, G_TYPE_NONE, 3, G_TYPE_POINTER, G_TYPE_POINTER, G_TYPE_POINTER);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

void
no_target_cb (BarFunc f)
{
	f ();
}

void
with_target_cb (FooFunc f,
                gpointer f_target)
{
	f (f_target);
}

void
with_destroy_cb (FooFunc f,
                 gpointer f_target,
                 GDestroyNotify f_target_destroy_notify)
{
	f (f_target);
	(f_target_destroy_notify == NULL) ? NULL : (f_target_destroy_notify (f_target), NULL);
	f = NULL;
	f_target = NULL;
	f_target_destroy_notify = NULL;
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	Foo* _tmp0_;
	self = (Bar*) g_object_new (object_type, NULL);
	_tmp0_ = foo_new ();
	_g_object_unref0 (self->priv->foo);
	self->priv->foo = _tmp0_;
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
_no_target_cb_foo_delegate_param_no_target (Foo* _sender,
                                            BarFunc f,
                                            gpointer self)
{
	no_target_cb (f);
}

static void
_vala_lambda0_ (void)
{
	success1 = TRUE;
}

static void
__vala_lambda0__bar_func (void)
{
	_vala_lambda0_ ();
}

void
bar_test_no_target (Bar* self)
{
	Foo* _tmp0_;
	Foo* _tmp1_;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = self->priv->foo;
	g_signal_connect (_tmp0_, "delegate-param-no-target", (GCallback) _no_target_cb_foo_delegate_param_no_target, NULL);
	_tmp1_ = self->priv->foo;
	g_signal_emit (_tmp1_, foo_signals[FOO_DELEGATE_PARAM_NO_TARGET_SIGNAL], 0, __vala_lambda0__bar_func);
	_vala_assert (success1, "success1");
}

static void
_with_target_cb_foo_delegate_param_with_target (Foo* _sender,
                                                FooFunc f,
                                                gpointer f_target,
                                                gpointer self)
{
	with_target_cb (f, f_target);
}

static void
_vala_lambda1_ (Bar* self)
{
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "this.ref_count == 1");
	self->priv->success2 = TRUE;
}

static void
__vala_lambda1__foo_func (gpointer self)
{
	_vala_lambda1_ ((Bar*) self);
}

void
bar_test_with_target (Bar* self)
{
	Foo* _tmp0_;
	Foo* _tmp1_;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = self->priv->foo;
	g_signal_connect (_tmp0_, "delegate-param-with-target", (GCallback) _with_target_cb_foo_delegate_param_with_target, NULL);
	_tmp1_ = self->priv->foo;
	g_signal_emit (_tmp1_, foo_signals[FOO_DELEGATE_PARAM_WITH_TARGET_SIGNAL], 0, __vala_lambda1__foo_func, self);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "this.ref_count == 1");
	_vala_assert (self->priv->success2, "success2");
}

static void
_with_destroy_cb_foo_delegate_param_with_destroy (Foo* _sender,
                                                  FooFunc f,
                                                  gpointer f_target,
                                                  GDestroyNotify f_target_destroy_notify,
                                                  gpointer self)
{
	with_destroy_cb (f, f_target, f_target_destroy_notify);
}

static void
_vala_lambda2_ (Bar* self)
{
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "this.ref_count == 2");
	self->priv->success3 = TRUE;
}

static void
__vala_lambda2__foo_func (gpointer self)
{
	_vala_lambda2_ ((Bar*) self);
}

void
bar_test_with_destroy (Bar* self)
{
	Foo* _tmp0_;
	Foo* _tmp1_;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = self->priv->foo;
	g_signal_connect (_tmp0_, "delegate-param-with-destroy", (GCallback) _with_destroy_cb_foo_delegate_param_with_destroy, NULL);
	_tmp1_ = self->priv->foo;
	g_signal_emit (_tmp1_, foo_signals[FOO_DELEGATE_PARAM_WITH_DESTROY_SIGNAL], 0, __vala_lambda2__foo_func, g_object_ref (self), g_object_unref);
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "this.ref_count == 1");
	_vala_assert (self->priv->success3, "success3");
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
	self->priv->success2 = FALSE;
	self->priv->success3 = FALSE;
}

static void
bar_finalize (GObject * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	_g_object_unref0 (self->priv->foo);
	G_OBJECT_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_main (void)
{
	Bar* bar = NULL;
	Bar* _tmp0_;
	_tmp0_ = bar_new ();
	bar = _tmp0_;
	bar_test_no_target (bar);
	bar_test_with_target (bar);
	bar_test_with_destroy (bar);
	_g_object_unref0 (bar);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

