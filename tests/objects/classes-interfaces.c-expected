/* objects_classes_interfaces.c generated by valac, the Vala compiler
 * generated from objects_classes_interfaces.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_BASE (base_get_type ())
#define BASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BASE, Base))
#define BASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BASE, BaseClass))
#define IS_BASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BASE))
#define IS_BASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BASE))
#define BASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BASE, BaseClass))

typedef struct _Base Base;
typedef struct _BaseClass BaseClass;
typedef struct _BasePrivate BasePrivate;
enum  {
	BASE_0_PROPERTY,
	BASE_NUM_PROPERTIES
};
static GParamSpec* base_properties[BASE_NUM_PROPERTIES];

#define TYPE_IFOO (ifoo_get_type ())
#define IFOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IFOO, IFoo))
#define IS_IFOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IFOO))
#define IFOO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IFOO, IFooIface))

typedef struct _IFoo IFoo;
typedef struct _IFooIface IFooIface;

#define TYPE_IBAR (ibar_get_type ())
#define IBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IBAR, IBar))
#define IS_IBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IBAR))
#define IBAR_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IBAR, IBarIface))

typedef struct _IBar IBar;
typedef struct _IBarIface IBarIface;

#define TYPE_MANAM (manam_get_type ())
#define MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAM, Manam))
#define MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MANAM, ManamClass))
#define IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAM))
#define IS_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MANAM))
#define MANAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MANAM, ManamClass))

typedef struct _Manam Manam;
typedef struct _ManamClass ManamClass;
typedef struct _ManamPrivate ManamPrivate;
enum  {
	MANAM_0_PROPERTY,
	MANAM_NUM_PROPERTIES
};
static GParamSpec* manam_properties[MANAM_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Base {
	GObject parent_instance;
	BasePrivate * priv;
};

struct _BaseClass {
	GObjectClass parent_class;
};

struct _IFooIface {
	GTypeInterface parent_iface;
	gchar* (*foo) (IFoo* self);
};

struct _IBarIface {
	GTypeInterface parent_iface;
	gint (*foo) (IBar* self);
};

struct _Manam {
	Base parent_instance;
	ManamPrivate * priv;
};

struct _ManamClass {
	BaseClass parent_class;
};

static gpointer base_parent_class = NULL;
static gpointer manam_parent_class = NULL;
static IFooIface * manam_ifoo_parent_iface = NULL;
static IBarIface * manam_ibar_parent_iface = NULL;

VALA_EXTERN GType base_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Base, g_object_unref)
VALA_EXTERN void base_foo (Base* self);
VALA_EXTERN Base* base_new (void);
VALA_EXTERN Base* base_construct (GType object_type);
static GType base_get_type_once (void);
VALA_EXTERN GType ifoo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (IFoo, g_object_unref)
VALA_EXTERN gchar* ifoo_foo (IFoo* self);
static GType ifoo_get_type_once (void);
VALA_EXTERN GType ibar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (IBar, g_object_unref)
VALA_EXTERN gint ibar_foo (IBar* self);
static GType ibar_get_type_once (void);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Manam, g_object_unref)
static gint manam_real_ibar_foo (IBar* base);
static gchar* manam_real_ifoo_foo (IFoo* base);
VALA_EXTERN Manam* manam_new (void);
VALA_EXTERN Manam* manam_construct (GType object_type);
static GType manam_get_type_once (void);
static void _vala_main (void);

void
base_foo (Base* self)
{
	g_return_if_fail (IS_BASE (self));
}

Base*
base_construct (GType object_type)
{
	Base * self = NULL;
	self = (Base*) g_object_new (object_type, NULL);
	return self;
}

Base*
base_new (void)
{
	return base_construct (TYPE_BASE);
}

static void
base_class_init (BaseClass * klass,
                 gpointer klass_data)
{
	base_parent_class = g_type_class_peek_parent (klass);
}

static void
base_instance_init (Base * self,
                    gpointer klass)
{
}

static GType
base_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BaseClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) base_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Base), 0, (GInstanceInitFunc) base_instance_init, NULL };
	GType base_type_id;
	base_type_id = g_type_register_static (G_TYPE_OBJECT, "Base", &g_define_type_info, 0);
	return base_type_id;
}

GType
base_get_type (void)
{
	static volatile gsize base_type_id__once = 0;
	if (g_once_init_enter (&base_type_id__once)) {
		GType base_type_id;
		base_type_id = base_get_type_once ();
		g_once_init_leave (&base_type_id__once, base_type_id);
	}
	return base_type_id__once;
}

gchar*
ifoo_foo (IFoo* self)
{
	IFooIface* _iface_;
	g_return_val_if_fail (IS_IFOO (self), NULL);
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->foo) {
		return _iface_->foo (self);
	}
	return NULL;
}

static void
ifoo_default_init (IFooIface * iface,
                   gpointer iface_data)
{
}

static GType
ifoo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (IFooIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) ifoo_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType ifoo_type_id;
	ifoo_type_id = g_type_register_static (G_TYPE_INTERFACE, "IFoo", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (ifoo_type_id, TYPE_BASE);
	return ifoo_type_id;
}

GType
ifoo_get_type (void)
{
	static volatile gsize ifoo_type_id__once = 0;
	if (g_once_init_enter (&ifoo_type_id__once)) {
		GType ifoo_type_id;
		ifoo_type_id = ifoo_get_type_once ();
		g_once_init_leave (&ifoo_type_id__once, ifoo_type_id);
	}
	return ifoo_type_id__once;
}

gint
ibar_foo (IBar* self)
{
	IBarIface* _iface_;
	g_return_val_if_fail (IS_IBAR (self), 0);
	_iface_ = IBAR_GET_INTERFACE (self);
	if (_iface_->foo) {
		return _iface_->foo (self);
	}
	return -1;
}

static void
ibar_default_init (IBarIface * iface,
                   gpointer iface_data)
{
}

static GType
ibar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (IBarIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) ibar_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType ibar_type_id;
	ibar_type_id = g_type_register_static (G_TYPE_INTERFACE, "IBar", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (ibar_type_id, TYPE_BASE);
	return ibar_type_id;
}

GType
ibar_get_type (void)
{
	static volatile gsize ibar_type_id__once = 0;
	if (g_once_init_enter (&ibar_type_id__once)) {
		GType ibar_type_id;
		ibar_type_id = ibar_get_type_once ();
		g_once_init_leave (&ibar_type_id__once, ibar_type_id);
	}
	return ibar_type_id__once;
}

static gint
manam_real_ibar_foo (IBar* base)
{
	Manam * self;
	gint result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_MANAM, Manam);
	result = 23;
	return result;
}

static gchar*
manam_real_ifoo_foo (IFoo* base)
{
	Manam * self;
	gchar* _tmp0_;
	gchar* result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_MANAM, Manam);
	_tmp0_ = g_strdup ("foo");
	result = _tmp0_;
	return result;
}

Manam*
manam_construct (GType object_type)
{
	Manam * self = NULL;
	self = (Manam*) base_construct (object_type);
	return self;
}

Manam*
manam_new (void)
{
	return manam_construct (TYPE_MANAM);
}

static void
manam_class_init (ManamClass * klass,
                  gpointer klass_data)
{
	manam_parent_class = g_type_class_peek_parent (klass);
}

static void
manam_ifoo_interface_init (IFooIface * iface,
                           gpointer iface_data)
{
	manam_ifoo_parent_iface = g_type_interface_peek_parent (iface);
	iface->foo = (gchar* (*) (IFoo*)) manam_real_ifoo_foo;
}

static void
manam_ibar_interface_init (IBarIface * iface,
                           gpointer iface_data)
{
	manam_ibar_parent_iface = g_type_interface_peek_parent (iface);
	iface->foo = (gint (*) (IBar*)) manam_real_ibar_foo;
}

static void
manam_instance_init (Manam * self,
                     gpointer klass)
{
}

static GType
manam_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ManamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Manam), 0, (GInstanceInitFunc) manam_instance_init, NULL };
	static const GInterfaceInfo ifoo_info = { (GInterfaceInitFunc) manam_ifoo_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	static const GInterfaceInfo ibar_info = { (GInterfaceInitFunc) manam_ibar_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType manam_type_id;
	manam_type_id = g_type_register_static (TYPE_BASE, "Manam", &g_define_type_info, 0);
	g_type_add_interface_static (manam_type_id, TYPE_IFOO, &ifoo_info);
	g_type_add_interface_static (manam_type_id, TYPE_IBAR, &ibar_info);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static void
_vala_main (void)
{
	Manam* manam = NULL;
	Manam* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	_tmp0_ = manam_new ();
	manam = _tmp0_;
	_tmp1_ = ifoo_foo (G_TYPE_CHECK_INSTANCE_CAST (manam, TYPE_IFOO, IFoo));
	_tmp2_ = _tmp1_;
	_vala_assert (g_strcmp0 (_tmp2_, "foo") == 0, "((IFoo) manam).foo () == \"foo\"");
	_g_free0 (_tmp2_);
	_vala_assert (ibar_foo (G_TYPE_CHECK_INSTANCE_CAST (manam, TYPE_IBAR, IBar)) == 23, "((IBar) manam).foo () == 23");
	_g_object_unref0 (manam);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

