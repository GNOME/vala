/* objects_dynamic.c generated by valac, the Vala compiler
 * generated from objects_dynamic.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_PROP_PROPERTY,
	FOO_PROP2_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
enum  {
	FOO_SIG_SIGNAL,
	FOO_NUM_SIGNALS
};
static guint foo_signals[FOO_NUM_SIGNALS] = {0};

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooPrivate {
	gchar* _prop;
	gint _prop2;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
	gboolean success;
};

struct _BarClass {
	GObjectClass parent_class;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
static gpointer bar_parent_class = NULL;
VALA_EXTERN gboolean success;
gboolean success = FALSE;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN gchar* foo_get_prop (Foo* self);
VALA_EXTERN void foo_set_prop (Foo* self,
                   const gchar* value);
VALA_EXTERN gint foo_get_prop2 (Foo* self);
VALA_EXTERN void foo_set_prop2 (Foo* self,
                    gint value);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN void bar_sig_cb (Bar* self);
VALA_EXTERN void bar_sig_after_cb (Bar* self);
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static void bar_finalize (GObject * obj);
static GType bar_get_type_once (void);
VALA_EXTERN void sig_cb (void);
VALA_EXTERN void sig_after_cb (void);
static void _vala_main (void);
static void _sig_after_cb_dynamic_sig0_ (GObject* _sender,
                                  gpointer self);
static void _sig_cb_dynamic_sig1_ (GObject* _sender,
                            gpointer self);
static void _bar_sig_after_cb_dynamic_sig2_ (GObject* _sender,
                                      gpointer self);
static void _bar_sig_cb_dynamic_sig3_ (GObject* _sender,
                                gpointer self);

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

gchar*
foo_get_prop (Foo* self)
{
	gchar* result;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_prop;
	_tmp1_ = g_strdup (_tmp0_);
	result = _tmp1_;
	return result;
}

void
foo_set_prop (Foo* self,
              const gchar* value)
{
	gchar* old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop (self);
	if (g_strcmp0 (value, old_value) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_prop);
		self->priv->_prop = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_PROPERTY]);
	}
	_g_free0 (old_value);
}

gint
foo_get_prop2 (Foo* self)
{
	gint result;
	g_return_val_if_fail (IS_FOO (self), 0);
	result = self->priv->_prop2;
	return result;
}

void
foo_set_prop2 (Foo* self,
               gint value)
{
	gint old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop2 (self);
	if (old_value != value) {
		self->priv->_prop2 = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP2_PROPERTY]);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_PROPERTY, foo_properties[FOO_PROP_PROPERTY] = g_param_spec_string ("prop", "prop", "prop", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP2_PROPERTY, foo_properties[FOO_PROP2_PROPERTY] = g_param_spec_int ("prop2", "prop2", "prop2", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	foo_signals[FOO_SIG_SIGNAL] = g_signal_new ("sig", TYPE_FOO, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	_g_free0 (self->priv->_prop);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_PROP_PROPERTY:
		g_value_take_string (value, foo_get_prop (self));
		break;
		case FOO_PROP2_PROPERTY:
		g_value_set_int (value, foo_get_prop2 (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_PROP_PROPERTY:
		foo_set_prop (self, g_value_get_string (value));
		break;
		case FOO_PROP2_PROPERTY:
		foo_set_prop2 (self, g_value_get_int (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

void
bar_sig_cb (Bar* self)
{
	g_return_if_fail (IS_BAR (self));
	self->success = TRUE;
}

void
bar_sig_after_cb (Bar* self)
{
	g_return_if_fail (IS_BAR (self));
	_vala_assert (self->success, "success");
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->success = FALSE;
}

static void
bar_finalize (GObject * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	G_OBJECT_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

void
sig_cb (void)
{
	success = TRUE;
}

void
sig_after_cb (void)
{
	_vala_assert (success, "success");
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

static void
_sig_after_cb_dynamic_sig0_ (GObject* _sender,
                             gpointer self)
{
	sig_after_cb ();
}

static void
_sig_cb_dynamic_sig1_ (GObject* _sender,
                       gpointer self)
{
	sig_cb ();
}

static void
_bar_sig_after_cb_dynamic_sig2_ (GObject* _sender,
                                 gpointer self)
{
	bar_sig_after_cb ((Bar*) self);
}

static void
_bar_sig_cb_dynamic_sig3_ (GObject* _sender,
                           gpointer self)
{
	bar_sig_cb ((Bar*) self);
}

static void
_vala_main (void)
{
	{
		Foo* real = NULL;
		Foo* _tmp0_;
		GObject* foo = NULL;
		GObject* _tmp1_;
		gchar* s = NULL;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gint i = 0;
		gint _tmp4_;
		gint _tmp5_;
		gulong id1 = 0UL;
		gulong _tmp6_;
		gulong id2 = 0UL;
		gulong _tmp7_;
		_tmp0_ = foo_new ();
		real = _tmp0_;
		_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (real, G_TYPE_OBJECT, GObject));
		foo = _tmp1_;
		g_object_set (foo, "prop", "foo", NULL);
		g_object_get (foo, "prop", &_tmp2_, NULL);
		_tmp3_ = _tmp2_;
		s = _tmp3_;
		_vala_assert (g_strcmp0 (s, "foo") == 0, "s == \"foo\"");
		g_object_set (foo, "prop2", 42, NULL);
		g_object_get (foo, "prop2", &_tmp4_, NULL);
		_tmp5_ = _tmp4_;
		i = _tmp5_;
		_vala_assert (i == 42, "i == 42");
		success = FALSE;
		_tmp6_ = g_signal_connect_after (foo, "sig", (GCallback) _sig_after_cb_dynamic_sig0_, NULL);
		id1 = _tmp6_;
		_tmp7_ = g_signal_connect (foo, "sig", (GCallback) _sig_cb_dynamic_sig1_, NULL);
		id2 = _tmp7_;
		g_signal_emit (real, foo_signals[FOO_SIG_SIGNAL], 0);
		_vala_assert (success, "success");
		success = FALSE;
		g_signal_handler_disconnect (foo, id1);
		g_signal_handler_disconnect (foo, id2);
		g_signal_emit (real, foo_signals[FOO_SIG_SIGNAL], 0);
		_vala_assert (!success, "!success");
		_g_free0 (s);
		_g_object_unref0 (foo);
		_g_object_unref0 (real);
	}
	{
		Foo* real = NULL;
		Foo* _tmp8_;
		GObject* foo = NULL;
		GObject* _tmp9_;
		Bar* bar = NULL;
		Bar* _tmp10_;
		gulong id1 = 0UL;
		gulong _tmp11_;
		gulong id2 = 0UL;
		gulong _tmp12_;
		_tmp8_ = foo_new ();
		real = _tmp8_;
		_tmp9_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (real, G_TYPE_OBJECT, GObject));
		foo = _tmp9_;
		_tmp10_ = bar_new ();
		bar = _tmp10_;
		bar->success = FALSE;
		_tmp11_ = g_signal_connect_object (foo, "sig", (GCallback) _bar_sig_after_cb_dynamic_sig2_, bar, G_CONNECT_AFTER);
		id1 = _tmp11_;
		_tmp12_ = g_signal_connect_object (foo, "sig", (GCallback) _bar_sig_cb_dynamic_sig3_, bar, 0);
		id2 = _tmp12_;
		g_signal_emit (real, foo_signals[FOO_SIG_SIGNAL], 0);
		_vala_assert (bar->success, "bar.success");
		bar->success = FALSE;
		g_signal_handler_disconnect (foo, id1);
		g_signal_handler_disconnect (foo, id2);
		g_signal_emit (real, foo_signals[FOO_SIG_SIGNAL], 0);
		_vala_assert (!bar->success, "!bar.success");
		_g_object_unref0 (bar);
		_g_object_unref0 (foo);
		_g_object_unref0 (real);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

