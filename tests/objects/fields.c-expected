/* objects_fields.c generated by valac, the Vala compiler
 * generated from objects_fields.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _CompactFoo CompactFoo;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;

#define TYPE_FAZ (faz_get_type ())
#define FAZ(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FAZ, Faz))
#define FAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FAZ, FazClass))
#define IS_FAZ(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FAZ))
#define IS_FAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FAZ))
#define FAZ_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FAZ, FazClass))

typedef struct _Faz Faz;
typedef struct _FazClass FazClass;
typedef struct _FazPrivate FazPrivate;
typedef struct _FazClassPrivate FazClassPrivate;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];

#define TYPE_BAZ (baz_get_type ())
#define BAZ(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAZ, Baz))
#define BAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAZ, BazClass))
#define IS_BAZ(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAZ))
#define IS_BAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAZ))
#define BAZ_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAZ, BazClass))

typedef struct _Baz Baz;
typedef struct _BazClass BazClass;
typedef struct _BazPrivate BazPrivate;
typedef struct _BazClassPrivate BazClassPrivate;
enum  {
	BAZ_0_PROPERTY,
	BAZ_NUM_PROPERTIES
};
static GParamSpec* baz_properties[BAZ_NUM_PROPERTIES];

#define TYPE_MANAM (manam_get_type ())
#define MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAM, Manam))
#define MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MANAM, ManamClass))
#define IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAM))
#define IS_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MANAM))
#define MANAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MANAM, ManamClass))

typedef struct _Manam Manam;
typedef struct _ManamClass ManamClass;
typedef struct _ManamPrivate ManamPrivate;
typedef struct _ParamSpecManam ParamSpecManam;
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _compact_foo_free0(var) ((var == NULL) ? NULL : (var = (compact_foo_free (var), NULL)))
#define _manam_unref0(var) ((var == NULL) ? NULL : (var = (manam_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _CompactFoo {
	gint initialized_field;
};

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
	gint public_base_field;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
	gint public_base_class_field;
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

struct _Faz {
	Foo parent_instance;
	FazPrivate * priv;
	gint public_field;
};

struct _FazClass {
	FooClass parent_class;
	gint public_class_field;
};

struct _FazPrivate {
	GRecMutex __lock_public_field;
	gint private_field;
	GRecMutex __lock_private_field;
};

struct _FazClassPrivate {
	GRecMutex __lock_public_class_field;
	gint private_class_field;
	GRecMutex __lock_private_class_field;
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
	gint public_base_field;
};

struct _BarClass {
	GObjectClass parent_class;
	gint public_base_class_field;
};

struct _Baz {
	Bar parent_instance;
	BazPrivate * priv;
	gint public_field;
};

struct _BazClass {
	BarClass parent_class;
	gint public_class_field;
};

struct _BazPrivate {
	GRecMutex __lock_public_field;
	gint private_field;
	GRecMutex __lock_private_field;
};

struct _BazClassPrivate {
	GRecMutex __lock_public_class_field;
	gint private_class_field;
	GRecMutex __lock_private_class_field;
};

struct _Manam {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ManamPrivate * priv;
	gpointer foo;
};

struct _ManamClass {
	GTypeClass parent_class;
	void (*finalize) (Manam *self);
};

struct _ManamPrivate {
	GType t_type;
	GBoxedCopyFunc t_dup_func;
	GDestroyNotify t_destroy_func;
};

struct _ParamSpecManam {
	GParamSpec parent_instance;
};

static gint compact_foo_private_static_field;
static gint compact_foo_private_static_field = 42;
VALA_EXTERN gint compact_foo_public_static_field;
gint compact_foo_public_static_field = 4711;
static gpointer foo_parent_class = NULL;
static gint Faz_private_offset;
static gpointer faz_parent_class = NULL;
VALA_EXTERN gint faz_public_static_field;
GRecMutex __lock_faz_faz_public_static_field = {0};
gint faz_public_static_field = 4711;
static gint faz_private_static_field;
static GRecMutex __lock_faz_faz_private_static_field = {0};
static gint faz_private_static_field = 4711;
static gpointer bar_parent_class = NULL;
static gint Baz_private_offset;
static gpointer baz_parent_class = NULL;
VALA_EXTERN gint baz_public_static_field;
GRecMutex __lock_baz_baz_public_static_field = {0};
gint baz_public_static_field = 4711;
static gint baz_private_static_field;
static GRecMutex __lock_baz_baz_private_static_field = {0};
static gint baz_private_static_field = 4711;
static gint Manam_private_offset;
static gpointer manam_parent_class = NULL;

VALA_EXTERN void compact_foo_free (CompactFoo * self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (CompactFoo, compact_foo_free)
static void compact_foo_instance_init (CompactFoo * self);
VALA_EXTERN CompactFoo* compact_foo_new (void);
VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType faz_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Faz, foo_unref)
#define FAZ_GET_CLASS_PRIVATE(klass) (G_TYPE_CLASS_GET_PRIVATE (klass, TYPE_FAZ, FazClassPrivate))
VALA_EXTERN void faz_action (Faz* self);
VALA_EXTERN void faz_action_class (Faz* self);
VALA_EXTERN void faz_lock_action (Faz* self);
VALA_EXTERN void faz_lock_action_class (Faz* self);
VALA_EXTERN Faz* faz_new (void);
VALA_EXTERN Faz* faz_construct (GType object_type);
static void faz_finalize (Foo * obj);
static GType faz_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static void bar_finalize (GObject * obj);
static GType bar_get_type_once (void);
VALA_EXTERN GType baz_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Baz, g_object_unref)
#define BAZ_GET_CLASS_PRIVATE(klass) (G_TYPE_CLASS_GET_PRIVATE (klass, TYPE_BAZ, BazClassPrivate))
VALA_EXTERN void baz_action (Baz* self);
VALA_EXTERN void baz_action_class (Baz* self);
VALA_EXTERN void baz_lock_action (Baz* self);
VALA_EXTERN void baz_lock_action_class (Baz* self);
VALA_EXTERN Baz* baz_new (void);
VALA_EXTERN Baz* baz_construct (GType object_type);
static void baz_finalize (GObject * obj);
static GType baz_get_type_once (void);
VALA_EXTERN gpointer manam_ref (gpointer instance);
VALA_EXTERN void manam_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_manam (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags);
VALA_EXTERN void value_set_manam (GValue* value,
                      gpointer v_object);
VALA_EXTERN void value_take_manam (GValue* value,
                       gpointer v_object);
VALA_EXTERN gpointer value_get_manam (const GValue* value);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Manam, manam_unref)
VALA_EXTERN Manam* manam_new (GType t_type,
                  GBoxedCopyFunc t_dup_func,
                  GDestroyNotify t_destroy_func);
VALA_EXTERN Manam* manam_construct (GType object_type,
                        GType t_type,
                        GBoxedCopyFunc t_dup_func,
                        GDestroyNotify t_destroy_func);
static void manam_finalize (Manam * obj);
static GType manam_get_type_once (void);
static void _vala_main (void);

CompactFoo*
compact_foo_new (void)
{
	CompactFoo* self;
	self = g_slice_new0 (CompactFoo);
	compact_foo_instance_init (self);
	return self;
}

static void
compact_foo_instance_init (CompactFoo * self)
{
	self->initialized_field = 23;
}

void
compact_foo_free (CompactFoo * self)
{
	g_slice_free (CompactFoo, self);
}

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	klass->public_base_class_field = 42;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->public_base_field = 23;
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static inline gpointer
faz_get_instance_private (Faz* self)
{
	return G_STRUCT_MEMBER_P (self, Faz_private_offset);
}

void
faz_action (Faz* self)
{
	g_return_if_fail (IS_FAZ (self));
	_vala_assert (self->public_field == 23, "public_field == 23");
	self->public_field = 32;
	_vala_assert (self->public_field == 32, "public_field == 32");
	_vala_assert (self->priv->private_field == 23, "private_field == 23");
	self->priv->private_field = 32;
	_vala_assert (self->priv->private_field == 32, "private_field == 32");
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo)->public_base_field == 23, "public_base_field == 23");
	G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo)->public_base_field = 32;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo)->public_base_field == 32, "public_base_field == 32");
}

void
faz_action_class (Faz* self)
{
	g_return_if_fail (IS_FAZ (self));
	_vala_assert (FAZ_GET_CLASS (self)->public_class_field == 24, "public_class_field == 24");
	FAZ_GET_CLASS (self)->public_class_field = 42;
	_vala_assert (FAZ_GET_CLASS (self)->public_class_field == 42, "public_class_field == 42");
	_vala_assert (FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->private_class_field == 24, "private_class_field == 24");
	FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->private_class_field = 42;
	_vala_assert (FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->private_class_field == 42, "private_class_field == 42");
	_vala_assert (FOO_GET_CLASS (self)->public_base_class_field == 42, "public_base_class_field == 42");
	FOO_GET_CLASS (self)->public_base_class_field = 24;
	_vala_assert (FOO_GET_CLASS (self)->public_base_class_field == 24, "public_base_class_field == 24");
}

void
faz_lock_action (Faz* self)
{
	GError* _inner_error0_ = NULL;
	g_return_if_fail (IS_FAZ (self));
	{
		g_rec_mutex_lock (&__lock_faz_faz_private_static_field);
		{
			faz_private_static_field = 1147;
			_vala_assert (faz_private_static_field == 1147, "private_static_field == 1147");
		}
		__finally0:
		{
			g_rec_mutex_unlock (&__lock_faz_faz_private_static_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		g_rec_mutex_lock (&__lock_faz_faz_public_static_field);
		{
			faz_public_static_field = 1147;
			_vala_assert (faz_public_static_field == 1147, "public_static_field == 1147");
		}
		__finally1:
		{
			g_rec_mutex_unlock (&__lock_faz_faz_public_static_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		g_rec_mutex_lock (&self->priv->__lock_private_field);
		{
			self->priv->private_field = 1147;
			_vala_assert (self->priv->private_field == 1147, "private_field == 1147");
		}
		__finally2:
		{
			g_rec_mutex_unlock (&self->priv->__lock_private_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		g_rec_mutex_lock (&self->priv->__lock_public_field);
		{
			self->public_field = 1147;
			_vala_assert (self->public_field == 1147, "public_field == 1147");
		}
		__finally3:
		{
			g_rec_mutex_unlock (&self->priv->__lock_public_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
}

void
faz_lock_action_class (Faz* self)
{
	GError* _inner_error0_ = NULL;
	g_return_if_fail (IS_FAZ (self));
	{
		g_rec_mutex_lock (&FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->__lock_private_class_field);
		{
			FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->private_class_field = 1147;
			_vala_assert (FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->private_class_field == 1147, "private_class_field == 1147");
		}
		__finally0:
		{
			g_rec_mutex_unlock (&FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->__lock_private_class_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		g_rec_mutex_lock (&FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->__lock_public_class_field);
		{
			FAZ_GET_CLASS (self)->public_class_field = 1147;
			_vala_assert (FAZ_GET_CLASS (self)->public_class_field == 1147, "public_class_field == 1147");
		}
		__finally1:
		{
			g_rec_mutex_unlock (&FAZ_GET_CLASS_PRIVATE (FAZ_GET_CLASS (self))->__lock_public_class_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
}

Faz*
faz_construct (GType object_type)
{
	Faz* self = NULL;
	self = (Faz*) foo_construct (object_type);
	return self;
}

Faz*
faz_new (void)
{
	return faz_construct (TYPE_FAZ);
}

static void
faz_base_init (FazClass * klass)
{
	klass->public_class_field = 42;
	_vala_assert (klass->public_class_field == 42, "public_class_field == 42");
	klass->public_class_field = 24;
	_vala_assert (klass->public_class_field == 24, "public_class_field == 24");
	FAZ_GET_CLASS_PRIVATE (klass)->private_class_field = 42;
	_vala_assert (FAZ_GET_CLASS_PRIVATE (klass)->private_class_field == 42, "private_class_field == 42");
	FAZ_GET_CLASS_PRIVATE (klass)->private_class_field = 24;
	_vala_assert (FAZ_GET_CLASS_PRIVATE (klass)->private_class_field == 24, "private_class_field == 24");
	_vala_assert (FOO_CLASS (klass)->public_base_class_field == 42, "public_base_class_field == 42");
	FOO_CLASS (klass)->public_base_class_field = 24;
	_vala_assert (FOO_CLASS (klass)->public_base_class_field == 24, "public_base_class_field == 24");
	FOO_CLASS (klass)->public_base_class_field = 42;
}

static void
faz_class_init (FazClass * klass,
                gpointer klass_data)
{
	faz_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = faz_finalize;
	g_type_class_adjust_private_offset (klass, &Faz_private_offset);
	g_rec_mutex_init (&FAZ_GET_CLASS_PRIVATE (klass)->__lock_public_class_field);
	klass->public_class_field = 42;
	g_rec_mutex_init (&FAZ_GET_CLASS_PRIVATE (klass)->__lock_private_class_field);
	FAZ_GET_CLASS_PRIVATE (klass)->private_class_field = 42;
	g_rec_mutex_init (&__lock_faz_faz_public_static_field);
	g_rec_mutex_init (&__lock_faz_faz_private_static_field);
	_vala_assert (klass->public_class_field == 42, "public_class_field == 42");
	klass->public_class_field = 24;
	_vala_assert (klass->public_class_field == 24, "public_class_field == 24");
	_vala_assert (FAZ_GET_CLASS_PRIVATE (klass)->private_class_field == 42, "private_class_field == 42");
	FAZ_GET_CLASS_PRIVATE (klass)->private_class_field = 24;
	_vala_assert (FAZ_GET_CLASS_PRIVATE (klass)->private_class_field == 24, "private_class_field == 24");
	_vala_assert (FOO_CLASS (klass)->public_base_class_field == 42, "public_base_class_field == 42");
	FOO_CLASS (klass)->public_base_class_field = 24;
	_vala_assert (FOO_CLASS (klass)->public_base_class_field == 24, "public_base_class_field == 24");
	FOO_CLASS (klass)->public_base_class_field = 42;
}

static void
faz_instance_init (Faz * self,
                   gpointer klass)
{
	self->priv = faz_get_instance_private (self);
	g_rec_mutex_init (&self->priv->__lock_public_field);
	self->public_field = 23;
	g_rec_mutex_init (&self->priv->__lock_private_field);
	self->priv->private_field = 23;
}

static void
faz_finalize (Foo * obj)
{
	Faz * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FAZ, Faz);
	g_rec_mutex_clear (&self->priv->__lock_public_field);
	g_rec_mutex_clear (&self->priv->__lock_private_field);
	FOO_CLASS (faz_parent_class)->finalize (obj);
}

static GType
faz_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FazClass), (GBaseInitFunc) faz_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) faz_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Faz), 0, (GInstanceInitFunc) faz_instance_init, NULL };
	GType faz_type_id;
	faz_type_id = g_type_register_static (TYPE_FOO, "Faz", &g_define_type_info, 0);
	g_type_add_class_private (faz_type_id, sizeof (FazClassPrivate));
	Faz_private_offset = g_type_add_instance_private (faz_type_id, sizeof (FazPrivate));
	return faz_type_id;
}

GType
faz_get_type (void)
{
	static volatile gsize faz_type_id__once = 0;
	if (g_once_init_enter (&faz_type_id__once)) {
		GType faz_type_id;
		faz_type_id = faz_get_type_once ();
		g_once_init_leave (&faz_type_id__once, faz_type_id);
	}
	return faz_type_id__once;
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, NULL);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = bar_finalize;
	klass->public_base_class_field = 42;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->public_base_field = 23;
}

static void
bar_finalize (GObject * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	G_OBJECT_CLASS (bar_parent_class)->finalize (obj);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static inline gpointer
baz_get_instance_private (Baz* self)
{
	return G_STRUCT_MEMBER_P (self, Baz_private_offset);
}

void
baz_action (Baz* self)
{
	g_return_if_fail (IS_BAZ (self));
	_vala_assert (self->public_field == 23, "public_field == 23");
	self->public_field = 32;
	_vala_assert (self->public_field == 32, "public_field == 32");
	_vala_assert (self->priv->private_field == 23, "private_field == 23");
	self->priv->private_field = 32;
	_vala_assert (self->priv->private_field == 32, "private_field == 32");
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BAR, Bar)->public_base_field == 23, "public_base_field == 23");
	G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BAR, Bar)->public_base_field = 32;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BAR, Bar)->public_base_field == 32, "public_base_field == 32");
}

void
baz_action_class (Baz* self)
{
	g_return_if_fail (IS_BAZ (self));
	_vala_assert (BAZ_GET_CLASS (self)->public_class_field == 24, "public_class_field == 24");
	BAZ_GET_CLASS (self)->public_class_field = 42;
	_vala_assert (BAZ_GET_CLASS (self)->public_class_field == 42, "public_class_field == 42");
	_vala_assert (BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->private_class_field == 24, "private_class_field == 24");
	BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->private_class_field = 42;
	_vala_assert (BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->private_class_field == 42, "private_class_field == 42");
	_vala_assert (BAR_GET_CLASS (self)->public_base_class_field == 42, "public_base_class_field == 42");
	BAR_GET_CLASS (self)->public_base_class_field = 24;
	_vala_assert (BAR_GET_CLASS (self)->public_base_class_field == 24, "public_base_class_field == 24");
}

void
baz_lock_action (Baz* self)
{
	GError* _inner_error0_ = NULL;
	g_return_if_fail (IS_BAZ (self));
	{
		g_rec_mutex_lock (&__lock_baz_baz_private_static_field);
		{
			baz_private_static_field = 1147;
			_vala_assert (baz_private_static_field == 1147, "private_static_field == 1147");
		}
		__finally0:
		{
			g_rec_mutex_unlock (&__lock_baz_baz_private_static_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		g_rec_mutex_lock (&__lock_baz_baz_public_static_field);
		{
			baz_public_static_field = 1147;
			_vala_assert (baz_public_static_field == 1147, "public_static_field == 1147");
		}
		__finally1:
		{
			g_rec_mutex_unlock (&__lock_baz_baz_public_static_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		g_rec_mutex_lock (&self->priv->__lock_private_field);
		{
			self->priv->private_field = 1147;
			_vala_assert (self->priv->private_field == 1147, "private_field == 1147");
		}
		__finally2:
		{
			g_rec_mutex_unlock (&self->priv->__lock_private_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		g_rec_mutex_lock (&self->priv->__lock_public_field);
		{
			self->public_field = 1147;
			_vala_assert (self->public_field == 1147, "public_field == 1147");
		}
		__finally3:
		{
			g_rec_mutex_unlock (&self->priv->__lock_public_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
}

void
baz_lock_action_class (Baz* self)
{
	GError* _inner_error0_ = NULL;
	g_return_if_fail (IS_BAZ (self));
	{
		g_rec_mutex_lock (&BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->__lock_private_class_field);
		{
			BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->private_class_field = 1147;
			_vala_assert (BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->private_class_field == 1147, "private_class_field == 1147");
		}
		__finally0:
		{
			g_rec_mutex_unlock (&BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->__lock_private_class_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
	{
		g_rec_mutex_lock (&BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->__lock_public_class_field);
		{
			BAZ_GET_CLASS (self)->public_class_field = 1147;
			_vala_assert (BAZ_GET_CLASS (self)->public_class_field == 1147, "public_class_field == 1147");
		}
		__finally1:
		{
			g_rec_mutex_unlock (&BAZ_GET_CLASS_PRIVATE (BAZ_GET_CLASS (self))->__lock_public_class_field);
		}
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
	}
}

Baz*
baz_construct (GType object_type)
{
	Baz * self = NULL;
	self = (Baz*) bar_construct (object_type);
	return self;
}

Baz*
baz_new (void)
{
	return baz_construct (TYPE_BAZ);
}

static void
baz_base_init (BazClass * klass)
{
	g_print ("%i\n", klass->public_class_field);
	klass->public_class_field = 42;
	_vala_assert (klass->public_class_field == 42, "public_class_field == 42");
	klass->public_class_field = 24;
	_vala_assert (klass->public_class_field == 24, "public_class_field == 24");
	g_print ("%i\n", BAZ_GET_CLASS_PRIVATE (klass)->private_class_field);
	BAZ_GET_CLASS_PRIVATE (klass)->private_class_field = 42;
	_vala_assert (BAZ_GET_CLASS_PRIVATE (klass)->private_class_field == 42, "private_class_field == 42");
	BAZ_GET_CLASS_PRIVATE (klass)->private_class_field = 24;
	_vala_assert (BAZ_GET_CLASS_PRIVATE (klass)->private_class_field == 24, "private_class_field == 24");
	_vala_assert (BAR_CLASS (klass)->public_base_class_field == 42, "public_base_class_field == 42");
	BAR_CLASS (klass)->public_base_class_field = 24;
	_vala_assert (BAR_CLASS (klass)->public_base_class_field == 24, "public_base_class_field == 24");
	BAR_CLASS (klass)->public_base_class_field = 42;
}

static void
baz_class_init (BazClass * klass,
                gpointer klass_data)
{
	baz_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Baz_private_offset);
	G_OBJECT_CLASS (klass)->finalize = baz_finalize;
	g_rec_mutex_init (&BAZ_GET_CLASS_PRIVATE (klass)->__lock_public_class_field);
	klass->public_class_field = 42;
	g_rec_mutex_init (&BAZ_GET_CLASS_PRIVATE (klass)->__lock_private_class_field);
	BAZ_GET_CLASS_PRIVATE (klass)->private_class_field = 42;
	g_rec_mutex_init (&__lock_baz_baz_public_static_field);
	g_rec_mutex_init (&__lock_baz_baz_private_static_field);
	_vala_assert (klass->public_class_field == 42, "public_class_field == 42");
	klass->public_class_field = 24;
	_vala_assert (klass->public_class_field == 24, "public_class_field == 24");
	_vala_assert (BAZ_GET_CLASS_PRIVATE (klass)->private_class_field == 42, "private_class_field == 42");
	BAZ_GET_CLASS_PRIVATE (klass)->private_class_field = 24;
	_vala_assert (BAZ_GET_CLASS_PRIVATE (klass)->private_class_field == 24, "private_class_field == 24");
	_vala_assert (BAR_CLASS (klass)->public_base_class_field == 42, "public_base_class_field == 42");
	BAR_CLASS (klass)->public_base_class_field = 24;
	_vala_assert (BAR_CLASS (klass)->public_base_class_field == 24, "public_base_class_field == 24");
	BAR_CLASS (klass)->public_base_class_field = 42;
}

static void
baz_instance_init (Baz * self,
                   gpointer klass)
{
	self->priv = baz_get_instance_private (self);
	g_rec_mutex_init (&self->priv->__lock_public_field);
	self->public_field = 23;
	g_rec_mutex_init (&self->priv->__lock_private_field);
	self->priv->private_field = 23;
}

static void
baz_finalize (GObject * obj)
{
	Baz * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAZ, Baz);
	g_rec_mutex_clear (&self->priv->__lock_public_field);
	g_rec_mutex_clear (&self->priv->__lock_private_field);
	G_OBJECT_CLASS (baz_parent_class)->finalize (obj);
}

static GType
baz_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BazClass), (GBaseInitFunc) baz_base_init, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Baz), 0, (GInstanceInitFunc) baz_instance_init, NULL };
	GType baz_type_id;
	baz_type_id = g_type_register_static (TYPE_BAR, "Baz", &g_define_type_info, 0);
	g_type_add_class_private (baz_type_id, sizeof (BazClassPrivate));
	Baz_private_offset = g_type_add_instance_private (baz_type_id, sizeof (BazPrivate));
	return baz_type_id;
}

GType
baz_get_type (void)
{
	static volatile gsize baz_type_id__once = 0;
	if (g_once_init_enter (&baz_type_id__once)) {
		GType baz_type_id;
		baz_type_id = baz_get_type_once ();
		g_once_init_leave (&baz_type_id__once, baz_type_id);
	}
	return baz_type_id__once;
}

static inline gpointer
manam_get_instance_private (Manam* self)
{
	return G_STRUCT_MEMBER_P (self, Manam_private_offset);
}

Manam*
manam_construct (GType object_type,
                 GType t_type,
                 GBoxedCopyFunc t_dup_func,
                 GDestroyNotify t_destroy_func)
{
	Manam* self = NULL;
	self = (Manam*) g_type_create_instance (object_type);
	self->priv->t_type = t_type;
	self->priv->t_dup_func = t_dup_func;
	self->priv->t_destroy_func = t_destroy_func;
	return self;
}

Manam*
manam_new (GType t_type,
           GBoxedCopyFunc t_dup_func,
           GDestroyNotify t_destroy_func)
{
	return manam_construct (TYPE_MANAM, t_type, t_dup_func, t_destroy_func);
}

static void
value_manam_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_manam_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		manam_unref (value->data[0].v_pointer);
	}
}

static void
value_manam_copy_value (const GValue* src_value,
                        GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = manam_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_manam_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_manam_collect_value (GValue* value,
                           guint n_collect_values,
                           GTypeCValue* collect_values,
                           guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Manam * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = manam_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_manam_lcopy_value (const GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	Manam ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = manam_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_manam (const gchar* name,
                  const gchar* nick,
                  const gchar* blurb,
                  GType object_type,
                  GParamFlags flags)
{
	ParamSpecManam* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_MANAM), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_manam (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM), NULL);
	return value->data[0].v_pointer;
}

void
value_set_manam (GValue* value,
                 gpointer v_object)
{
	Manam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		manam_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_unref (old);
	}
}

void
value_take_manam (GValue* value,
                  gpointer v_object)
{
	Manam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_unref (old);
	}
}

static void
manam_class_init (ManamClass * klass,
                  gpointer klass_data)
{
	manam_parent_class = g_type_class_peek_parent (klass);
	((ManamClass *) klass)->finalize = manam_finalize;
	g_type_class_adjust_private_offset (klass, &Manam_private_offset);
}

static void
manam_instance_init (Manam * self,
                     gpointer klass)
{
	self->priv = manam_get_instance_private (self);
	self->ref_count = 1;
}

static void
manam_finalize (Manam * obj)
{
	Manam * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MANAM, Manam);
	g_signal_handlers_destroy (self);
	((self->foo == NULL) || (self->priv->t_destroy_func == NULL)) ? NULL : (self->foo = (self->priv->t_destroy_func (self->foo), NULL));
}

static GType
manam_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_manam_init, value_manam_free_value, value_manam_copy_value, value_manam_peek_pointer, "p", value_manam_collect_value, "p", value_manam_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (ManamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Manam), 0, (GInstanceInitFunc) manam_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType manam_type_id;
	manam_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Manam", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Manam_private_offset = g_type_add_instance_private (manam_type_id, sizeof (ManamPrivate));
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

gpointer
manam_ref (gpointer instance)
{
	Manam * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
manam_unref (gpointer instance)
{
	Manam * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		MANAM_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
_vala_main (void)
{
	{
		Foo* foo = NULL;
		Foo* _tmp0_;
		_tmp0_ = foo_new ();
		foo = _tmp0_;
		foo->public_base_field = 132;
		_vala_assert (foo->public_base_field == 132, "foo.public_base_field == 132");
		FOO_GET_CLASS (foo)->public_base_class_field = 264;
		_vala_assert (FOO_GET_CLASS (foo)->public_base_class_field == 264, "foo.public_base_class_field == 264");
		FOO_GET_CLASS (foo)->public_base_class_field = 42;
		_foo_unref0 (foo);
	}
	{
		Faz* faz = NULL;
		Faz* _tmp1_;
		_tmp1_ = faz_new ();
		faz = _tmp1_;
		faz_action (faz);
		faz_action_class (faz);
		faz_lock_action (faz);
		faz_lock_action_class (faz);
		faz->public_field = 66;
		_vala_assert (faz->public_field == 66, "faz.public_field == 66");
		FAZ_GET_CLASS (faz)->public_class_field = 132;
		_vala_assert (FAZ_GET_CLASS (faz)->public_class_field == 132, "faz.public_class_field == 132");
		FOO_GET_CLASS (faz)->public_base_class_field = 264;
		_vala_assert (FOO_GET_CLASS (faz)->public_base_class_field == 264, "faz.public_base_class_field == 264");
		_foo_unref0 (faz);
	}
	{
		Bar* bar = NULL;
		Bar* _tmp2_;
		_tmp2_ = bar_new ();
		bar = _tmp2_;
		bar->public_base_field = 132;
		_vala_assert (bar->public_base_field == 132, "bar.public_base_field == 132");
		BAR_GET_CLASS (bar)->public_base_class_field = 264;
		_vala_assert (BAR_GET_CLASS (bar)->public_base_class_field == 264, "bar.public_base_class_field == 264");
		BAR_GET_CLASS (bar)->public_base_class_field = 42;
		_g_object_unref0 (bar);
	}
	{
		Baz* baz = NULL;
		Baz* _tmp3_;
		_tmp3_ = baz_new ();
		baz = _tmp3_;
		baz_action (baz);
		baz_action_class (baz);
		baz_lock_action (baz);
		baz_lock_action_class (baz);
		baz->public_field = 66;
		_vala_assert (baz->public_field == 66, "baz.public_field == 66");
		BAZ_GET_CLASS (baz)->public_class_field = 132;
		_vala_assert (BAZ_GET_CLASS (baz)->public_class_field == 132, "baz.public_class_field == 132");
		BAR_GET_CLASS (baz)->public_base_class_field = 264;
		_vala_assert (BAR_GET_CLASS (baz)->public_base_class_field == 264, "baz.public_base_class_field == 264");
		_g_object_unref0 (baz);
	}
	{
		CompactFoo* foo = NULL;
		CompactFoo* _tmp4_;
		_tmp4_ = compact_foo_new ();
		foo = _tmp4_;
		_vala_assert (foo->initialized_field == 23, "foo.initialized_field == 23");
		_vala_assert (compact_foo_public_static_field == 4711, "foo.public_static_field == 4711");
		_compact_foo_free0 (foo);
	}
	{
		Manam* manam = NULL;
		Manam* _tmp5_;
		_tmp5_ = manam_new (TYPE_BAR, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref);
		manam = _tmp5_;
		_g_object_unref0 (manam->foo);
		manam->foo = NULL;
		_manam_unref0 (manam);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

