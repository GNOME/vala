/* objects_property_enum.c generated by valac, the Vala compiler
 * generated from objects_property_enum.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	FOO_ENUM_VALUE1,
	FOO_ENUM_VALUE2
} FooEnum;

#define TYPE_FOO_ENUM (foo_enum_get_type ())
typedef enum  {
	FOO_FLAG_VALUE1 = 1 << 0,
	FOO_FLAG_VALUE2 = 1 << 1
} FooFlag;

#define TYPE_FOO_FLAG (foo_flag_get_type ())
typedef enum  {
	BAR_ENUM_VALUE1,
	BAR_ENUM_VALUE2
} BarEnum;

typedef enum  {
	BAR_FLAG_VALUE1 = 1 << 0,
	BAR_FLAG_VALUE2 = 1 << 1
} BarFlag;

#define TYPE_MANAM (manam_get_type ())
#define MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAM, Manam))
#define MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MANAM, ManamClass))
#define IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAM))
#define IS_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MANAM))
#define MANAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MANAM, ManamClass))

typedef struct _Manam Manam;
typedef struct _ManamClass ManamClass;
typedef struct _ManamPrivate ManamPrivate;
typedef struct _ParamSpecManam ParamSpecManam;

#define TYPE_MINIM (minim_get_type ())
#define MINIM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MINIM, Minim))
#define MINIM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MINIM, MinimClass))
#define IS_MINIM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MINIM))
#define IS_MINIM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MINIM))
#define MINIM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MINIM, MinimClass))

typedef struct _Minim Minim;
typedef struct _MinimClass MinimClass;
typedef struct _MinimPrivate MinimPrivate;
enum  {
	MINIM_0_PROPERTY,
	MINIM_PROP1_PROPERTY,
	MINIM_PROP2_PROPERTY,
	MINIM_PROP3_PROPERTY,
	MINIM_PROP4_PROPERTY,
	MINIM_NUM_PROPERTIES
};
static GParamSpec* minim_properties[MINIM_NUM_PROPERTIES];
#define _manam_unref0(var) ((var == NULL) ? NULL : (var = (manam_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Manam {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ManamPrivate * priv;
};

struct _ManamClass {
	GTypeClass parent_class;
	void (*finalize) (Manam *self);
};

struct _ManamPrivate {
	FooEnum _prop1;
	FooFlag _prop2;
	BarEnum _prop3;
	BarFlag _prop4;
};

struct _ParamSpecManam {
	GParamSpec parent_instance;
};

struct _Minim {
	GObject parent_instance;
	MinimPrivate * priv;
};

struct _MinimClass {
	GObjectClass parent_class;
};

struct _MinimPrivate {
	FooEnum _prop1;
	FooFlag _prop2;
	BarEnum _prop3;
	BarFlag _prop4;
};

static gint Manam_private_offset;
static gpointer manam_parent_class = NULL;
static gint Minim_private_offset;
static gpointer minim_parent_class = NULL;

VALA_EXTERN GType foo_enum_get_type (void) G_GNUC_CONST ;
VALA_EXTERN GType foo_flag_get_type (void) G_GNUC_CONST ;
VALA_EXTERN gpointer manam_ref (gpointer instance);
VALA_EXTERN void manam_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_manam (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags);
VALA_EXTERN void value_set_manam (GValue* value,
                      gpointer v_object);
VALA_EXTERN void value_take_manam (GValue* value,
                       gpointer v_object);
VALA_EXTERN gpointer value_get_manam (const GValue* value);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Manam, manam_unref)
VALA_EXTERN Manam* manam_new (void);
VALA_EXTERN Manam* manam_construct (GType object_type);
VALA_EXTERN FooEnum manam_get_prop1 (Manam* self);
VALA_EXTERN void manam_set_prop1 (Manam* self,
                      FooEnum value);
VALA_EXTERN FooFlag manam_get_prop2 (Manam* self);
VALA_EXTERN void manam_set_prop2 (Manam* self,
                      FooFlag value);
VALA_EXTERN BarEnum manam_get_prop3 (Manam* self);
VALA_EXTERN void manam_set_prop3 (Manam* self,
                      BarEnum value);
VALA_EXTERN BarFlag manam_get_prop4 (Manam* self);
VALA_EXTERN void manam_set_prop4 (Manam* self,
                      BarFlag value);
static void manam_finalize (Manam * obj);
static GType manam_get_type_once (void);
VALA_EXTERN GType minim_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Minim, g_object_unref)
VALA_EXTERN Minim* minim_new (void);
VALA_EXTERN Minim* minim_construct (GType object_type);
VALA_EXTERN FooEnum minim_get_prop1 (Minim* self);
VALA_EXTERN void minim_set_prop1 (Minim* self,
                      FooEnum value);
VALA_EXTERN FooFlag minim_get_prop2 (Minim* self);
VALA_EXTERN void minim_set_prop2 (Minim* self,
                      FooFlag value);
VALA_EXTERN BarEnum minim_get_prop3 (Minim* self);
VALA_EXTERN void minim_set_prop3 (Minim* self,
                      BarEnum value);
VALA_EXTERN BarFlag minim_get_prop4 (Minim* self);
VALA_EXTERN void minim_set_prop4 (Minim* self,
                      BarFlag value);
static void minim_finalize (GObject * obj);
static GType minim_get_type_once (void);
static void _vala_minim_get_property (GObject * object,
                               guint property_id,
                               GValue * value,
                               GParamSpec * pspec);
static void _vala_minim_set_property (GObject * object,
                               guint property_id,
                               const GValue * value,
                               GParamSpec * pspec);
static void _vala_main (void);

static GType
foo_enum_get_type_once (void)
{
	static const GEnumValue values[] = {{FOO_ENUM_VALUE1, "FOO_ENUM_VALUE1", "value1"}, {FOO_ENUM_VALUE2, "FOO_ENUM_VALUE2", "value2"}, {0, NULL, NULL}};
	GType foo_enum_type_id;
	foo_enum_type_id = g_enum_register_static ("FooEnum", values);
	return foo_enum_type_id;
}

GType
foo_enum_get_type (void)
{
	static volatile gsize foo_enum_type_id__once = 0;
	if (g_once_init_enter (&foo_enum_type_id__once)) {
		GType foo_enum_type_id;
		foo_enum_type_id = foo_enum_get_type_once ();
		g_once_init_leave (&foo_enum_type_id__once, foo_enum_type_id);
	}
	return foo_enum_type_id__once;
}

static GType
foo_flag_get_type_once (void)
{
	static const GFlagsValue values[] = {{FOO_FLAG_VALUE1, "FOO_FLAG_VALUE1", "value1"}, {FOO_FLAG_VALUE2, "FOO_FLAG_VALUE2", "value2"}, {0, NULL, NULL}};
	GType foo_flag_type_id;
	foo_flag_type_id = g_flags_register_static ("FooFlag", values);
	return foo_flag_type_id;
}

GType
foo_flag_get_type (void)
{
	static volatile gsize foo_flag_type_id__once = 0;
	if (g_once_init_enter (&foo_flag_type_id__once)) {
		GType foo_flag_type_id;
		foo_flag_type_id = foo_flag_get_type_once ();
		g_once_init_leave (&foo_flag_type_id__once, foo_flag_type_id);
	}
	return foo_flag_type_id__once;
}

static inline gpointer
manam_get_instance_private (Manam* self)
{
	return G_STRUCT_MEMBER_P (self, Manam_private_offset);
}

Manam*
manam_construct (GType object_type)
{
	Manam* self = NULL;
	self = (Manam*) g_type_create_instance (object_type);
	return self;
}

Manam*
manam_new (void)
{
	return manam_construct (TYPE_MANAM);
}

FooEnum
manam_get_prop1 (Manam* self)
{
	FooEnum result;
	g_return_val_if_fail (IS_MANAM (self), 0);
	result = self->priv->_prop1;
	return result;
}

void
manam_set_prop1 (Manam* self,
                 FooEnum value)
{
	g_return_if_fail (IS_MANAM (self));
	self->priv->_prop1 = value;
}

FooFlag
manam_get_prop2 (Manam* self)
{
	FooFlag result;
	g_return_val_if_fail (IS_MANAM (self), 0U);
	result = self->priv->_prop2;
	return result;
}

void
manam_set_prop2 (Manam* self,
                 FooFlag value)
{
	g_return_if_fail (IS_MANAM (self));
	self->priv->_prop2 = value;
}

BarEnum
manam_get_prop3 (Manam* self)
{
	BarEnum result;
	g_return_val_if_fail (IS_MANAM (self), 0);
	result = self->priv->_prop3;
	return result;
}

void
manam_set_prop3 (Manam* self,
                 BarEnum value)
{
	g_return_if_fail (IS_MANAM (self));
	self->priv->_prop3 = value;
}

BarFlag
manam_get_prop4 (Manam* self)
{
	BarFlag result;
	g_return_val_if_fail (IS_MANAM (self), 0U);
	result = self->priv->_prop4;
	return result;
}

void
manam_set_prop4 (Manam* self,
                 BarFlag value)
{
	g_return_if_fail (IS_MANAM (self));
	self->priv->_prop4 = value;
}

static void
value_manam_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_manam_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		manam_unref (value->data[0].v_pointer);
	}
}

static void
value_manam_copy_value (const GValue* src_value,
                        GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = manam_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_manam_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_manam_collect_value (GValue* value,
                           guint n_collect_values,
                           GTypeCValue* collect_values,
                           guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Manam * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = manam_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_manam_lcopy_value (const GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	Manam ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = manam_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_manam (const gchar* name,
                  const gchar* nick,
                  const gchar* blurb,
                  GType object_type,
                  GParamFlags flags)
{
	ParamSpecManam* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_MANAM), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_manam (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM), NULL);
	return value->data[0].v_pointer;
}

void
value_set_manam (GValue* value,
                 gpointer v_object)
{
	Manam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		manam_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_unref (old);
	}
}

void
value_take_manam (GValue* value,
                  gpointer v_object)
{
	Manam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_unref (old);
	}
}

static void
manam_class_init (ManamClass * klass,
                  gpointer klass_data)
{
	manam_parent_class = g_type_class_peek_parent (klass);
	((ManamClass *) klass)->finalize = manam_finalize;
	g_type_class_adjust_private_offset (klass, &Manam_private_offset);
}

static void
manam_instance_init (Manam * self,
                     gpointer klass)
{
	self->priv = manam_get_instance_private (self);
	self->ref_count = 1;
}

static void
manam_finalize (Manam * obj)
{
	Manam * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MANAM, Manam);
	g_signal_handlers_destroy (self);
}

static GType
manam_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_manam_init, value_manam_free_value, value_manam_copy_value, value_manam_peek_pointer, "p", value_manam_collect_value, "p", value_manam_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (ManamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Manam), 0, (GInstanceInitFunc) manam_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType manam_type_id;
	manam_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Manam", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Manam_private_offset = g_type_add_instance_private (manam_type_id, sizeof (ManamPrivate));
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

gpointer
manam_ref (gpointer instance)
{
	Manam * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
manam_unref (gpointer instance)
{
	Manam * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		MANAM_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static inline gpointer
minim_get_instance_private (Minim* self)
{
	return G_STRUCT_MEMBER_P (self, Minim_private_offset);
}

Minim*
minim_construct (GType object_type)
{
	Minim * self = NULL;
	self = (Minim*) g_object_new (object_type, NULL);
	return self;
}

Minim*
minim_new (void)
{
	return minim_construct (TYPE_MINIM);
}

FooEnum
minim_get_prop1 (Minim* self)
{
	FooEnum result;
	g_return_val_if_fail (IS_MINIM (self), 0);
	result = self->priv->_prop1;
	return result;
}

void
minim_set_prop1 (Minim* self,
                 FooEnum value)
{
	FooEnum old_value;
	g_return_if_fail (IS_MINIM (self));
	old_value = minim_get_prop1 (self);
	if (old_value != value) {
		self->priv->_prop1 = value;
		g_object_notify_by_pspec ((GObject *) self, minim_properties[MINIM_PROP1_PROPERTY]);
	}
}

FooFlag
minim_get_prop2 (Minim* self)
{
	FooFlag result;
	g_return_val_if_fail (IS_MINIM (self), 0U);
	result = self->priv->_prop2;
	return result;
}

void
minim_set_prop2 (Minim* self,
                 FooFlag value)
{
	FooFlag old_value;
	g_return_if_fail (IS_MINIM (self));
	old_value = minim_get_prop2 (self);
	if (old_value != value) {
		self->priv->_prop2 = value;
		g_object_notify_by_pspec ((GObject *) self, minim_properties[MINIM_PROP2_PROPERTY]);
	}
}

BarEnum
minim_get_prop3 (Minim* self)
{
	BarEnum result;
	g_return_val_if_fail (IS_MINIM (self), 0);
	result = self->priv->_prop3;
	return result;
}

void
minim_set_prop3 (Minim* self,
                 BarEnum value)
{
	BarEnum old_value;
	g_return_if_fail (IS_MINIM (self));
	old_value = minim_get_prop3 (self);
	if (old_value != value) {
		self->priv->_prop3 = value;
		g_object_notify_by_pspec ((GObject *) self, minim_properties[MINIM_PROP3_PROPERTY]);
	}
}

BarFlag
minim_get_prop4 (Minim* self)
{
	BarFlag result;
	g_return_val_if_fail (IS_MINIM (self), 0U);
	result = self->priv->_prop4;
	return result;
}

void
minim_set_prop4 (Minim* self,
                 BarFlag value)
{
	BarFlag old_value;
	g_return_if_fail (IS_MINIM (self));
	old_value = minim_get_prop4 (self);
	if (old_value != value) {
		self->priv->_prop4 = value;
		g_object_notify_by_pspec ((GObject *) self, minim_properties[MINIM_PROP4_PROPERTY]);
	}
}

static void
minim_class_init (MinimClass * klass,
                  gpointer klass_data)
{
	minim_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Minim_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_minim_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_minim_set_property;
	G_OBJECT_CLASS (klass)->finalize = minim_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), MINIM_PROP1_PROPERTY, minim_properties[MINIM_PROP1_PROPERTY] = g_param_spec_enum ("prop1", "prop1", "prop1", TYPE_FOO_ENUM, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), MINIM_PROP2_PROPERTY, minim_properties[MINIM_PROP2_PROPERTY] = g_param_spec_flags ("prop2", "prop2", "prop2", TYPE_FOO_FLAG, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), MINIM_PROP3_PROPERTY, minim_properties[MINIM_PROP3_PROPERTY] = g_param_spec_int ("prop3", "prop3", "prop3", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), MINIM_PROP4_PROPERTY, minim_properties[MINIM_PROP4_PROPERTY] = g_param_spec_uint ("prop4", "prop4", "prop4", 0, G_MAXUINT, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
minim_instance_init (Minim * self,
                     gpointer klass)
{
	self->priv = minim_get_instance_private (self);
}

static void
minim_finalize (GObject * obj)
{
	Minim * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MINIM, Minim);
	G_OBJECT_CLASS (minim_parent_class)->finalize (obj);
}

static GType
minim_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MinimClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) minim_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Minim), 0, (GInstanceInitFunc) minim_instance_init, NULL };
	GType minim_type_id;
	minim_type_id = g_type_register_static (G_TYPE_OBJECT, "Minim", &g_define_type_info, 0);
	Minim_private_offset = g_type_add_instance_private (minim_type_id, sizeof (MinimPrivate));
	return minim_type_id;
}

GType
minim_get_type (void)
{
	static volatile gsize minim_type_id__once = 0;
	if (g_once_init_enter (&minim_type_id__once)) {
		GType minim_type_id;
		minim_type_id = minim_get_type_once ();
		g_once_init_leave (&minim_type_id__once, minim_type_id);
	}
	return minim_type_id__once;
}

static void
_vala_minim_get_property (GObject * object,
                          guint property_id,
                          GValue * value,
                          GParamSpec * pspec)
{
	Minim * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_MINIM, Minim);
	switch (property_id) {
		case MINIM_PROP1_PROPERTY:
		g_value_set_enum (value, minim_get_prop1 (self));
		break;
		case MINIM_PROP2_PROPERTY:
		g_value_set_flags (value, minim_get_prop2 (self));
		break;
		case MINIM_PROP3_PROPERTY:
		g_value_set_int (value, minim_get_prop3 (self));
		break;
		case MINIM_PROP4_PROPERTY:
		g_value_set_uint (value, minim_get_prop4 (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_minim_set_property (GObject * object,
                          guint property_id,
                          const GValue * value,
                          GParamSpec * pspec)
{
	Minim * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_MINIM, Minim);
	switch (property_id) {
		case MINIM_PROP1_PROPERTY:
		minim_set_prop1 (self, g_value_get_enum (value));
		break;
		case MINIM_PROP2_PROPERTY:
		minim_set_prop2 (self, g_value_get_flags (value));
		break;
		case MINIM_PROP3_PROPERTY:
		minim_set_prop3 (self, g_value_get_int (value));
		break;
		case MINIM_PROP4_PROPERTY:
		minim_set_prop4 (self, g_value_get_uint (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	{
		Manam* manam = NULL;
		Manam* _tmp0_;
		FooEnum _tmp1_;
		FooEnum _tmp2_;
		FooFlag _tmp3_;
		FooFlag _tmp4_;
		BarEnum _tmp5_;
		BarEnum _tmp6_;
		BarFlag _tmp7_;
		BarFlag _tmp8_;
		_tmp0_ = manam_new ();
		manam = _tmp0_;
		manam_set_prop1 (manam, FOO_ENUM_VALUE2);
		_tmp1_ = manam_get_prop1 (manam);
		_tmp2_ = _tmp1_;
		_vala_assert (_tmp2_ == FOO_ENUM_VALUE2, "manam.prop1 == FooEnum.VALUE2");
		manam_set_prop2 (manam, FOO_FLAG_VALUE2);
		_tmp3_ = manam_get_prop2 (manam);
		_tmp4_ = _tmp3_;
		_vala_assert (_tmp4_ == FOO_FLAG_VALUE2, "manam.prop2 == FooFlag.VALUE2");
		manam_set_prop3 (manam, BAR_ENUM_VALUE2);
		_tmp5_ = manam_get_prop3 (manam);
		_tmp6_ = _tmp5_;
		_vala_assert (_tmp6_ == BAR_ENUM_VALUE2, "manam.prop3 == BarEnum.VALUE2");
		manam_set_prop4 (manam, BAR_FLAG_VALUE2);
		_tmp7_ = manam_get_prop4 (manam);
		_tmp8_ = _tmp7_;
		_vala_assert (_tmp8_ == BAR_FLAG_VALUE2, "manam.prop4 == BarFlag.VALUE2");
		_manam_unref0 (manam);
	}
	{
		Minim* minim = NULL;
		Minim* _tmp9_;
		FooEnum _tmp10_;
		FooEnum _tmp11_;
		FooFlag _tmp12_;
		FooFlag _tmp13_;
		BarEnum _tmp14_;
		BarEnum _tmp15_;
		BarFlag _tmp16_;
		BarFlag _tmp17_;
		_tmp9_ = minim_new ();
		minim = _tmp9_;
		minim_set_prop1 (minim, FOO_ENUM_VALUE2);
		_tmp10_ = minim_get_prop1 (minim);
		_tmp11_ = _tmp10_;
		_vala_assert (_tmp11_ == FOO_ENUM_VALUE2, "minim.prop1 == FooEnum.VALUE2");
		minim_set_prop2 (minim, FOO_FLAG_VALUE2);
		_tmp12_ = minim_get_prop2 (minim);
		_tmp13_ = _tmp12_;
		_vala_assert (_tmp13_ == FOO_FLAG_VALUE2, "minim.prop2 == FooFlag.VALUE2");
		minim_set_prop3 (minim, BAR_ENUM_VALUE2);
		_tmp14_ = minim_get_prop3 (minim);
		_tmp15_ = _tmp14_;
		_vala_assert (_tmp15_ == BAR_ENUM_VALUE2, "minim.prop3 == BarEnum.VALUE2");
		minim_set_prop4 (minim, BAR_FLAG_VALUE2);
		_tmp16_ = minim_get_prop4 (minim);
		_tmp17_ = _tmp16_;
		_vala_assert (_tmp17_ == BAR_FLAG_VALUE2, "minim.prop4 == BarFlag.VALUE2");
		_g_object_unref0 (minim);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

