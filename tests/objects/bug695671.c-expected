/* objects_bug695671.c generated by valac, the Vala compiler
 * generated from objects_bug695671.vala, do not modify */

#include <glib-object.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static GType foo_get_type_once (void);
VALA_EXTERN gpointer ref_generic (GType g_type,
                      GBoxedCopyFunc g_dup_func,
                      GDestroyNotify g_destroy_func,
                      gconstpointer o);
VALA_EXTERN GObject* ref (GObject* o);
static void _vala_main (void);

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
ref_generic (GType g_type,
             GBoxedCopyFunc g_dup_func,
             GDestroyNotify g_destroy_func,
             gconstpointer o)
{
	gpointer _tmp0_;
	gpointer result;
	_tmp0_ = ((o != NULL) && (g_dup_func != NULL)) ? g_dup_func ((gpointer) o) : ((gpointer) o);
	result = _tmp0_;
	return result;
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

GObject*
ref (GObject* o)
{
	GObject* _tmp0_;
	GObject* result;
	g_return_val_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (o, G_TYPE_OBJECT), NULL);
	_tmp0_ = _g_object_ref0 (o);
	result = _tmp0_;
	return result;
}

static void
_vala_main (void)
{
	GObject* o = NULL;
	GObject* _tmp0_;
	Foo* f = NULL;
	GObject* _tmp1_;
	Foo* _tmp2_;
	Foo* g = NULL;
	gpointer _tmp3_;
	GObject* _tmp4_;
	Foo* _tmp5_;
	GObject* r = NULL;
	gpointer _tmp6_;
	GObject* _tmp7_;
	GObject* _tmp8_;
	GObject* r2 = NULL;
	GObject* _tmp9_;
	GObject* r3 = NULL;
	GObject* r4 = NULL;
	_tmp0_ = g_object_new (G_TYPE_OBJECT, NULL);
	o = _tmp0_;
	_tmp1_ = ref (o);
	_tmp2_ = IS_FOO (_tmp1_) ? ((Foo*) _tmp1_) : NULL;
	if (_tmp2_ == NULL) {
		_g_object_unref0 (_tmp1_);
	}
	f = _tmp2_;
	_vala_assert (f == NULL, "f == null");
	_vala_assert (o->ref_count == ((guint) 1), "o.ref_count == 1");
	_tmp3_ = ref_generic (G_TYPE_OBJECT, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, o);
	_tmp4_ = (GObject*) _tmp3_;
	_tmp5_ = IS_FOO (_tmp4_) ? ((Foo*) _tmp4_) : NULL;
	if (_tmp5_ == NULL) {
		_g_object_unref0 (_tmp4_);
	}
	g = _tmp5_;
	_vala_assert (g == NULL, "g == null");
	_vala_assert (o->ref_count == ((guint) 1), "o.ref_count == 1");
	_tmp6_ = ref_generic (G_TYPE_OBJECT, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, o);
	_tmp7_ = (GObject*) _tmp6_;
	_tmp8_ = G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, G_TYPE_OBJECT) ? ((GObject*) _tmp7_) : NULL;
	if (_tmp8_ == NULL) {
		_g_object_unref0 (_tmp7_);
	}
	r = _tmp8_;
	_vala_assert (r == o, "r == o");
	_vala_assert (o->ref_count == ((guint) 2), "o.ref_count == 2");
	_tmp9_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (o, G_TYPE_OBJECT) ? ((GObject*) o) : NULL);
	r2 = _tmp9_;
	_vala_assert (r2 == o, "r2 == o");
	_vala_assert (o->ref_count == ((guint) 3), "o.ref_count == 3");
	r3 = G_TYPE_CHECK_INSTANCE_TYPE (o, G_TYPE_OBJECT) ? ((GObject*) o) : NULL;
	_vala_assert (r3 == o, "r3 == o");
	_vala_assert (o->ref_count == ((guint) 3), "o.ref_count == 3");
	r4 = G_TYPE_CHECK_INSTANCE_CAST (IS_FOO (o) ? ((Foo*) o) : NULL, G_TYPE_OBJECT, GObject);
	_vala_assert (r4 == NULL, "r4 == null");
	_vala_assert (o->ref_count == ((guint) 3), "o.ref_count == 3");
	_g_object_unref0 (r2);
	_g_object_unref0 (r);
	_g_object_unref0 (g);
	_g_object_unref0 (f);
	_g_object_unref0 (o);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

