/* objects_test_029.c generated by valac, the Vala compiler
 * generated from objects_test_029.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdio.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define MAMAN_TYPE_FOO (maman_foo_get_type ())
#define MAMAN_FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAMAN_TYPE_FOO, MamanFoo))
#define MAMAN_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAMAN_TYPE_FOO, MamanFooClass))
#define MAMAN_IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAMAN_TYPE_FOO))
#define MAMAN_IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAMAN_TYPE_FOO))
#define MAMAN_FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAMAN_TYPE_FOO, MamanFooClass))

typedef struct _MamanFoo MamanFoo;
typedef struct _MamanFooClass MamanFooClass;
typedef struct _MamanFooPrivate MamanFooPrivate;
enum  {
	MAMAN_FOO_0_PROPERTY,
	MAMAN_FOO_P1_PROPERTY,
	MAMAN_FOO_P2_PROPERTY,
	MAMAN_FOO_NUM_PROPERTIES
};
static GParamSpec* maman_foo_properties[MAMAN_FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _MamanFoo {
	GObject parent_instance;
	MamanFooPrivate * priv;
};

struct _MamanFooClass {
	GObjectClass parent_class;
};

struct _MamanFooPrivate {
	gint _p1;
	gint _p2;
};

static gint MamanFoo_private_offset;
static gpointer maman_foo_parent_class = NULL;

VALA_EXTERN GType maman_foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MamanFoo, g_object_unref)
VALA_EXTERN MamanFoo* maman_foo_new (gint i,
                         gint p2);
VALA_EXTERN MamanFoo* maman_foo_construct (GType object_type,
                               gint i,
                               gint p2);
VALA_EXTERN void maman_foo_set_p1 (MamanFoo* self,
                       gint value);
VALA_EXTERN void maman_foo_set_p2 (MamanFoo* self,
                       gint value);
static gint maman_foo_main (void);
VALA_EXTERN gint maman_foo_get_p2 (MamanFoo* self);
VALA_EXTERN gint maman_foo_get_p1 (MamanFoo* self);
static void maman_foo_finalize (GObject * obj);
static GType maman_foo_get_type_once (void);
static void _vala_maman_foo_get_property (GObject * object,
                                   guint property_id,
                                   GValue * value,
                                   GParamSpec * pspec);
static void _vala_maman_foo_set_property (GObject * object,
                                   guint property_id,
                                   const GValue * value,
                                   GParamSpec * pspec);

static inline gpointer
maman_foo_get_instance_private (MamanFoo* self)
{
	return G_STRUCT_MEMBER_P (self, MamanFoo_private_offset);
}

MamanFoo*
maman_foo_construct (GType object_type,
                     gint i,
                     gint p2)
{
	MamanFoo * self = NULL;
	self = (MamanFoo*) g_object_new (object_type, NULL);
	maman_foo_set_p1 (self, 2 * i);
	maman_foo_set_p2 (self, p2);
	return self;
}

MamanFoo*
maman_foo_new (gint i,
               gint p2)
{
	return maman_foo_construct (MAMAN_TYPE_FOO, i, p2);
}

static gint
maman_foo_main (void)
{
	FILE* _tmp0_;
	MamanFoo* foo = NULL;
	MamanFoo* _tmp1_;
	FILE* _tmp2_;
	FILE* _tmp3_;
	gint _tmp4_;
	FILE* _tmp5_;
	gint _tmp6_;
	FILE* _tmp7_;
	gint result;
	_tmp0_ = stdout;
	fprintf (_tmp0_, "Construct Formal Parameter Test: 1");
	_tmp1_ = maman_foo_new (2, 3);
	foo = _tmp1_;
	_tmp2_ = stdout;
	fprintf (_tmp2_, " 2");
	_tmp3_ = stdout;
	_tmp4_ = foo->priv->_p2;
	fprintf (_tmp3_, " %d", _tmp4_);
	_tmp5_ = stdout;
	_tmp6_ = foo->priv->_p1;
	fprintf (_tmp5_, " %d", _tmp6_);
	_tmp7_ = stdout;
	fprintf (_tmp7_, " 5\n");
	result = 0;
	_g_object_unref0 (foo);
	return result;
}

int
main (int argc,
      char ** argv)
{
	return maman_foo_main ();
}

gint
maman_foo_get_p1 (MamanFoo* self)
{
	gint result;
	g_return_val_if_fail (MAMAN_IS_FOO (self), 0);
	result = self->priv->_p1;
	return result;
}

void
maman_foo_set_p1 (MamanFoo* self,
                  gint value)
{
	gint old_value;
	g_return_if_fail (MAMAN_IS_FOO (self));
	old_value = maman_foo_get_p1 (self);
	if (old_value != value) {
		self->priv->_p1 = value;
		g_object_notify_by_pspec ((GObject *) self, maman_foo_properties[MAMAN_FOO_P1_PROPERTY]);
	}
}

gint
maman_foo_get_p2 (MamanFoo* self)
{
	gint result;
	g_return_val_if_fail (MAMAN_IS_FOO (self), 0);
	result = self->priv->_p2;
	return result;
}

void
maman_foo_set_p2 (MamanFoo* self,
                  gint value)
{
	gint old_value;
	g_return_if_fail (MAMAN_IS_FOO (self));
	old_value = maman_foo_get_p2 (self);
	if (old_value != value) {
		self->priv->_p2 = value;
		g_object_notify_by_pspec ((GObject *) self, maman_foo_properties[MAMAN_FOO_P2_PROPERTY]);
	}
}

static void
maman_foo_class_init (MamanFooClass * klass,
                      gpointer klass_data)
{
	maman_foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &MamanFoo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_maman_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_maman_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = maman_foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAMAN_FOO_P1_PROPERTY, maman_foo_properties[MAMAN_FOO_P1_PROPERTY] = g_param_spec_int ("p1", "p1", "p1", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAMAN_FOO_P2_PROPERTY, maman_foo_properties[MAMAN_FOO_P2_PROPERTY] = g_param_spec_int ("p2", "p2", "p2", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
maman_foo_instance_init (MamanFoo * self,
                         gpointer klass)
{
	self->priv = maman_foo_get_instance_private (self);
}

static void
maman_foo_finalize (GObject * obj)
{
	MamanFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, MAMAN_TYPE_FOO, MamanFoo);
	G_OBJECT_CLASS (maman_foo_parent_class)->finalize (obj);
}

static GType
maman_foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MamanFooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maman_foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MamanFoo), 0, (GInstanceInitFunc) maman_foo_instance_init, NULL };
	GType maman_foo_type_id;
	maman_foo_type_id = g_type_register_static (G_TYPE_OBJECT, "MamanFoo", &g_define_type_info, 0);
	MamanFoo_private_offset = g_type_add_instance_private (maman_foo_type_id, sizeof (MamanFooPrivate));
	return maman_foo_type_id;
}

GType
maman_foo_get_type (void)
{
	static volatile gsize maman_foo_type_id__once = 0;
	if (g_once_init_enter (&maman_foo_type_id__once)) {
		GType maman_foo_type_id;
		maman_foo_type_id = maman_foo_get_type_once ();
		g_once_init_leave (&maman_foo_type_id__once, maman_foo_type_id);
	}
	return maman_foo_type_id__once;
}

static void
_vala_maman_foo_get_property (GObject * object,
                              guint property_id,
                              GValue * value,
                              GParamSpec * pspec)
{
	MamanFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, MAMAN_TYPE_FOO, MamanFoo);
	switch (property_id) {
		case MAMAN_FOO_P1_PROPERTY:
		g_value_set_int (value, maman_foo_get_p1 (self));
		break;
		case MAMAN_FOO_P2_PROPERTY:
		g_value_set_int (value, maman_foo_get_p2 (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_maman_foo_set_property (GObject * object,
                              guint property_id,
                              const GValue * value,
                              GParamSpec * pspec)
{
	MamanFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, MAMAN_TYPE_FOO, MamanFoo);
	switch (property_id) {
		case MAMAN_FOO_P1_PROPERTY:
		maman_foo_set_p1 (self, g_value_get_int (value));
		break;
		case MAMAN_FOO_P2_PROPERTY:
		maman_foo_set_p2 (self, g_value_get_int (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

