/* objects_class_partial_nested.c generated by valac, the Vala compiler
 * generated from objects_class_partial_nested.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define MANAM_FOO_BAR_TYPE_BAZ (manam_foo_bar_baz_get_type ())
#define MANAM_FOO_BAR_BAZ(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MANAM_FOO_BAR_TYPE_BAZ, ManamFooBarBaz))
#define MANAM_FOO_BAR_BAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MANAM_FOO_BAR_TYPE_BAZ, ManamFooBarBazClass))
#define MANAM_FOO_BAR_IS_BAZ(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MANAM_FOO_BAR_TYPE_BAZ))
#define MANAM_FOO_BAR_IS_BAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MANAM_FOO_BAR_TYPE_BAZ))
#define MANAM_FOO_BAR_BAZ_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MANAM_FOO_BAR_TYPE_BAZ, ManamFooBarBazClass))

typedef struct _ManamFooBarBaz ManamFooBarBaz;
typedef struct _ManamFooBarBazClass ManamFooBarBazClass;
typedef struct _ManamFooBarBazPrivate ManamFooBarBazPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _manam_foo_bar_baz_unref0(var) ((var == NULL) ? NULL : (var = (manam_foo_bar_baz_unref (var), NULL)))
typedef struct _ManamFooBarParamSpecBaz ManamFooBarParamSpecBaz;

struct _ManamFooBarBaz {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ManamFooBarBazPrivate * priv;
	gchar* f0;
	gchar* f1;
};

struct _ManamFooBarBazClass {
	GTypeClass parent_class;
	void (*finalize) (ManamFooBarBaz *self);
	void (*v0) (ManamFooBarBaz* self);
	void (*v1) (ManamFooBarBaz* self);
};

struct _ManamFooBarBazPrivate {
	gchar* _p0;
	gchar* _p1;
};

struct _ManamFooBarParamSpecBaz {
	GParamSpec parent_instance;
};

static gint ManamFooBarBaz_private_offset;
static gpointer manam_foo_bar_baz_parent_class = NULL;

static void _vala_main (void);
VALA_EXTERN gpointer manam_foo_bar_baz_ref (gpointer instance);
VALA_EXTERN void manam_foo_bar_baz_unref (gpointer instance);
VALA_EXTERN GParamSpec* manam_foo_bar_param_spec_baz (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
VALA_EXTERN void manam_foo_bar_value_set_baz (GValue* value,
                                  gpointer v_object);
VALA_EXTERN void manam_foo_bar_value_take_baz (GValue* value,
                                   gpointer v_object);
VALA_EXTERN gpointer manam_foo_bar_value_get_baz (const GValue* value);
VALA_EXTERN GType manam_foo_bar_baz_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ManamFooBarBaz, manam_foo_bar_baz_unref)
VALA_EXTERN ManamFooBarBaz* manam_foo_bar_baz_new (void);
VALA_EXTERN ManamFooBarBaz* manam_foo_bar_baz_construct (GType object_type);
VALA_EXTERN void manam_foo_bar_baz_set_p0 (ManamFooBarBaz* self,
                               const gchar* value);
VALA_EXTERN void manam_foo_bar_baz_m0 (ManamFooBarBaz* self);
VALA_EXTERN void manam_foo_bar_baz_v0 (ManamFooBarBaz* self);
VALA_EXTERN void manam_foo_bar_baz_set_p1 (ManamFooBarBaz* self,
                               const gchar* value);
VALA_EXTERN void manam_foo_bar_baz_m1 (ManamFooBarBaz* self);
VALA_EXTERN void manam_foo_bar_baz_v1 (ManamFooBarBaz* self);
static void manam_foo_bar_baz_real_v0 (ManamFooBarBaz* self);
static void manam_foo_bar_baz_real_v1 (ManamFooBarBaz* self);
VALA_EXTERN const gchar* manam_foo_bar_baz_get_p0 (ManamFooBarBaz* self);
VALA_EXTERN const gchar* manam_foo_bar_baz_get_p1 (ManamFooBarBaz* self);
static void manam_foo_bar_baz_finalize (ManamFooBarBaz * obj);
static GType manam_foo_bar_baz_get_type_once (void);

static void
_vala_main (void)
{
	ManamFooBarBaz* baz = NULL;
	ManamFooBarBaz* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	_tmp0_ = manam_foo_bar_baz_new ();
	baz = _tmp0_;
	manam_foo_bar_baz_set_p0 (baz, "p0");
	_tmp1_ = g_strdup ("f0");
	_g_free0 (baz->f0);
	baz->f0 = _tmp1_;
	manam_foo_bar_baz_m0 (baz);
	manam_foo_bar_baz_v0 (baz);
	manam_foo_bar_baz_set_p1 (baz, "p1");
	_tmp2_ = g_strdup ("f1");
	_g_free0 (baz->f1);
	baz->f1 = _tmp2_;
	manam_foo_bar_baz_m1 (baz);
	manam_foo_bar_baz_v1 (baz);
	_manam_foo_bar_baz_unref0 (baz);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static inline gpointer
manam_foo_bar_baz_get_instance_private (ManamFooBarBaz* self)
{
	return G_STRUCT_MEMBER_P (self, ManamFooBarBaz_private_offset);
}

void
manam_foo_bar_baz_m0 (ManamFooBarBaz* self)
{
	g_return_if_fail (MANAM_FOO_BAR_IS_BAZ (self));
}

static void
manam_foo_bar_baz_real_v0 (ManamFooBarBaz* self)
{
}

void
manam_foo_bar_baz_v0 (ManamFooBarBaz* self)
{
	ManamFooBarBazClass* _klass_;
	g_return_if_fail (MANAM_FOO_BAR_IS_BAZ (self));
	_klass_ = MANAM_FOO_BAR_BAZ_GET_CLASS (self);
	if (_klass_->v0) {
		_klass_->v0 (self);
	}
}

ManamFooBarBaz*
manam_foo_bar_baz_construct (GType object_type)
{
	ManamFooBarBaz* self = NULL;
	self = (ManamFooBarBaz*) g_type_create_instance (object_type);
	return self;
}

ManamFooBarBaz*
manam_foo_bar_baz_new (void)
{
	return manam_foo_bar_baz_construct (MANAM_FOO_BAR_TYPE_BAZ);
}

void
manam_foo_bar_baz_m1 (ManamFooBarBaz* self)
{
	g_return_if_fail (MANAM_FOO_BAR_IS_BAZ (self));
}

static void
manam_foo_bar_baz_real_v1 (ManamFooBarBaz* self)
{
}

void
manam_foo_bar_baz_v1 (ManamFooBarBaz* self)
{
	ManamFooBarBazClass* _klass_;
	g_return_if_fail (MANAM_FOO_BAR_IS_BAZ (self));
	_klass_ = MANAM_FOO_BAR_BAZ_GET_CLASS (self);
	if (_klass_->v1) {
		_klass_->v1 (self);
	}
}

const gchar*
manam_foo_bar_baz_get_p0 (ManamFooBarBaz* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (MANAM_FOO_BAR_IS_BAZ (self), NULL);
	_tmp0_ = self->priv->_p0;
	result = _tmp0_;
	return result;
}

void
manam_foo_bar_baz_set_p0 (ManamFooBarBaz* self,
                          const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (MANAM_FOO_BAR_IS_BAZ (self));
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_p0);
	self->priv->_p0 = _tmp0_;
}

const gchar*
manam_foo_bar_baz_get_p1 (ManamFooBarBaz* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (MANAM_FOO_BAR_IS_BAZ (self), NULL);
	_tmp0_ = self->priv->_p1;
	result = _tmp0_;
	return result;
}

void
manam_foo_bar_baz_set_p1 (ManamFooBarBaz* self,
                          const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (MANAM_FOO_BAR_IS_BAZ (self));
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_p1);
	self->priv->_p1 = _tmp0_;
}

static void
manam_foo_bar_value_baz_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
manam_foo_bar_value_baz_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		manam_foo_bar_baz_unref (value->data[0].v_pointer);
	}
}

static void
manam_foo_bar_value_baz_copy_value (const GValue* src_value,
                                    GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = manam_foo_bar_baz_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
manam_foo_bar_value_baz_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
manam_foo_bar_value_baz_collect_value (GValue* value,
                                       guint n_collect_values,
                                       GTypeCValue* collect_values,
                                       guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		ManamFooBarBaz * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = manam_foo_bar_baz_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
manam_foo_bar_value_baz_lcopy_value (const GValue* value,
                                     guint n_collect_values,
                                     GTypeCValue* collect_values,
                                     guint collect_flags)
{
	ManamFooBarBaz ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = manam_foo_bar_baz_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
manam_foo_bar_param_spec_baz (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags)
{
	ManamFooBarParamSpecBaz* spec;
	g_return_val_if_fail (g_type_is_a (object_type, MANAM_FOO_BAR_TYPE_BAZ), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
manam_foo_bar_value_get_baz (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_FOO_BAR_TYPE_BAZ), NULL);
	return value->data[0].v_pointer;
}

void
manam_foo_bar_value_set_baz (GValue* value,
                             gpointer v_object)
{
	ManamFooBarBaz * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_FOO_BAR_TYPE_BAZ));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, MANAM_FOO_BAR_TYPE_BAZ));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		manam_foo_bar_baz_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_foo_bar_baz_unref (old);
	}
}

void
manam_foo_bar_value_take_baz (GValue* value,
                              gpointer v_object)
{
	ManamFooBarBaz * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_FOO_BAR_TYPE_BAZ));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, MANAM_FOO_BAR_TYPE_BAZ));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_foo_bar_baz_unref (old);
	}
}

static void
manam_foo_bar_baz_class_init (ManamFooBarBazClass * klass,
                              gpointer klass_data)
{
	manam_foo_bar_baz_parent_class = g_type_class_peek_parent (klass);
	((ManamFooBarBazClass *) klass)->finalize = manam_foo_bar_baz_finalize;
	g_type_class_adjust_private_offset (klass, &ManamFooBarBaz_private_offset);
	((ManamFooBarBazClass *) klass)->v0 = (void (*) (ManamFooBarBaz*)) manam_foo_bar_baz_real_v0;
	((ManamFooBarBazClass *) klass)->v1 = (void (*) (ManamFooBarBaz*)) manam_foo_bar_baz_real_v1;
}

static void
manam_foo_bar_baz_instance_init (ManamFooBarBaz * self,
                                 gpointer klass)
{
	self->priv = manam_foo_bar_baz_get_instance_private (self);
	self->ref_count = 1;
}

static void
manam_foo_bar_baz_finalize (ManamFooBarBaz * obj)
{
	ManamFooBarBaz * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, MANAM_FOO_BAR_TYPE_BAZ, ManamFooBarBaz);
	g_signal_handlers_destroy (self);
	_g_free0 (self->priv->_p0);
	_g_free0 (self->f0);
	_g_free0 (self->priv->_p1);
	_g_free0 (self->f1);
}

static GType
manam_foo_bar_baz_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { manam_foo_bar_value_baz_init, manam_foo_bar_value_baz_free_value, manam_foo_bar_value_baz_copy_value, manam_foo_bar_value_baz_peek_pointer, "p", manam_foo_bar_value_baz_collect_value, "p", manam_foo_bar_value_baz_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (ManamFooBarBazClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_foo_bar_baz_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ManamFooBarBaz), 0, (GInstanceInitFunc) manam_foo_bar_baz_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType manam_foo_bar_baz_type_id;
	manam_foo_bar_baz_type_id = g_type_register_fundamental (g_type_fundamental_next (), "ManamFooBarBaz", &g_define_type_info, &g_define_type_fundamental_info, 0);
	ManamFooBarBaz_private_offset = g_type_add_instance_private (manam_foo_bar_baz_type_id, sizeof (ManamFooBarBazPrivate));
	return manam_foo_bar_baz_type_id;
}

GType
manam_foo_bar_baz_get_type (void)
{
	static volatile gsize manam_foo_bar_baz_type_id__once = 0;
	if (g_once_init_enter (&manam_foo_bar_baz_type_id__once)) {
		GType manam_foo_bar_baz_type_id;
		manam_foo_bar_baz_type_id = manam_foo_bar_baz_get_type_once ();
		g_once_init_leave (&manam_foo_bar_baz_type_id__once, manam_foo_bar_baz_type_id);
	}
	return manam_foo_bar_baz_type_id__once;
}

gpointer
manam_foo_bar_baz_ref (gpointer instance)
{
	ManamFooBarBaz * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
manam_foo_bar_baz_unref (gpointer instance)
{
	ManamFooBarBaz * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		MANAM_FOO_BAR_BAZ_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

