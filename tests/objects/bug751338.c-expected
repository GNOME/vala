/* objects_bug751338.c generated by valac, the Vala compiler
 * generated from objects_bug751338.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_STRINGS_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooPrivate {
	gchar** _strings;
	gint _strings_length1;
	gint __strings_size_;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN gchar** foo_get_strings (Foo* self,
                         gint* result_length1);
VALA_EXTERN void foo_set_strings (Foo* self,
                      gchar** value,
                      gint value_length1);
static gchar** _vala_array_dup1 (gchar** self,
                          gssize length);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

gchar**
foo_get_strings (Foo* self,
                 gint* result_length1)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_tmp0_ = self->priv->_strings;
	_tmp0__length1 = self->priv->_strings_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}

static gchar**
_vala_array_dup1 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
foo_set_strings (Foo* self,
                 gchar** value,
                 gint value_length1)
{
	gchar** _tmp0_;
	gint _tmp0__length1;
	g_return_if_fail (IS_FOO (self));
	_tmp0_ = (value != NULL) ? _vala_array_dup1 (value, value_length1) : value;
	_tmp0__length1 = value_length1;
	self->priv->_strings = (_vala_array_free (self->priv->_strings, self->priv->_strings_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_strings = _tmp0_;
	self->priv->_strings_length1 = _tmp0__length1;
	self->priv->__strings_size_ = self->priv->_strings_length1;
	g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_STRINGS_PROPERTY]);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_STRINGS_PROPERTY, foo_properties[FOO_STRINGS_PROPERTY] = g_param_spec_boxed ("strings", "strings", "strings", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	self->priv->_strings = (_vala_array_free (self->priv->_strings, self->priv->_strings_length1, (GDestroyNotify) g_free), NULL);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_STRINGS_PROPERTY:
		{
			int length;
			g_value_set_boxed (value, foo_get_strings (self, &length));
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_STRINGS_PROPERTY:
		{
			gpointer boxed;
			boxed = g_value_get_boxed (value);
			foo_set_strings (self, boxed, (boxed == NULL) ? 0 : g_strv_length (boxed));
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	gchar** strings = NULL;
	gint strings_length1 = 0;
	gint _strings_size_ = 0;
	Foo* f = NULL;
	Foo* _tmp0_;
	Foo* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar** _tmp4_;
	gchar** _tmp5_;
	gint _tmp5__length1;
	Foo* _tmp6_;
	gchar** _tmp7_ = NULL;
	gchar** _tmp8_;
	gint _tmp8__length1;
	const gchar* _tmp9_;
	gchar** _tmp10_;
	gint _tmp10__length1;
	const gchar* _tmp11_;
	gchar** _tmp12_;
	gint _tmp12__length1;
	Foo* _tmp14_;
	Foo* _tmp15_;
	gchar** _tmp16_ = NULL;
	gchar** _tmp17_;
	gint _tmp17__length1;
	Foo* _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	gchar** _tmp21_;
	gchar** _tmp22_;
	gint _tmp22__length1;
	Foo* _tmp23_;
	gchar** _tmp24_ = NULL;
	gchar** _tmp25_;
	gint _tmp25__length1;
	const gchar* _tmp26_;
	gchar** _tmp27_;
	gint _tmp27__length1;
	const gchar* _tmp28_;
	gchar** _tmp29_;
	gint _tmp29__length1;
	_tmp0_ = foo_new ();
	f = _tmp0_;
	_tmp1_ = f;
	_tmp2_ = g_strdup ("foo");
	_tmp3_ = g_strdup ("bar");
	_tmp4_ = g_new0 (gchar*, 2 + 1);
	_tmp4_[0] = _tmp2_;
	_tmp4_[1] = _tmp3_;
	_tmp5_ = _tmp4_;
	_tmp5__length1 = 2;
	g_object_set (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, G_TYPE_OBJECT, GObject), "strings", _tmp5_, NULL);
	_tmp5_ = (_vala_array_free (_tmp5_, _tmp5__length1, (GDestroyNotify) g_free), NULL);
	_tmp6_ = f;
	g_object_get (G_TYPE_CHECK_INSTANCE_CAST (_tmp6_, G_TYPE_OBJECT, GObject), "strings", &_tmp7_, NULL);
	strings = (_vala_array_free (strings, strings_length1, (GDestroyNotify) g_free), NULL);
	strings = _tmp7_;
	strings_length1 = -1;
	_strings_size_ = strings_length1;
	_tmp8_ = strings;
	_tmp8__length1 = strings_length1;
	_tmp9_ = _tmp8_[0];
	_vala_assert (g_strcmp0 (_tmp9_, "foo") == 0, "strings[0] == \"foo\"");
	_tmp10_ = strings;
	_tmp10__length1 = strings_length1;
	_tmp11_ = _tmp10_[1];
	_vala_assert (g_strcmp0 (_tmp11_, "bar") == 0, "strings[1] == \"bar\"");
	_tmp12_ = strings;
	_tmp12__length1 = strings_length1;
	if (_tmp12__length1 == -1) {
		gchar** _tmp13_;
		gint _tmp13__length1;
		_tmp13_ = strings;
		_tmp13__length1 = strings_length1;
		strings_length1 = (gint) g_strv_length (_tmp13_);
	}
	_tmp14_ = f;
	g_object_set (G_TYPE_CHECK_INSTANCE_CAST (_tmp14_, G_TYPE_OBJECT, GObject), "strings", NULL, NULL);
	_tmp15_ = f;
	g_object_get (G_TYPE_CHECK_INSTANCE_CAST (_tmp15_, G_TYPE_OBJECT, GObject), "strings", &_tmp16_, NULL);
	strings = (_vala_array_free (strings, strings_length1, (GDestroyNotify) g_free), NULL);
	strings = _tmp16_;
	strings_length1 = -1;
	_strings_size_ = strings_length1;
	_tmp17_ = strings;
	_tmp17__length1 = strings_length1;
	_vala_assert (_tmp17_ == NULL, "strings == null");
	_tmp18_ = f;
	_tmp19_ = g_strdup ("foo");
	_tmp20_ = g_strdup ("bar");
	_tmp21_ = g_new0 (gchar*, 2 + 1);
	_tmp21_[0] = _tmp19_;
	_tmp21_[1] = _tmp20_;
	_tmp22_ = _tmp21_;
	_tmp22__length1 = 2;
	g_object_set (G_TYPE_CHECK_INSTANCE_CAST (_tmp18_, G_TYPE_OBJECT, GObject), "strings", _tmp22_, NULL);
	_tmp22_ = (_vala_array_free (_tmp22_, _tmp22__length1, (GDestroyNotify) g_free), NULL);
	_tmp23_ = f;
	g_object_get (G_TYPE_CHECK_INSTANCE_CAST (_tmp23_, G_TYPE_OBJECT, GObject), "strings", &_tmp24_, NULL);
	strings = (_vala_array_free (strings, strings_length1, (GDestroyNotify) g_free), NULL);
	strings = _tmp24_;
	strings_length1 = -1;
	_strings_size_ = strings_length1;
	_tmp25_ = strings;
	_tmp25__length1 = strings_length1;
	_tmp26_ = _tmp25_[0];
	_vala_assert (g_strcmp0 (_tmp26_, "foo") == 0, "strings[0] == \"foo\"");
	_tmp27_ = strings;
	_tmp27__length1 = strings_length1;
	_tmp28_ = _tmp27_[1];
	_vala_assert (g_strcmp0 (_tmp28_, "bar") == 0, "strings[1] == \"bar\"");
	_tmp29_ = strings;
	_tmp29__length1 = strings_length1;
	if (_tmp29__length1 == -1) {
		gchar** _tmp30_;
		gint _tmp30__length1;
		_tmp30_ = strings;
		_tmp30__length1 = strings_length1;
		strings_length1 = (gint) g_strv_length (_tmp30_);
	}
	_g_object_unref0 (f);
	strings = (_vala_array_free (strings, strings_length1, (GDestroyNotify) g_free), NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

