/* objects_bug764481.c generated by valac, the Vala compiler
 * generated from objects_bug764481.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_MANAM (manam_get_type ())
typedef struct _Manam Manam;

#define TYPE_BASE_FOO (base_foo_get_type ())
#define BASE_FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BASE_FOO, BaseFoo))
#define BASE_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BASE_FOO, BaseFooClass))
#define IS_BASE_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BASE_FOO))
#define IS_BASE_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BASE_FOO))
#define BASE_FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BASE_FOO, BaseFooClass))

typedef struct _BaseFoo BaseFoo;
typedef struct _BaseFooClass BaseFooClass;
typedef struct _BaseFooPrivate BaseFooPrivate;
enum  {
	BASE_FOO_0_PROPERTY,
	BASE_FOO_ST_PROPERTY,
	BASE_FOO_NUM_PROPERTIES
};
static GParamSpec* base_foo_properties[BASE_FOO_NUM_PROPERTIES];

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_ST_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_ST_PROPERTY,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];

#define TYPE_BAZ (baz_get_type ())
#define BAZ(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAZ, Baz))
#define BAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAZ, BazClass))
#define IS_BAZ(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAZ))
#define IS_BAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAZ))
#define BAZ_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAZ, BazClass))

typedef struct _Baz Baz;
typedef struct _BazClass BazClass;
typedef struct _BazPrivate BazPrivate;
enum  {
	BAZ_0_PROPERTY,
	BAZ_ST_PROPERTY,
	BAZ_NUM_PROPERTIES
};
static GParamSpec* baz_properties[BAZ_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Manam {
	gint a;
};

struct _BaseFoo {
	GObject parent_instance;
	BaseFooPrivate * priv;
};

struct _BaseFooClass {
	GObjectClass parent_class;
	void (*get_st) (BaseFoo* self, Manam * result);
	void (*set_st) (BaseFoo* self, Manam * value);
};

struct _BaseFooPrivate {
	Manam _st;
};

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
	void (*get_st) (Foo* self, Manam * result);
	void (*set_st) (Foo* self, Manam * value);
};

struct _FooPrivate {
	Manam _st;
};

struct _Bar {
	Foo parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	FooClass parent_class;
};

struct _Baz {
	BaseFoo parent_instance;
	BazPrivate * priv;
};

struct _BazClass {
	BaseFooClass parent_class;
};

static gint BaseFoo_private_offset;
static gpointer base_foo_parent_class = NULL;
static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;
static gpointer bar_parent_class = NULL;
static gpointer baz_parent_class = NULL;

VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Manam* manam_dup (const Manam* self);
VALA_EXTERN void manam_free (Manam* self);
VALA_EXTERN GType base_foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BaseFoo, g_object_unref)
VALA_EXTERN void base_foo_get_st (BaseFoo* self,
                      Manam * result);
VALA_EXTERN void base_foo_set_st (BaseFoo* self,
                      Manam * value);
VALA_EXTERN BaseFoo* base_foo_new (void);
VALA_EXTERN BaseFoo* base_foo_construct (GType object_type);
static gboolean _manam_equal (const Manam * s1,
                       const Manam * s2);
static void base_foo_finalize (GObject * obj);
static GType base_foo_get_type_once (void);
static void _vala_base_foo_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec);
static void _vala_base_foo_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN void foo_get_st (Foo* self,
                 Manam * result);
VALA_EXTERN void foo_set_st (Foo* self,
                 Manam * value);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static GType bar_get_type_once (void);
static void _vala_bar_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_bar_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
VALA_EXTERN GType baz_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Baz, g_object_unref)
VALA_EXTERN Baz* baz_new (void);
VALA_EXTERN Baz* baz_construct (GType object_type);
static GType baz_get_type_once (void);
static void _vala_baz_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_baz_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
static void _vala_main (void);

Manam*
manam_dup (const Manam* self)
{
	Manam* dup;
	dup = g_new0 (Manam, 1);
	memcpy (dup, self, sizeof (Manam));
	return dup;
}

void
manam_free (Manam* self)
{
	g_free (self);
}

static GType
manam_get_type_once (void)
{
	GType manam_type_id;
	manam_type_id = g_boxed_type_register_static ("Manam", (GBoxedCopyFunc) manam_dup, (GBoxedFreeFunc) manam_free);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static inline gpointer
base_foo_get_instance_private (BaseFoo* self)
{
	return G_STRUCT_MEMBER_P (self, BaseFoo_private_offset);
}

BaseFoo*
base_foo_construct (GType object_type)
{
	BaseFoo * self = NULL;
	self = (BaseFoo*) g_object_new (object_type, NULL);
	return self;
}

BaseFoo*
base_foo_new (void)
{
	return base_foo_construct (TYPE_BASE_FOO);
}

void
base_foo_get_st (BaseFoo* self,
                 Manam * result)
{
	BaseFooClass* _klass_;
	g_return_if_fail (IS_BASE_FOO (self));
	_klass_ = BASE_FOO_GET_CLASS (self);
	if (_klass_->get_st) {
		_klass_->get_st (self, result);
	}
	return;
}

static void
base_foo_real_get_st (BaseFoo* base,
                      Manam * result)
{
	BaseFoo* self;
	Manam _tmp0_;
	self = base;
	_tmp0_ = self->priv->_st;
	*result = _tmp0_;
	return;
}

void
base_foo_set_st (BaseFoo* self,
                 Manam * value)
{
	BaseFooClass* _klass_;
	g_return_if_fail (IS_BASE_FOO (self));
	_klass_ = BASE_FOO_GET_CLASS (self);
	if (_klass_->set_st) {
		_klass_->set_st (self, value);
	}
}

static gboolean
_manam_equal (const Manam * s1,
              const Manam * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (s1->a != s2->a) {
		return FALSE;
	}
	return TRUE;
}

static void
base_foo_real_set_st (BaseFoo* base,
                      Manam * value)
{
	BaseFoo* self;
	Manam old_value;
	self = base;
	base_foo_real_get_st (base, &old_value);
	if (_manam_equal (value, &old_value) != TRUE) {
		Manam _tmp0_;
		_tmp0_ = *value;
		self->priv->_st = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, base_foo_properties[BASE_FOO_ST_PROPERTY]);
	}
}

static void
base_foo_class_init (BaseFooClass * klass,
                     gpointer klass_data)
{
	base_foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &BaseFoo_private_offset);
	BASE_FOO_CLASS (klass)->get_st = (void (*) (BaseFoo*, Manam*)) base_foo_real_get_st;
	BASE_FOO_CLASS (klass)->set_st = (void (*) (BaseFoo*, Manam*)) base_foo_real_set_st;
	G_OBJECT_CLASS (klass)->get_property = _vala_base_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_base_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = base_foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), BASE_FOO_ST_PROPERTY, base_foo_properties[BASE_FOO_ST_PROPERTY] = g_param_spec_boxed ("st", "st", "st", TYPE_MANAM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
base_foo_instance_init (BaseFoo * self,
                        gpointer klass)
{
	self->priv = base_foo_get_instance_private (self);
}

static void
base_foo_finalize (GObject * obj)
{
	BaseFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BASE_FOO, BaseFoo);
	G_OBJECT_CLASS (base_foo_parent_class)->finalize (obj);
}

static GType
base_foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BaseFooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) base_foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (BaseFoo), 0, (GInstanceInitFunc) base_foo_instance_init, NULL };
	GType base_foo_type_id;
	base_foo_type_id = g_type_register_static (G_TYPE_OBJECT, "BaseFoo", &g_define_type_info, 0);
	BaseFoo_private_offset = g_type_add_instance_private (base_foo_type_id, sizeof (BaseFooPrivate));
	return base_foo_type_id;
}

GType
base_foo_get_type (void)
{
	static volatile gsize base_foo_type_id__once = 0;
	if (g_once_init_enter (&base_foo_type_id__once)) {
		GType base_foo_type_id;
		base_foo_type_id = base_foo_get_type_once ();
		g_once_init_leave (&base_foo_type_id__once, base_foo_type_id);
	}
	return base_foo_type_id__once;
}

static void
_vala_base_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec)
{
	BaseFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BASE_FOO, BaseFoo);
	switch (property_id) {
		case BASE_FOO_ST_PROPERTY:
		{
			Manam boxed;
			base_foo_get_st (self, &boxed);
			g_value_set_boxed (value, &boxed);
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_base_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec)
{
	BaseFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BASE_FOO, BaseFoo);
	switch (property_id) {
		case BASE_FOO_ST_PROPERTY:
		base_foo_set_st (self, g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

void
foo_get_st (Foo* self,
            Manam * result)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->get_st) {
		_klass_->get_st (self, result);
	}
	return;
}

static void
foo_real_get_st (Foo* base,
                 Manam * result)
{
	Foo* self;
	Manam _tmp0_;
	self = base;
	_tmp0_ = self->priv->_st;
	*result = _tmp0_;
	return;
}

void
foo_set_st (Foo* self,
            Manam * value)
{
	FooClass* _klass_;
	g_return_if_fail (IS_FOO (self));
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->set_st) {
		_klass_->set_st (self, value);
	}
}

static void
foo_real_set_st (Foo* base,
                 Manam * value)
{
	Foo* self;
	Manam old_value;
	self = base;
	foo_real_get_st (base, &old_value);
	if (_manam_equal (value, &old_value) != TRUE) {
		Manam _tmp0_;
		_tmp0_ = *value;
		self->priv->_st = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_ST_PROPERTY]);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	FOO_CLASS (klass)->get_st = (void (*) (Foo*, Manam*)) foo_real_get_st;
	FOO_CLASS (klass)->set_st = (void (*) (Foo*, Manam*)) foo_real_set_st;
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_ST_PROPERTY, foo_properties[FOO_ST_PROPERTY] = g_param_spec_boxed ("st", "st", "st", TYPE_MANAM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_ST_PROPERTY:
		{
			Manam boxed;
			foo_get_st (self, &boxed);
			g_value_set_boxed (value, &boxed);
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_ST_PROPERTY:
		foo_set_st (self, g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

Bar*
bar_construct (GType object_type)
{
	Bar * self = NULL;
	self = (Bar*) foo_construct (object_type);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
bar_real_get_st (Foo* base,
                 Manam * result)
{
	Bar* self;
	Manam _tmp0_;
	Manam _tmp1_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	FOO_CLASS (bar_parent_class)->get_st (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo), &_tmp0_);
	_tmp1_ = _tmp0_;
	*result = _tmp1_;
	return;
}

static void
bar_real_set_st (Foo* base,
                 Manam * value)
{
	Bar* self;
	Manam _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAR, Bar);
	_tmp0_ = *value;
	FOO_CLASS (bar_parent_class)->set_st (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo), &_tmp0_);
	g_object_notify_by_pspec ((GObject *) self, bar_properties[BAR_ST_PROPERTY]);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	FOO_CLASS (klass)->get_st = (void (*) (Foo*, Manam*)) bar_real_get_st;
	FOO_CLASS (klass)->set_st = (void (*) (Foo*, Manam*)) bar_real_set_st;
	G_OBJECT_CLASS (klass)->get_property = _vala_bar_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_bar_set_property;
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_ST_PROPERTY, bar_properties[BAR_ST_PROPERTY] = g_param_spec_boxed ("st", "st", "st", TYPE_MANAM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	GType bar_type_id;
	bar_type_id = g_type_register_static (TYPE_FOO, "Bar", &g_define_type_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_bar_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_ST_PROPERTY:
		{
			Manam boxed;
			foo_get_st (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo), &boxed);
			g_value_set_boxed (value, &boxed);
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_bar_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_ST_PROPERTY:
		foo_set_st (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_FOO, Foo), g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

Baz*
baz_construct (GType object_type)
{
	Baz * self = NULL;
	self = (Baz*) base_foo_construct (object_type);
	return self;
}

Baz*
baz_new (void)
{
	return baz_construct (TYPE_BAZ);
}

static void
baz_real_get_st (BaseFoo* base,
                 Manam * result)
{
	Baz* self;
	Manam _tmp0_;
	Manam _tmp1_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAZ, Baz);
	BASE_FOO_CLASS (baz_parent_class)->get_st (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BASE_FOO, BaseFoo), &_tmp0_);
	_tmp1_ = _tmp0_;
	*result = _tmp1_;
	return;
}

static void
baz_real_set_st (BaseFoo* base,
                 Manam * value)
{
	Baz* self;
	Manam _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_BAZ, Baz);
	_tmp0_ = *value;
	BASE_FOO_CLASS (baz_parent_class)->set_st (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BASE_FOO, BaseFoo), &_tmp0_);
	g_object_notify_by_pspec ((GObject *) self, baz_properties[BAZ_ST_PROPERTY]);
}

static void
baz_class_init (BazClass * klass,
                gpointer klass_data)
{
	baz_parent_class = g_type_class_peek_parent (klass);
	BASE_FOO_CLASS (klass)->get_st = (void (*) (BaseFoo*, Manam*)) baz_real_get_st;
	BASE_FOO_CLASS (klass)->set_st = (void (*) (BaseFoo*, Manam*)) baz_real_set_st;
	G_OBJECT_CLASS (klass)->get_property = _vala_baz_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_baz_set_property;
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAZ_ST_PROPERTY, baz_properties[BAZ_ST_PROPERTY] = g_param_spec_boxed ("st", "st", "st", TYPE_MANAM, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
baz_instance_init (Baz * self,
                   gpointer klass)
{
}

static GType
baz_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BazClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Baz), 0, (GInstanceInitFunc) baz_instance_init, NULL };
	GType baz_type_id;
	baz_type_id = g_type_register_static (TYPE_BASE_FOO, "Baz", &g_define_type_info, 0);
	return baz_type_id;
}

GType
baz_get_type (void)
{
	static volatile gsize baz_type_id__once = 0;
	if (g_once_init_enter (&baz_type_id__once)) {
		GType baz_type_id;
		baz_type_id = baz_get_type_once ();
		g_once_init_leave (&baz_type_id__once, baz_type_id);
	}
	return baz_type_id__once;
}

static void
_vala_baz_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Baz * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAZ, Baz);
	switch (property_id) {
		case BAZ_ST_PROPERTY:
		{
			Manam boxed;
			base_foo_get_st (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BASE_FOO, BaseFoo), &boxed);
			g_value_set_boxed (value, &boxed);
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_baz_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Baz * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAZ, Baz);
	switch (property_id) {
		case BAZ_ST_PROPERTY:
		base_foo_set_st (G_TYPE_CHECK_INSTANCE_CAST (self, TYPE_BASE_FOO, BaseFoo), g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	Bar* bar = NULL;
	Bar* _tmp0_;
	Manam _tmp1_ = {0};
	Manam _tmp2_ = {0};
	Manam _tmp3_;
	Baz* baz = NULL;
	Baz* _tmp4_;
	Manam _tmp5_ = {0};
	Manam _tmp6_ = {0};
	Manam _tmp7_;
	_tmp0_ = bar_new ();
	bar = _tmp0_;
	_tmp1_.a = 42;
	foo_set_st (G_TYPE_CHECK_INSTANCE_CAST (bar, TYPE_FOO, Foo), &_tmp1_);
	foo_get_st (G_TYPE_CHECK_INSTANCE_CAST (bar, TYPE_FOO, Foo), &_tmp2_);
	_tmp3_ = _tmp2_;
	_vala_assert (_tmp3_.a == 42, "bar.st.a == 42");
	_tmp4_ = baz_new ();
	baz = _tmp4_;
	_tmp5_.a = 23;
	base_foo_set_st (G_TYPE_CHECK_INSTANCE_CAST (baz, TYPE_BASE_FOO, BaseFoo), &_tmp5_);
	base_foo_get_st (G_TYPE_CHECK_INSTANCE_CAST (baz, TYPE_BASE_FOO, BaseFoo), &_tmp6_);
	_tmp7_ = _tmp6_;
	_vala_assert (_tmp7_.a == 23, "baz.st.a == 23");
	_g_object_unref0 (baz);
	_g_object_unref0 (bar);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

