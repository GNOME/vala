/* objects_bug664529.c generated by valac, the Vala compiler
 * generated from objects_bug664529.vala, do not modify */

#include <glib-object.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
static void _g_object_unref0_ (gpointer var);
static inline void _g_queue_free__g_object_unref0_ (GQueue* self);

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}

static inline void
_g_queue_free__g_object_unref0_ (GQueue* self)
{
	g_queue_free_full (self, (GDestroyNotify) _g_object_unref0_);
}

static void
_vala_main (void)
{
	GObject* foo = NULL;
	GObject* _tmp0_;
	GQueue* bar = NULL;
	GQueue* _tmp1_;
	GQueue* _tmp2_;
	GObject* _tmp3_;
	_tmp0_ = g_object_new (G_TYPE_OBJECT, NULL);
	foo = _tmp0_;
	_tmp1_ = g_queue_new ();
	bar = _tmp1_;
	_tmp2_ = bar;
	_tmp3_ = _g_object_ref0 (foo);
	g_queue_push_head (_tmp2_, _tmp3_);
	(bar == NULL) ? NULL : (bar = (_g_queue_free__g_object_unref0_ (bar), NULL));
	bar = NULL;
	_vala_assert (foo->ref_count == ((guint) 1), "foo.ref_count == 1");
	(bar == NULL) ? NULL : (bar = (_g_queue_free__g_object_unref0_ (bar), NULL));
	_g_object_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

