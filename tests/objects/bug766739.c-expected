/* objects_bug766739.c generated by valac, the Vala compiler
 * generated from objects_bug766739.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>
#include <stdlib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO_STRUCT (foo_struct_get_type ())
typedef struct _FooStruct FooStruct;

#define TYPE_FOOCLASS (fooclass_get_type ())
#define FOOCLASS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOOCLASS, FooClass))
#define FOOCLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOOCLASS, FooClassClass))
#define IS_FOOCLASS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOOCLASS))
#define IS_FOOCLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOOCLASS))
#define FOOCLASS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOOCLASS, FooClassClass))

typedef struct _FooClass FooClass;
typedef struct _FooClassClass FooClassClass;
typedef struct _FooClassPrivate FooClassPrivate;
typedef struct _ParamSpecFooClass ParamSpecFooClass;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _fooclass_unref0(var) ((var == NULL) ? NULL : (var = (fooclass_unref (var), NULL)))
typedef struct _ParamSpecBar ParamSpecBar;
#define _bar_unref0(var) ((var == NULL) ? NULL : (var = (bar_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FooStruct {
	gint bar;
};

struct _FooClass {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooClassPrivate * priv;
	gint bar;
};

struct _FooClassClass {
	GTypeClass parent_class;
	void (*finalize) (FooClass *self);
};

struct _ParamSpecFooClass {
	GParamSpec parent_instance;
};

struct _Bar {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BarPrivate * priv;
	gint f_simple;
	gchar* f_string;
	gchar** f_array;
	gint f_array_length1;
	gint _f_array_size_;
	FooStruct f_struct;
	FooClass* f_class;
	const gchar* fu_string;
	gchar** fu_array;
	gint fu_array_length1;
	gint _fu_array_size_;
	FooStruct* fu_struct;
	FooClass* fu_class;
};

struct _BarClass {
	GTypeClass parent_class;
	void (*finalize) (Bar *self);
};

struct _BarPrivate {
	gint _p_simple;
	gchar* _p_string;
	gchar** _p_array;
	gint _p_array_length1;
	gint __p_array_size_;
	FooStruct _p_struct;
	FooClass* _p_class;
};

struct _ParamSpecBar {
	GParamSpec parent_instance;
};

static gpointer fooclass_parent_class = NULL;
static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;

VALA_EXTERN GType foo_struct_get_type (void) G_GNUC_CONST ;
VALA_EXTERN FooStruct* foo_struct_dup (const FooStruct* self);
VALA_EXTERN void foo_struct_free (FooStruct* self);
VALA_EXTERN gpointer fooclass_ref (gpointer instance);
VALA_EXTERN void fooclass_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_fooclass (const gchar* name,
                                 const gchar* nick,
                                 const gchar* blurb,
                                 GType object_type,
                                 GParamFlags flags);
VALA_EXTERN void value_set_fooclass (GValue* value,
                         gpointer v_object);
VALA_EXTERN void value_take_fooclass (GValue* value,
                          gpointer v_object);
VALA_EXTERN gpointer value_get_fooclass (const GValue* value);
VALA_EXTERN GType fooclass_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (FooClass, fooclass_unref)
VALA_EXTERN FooClass* fooclass_new (void);
VALA_EXTERN FooClass* fooclass_construct (GType object_type);
static void fooclass_finalize (FooClass * obj);
static GType fooclass_get_type_once (void);
VALA_EXTERN gpointer bar_ref (gpointer instance);
VALA_EXTERN void bar_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_bar (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_bar (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_bar (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_bar (const GValue* value);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, bar_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
VALA_EXTERN gint bar_get_p_simple (Bar* self);
VALA_EXTERN void bar_set_p_simple (Bar* self,
                       gint value);
VALA_EXTERN const gchar* bar_get_p_string (Bar* self);
VALA_EXTERN void bar_set_p_string (Bar* self,
                       const gchar* value);
VALA_EXTERN gchar** bar_get_p_array (Bar* self,
                         gint* result_length1);
VALA_EXTERN void bar_set_p_array (Bar* self,
                      gchar** value,
                      gint value_length1);
static gchar** _vala_array_dup1 (gchar** self,
                          gssize length);
VALA_EXTERN void bar_get_p_struct (Bar* self,
                       FooStruct * result);
VALA_EXTERN void bar_set_p_struct (Bar* self,
                       FooStruct * value);
VALA_EXTERN FooClass* bar_get_p_class (Bar* self);
VALA_EXTERN void bar_set_p_class (Bar* self,
                      FooClass* value);
static void bar_finalize (Bar * obj);
static GType bar_get_type_once (void);
static void _vala_main (void);
static gchar** _vala_array_dup2 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup3 (gchar** self,
                          gssize length);
static gboolean _foo_struct_equal (const FooStruct * s1,
                            const FooStruct * s2);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

FooStruct*
foo_struct_dup (const FooStruct* self)
{
	FooStruct* dup;
	dup = g_new0 (FooStruct, 1);
	memcpy (dup, self, sizeof (FooStruct));
	return dup;
}

void
foo_struct_free (FooStruct* self)
{
	g_free (self);
}

static GType
foo_struct_get_type_once (void)
{
	GType foo_struct_type_id;
	foo_struct_type_id = g_boxed_type_register_static ("FooStruct", (GBoxedCopyFunc) foo_struct_dup, (GBoxedFreeFunc) foo_struct_free);
	return foo_struct_type_id;
}

GType
foo_struct_get_type (void)
{
	static volatile gsize foo_struct_type_id__once = 0;
	if (g_once_init_enter (&foo_struct_type_id__once)) {
		GType foo_struct_type_id;
		foo_struct_type_id = foo_struct_get_type_once ();
		g_once_init_leave (&foo_struct_type_id__once, foo_struct_type_id);
	}
	return foo_struct_type_id__once;
}

FooClass*
fooclass_construct (GType object_type)
{
	FooClass* self = NULL;
	self = (FooClass*) g_type_create_instance (object_type);
	return self;
}

FooClass*
fooclass_new (void)
{
	return fooclass_construct (TYPE_FOOCLASS);
}

static void
value_fooclass_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_fooclass_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		fooclass_unref (value->data[0].v_pointer);
	}
}

static void
value_fooclass_copy_value (const GValue* src_value,
                           GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = fooclass_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_fooclass_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_fooclass_collect_value (GValue* value,
                              guint n_collect_values,
                              GTypeCValue* collect_values,
                              guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		FooClass * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = fooclass_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_fooclass_lcopy_value (const GValue* value,
                            guint n_collect_values,
                            GTypeCValue* collect_values,
                            guint collect_flags)
{
	FooClass ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = fooclass_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_fooclass (const gchar* name,
                     const gchar* nick,
                     const gchar* blurb,
                     GType object_type,
                     GParamFlags flags)
{
	ParamSpecFooClass* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOOCLASS), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_fooclass (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOOCLASS), NULL);
	return value->data[0].v_pointer;
}

void
value_set_fooclass (GValue* value,
                    gpointer v_object)
{
	FooClass * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOOCLASS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOOCLASS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		fooclass_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		fooclass_unref (old);
	}
}

void
value_take_fooclass (GValue* value,
                     gpointer v_object)
{
	FooClass * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOOCLASS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOOCLASS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		fooclass_unref (old);
	}
}

static void
fooclass_class_init (FooClassClass * klass,
                     gpointer klass_data)
{
	fooclass_parent_class = g_type_class_peek_parent (klass);
	((FooClassClass *) klass)->finalize = fooclass_finalize;
}

static void
fooclass_instance_init (FooClass * self,
                        gpointer klass)
{
	self->bar = 42;
	self->ref_count = 1;
}

static void
fooclass_finalize (FooClass * obj)
{
	FooClass * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOOCLASS, FooClass);
	g_signal_handlers_destroy (self);
}

static GType
fooclass_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_fooclass_init, value_fooclass_free_value, value_fooclass_copy_value, value_fooclass_peek_pointer, "p", value_fooclass_collect_value, "p", value_fooclass_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClassClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) fooclass_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FooClass), 0, (GInstanceInitFunc) fooclass_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType fooclass_type_id;
	fooclass_type_id = g_type_register_fundamental (g_type_fundamental_next (), "FooClass", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return fooclass_type_id;
}

GType
fooclass_get_type (void)
{
	static volatile gsize fooclass_type_id__once = 0;
	if (g_once_init_enter (&fooclass_type_id__once)) {
		GType fooclass_type_id;
		fooclass_type_id = fooclass_get_type_once ();
		g_once_init_leave (&fooclass_type_id__once, fooclass_type_id);
	}
	return fooclass_type_id__once;
}

gpointer
fooclass_ref (gpointer instance)
{
	FooClass * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
fooclass_unref (gpointer instance)
{
	FooClass * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOOCLASS_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

Bar*
bar_construct (GType object_type)
{
	Bar* self = NULL;
	self = (Bar*) g_type_create_instance (object_type);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

gint
bar_get_p_simple (Bar* self)
{
	gint result;
	g_return_val_if_fail (IS_BAR (self), 0);
	result = self->priv->_p_simple;
	return result;
}

void
bar_set_p_simple (Bar* self,
                  gint value)
{
	g_return_if_fail (IS_BAR (self));
	self->priv->_p_simple = value;
}

const gchar*
bar_get_p_string (Bar* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_p_string;
	result = _tmp0_;
	return result;
}

void
bar_set_p_string (Bar* self,
                  const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_p_string);
	self->priv->_p_string = _tmp0_;
}

gchar**
bar_get_p_array (Bar* self,
                 gint* result_length1)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_p_array;
	_tmp0__length1 = self->priv->_p_array_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}

static gchar**
_vala_array_dup1 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
bar_set_p_array (Bar* self,
                 gchar** value,
                 gint value_length1)
{
	gchar** _tmp0_;
	gint _tmp0__length1;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = (value != NULL) ? _vala_array_dup1 (value, value_length1) : value;
	_tmp0__length1 = value_length1;
	self->priv->_p_array = (_vala_array_free (self->priv->_p_array, self->priv->_p_array_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_p_array = _tmp0_;
	self->priv->_p_array_length1 = _tmp0__length1;
	self->priv->__p_array_size_ = self->priv->_p_array_length1;
}

void
bar_get_p_struct (Bar* self,
                  FooStruct * result)
{
	FooStruct _tmp0_;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = self->priv->_p_struct;
	*result = _tmp0_;
	return;
}

void
bar_set_p_struct (Bar* self,
                  FooStruct * value)
{
	FooStruct _tmp0_;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = *value;
	self->priv->_p_struct = _tmp0_;
}

FooClass*
bar_get_p_class (Bar* self)
{
	FooClass* result;
	FooClass* _tmp0_;
	g_return_val_if_fail (IS_BAR (self), NULL);
	_tmp0_ = self->priv->_p_class;
	result = _tmp0_;
	return result;
}

static gpointer
_fooclass_ref0 (gpointer self)
{
	return self ? fooclass_ref (self) : NULL;
}

void
bar_set_p_class (Bar* self,
                 FooClass* value)
{
	FooClass* _tmp0_;
	g_return_if_fail (IS_BAR (self));
	_tmp0_ = _fooclass_ref0 (value);
	_fooclass_unref0 (self->priv->_p_class);
	self->priv->_p_class = _tmp0_;
}

static void
value_bar_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_bar_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		bar_unref (value->data[0].v_pointer);
	}
}

static void
value_bar_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = bar_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_bar_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_bar_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Bar * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = bar_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_bar_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Bar ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = bar_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_bar (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecBar* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_BAR), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_bar (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR), NULL);
	return value->data[0].v_pointer;
}

void
value_set_bar (GValue* value,
               gpointer v_object)
{
	Bar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		bar_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bar_unref (old);
	}
}

void
value_take_bar (GValue* value,
                gpointer v_object)
{
	Bar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bar_unref (old);
	}
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	((BarClass *) klass)->finalize = bar_finalize;
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
	self->ref_count = 1;
}

static void
bar_finalize (Bar * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	g_signal_handlers_destroy (self);
	_g_free0 (self->f_string);
	self->f_array = (_vala_array_free (self->f_array, self->f_array_length1, (GDestroyNotify) g_free), NULL);
	_fooclass_unref0 (self->f_class);
	_g_free0 (self->priv->_p_string);
	self->priv->_p_array = (_vala_array_free (self->priv->_p_array, self->priv->_p_array_length1, (GDestroyNotify) g_free), NULL);
	_fooclass_unref0 (self->priv->_p_class);
}

static GType
bar_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_bar_init, value_bar_free_value, value_bar_copy_value, value_bar_peek_pointer, "p", value_bar_collect_value, "p", value_bar_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType bar_type_id;
	bar_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Bar", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

gpointer
bar_ref (gpointer instance)
{
	Bar * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
bar_unref (gpointer instance)
{
	Bar * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		BAR_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static gchar**
_vala_array_dup2 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static gchar**
_vala_array_dup3 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static gboolean
_foo_struct_equal (const FooStruct * s1,
                   const FooStruct * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (s1->bar != s2->bar) {
		return FALSE;
	}
	return TRUE;
}

static void
_vala_main (void)
{
	FooStruct fs = {0};
	FooStruct _tmp0_ = {0};
	FooClass* fc = NULL;
	FooClass* _tmp1_;
	gchar* s = NULL;
	gchar* _tmp2_;
	gchar** a = NULL;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar** _tmp5_;
	gint a_length1;
	gint _a_size_;
	Bar* bar = NULL;
	gchar* _tmp6_;
	gchar** _tmp7_;
	gint _tmp7__length1;
	FooStruct _tmp8_;
	FooClass* _tmp9_;
	FooStruct _tmp10_;
	gchar* _tmp11_;
	gchar** _tmp12_;
	gint _tmp12__length1;
	FooStruct _tmp13_;
	FooClass* _tmp14_;
	Bar* _tmp15_ = NULL;
	Bar* _tmp16_;
	Bar* _tmp17_;
	const gchar* _tmp18_;
	Bar* _tmp19_;
	gchar** _tmp20_;
	gint _tmp20__length1;
	const gchar* _tmp21_;
	Bar* _tmp22_;
	FooStruct _tmp23_;
	Bar* _tmp24_;
	FooClass* _tmp25_;
	Bar* _tmp26_;
	const gchar* _tmp27_;
	Bar* _tmp28_;
	gchar** _tmp29_;
	gint _tmp29__length1;
	const gchar* _tmp30_;
	Bar* _tmp31_;
	FooStruct* _tmp32_;
	FooStruct _tmp33_;
	Bar* _tmp34_;
	FooClass* _tmp35_;
	Bar* _tmp36_;
	gint _tmp37_;
	gint _tmp38_;
	Bar* _tmp39_;
	const gchar* _tmp40_;
	const gchar* _tmp41_;
	Bar* _tmp42_;
	gchar** _tmp43_;
	gint _tmp43__length1;
	gint _tmp44_ = 0;
	gchar** _tmp45_;
	gint _tmp45__length1;
	const gchar* _tmp46_;
	Bar* _tmp47_;
	FooStruct _tmp48_ = {0};
	FooStruct _tmp49_;
	Bar* _tmp50_;
	FooClass* _tmp51_;
	FooClass* _tmp52_;
	FooStruct _tmp53_;
	const gchar* _tmp54_;
	_tmp0_.bar = 42;
	fs = _tmp0_;
	_tmp1_ = fooclass_new ();
	fc = _tmp1_;
	_tmp2_ = g_strdup ("foo");
	s = _tmp2_;
	_tmp3_ = g_strdup ("foo");
	_tmp4_ = g_strdup ("bar");
	_tmp5_ = g_new0 (gchar*, 2 + 1);
	_tmp5_[0] = _tmp3_;
	_tmp5_[1] = _tmp4_;
	a = _tmp5_;
	a_length1 = 2;
	_a_size_ = a_length1;
	_tmp6_ = g_strdup (s);
	_tmp7_ = (a != NULL) ? _vala_array_dup2 (a, a_length1) : a;
	_tmp7__length1 = a_length1;
	_tmp8_ = fs;
	_tmp9_ = _fooclass_ref0 (fc);
	_tmp10_ = fs;
	_tmp11_ = g_strdup (s);
	_tmp12_ = (a != NULL) ? _vala_array_dup3 (a, a_length1) : a;
	_tmp12__length1 = a_length1;
	_tmp13_ = fs;
	_tmp14_ = _fooclass_ref0 (fc);
	_tmp15_ = bar_new ();
	_tmp15_->f_simple = 42;
	_g_free0 (_tmp15_->f_string);
	_tmp15_->f_string = _tmp6_;
	_tmp15_->f_array = (_vala_array_free (_tmp15_->f_array, _tmp15_->f_array_length1, (GDestroyNotify) g_free), NULL);
	_tmp15_->f_array = _tmp7_;
	_tmp15_->f_array_length1 = _tmp7__length1;
	_tmp15_->_f_array_size_ = _tmp15_->f_array_length1;
	_tmp15_->f_struct = _tmp8_;
	_fooclass_unref0 (_tmp15_->f_class);
	_tmp15_->f_class = _tmp9_;
	_tmp15_->fu_string = s;
	_tmp15_->fu_array = a;
	_tmp15_->fu_array_length1 = a_length1;
	_tmp15_->_fu_array_size_ = _tmp15_->fu_array_length1;
	_tmp15_->fu_struct = &_tmp10_;
	_tmp15_->fu_class = fc;
	bar_set_p_simple (_tmp15_, 42);
	bar_set_p_string (_tmp15_, _tmp11_);
	_g_free0 (_tmp11_);
	bar_set_p_array (_tmp15_, _tmp12_, _tmp12__length1);
	_tmp12_ = (_vala_array_free (_tmp12_, _tmp12__length1, (GDestroyNotify) g_free), NULL);
	bar_set_p_struct (_tmp15_, &_tmp13_);
	bar_set_p_class (_tmp15_, _tmp14_);
	_fooclass_unref0 (_tmp14_);
	bar = _tmp15_;
	_tmp16_ = bar;
	_vala_assert (_tmp16_->f_simple == 42, "bar.f_simple == 42");
	_tmp17_ = bar;
	_tmp18_ = _tmp17_->f_string;
	_vala_assert (g_strcmp0 (_tmp18_, "foo") == 0, "bar.f_string == \"foo\"");
	_tmp19_ = bar;
	_tmp20_ = _tmp19_->f_array;
	_tmp20__length1 = _tmp19_->f_array_length1;
	_tmp21_ = _tmp20_[1];
	_vala_assert (g_strcmp0 (_tmp21_, "bar") == 0, "bar.f_array[1] == \"bar\"");
	_tmp22_ = bar;
	_tmp23_ = _tmp22_->f_struct;
	_vala_assert (_tmp23_.bar == 42, "bar.f_struct.bar == 42");
	_tmp24_ = bar;
	_tmp25_ = _tmp24_->f_class;
	_vala_assert (_tmp25_ == fc, "bar.f_class == fc");
	_tmp26_ = bar;
	_tmp27_ = _tmp26_->fu_string;
	_vala_assert (g_strcmp0 (_tmp27_, "foo") == 0, "bar.fu_string == \"foo\"");
	_tmp28_ = bar;
	_tmp29_ = _tmp28_->fu_array;
	_tmp29__length1 = _tmp28_->fu_array_length1;
	_tmp30_ = _tmp29_[1];
	_vala_assert (g_strcmp0 (_tmp30_, "bar") == 0, "bar.fu_array[1] == \"bar\"");
	_tmp31_ = bar;
	_tmp32_ = _tmp31_->fu_struct;
	_tmp33_ = fs;
	_vala_assert (_foo_struct_equal (_tmp32_, &_tmp33_) == TRUE, "bar.fu_struct == fs");
	_tmp34_ = bar;
	_tmp35_ = _tmp34_->fu_class;
	_vala_assert (_tmp35_ == fc, "bar.fu_class == fc");
	_tmp36_ = bar;
	_tmp37_ = bar_get_p_simple (_tmp36_);
	_tmp38_ = _tmp37_;
	_vala_assert (_tmp38_ == 42, "bar.p_simple == 42");
	_tmp39_ = bar;
	_tmp40_ = bar_get_p_string (_tmp39_);
	_tmp41_ = _tmp40_;
	_vala_assert (g_strcmp0 (_tmp41_, "foo") == 0, "bar.p_string == \"foo\"");
	_tmp42_ = bar;
	_tmp43_ = bar_get_p_array (_tmp42_, &_tmp44_);
	_tmp43__length1 = _tmp44_;
	_tmp45_ = _tmp43_;
	_tmp45__length1 = _tmp43__length1;
	_tmp46_ = _tmp45_[1];
	_vala_assert (g_strcmp0 (_tmp46_, "bar") == 0, "bar.p_array[1] == \"bar\"");
	_tmp47_ = bar;
	bar_get_p_struct (_tmp47_, &_tmp48_);
	_tmp49_ = _tmp48_;
	_vala_assert (_tmp49_.bar == 42, "bar.p_struct.bar == 42");
	_tmp50_ = bar;
	_tmp51_ = bar_get_p_class (_tmp50_);
	_tmp52_ = _tmp51_;
	_vala_assert (_tmp52_ == fc, "bar.p_class == fc");
	_bar_unref0 (bar);
	bar = NULL;
	_tmp53_ = fs;
	_vala_assert (_tmp53_.bar == 42, "fs.bar == 42");
	_vala_assert (fc->bar == 42, "fc.bar == 42");
	_vala_assert (g_strcmp0 (s, "foo") == 0, "s == \"foo\"");
	_tmp54_ = a[1];
	_vala_assert (g_strcmp0 (_tmp54_, "bar") == 0, "a[1] == \"bar\"");
	_bar_unref0 (bar);
	a = (_vala_array_free (a, a_length1, (GDestroyNotify) g_free), NULL);
	_g_free0 (s);
	_fooclass_unref0 (fc);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

