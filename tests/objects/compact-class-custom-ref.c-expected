/* objects_compact_class_custom_ref.c generated by valac, the Vala compiler
 * generated from objects_compact_class_custom_ref.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint ref_count;
};

VALA_EXTERN void foo_free (Foo * self);
static void foo_instance_init (Foo * self);
VALA_EXTERN Foo* foo_ref (Foo* self);
VALA_EXTERN void foo_unref (Foo* self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN Foo* foo_new (void);
static void _vala_main (void);

Foo*
foo_ref (Foo* self)
{
	Foo* result;
	g_return_val_if_fail (self != NULL, NULL);
	g_atomic_int_inc ((volatile gint *) (&self->ref_count));
	result = self;
	return result;
}

static gpointer
_foo_ref0 (gpointer self)
{
	return self ? foo_ref (self) : NULL;
}

void
foo_unref (Foo* self)
{
	gboolean _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_atomic_int_dec_and_test ((volatile gint *) (&self->ref_count));
	if (_tmp0_) {
		Foo* _tmp1_;
		_tmp1_ = _foo_ref0 (self);
		foo_free (_tmp1_);
	}
}

Foo*
foo_new (void)
{
	Foo* self;
	self = g_slice_new0 (Foo);
	foo_instance_init (self);
	return self;
}

static void
foo_instance_init (Foo * self)
{
	self->ref_count = (volatile int) 1;
}

void
foo_free (Foo * self)
{
	g_slice_free (Foo, self);
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	_vala_assert (foo->ref_count == 1, "foo.ref_count == 1");
	foo_ref (foo);
	_vala_assert (foo->ref_count == 2, "foo.ref_count == 2");
	foo_unref (foo);
	_vala_assert (foo->ref_count == 1, "foo.ref_count == 1");
	_foo_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

