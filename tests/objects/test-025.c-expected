/* objects_test_025.c generated by valac, the Vala compiler
 * generated from objects_test_025.vala, do not modify */

#include <glib-object.h>
#include <stdio.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define MAMAN_TYPE_BAR (maman_bar_get_type ())
#define MAMAN_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAMAN_TYPE_BAR, MamanBar))
#define MAMAN_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAMAN_TYPE_BAR, MamanBarClass))
#define MAMAN_IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAMAN_TYPE_BAR))
#define MAMAN_IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAMAN_TYPE_BAR))
#define MAMAN_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAMAN_TYPE_BAR, MamanBarClass))

typedef struct _MamanBar MamanBar;
typedef struct _MamanBarClass MamanBarClass;
typedef struct _MamanBarPrivate MamanBarPrivate;
enum  {
	MAMAN_BAR_0_PROPERTY,
	MAMAN_BAR_NUM_PROPERTIES
};
static GParamSpec* maman_bar_properties[MAMAN_BAR_NUM_PROPERTIES];

#define MAMAN_TYPE_SUB_BAR (maman_sub_bar_get_type ())
#define MAMAN_SUB_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAMAN_TYPE_SUB_BAR, MamanSubBar))
#define MAMAN_SUB_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAMAN_TYPE_SUB_BAR, MamanSubBarClass))
#define MAMAN_IS_SUB_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAMAN_TYPE_SUB_BAR))
#define MAMAN_IS_SUB_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAMAN_TYPE_SUB_BAR))
#define MAMAN_SUB_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAMAN_TYPE_SUB_BAR, MamanSubBarClass))

typedef struct _MamanSubBar MamanSubBar;
typedef struct _MamanSubBarClass MamanSubBarClass;
typedef struct _MamanSubBarPrivate MamanSubBarPrivate;
enum  {
	MAMAN_SUB_BAR_0_PROPERTY,
	MAMAN_SUB_BAR_NUM_PROPERTIES
};
static GParamSpec* maman_sub_bar_properties[MAMAN_SUB_BAR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _MamanBar {
	GObject parent_instance;
	MamanBarPrivate * priv;
};

struct _MamanBarClass {
	GObjectClass parent_class;
	void (*do_action) (MamanBar* self);
};

struct _MamanSubBar {
	MamanBar parent_instance;
	MamanSubBarPrivate * priv;
};

struct _MamanSubBarClass {
	MamanBarClass parent_class;
};

static gpointer maman_bar_parent_class = NULL;
static gpointer maman_sub_bar_parent_class = NULL;

VALA_EXTERN GType maman_bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MamanBar, g_object_unref)
VALA_EXTERN void maman_bar_do_action (MamanBar* self);
static void maman_bar_real_do_action (MamanBar* self);
VALA_EXTERN MamanBar* maman_bar_new (void);
VALA_EXTERN MamanBar* maman_bar_construct (GType object_type);
static GType maman_bar_get_type_once (void);
VALA_EXTERN GType maman_sub_bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MamanSubBar, g_object_unref)
static void maman_sub_bar_real_do_action (MamanBar* base);
VALA_EXTERN void maman_sub_bar_run (MamanSubBar* self);
static gint maman_sub_bar_main (void);
VALA_EXTERN MamanSubBar* maman_sub_bar_new (void);
VALA_EXTERN MamanSubBar* maman_sub_bar_construct (GType object_type);
static GType maman_sub_bar_get_type_once (void);

static void
maman_bar_real_do_action (MamanBar* self)
{
	FILE* _tmp0_;
	_tmp0_ = stdout;
	fprintf (_tmp0_, " 3");
}

void
maman_bar_do_action (MamanBar* self)
{
	MamanBarClass* _klass_;
	g_return_if_fail (MAMAN_IS_BAR (self));
	_klass_ = MAMAN_BAR_GET_CLASS (self);
	if (_klass_->do_action) {
		_klass_->do_action (self);
	}
}

MamanBar*
maman_bar_construct (GType object_type)
{
	MamanBar * self = NULL;
	self = (MamanBar*) g_object_new (object_type, NULL);
	return self;
}

MamanBar*
maman_bar_new (void)
{
	return maman_bar_construct (MAMAN_TYPE_BAR);
}

static void
maman_bar_class_init (MamanBarClass * klass,
                      gpointer klass_data)
{
	maman_bar_parent_class = g_type_class_peek_parent (klass);
	((MamanBarClass *) klass)->do_action = (void (*) (MamanBar*)) maman_bar_real_do_action;
}

static void
maman_bar_instance_init (MamanBar * self,
                         gpointer klass)
{
}

static GType
maman_bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MamanBarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maman_bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MamanBar), 0, (GInstanceInitFunc) maman_bar_instance_init, NULL };
	GType maman_bar_type_id;
	maman_bar_type_id = g_type_register_static (G_TYPE_OBJECT, "MamanBar", &g_define_type_info, 0);
	return maman_bar_type_id;
}

GType
maman_bar_get_type (void)
{
	static volatile gsize maman_bar_type_id__once = 0;
	if (g_once_init_enter (&maman_bar_type_id__once)) {
		GType maman_bar_type_id;
		maman_bar_type_id = maman_bar_get_type_once ();
		g_once_init_leave (&maman_bar_type_id__once, maman_bar_type_id);
	}
	return maman_bar_type_id__once;
}

static void
maman_sub_bar_real_do_action (MamanBar* base)
{
	MamanSubBar * self;
	FILE* _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, MAMAN_TYPE_SUB_BAR, MamanSubBar);
	_tmp0_ = stdout;
	fprintf (_tmp0_, " BAD");
}

void
maman_sub_bar_run (MamanSubBar* self)
{
	FILE* _tmp0_;
	FILE* _tmp1_;
	g_return_if_fail (MAMAN_IS_SUB_BAR (self));
	_tmp0_ = stdout;
	fprintf (_tmp0_, " 2");
	MAMAN_BAR_CLASS (maman_sub_bar_parent_class)->do_action (G_TYPE_CHECK_INSTANCE_CAST (self, MAMAN_TYPE_BAR, MamanBar));
	_tmp1_ = stdout;
	fprintf (_tmp1_, " 4");
}

static gint
maman_sub_bar_main (void)
{
	FILE* _tmp0_;
	MamanSubBar* bar = NULL;
	MamanSubBar* _tmp1_;
	FILE* _tmp2_;
	gint result;
	_tmp0_ = stdout;
	fprintf (_tmp0_, "Base Access Test: 1");
	_tmp1_ = maman_sub_bar_new ();
	bar = _tmp1_;
	maman_sub_bar_run (bar);
	_tmp2_ = stdout;
	fprintf (_tmp2_, " 5\n");
	result = 0;
	_g_object_unref0 (bar);
	return result;
}

int
main (int argc,
      char ** argv)
{
	return maman_sub_bar_main ();
}

MamanSubBar*
maman_sub_bar_construct (GType object_type)
{
	MamanSubBar * self = NULL;
	self = (MamanSubBar*) maman_bar_construct (object_type);
	return self;
}

MamanSubBar*
maman_sub_bar_new (void)
{
	return maman_sub_bar_construct (MAMAN_TYPE_SUB_BAR);
}

static void
maman_sub_bar_class_init (MamanSubBarClass * klass,
                          gpointer klass_data)
{
	maman_sub_bar_parent_class = g_type_class_peek_parent (klass);
	((MamanBarClass *) klass)->do_action = (void (*) (MamanBar*)) maman_sub_bar_real_do_action;
}

static void
maman_sub_bar_instance_init (MamanSubBar * self,
                             gpointer klass)
{
}

static GType
maman_sub_bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (MamanSubBarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maman_sub_bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MamanSubBar), 0, (GInstanceInitFunc) maman_sub_bar_instance_init, NULL };
	GType maman_sub_bar_type_id;
	maman_sub_bar_type_id = g_type_register_static (MAMAN_TYPE_BAR, "MamanSubBar", &g_define_type_info, 0);
	return maman_sub_bar_type_id;
}

GType
maman_sub_bar_get_type (void)
{
	static volatile gsize maman_sub_bar_type_id__once = 0;
	if (g_once_init_enter (&maman_sub_bar_type_id__once)) {
		GType maman_sub_bar_type_id;
		maman_sub_bar_type_id = maman_sub_bar_get_type_once ();
		g_once_init_leave (&maman_sub_bar_type_id__once, maman_sub_bar_type_id);
	}
	return maman_sub_bar_type_id__once;
}

