/* objects_chainup.c generated by valac, the Vala compiler
 * generated from objects_chainup.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdarg.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO_BASE (foo_base_get_type ())
#define FOO_BASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO_BASE, FooBase))
#define FOO_BASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO_BASE, FooBaseClass))
#define IS_FOO_BASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO_BASE))
#define IS_FOO_BASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO_BASE))
#define FOO_BASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO_BASE, FooBaseClass))

typedef struct _FooBase FooBase;
typedef struct _FooBaseClass FooBaseClass;
typedef struct _FooBasePrivate FooBasePrivate;
typedef struct _ParamSpecFooBase ParamSpecFooBase;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
#define _foo_base_unref0(var) ((var == NULL) ? NULL : (var = (foo_base_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FooBase {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooBasePrivate * priv;
	gint bar;
};

struct _FooBaseClass {
	GTypeClass parent_class;
	void (*finalize) (FooBase *self);
};

struct _ParamSpecFooBase {
	GParamSpec parent_instance;
};

struct _Foo {
	FooBase parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	FooBaseClass parent_class;
};

static gpointer foo_base_parent_class = NULL;
static gpointer foo_parent_class = NULL;

VALA_EXTERN gpointer foo_base_ref (gpointer instance);
VALA_EXTERN void foo_base_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo_base (const gchar* name,
                                 const gchar* nick,
                                 const gchar* blurb,
                                 GType object_type,
                                 GParamFlags flags);
VALA_EXTERN void value_set_foo_base (GValue* value,
                         gpointer v_object);
VALA_EXTERN void value_take_foo_base (GValue* value,
                          gpointer v_object);
VALA_EXTERN gpointer value_get_foo_base (const GValue* value);
VALA_EXTERN GType foo_base_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (FooBase, foo_base_unref)
VALA_EXTERN FooBase* foo_base_new (gint _,
                       ...);
VALA_EXTERN FooBase* foo_base_construct (GType object_type,
                             gint _,
                             ...);
VALA_EXTERN FooBase* foo_base_constructv (GType object_type,
                              gint _,
                              va_list _vala_va_list);
VALA_EXTERN FooBase* foo_base_new_baz (gint _,
                           ...);
VALA_EXTERN FooBase* foo_base_construct_baz (GType object_type,
                                 gint _,
                                 ...);
VALA_EXTERN FooBase* foo_base_constructv_baz (GType object_type,
                                  gint _,
                                  va_list _vala_va_list);
static void foo_base_finalize (FooBase * obj);
static GType foo_base_get_type_once (void);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_base_unref)
VALA_EXTERN Foo* foo_new (gint _,
              ...);
VALA_EXTERN Foo* foo_construct (GType object_type,
                    gint _,
                    ...);
VALA_EXTERN Foo* foo_constructv (GType object_type,
                     gint _,
                     va_list _vala_va_list);
VALA_EXTERN Foo* foo_new_baz (gint _,
                  ...);
VALA_EXTERN Foo* foo_construct_baz (GType object_type,
                        gint _,
                        ...);
VALA_EXTERN Foo* foo_constructv_baz (GType object_type,
                         gint _,
                         va_list _vala_va_list);
VALA_EXTERN Foo* foo_new_qux (gint _,
                  ...);
VALA_EXTERN Foo* foo_construct_qux (GType object_type,
                        gint _,
                        ...);
VALA_EXTERN Foo* foo_constructv_qux (GType object_type,
                         gint _,
                         va_list _vala_va_list);
static GType foo_get_type_once (void);
static void _vala_main (void);

FooBase*
foo_base_constructv (GType object_type,
                     gint _,
                     va_list _vala_va_list)
{
	FooBase* self = NULL;
	va_list v = {0};
	self = (FooBase*) g_type_create_instance (object_type);
	va_copy (v, _vala_va_list);
	self->bar = va_arg (v, gint);
	va_end (v);
	return self;
}

FooBase*
foo_base_new (gint _,
              ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_base_constructv (TYPE_FOO_BASE, _, _vala_va_list_obj);
}

FooBase*
foo_base_construct (GType object_type,
                    gint _,
                    ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_base_constructv (object_type, _, _vala_va_list_obj);
}

FooBase*
foo_base_constructv_baz (GType object_type,
                         gint _,
                         va_list _vala_va_list)
{
	FooBase* self = NULL;
	va_list v = {0};
	va_copy (v, _vala_va_list);
	self = (FooBase*) foo_base_constructv (object_type, _, v);
	va_end (v);
	return self;
}

FooBase*
foo_base_new_baz (gint _,
                  ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_base_constructv_baz (TYPE_FOO_BASE, _, _vala_va_list_obj);
}

FooBase*
foo_base_construct_baz (GType object_type,
                        gint _,
                        ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_base_constructv_baz (object_type, _, _vala_va_list_obj);
}

static void
value_foo_base_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_base_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_base_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_base_copy_value (const GValue* src_value,
                           GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_base_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_base_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_base_collect_value (GValue* value,
                              guint n_collect_values,
                              GTypeCValue* collect_values,
                              guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		FooBase * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_base_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_base_lcopy_value (const GValue* value,
                            guint n_collect_values,
                            GTypeCValue* collect_values,
                            guint collect_flags)
{
	FooBase ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_base_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo_base (const gchar* name,
                     const gchar* nick,
                     const gchar* blurb,
                     GType object_type,
                     GParamFlags flags)
{
	ParamSpecFooBase* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO_BASE), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo_base (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO_BASE), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo_base (GValue* value,
                    gpointer v_object)
{
	FooBase * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO_BASE));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO_BASE));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_base_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_base_unref (old);
	}
}

void
value_take_foo_base (GValue* value,
                     gpointer v_object)
{
	FooBase * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO_BASE));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO_BASE));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_base_unref (old);
	}
}

static void
foo_base_class_init (FooBaseClass * klass,
                     gpointer klass_data)
{
	foo_base_parent_class = g_type_class_peek_parent (klass);
	((FooBaseClass *) klass)->finalize = foo_base_finalize;
}

static void
foo_base_instance_init (FooBase * self,
                        gpointer klass)
{
	self->ref_count = 1;
}

static void
foo_base_finalize (FooBase * obj)
{
	FooBase * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO_BASE, FooBase);
	g_signal_handlers_destroy (self);
}

static GType
foo_base_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_base_init, value_foo_base_free_value, value_foo_base_copy_value, value_foo_base_peek_pointer, "p", value_foo_base_collect_value, "p", value_foo_base_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooBaseClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_base_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FooBase), 0, (GInstanceInitFunc) foo_base_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_base_type_id;
	foo_base_type_id = g_type_register_fundamental (g_type_fundamental_next (), "FooBase", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return foo_base_type_id;
}

GType
foo_base_get_type (void)
{
	static volatile gsize foo_base_type_id__once = 0;
	if (g_once_init_enter (&foo_base_type_id__once)) {
		GType foo_base_type_id;
		foo_base_type_id = foo_base_get_type_once ();
		g_once_init_leave (&foo_base_type_id__once, foo_base_type_id);
	}
	return foo_base_type_id__once;
}

gpointer
foo_base_ref (gpointer instance)
{
	FooBase * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_base_unref (gpointer instance)
{
	FooBase * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_BASE_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

Foo*
foo_constructv (GType object_type,
                gint _,
                va_list _vala_va_list)
{
	Foo* self = NULL;
	va_list v = {0};
	va_copy (v, _vala_va_list);
	self = (Foo*) foo_base_constructv (object_type, _, v);
	va_end (v);
	return self;
}

Foo*
foo_new (gint _,
         ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_constructv (TYPE_FOO, _, _vala_va_list_obj);
}

Foo*
foo_construct (GType object_type,
               gint _,
               ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_constructv (object_type, _, _vala_va_list_obj);
}

Foo*
foo_constructv_baz (GType object_type,
                    gint _,
                    va_list _vala_va_list)
{
	Foo* self = NULL;
	va_list v = {0};
	va_copy (v, _vala_va_list);
	self = (Foo*) foo_base_constructv_baz (object_type, _, v);
	va_end (v);
	return self;
}

Foo*
foo_new_baz (gint _,
             ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_constructv_baz (TYPE_FOO, _, _vala_va_list_obj);
}

Foo*
foo_construct_baz (GType object_type,
                   gint _,
                   ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_constructv_baz (object_type, _, _vala_va_list_obj);
}

Foo*
foo_constructv_qux (GType object_type,
                    gint _,
                    va_list _vala_va_list)
{
	Foo* self = NULL;
	va_list v = {0};
	va_copy (v, _vala_va_list);
	self = (Foo*) foo_constructv_baz (object_type, _, v);
	va_end (v);
	return self;
}

Foo*
foo_new_qux (gint _,
             ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_constructv_qux (TYPE_FOO, _, _vala_va_list_obj);
}

Foo*
foo_construct_qux (GType object_type,
                   gint _,
                   ...)
{
	va_list _vala_va_list_obj;
	va_start (_vala_va_list_obj, _);
	return foo_constructv_qux (object_type, _, _vala_va_list_obj);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (TYPE_FOO_BASE, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	Foo* _tmp1_;
	Foo* _tmp2_;
	Foo* _tmp3_;
	Foo* _tmp4_;
	Foo* _tmp5_;
	_tmp0_ = foo_new (0, 10, NULL);
	foo = _tmp0_;
	_tmp1_ = foo;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, TYPE_FOO_BASE, FooBase)->bar == 10, "foo.bar == 10");
	_tmp2_ = foo_new_baz (0, 20, NULL);
	_foo_base_unref0 (foo);
	foo = _tmp2_;
	_tmp3_ = foo;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, TYPE_FOO_BASE, FooBase)->bar == 20, "foo.bar == 20");
	_tmp4_ = foo_new_qux (0, 30, NULL);
	_foo_base_unref0 (foo);
	foo = _tmp4_;
	_tmp5_ = foo;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp5_, TYPE_FOO_BASE, FooBase)->bar == 30, "foo.bar == 30");
	_foo_base_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

