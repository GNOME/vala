/* basic_types_gvariants_unboxing_safe.c generated by valac, the Vala compiler
 * generated from basic_types_gvariants_unboxing_safe.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gchar* s;
	guint64 u64;
	gboolean b;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Foo, foo_destroy)
static void _vala_main (void);
static gboolean* _bool_dup (gboolean* self);
static gboolean* _variant_get1 (GVariant* value);
static gint16* _int16_dup (gint16* self);
static gint16* _variant_get2 (GVariant* value);
static gint32* _int32_dup (gint32* self);
static gint32* _variant_get3 (GVariant* value);
static gboolean _int32_equal (const gint32 * s1,
                       const gint32 * s2);
static gchar* _variant_get4 (GVariant* value);
static gboolean* _variant_get5 (GVariant* value);
static gboolean _bool_equal (const gboolean * s1,
                      const gboolean * s2);
static gint32* _variant_get6 (GVariant* value);
static gchar** _variant_get7 (GVariant* value,
                       gint* result_length1);
static GVariant* _variant_new1 (Foo value);
static void _variant_get8 (GVariant* value,
                    Foo * result);
static Foo* _variant_get9 (GVariant* value);
static void _g_free0_ (gpointer var);
static GVariant* _variant_new2 (GHashTable* value);
static GHashTable* _variant_get10 (GVariant* value);
static GHashTable* _variant_get11 (GVariant* value);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);
static inline gpointer _vala_memdup2 (gconstpointer mem,
                        gsize byte_size);

void
foo_copy (const Foo* self,
          Foo* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
	(*dest).u64 = (*self).u64;
	(*dest).b = (*self).b;
}

void
foo_destroy (Foo* self)
{
	_g_free0 ((*self).s);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gboolean*
_bool_dup (gboolean* self)
{
	gboolean* dup;
	dup = g_new0 (gboolean, 1);
	memcpy (dup, self, sizeof (gboolean));
	return dup;
}

static gpointer
__bool_dup0 (gpointer self)
{
	return self ? _bool_dup (self) : NULL;
}

static gboolean*
_variant_get1 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_BOOLEAN)) {
		gboolean _tmp0_;
		gboolean* _tmp1_;
		_tmp0_ = g_variant_get_boolean (value);
		_tmp1_ = __bool_dup0 (&_tmp0_);
		return _tmp1_;
	} else {
		return NULL;
	}
}

static gint16*
_int16_dup (gint16* self)
{
	gint16* dup;
	dup = g_new0 (gint16, 1);
	memcpy (dup, self, sizeof (gint16));
	return dup;
}

static gpointer
__int16_dup0 (gpointer self)
{
	return self ? _int16_dup (self) : NULL;
}

static gint16*
_variant_get2 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_INT16)) {
		gint16 _tmp0_;
		gint16* _tmp1_;
		_tmp0_ = g_variant_get_int16 (value);
		_tmp1_ = __int16_dup0 (&_tmp0_);
		return _tmp1_;
	} else {
		return NULL;
	}
}

static gint32*
_int32_dup (gint32* self)
{
	gint32* dup;
	dup = g_new0 (gint32, 1);
	memcpy (dup, self, sizeof (gint32));
	return dup;
}

static gpointer
__int32_dup0 (gpointer self)
{
	return self ? _int32_dup (self) : NULL;
}

static gint32*
_variant_get3 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_INT32)) {
		gint32 _tmp0_;
		gint32* _tmp1_;
		_tmp0_ = g_variant_get_int32 (value);
		_tmp1_ = __int32_dup0 (&_tmp0_);
		return _tmp1_;
	} else {
		return NULL;
	}
}

static gboolean
_int32_equal (const gint32 * s1,
              const gint32 * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static gchar*
_variant_get4 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_STRING)) {
		return g_variant_dup_string (value, NULL);
	} else {
		return NULL;
	}
}

static gboolean*
_variant_get5 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_BOOLEAN)) {
		gboolean _tmp0_;
		gboolean* _tmp1_;
		_tmp0_ = g_variant_get_boolean (value);
		_tmp1_ = __bool_dup0 (&_tmp0_);
		return _tmp1_;
	} else {
		return NULL;
	}
}

static gboolean
_bool_equal (const gboolean * s1,
             const gboolean * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static gint32*
_variant_get6 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_INT32)) {
		gint32 _tmp0_;
		gint32* _tmp1_;
		_tmp0_ = g_variant_get_int32 (value);
		_tmp1_ = __int32_dup0 (&_tmp0_);
		return _tmp1_;
	} else {
		return NULL;
	}
}

static gchar**
_variant_get7 (GVariant* value,
               gint* result_length1)
{
	GVariantType* _tmp0_ = NULL;
	_tmp0_ = g_variant_type_new ("as");
	if (value && g_variant_is_of_type (value, _tmp0_)) {
		gchar** _tmp1_;
		gint _tmp1__length;
		gint _tmp1__size;
		gint _tmp1__length1;
		GVariantIter _tmp2_;
		GVariant* _tmp3_;
		gchar** _tmp4_;
		gint _tmp4__length1;
		_tmp1_ = g_new (gchar*, 5);
		_tmp1__length = 0;
		_tmp1__size = 4;
		_tmp1__length1 = 0;
		g_variant_iter_init (&_tmp2_, value);
		for (; (_tmp3_ = g_variant_iter_next_value (&_tmp2_)) != NULL; _tmp1__length1++) {
			if (_tmp1__size == _tmp1__length) {
				_tmp1__size = 2 * _tmp1__size;
				_tmp1_ = g_renew (gchar*, _tmp1_, _tmp1__size + 1);
			}
			_tmp1_[_tmp1__length++] = g_variant_dup_string (_tmp3_, NULL);
			g_variant_unref (_tmp3_);
		}
		*result_length1 = _tmp1__length1;
		_tmp1_[_tmp1__length] = NULL;
		g_variant_type_free (_tmp0_);
		_tmp4_ = _tmp1_;
		_tmp4__length1 = -1;
		return _tmp4_;
	} else {
		g_variant_type_free (_tmp0_);
		return NULL;
	}
}

static GVariant*
_variant_new1 (Foo value)
{
	GVariantBuilder _tmp28_;
	g_variant_builder_init (&_tmp28_, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_tmp28_, g_variant_new_string (value.s));
	g_variant_builder_add_value (&_tmp28_, g_variant_new_uint64 (value.u64));
	g_variant_builder_add_value (&_tmp28_, g_variant_new_boolean (value.b));
	return g_variant_ref_sink (g_variant_builder_end (&_tmp28_));
}

static void
_variant_get8 (GVariant* value,
               Foo * result)
{
	Foo _tmp0_;
	GVariantIter _tmp1_;
	GVariant* _tmp2_;
	GVariant* _tmp3_;
	GVariant* _tmp4_;
	g_variant_iter_init (&_tmp1_, value);
	_tmp2_ = g_variant_iter_next_value (&_tmp1_);
	_tmp0_.s = g_variant_dup_string (_tmp2_, NULL);
	g_variant_unref (_tmp2_);
	_tmp3_ = g_variant_iter_next_value (&_tmp1_);
	_tmp0_.u64 = g_variant_get_uint64 (_tmp3_);
	g_variant_unref (_tmp3_);
	_tmp4_ = g_variant_iter_next_value (&_tmp1_);
	_tmp0_.b = g_variant_get_boolean (_tmp4_);
	g_variant_unref (_tmp4_);
	*result = _tmp0_;
}

static Foo*
_variant_get9 (GVariant* value)
{
	GVariantType* _tmp0_ = NULL;
	_tmp0_ = g_variant_type_new ("(stb)");
	if (value && g_variant_is_of_type (value, _tmp0_)) {
		Foo _tmp1_;
		GVariantIter _tmp2_;
		GVariant* _tmp3_;
		GVariant* _tmp4_;
		GVariant* _tmp5_;
		Foo* _tmp6_;
		g_variant_iter_init (&_tmp2_, value);
		_tmp3_ = g_variant_iter_next_value (&_tmp2_);
		_tmp1_.s = g_variant_dup_string (_tmp3_, NULL);
		g_variant_unref (_tmp3_);
		_tmp4_ = g_variant_iter_next_value (&_tmp2_);
		_tmp1_.u64 = g_variant_get_uint64 (_tmp4_);
		g_variant_unref (_tmp4_);
		_tmp5_ = g_variant_iter_next_value (&_tmp2_);
		_tmp1_.b = g_variant_get_boolean (_tmp5_);
		g_variant_unref (_tmp5_);
		g_variant_type_free (_tmp0_);
		_tmp6_ = _vala_memdup2 (&_tmp1_, sizeof (Foo));
		return _tmp6_;
	} else {
		g_variant_type_free (_tmp0_);
		return NULL;
	}
}

static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}

static GVariant*
_variant_new2 (GHashTable* value)
{
	GVariantBuilder _tmp48_;
	GHashTableIter _tmp49_;
	gpointer _tmp50_;
	gpointer _tmp51_;
	g_hash_table_iter_init (&_tmp49_, value);
	g_variant_builder_init (&_tmp48_, G_VARIANT_TYPE ("a{ss}"));
	while (g_hash_table_iter_next (&_tmp49_, &_tmp50_, &_tmp51_)) {
		gchar* _key;
		gchar* _value;
		_key = (gchar*) _tmp50_;
		_value = (gchar*) _tmp51_;
		g_variant_builder_add (&_tmp48_, "{?*}", g_variant_new_string (_key), g_variant_new_string (_value));
	}
	return g_variant_ref_sink (g_variant_builder_end (&_tmp48_));
}

static GHashTable*
_variant_get10 (GVariant* value)
{
	GVariantType* _tmp0_ = NULL;
	_tmp0_ = g_variant_type_new ("a{ss}");
	if (value && g_variant_is_of_type (value, _tmp0_)) {
		GHashTable* _tmp1_;
		GVariantIter _tmp2_;
		GVariant* _tmp3_;
		GVariant* _tmp4_;
		GHashTable* _tmp5_;
		_tmp1_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
		g_variant_iter_init (&_tmp2_, value);
		while (g_variant_iter_loop (&_tmp2_, "{?*}", &_tmp3_, &_tmp4_)) {
			g_hash_table_insert (_tmp1_, g_variant_dup_string (_tmp3_, NULL), g_variant_dup_string (_tmp4_, NULL));
		}
		g_variant_type_free (_tmp0_);
		_tmp5_ = _tmp1_;
		return _tmp5_;
	} else {
		g_variant_type_free (_tmp0_);
		return NULL;
	}
}

static GHashTable*
_variant_get11 (GVariant* value)
{
	GVariantType* _tmp0_ = NULL;
	_tmp0_ = g_variant_type_new ("a{is}");
	if (value && g_variant_is_of_type (value, _tmp0_)) {
		GHashTable* _tmp1_;
		GVariantIter _tmp2_;
		GVariant* _tmp3_;
		GVariant* _tmp4_;
		GHashTable* _tmp5_;
		_tmp1_ = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_free);
		g_variant_iter_init (&_tmp2_, value);
		while (g_variant_iter_loop (&_tmp2_, "{?*}", &_tmp3_, &_tmp4_)) {
			g_hash_table_insert (_tmp1_, (gpointer) ((gintptr) g_variant_get_int32 (_tmp3_)), g_variant_dup_string (_tmp4_, NULL));
		}
		g_variant_type_free (_tmp0_);
		_tmp5_ = _tmp1_;
		return _tmp5_;
	} else {
		g_variant_type_free (_tmp0_);
		return NULL;
	}
}

static void
_vala_main (void)
{
	GVariant* v = NULL;
	GVariant* _tmp0_;
	GVariant* _tmp10_;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	gchar** _tmp19_;
	gchar** _tmp20_;
	gint _tmp20__length1;
	GVariant* _tmp21_;
	Foo vsrc = {0};
	gchar* _tmp25_;
	Foo _tmp26_ = {0};
	Foo _tmp27_;
	GVariant* _tmp29_;
	GVariant* _tmp30_;
	const gchar* _tmp31_;
	GHashTable* vsrc2 = NULL;
	GHashFunc _tmp41_;
	GEqualFunc _tmp42_;
	GHashTable* _tmp43_;
	gchar* _tmp44_;
	gchar* _tmp45_;
	gchar* _tmp46_;
	gchar* _tmp47_;
	GVariant* _tmp52_;
	_tmp0_ = g_variant_new_int32 ((gint32) 4711);
	g_variant_ref_sink (_tmp0_);
	_g_variant_unref0 (v);
	v = _tmp0_;
	{
		gboolean* b = NULL;
		GVariant* _tmp1_;
		gboolean* _tmp2_;
		_tmp1_ = v;
		_tmp2_ = _variant_get1 (_tmp1_);
		b = _tmp2_;
		_vala_assert (b == NULL, "b == null");
		_g_free0 (b);
	}
	{
		gint16* i16 = NULL;
		GVariant* _tmp3_;
		gint16* _tmp4_;
		_tmp3_ = v;
		_tmp4_ = _variant_get2 (_tmp3_);
		i16 = _tmp4_;
		_vala_assert (i16 == NULL, "i16 == null");
		_g_free0 (i16);
	}
	{
		gint32* i32 = NULL;
		GVariant* _tmp5_;
		gint32* _tmp6_;
		gint32 _tmp7_;
		_tmp5_ = v;
		_tmp6_ = _variant_get3 (_tmp5_);
		i32 = _tmp6_;
		_tmp7_ = (gint32) 4711;
		_vala_assert (_int32_equal (i32, &_tmp7_) == TRUE, "i32 == 4711");
		_g_free0 (i32);
	}
	{
		gchar* s = NULL;
		GVariant* _tmp8_;
		gchar* _tmp9_;
		_tmp8_ = v;
		_tmp9_ = _variant_get4 (_tmp8_);
		s = _tmp9_;
		_vala_assert (s == NULL, "s == null");
		_g_free0 (s);
	}
	_tmp10_ = g_variant_new_boolean (TRUE);
	g_variant_ref_sink (_tmp10_);
	_g_variant_unref0 (v);
	v = _tmp10_;
	{
		gboolean* b = NULL;
		GVariant* _tmp11_;
		gboolean* _tmp12_;
		gboolean _tmp13_;
		_tmp11_ = v;
		_tmp12_ = _variant_get5 (_tmp11_);
		b = _tmp12_;
		_tmp13_ = TRUE;
		_vala_assert (_bool_equal (b, &_tmp13_) == TRUE, "b == true");
		_g_free0 (b);
	}
	{
		gint32* i32 = NULL;
		GVariant* _tmp14_;
		gint32* _tmp15_;
		_tmp14_ = v;
		_tmp15_ = _variant_get6 (_tmp14_);
		i32 = _tmp15_;
		_vala_assert (i32 == NULL, "i32 == null");
		_g_free0 (i32);
	}
	_tmp16_ = g_strdup ("foo");
	_tmp17_ = g_strdup ("bar");
	_tmp18_ = g_strdup ("manam");
	_tmp19_ = g_new0 (gchar*, 3 + 1);
	_tmp19_[0] = _tmp16_;
	_tmp19_[1] = _tmp17_;
	_tmp19_[2] = _tmp18_;
	_tmp20_ = _tmp19_;
	_tmp20__length1 = 3;
	_tmp21_ = g_variant_new_strv (_tmp20_, 3);
	g_variant_ref_sink (_tmp21_);
	_g_variant_unref0 (v);
	v = _tmp21_;
	_tmp20_ = (_vala_array_free (_tmp20_, _tmp20__length1, (GDestroyNotify) g_free), NULL);
	{
		gchar** sa = NULL;
		GVariant* _tmp22_;
		gchar** _tmp23_ = NULL;
		gint _tmp23__length1 = 0;
		gint sa_length1;
		gint _sa_size_;
		const gchar* _tmp24_;
		_tmp22_ = v;
		_tmp23_ = _variant_get7 (_tmp22_, &_tmp23__length1);
		sa = _tmp23_;
		sa_length1 = _tmp23__length1;
		_sa_size_ = sa_length1;
		_vala_assert (sa != NULL, "sa != null");
		_tmp24_ = sa[2];
		_vala_assert (g_strcmp0 (_tmp24_, "manam") == 0, "sa[2] == \"manam\"");
		sa = (_vala_array_free (sa, sa_length1, (GDestroyNotify) g_free), NULL);
	}
	_tmp25_ = g_strdup ("foo");
	_g_free0 (_tmp26_.s);
	_tmp26_.s = _tmp25_;
	_tmp26_.u64 = G_MAXUINT64;
	_tmp26_.b = TRUE;
	vsrc = _tmp26_;
	_tmp27_ = vsrc;
	_tmp29_ = _variant_new1 (_tmp27_);
	_g_variant_unref0 (v);
	v = _tmp29_;
	_tmp30_ = v;
	_tmp31_ = g_variant_get_type_string (_tmp30_);
	_vala_assert (g_strcmp0 ("(stb)", _tmp31_) == 0, "\"(stb)\" == v.get_type_string ()");
	{
		Foo real_st = {0};
		GVariant* _tmp32_;
		Foo _tmp33_;
		Foo _tmp34_;
		const gchar* _tmp35_;
		Foo _tmp36_;
		Foo _tmp37_;
		Foo* st = NULL;
		GVariant* _tmp38_;
		Foo* _tmp39_;
		const gchar* _tmp40_;
		_tmp32_ = v;
		_variant_get8 (_tmp32_, &_tmp33_);
		real_st = _tmp33_;
		_tmp34_ = real_st;
		_tmp35_ = _tmp34_.s;
		_vala_assert (g_strcmp0 (_tmp35_, "foo") == 0, "real_st.s == \"foo\"");
		_tmp36_ = real_st;
		_vala_assert (_tmp36_.u64 == G_MAXUINT64, "real_st.u64 == uint64.MAX");
		_tmp37_ = real_st;
		_vala_assert (_tmp37_.b == TRUE, "real_st.b == true");
		_tmp38_ = v;
		_tmp39_ = _variant_get9 (_tmp38_);
		st = _tmp39_;
		_vala_assert (st != NULL, "st != null");
		_tmp40_ = (*st).s;
		_vala_assert (g_strcmp0 (_tmp40_, "foo") == 0, "st.s == \"foo\"");
		_vala_assert ((*st).u64 == G_MAXUINT64, "st.u64 == uint64.MAX");
		_vala_assert ((*st).b == TRUE, "st.b == true");
		_foo_free0 (st);
		foo_destroy (&real_st);
	}
	_tmp41_ = g_str_hash;
	_tmp42_ = g_str_equal;
	_tmp43_ = g_hash_table_new_full (_tmp41_, _tmp42_, _g_free0_, _g_free0_);
	vsrc2 = _tmp43_;
	_tmp44_ = g_strdup ("foo");
	_tmp45_ = g_strdup ("bar");
	g_hash_table_insert (vsrc2, _tmp44_, _tmp45_);
	_tmp46_ = g_strdup ("bar");
	_tmp47_ = g_strdup ("manam");
	g_hash_table_insert (vsrc2, _tmp46_, _tmp47_);
	_tmp52_ = _variant_new2 (vsrc2);
	_g_variant_unref0 (v);
	v = _tmp52_;
	{
		GHashTable* dict = NULL;
		GVariant* _tmp53_;
		GHashTable* _tmp54_;
		gconstpointer _tmp55_;
		gconstpointer _tmp56_;
		_tmp53_ = v;
		_tmp54_ = _variant_get10 (_tmp53_);
		dict = _tmp54_;
		_tmp55_ = g_hash_table_lookup (dict, "foo");
		_vala_assert (g_strcmp0 ((const gchar*) _tmp55_, "bar") == 0, "dict.lookup (\"foo\") == \"bar\"");
		_tmp56_ = g_hash_table_lookup (dict, "bar");
		_vala_assert (g_strcmp0 ((const gchar*) _tmp56_, "manam") == 0, "dict.lookup (\"bar\") == \"manam\"");
		_g_hash_table_unref0 (dict);
	}
	{
		GHashTable* dict = NULL;
		GVariant* _tmp57_;
		GHashTable* _tmp58_;
		_tmp57_ = v;
		_tmp58_ = _variant_get11 (_tmp57_);
		dict = _tmp58_;
		_vala_assert (dict == NULL, "dict == null");
		_g_hash_table_unref0 (dict);
	}
	_g_hash_table_unref0 (vsrc2);
	foo_destroy (&vsrc);
	_g_variant_unref0 (v);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static inline gpointer
_vala_memdup2 (gconstpointer mem,
               gsize byte_size)
{
	gpointer new_mem;
	if (mem && byte_size != 0) {
		new_mem = g_malloc (byte_size);
		memcpy (new_mem, mem, byte_size);
	} else {
		new_mem = NULL;
	}
	return new_mem;
}

