/* basic_types_sizeof.c generated by valac, the Vala compiler
 * generated from basic_types_sizeof.vala, do not modify */

#include <glib.h>

#define simple_size ((gsize) sizeof (gint))
#define composed_size ((gsize) (sizeof (gint) + sizeof (gsize)))
#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	_vala_assert (composed_size == ((gsize) (sizeof (gint) + sizeof (gsize))), "composed_size == (sizeof (int) + sizeof (size_t))");
	_vala_assert (simple_size == ((gsize) sizeof (gint)), "simple_size == sizeof (int)");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

