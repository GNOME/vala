/* basic_types_array_uint8_uchar_compat.c generated by valac, the Vala compiler
 * generated from basic_types_array_uint8_uchar_compat.vala, do not modify */

#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN guchar* data;
guchar* data = NULL;
VALA_EXTERN guint8* data2;
guint8* data2 = NULL;

VALA_EXTERN guchar* get_buffer (void);
VALA_EXTERN void change_buffer (guint8* data);
VALA_EXTERN guint8* get_buffer2 (void);
VALA_EXTERN void change_buffer2 (guchar* data);
static void _vala_main (void);

guchar*
get_buffer (void)
{
	guchar* _tmp0_;
	gint _tmp0__length1;
	guchar* result;
	_tmp0_ = data;
	_tmp0__length1 = -1;
	result = _tmp0_;
	return result;
}

void
change_buffer (guint8* data)
{
	data[0] = (guint8) 98;
	data[1] = (guint8) 97;
	data[2] = (guint8) 114;
}

guint8*
get_buffer2 (void)
{
	guint8* _tmp0_;
	gint _tmp0__length1;
	guint8* result;
	_tmp0_ = data2;
	_tmp0__length1 = -1;
	result = _tmp0_;
	return result;
}

void
change_buffer2 (guchar* data)
{
	data[0] = (guchar) 'b';
	data[1] = (guchar) 'a';
	data[2] = (guchar) 'z';
}

static void
_vala_main (void)
{
	{
		guchar* _tmp0_;
		guint8* _tmp1_;
		guchar* _tmp2_;
		gint _tmp2__length1;
		guchar* _tmp3_;
		guchar* _tmp4_;
		gint _tmp4__length1;
		guint8* _tmp5_;
		guint8* _tmp6_;
		gint _tmp6__length1;
		guchar* _tmp7_;
		gint _tmp7__length1;
		guint8* _tmp8_;
		gint _tmp8__length1;
		_tmp0_ = g_new0 (guchar, 5);
		_tmp0_[0] = (guchar) 'f';
		_tmp0_[1] = (guchar) 'o';
		_tmp0_[2] = (guchar) 'o';
		_tmp0_[3] = (guchar) '\n';
		_tmp0_[4] = (guchar) '\0';
		data = (g_free (data), NULL);
		data = _tmp0_;
		_tmp1_ = g_new0 (guint8, 5);
		_tmp1_[0] = (guint8) 102;
		_tmp1_[1] = (guint8) 111;
		_tmp1_[2] = (guint8) 111;
		_tmp1_[3] = (guint8) 10;
		_tmp1_[4] = (guint8) 0;
		data2 = (g_free (data2), NULL);
		data2 = _tmp1_;
		_tmp2_ = data;
		_tmp2__length1 = -1;
		_vala_assert (g_strcmp0 ("foo\n", (const gchar*) _tmp2_) == 0, "\"foo\\n\" == (string) data");
		_tmp3_ = get_buffer ();
		change_buffer (_tmp3_);
		_tmp4_ = data;
		_tmp4__length1 = -1;
		_vala_assert (g_strcmp0 ("bar\n", (const gchar*) _tmp4_) == 0, "\"bar\\n\" == (string) data");
		_tmp5_ = get_buffer2 ();
		change_buffer (_tmp5_);
		_tmp6_ = data2;
		_tmp6__length1 = -1;
		_vala_assert (g_strcmp0 ("bar\n", (const gchar*) _tmp6_) == 0, "\"bar\\n\" == (string) data2");
		_tmp7_ = data;
		_tmp7__length1 = -1;
		_tmp8_ = data2;
		_tmp8__length1 = -1;
		_vala_assert (g_strcmp0 ((const gchar*) _tmp7_, (const gchar*) _tmp8_) == 0, "(string) data == (string) data2");
	}
	{
		guchar* _tmp9_;
		guint8* _tmp10_;
		guint8* _tmp11_;
		gint _tmp11__length1;
		guint8* _tmp12_;
		guint8* _tmp13_;
		gint _tmp13__length1;
		guchar* _tmp14_;
		guchar* _tmp15_;
		gint _tmp15__length1;
		guchar* _tmp16_;
		gint _tmp16__length1;
		guint8* _tmp17_;
		gint _tmp17__length1;
		_tmp9_ = g_new0 (guchar, 5);
		_tmp9_[0] = (guchar) 'f';
		_tmp9_[1] = (guchar) 'o';
		_tmp9_[2] = (guchar) 'o';
		_tmp9_[3] = (guchar) '\n';
		_tmp9_[4] = (guchar) '\0';
		data = (g_free (data), NULL);
		data = _tmp9_;
		_tmp10_ = g_new0 (guint8, 5);
		_tmp10_[0] = (guint8) 102;
		_tmp10_[1] = (guint8) 111;
		_tmp10_[2] = (guint8) 111;
		_tmp10_[3] = (guint8) 10;
		_tmp10_[4] = (guint8) 0;
		data2 = (g_free (data2), NULL);
		data2 = _tmp10_;
		_tmp11_ = data2;
		_tmp11__length1 = -1;
		_vala_assert (g_strcmp0 ("foo\n", (const gchar*) _tmp11_) == 0, "\"foo\\n\" == (string) data2");
		_tmp12_ = get_buffer2 ();
		change_buffer2 (_tmp12_);
		_tmp13_ = data2;
		_tmp13__length1 = -1;
		_vala_assert (g_strcmp0 ("baz\n", (const gchar*) _tmp13_) == 0, "\"baz\\n\" == (string) data2");
		_tmp14_ = get_buffer ();
		change_buffer2 (_tmp14_);
		_tmp15_ = data;
		_tmp15__length1 = -1;
		_vala_assert (g_strcmp0 ("baz\n", (const gchar*) _tmp15_) == 0, "\"baz\\n\" == (string) data");
		_tmp16_ = data;
		_tmp16__length1 = -1;
		_tmp17_ = data2;
		_tmp17__length1 = -1;
		_vala_assert (g_strcmp0 ((const gchar*) _tmp16_, (const gchar*) _tmp17_) == 0, "(string) data == (string) data2");
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

