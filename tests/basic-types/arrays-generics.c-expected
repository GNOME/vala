/* basic_types_arrays_generics.c generated by valac, the Vala compiler
 * generated from basic_types_arrays_generics.vala, do not modify */

#include <glib-object.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_BAZ (baz_get_type ())
#define BAZ(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAZ, Baz))
#define BAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAZ, BazClass))
#define IS_BAZ(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAZ))
#define IS_BAZ_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAZ))
#define BAZ_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAZ, BazClass))

typedef struct _Baz Baz;
typedef struct _BazClass BazClass;
typedef struct _BazPrivate BazPrivate;
enum  {
	BAZ_0_PROPERTY,
	BAZ_NUM_PROPERTIES
};
static GParamSpec* baz_properties[BAZ_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Baz {
	GObject parent_instance;
	BazPrivate * priv;
};

struct _BazClass {
	GObjectClass parent_class;
};

static gpointer baz_parent_class = NULL;

VALA_EXTERN GType baz_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Baz, g_object_unref)
VALA_EXTERN Baz* baz_new (void);
VALA_EXTERN Baz* baz_construct (GType object_type);
static Baz* baz_get_object (Baz* self);
VALA_EXTERN Baz** baz_create_array (Baz* self,
                        gint* result_length1);
static gpointer* baz_get_array (Baz* self,
                         GType t_type,
                         GBoxedCopyFunc t_dup_func,
                         GDestroyNotify t_destroy_func,
                         gint* result_length1);
static void _vala_array_add1 (Baz** * array,
                       gint* length,
                       gint* size,
                       Baz* value);
static gboolean _vala_baz_array_contains (Baz* * stack,
                                   gssize stack_length,
                                   const Baz* needle);
VALA_EXTERN gpointer* baz_create_array2 (Baz* self,
                             GType v_type,
                             GBoxedCopyFunc v_dup_func,
                             GDestroyNotify v_destroy_func,
                             gint* result_length1);
static gpointer* baz_get_array2 (Baz* self,
                          GType g_type,
                          GBoxedCopyFunc g_dup_func,
                          GDestroyNotify g_destroy_func,
                          gint* result_length1);
static void _vala_array_add2 (gpointer* * array,
                       gint* length,
                       gint* size,
                       gpointer value);
static gboolean _vala_valageneric_array_contains (gpointer * stack,
                                           gssize stack_length,
                                           const gpointer needle);
static void _vala_array_add3 (gpointer* * array,
                       gint* length,
                       gint* size,
                       gpointer value);
static void _vala_array_add4 (gpointer* * array,
                       gint* length,
                       gint* size,
                       gpointer value);
static void _vala_array_add5 (gpointer* * array,
                       gint* length,
                       gint* size,
                       gpointer value);
static GType baz_get_type_once (void);
VALA_EXTERN void test_generics_array (void);
static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

Baz*
baz_construct (GType object_type)
{
	Baz * self = NULL;
	self = (Baz*) g_object_new (object_type, NULL);
	return self;
}

Baz*
baz_new (void)
{
	return baz_construct (TYPE_BAZ);
}

static Baz*
baz_get_object (Baz* self)
{
	Baz* _tmp0_;
	Baz* result;
	g_return_val_if_fail (IS_BAZ (self), NULL);
	_tmp0_ = baz_new ();
	result = _tmp0_;
	return result;
}

static void
_vala_array_add1 (Baz** * array,
                  gint* length,
                  gint* size,
                  Baz* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (Baz*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}

static gboolean
_vala_baz_array_contains (Baz* * stack,
                          gssize stack_length,
                          const Baz* needle)
{
	gssize i;
	for (i = 0; i < stack_length; i++) {
		if (needle == stack[i]) {
			return TRUE;
		}
	}
	return FALSE;
}

Baz**
baz_create_array (Baz* self,
                  gint* result_length1)
{
	Baz** a = NULL;
	gint _tmp0_ = 0;
	gpointer* _tmp1_;
	gint a_length1;
	gint _a_size_;
	Baz* _tmp2_;
	Baz** _tmp3_;
	gint _tmp3__length1;
	Baz* _tmp4_;
	Baz* _tmp5_;
	Baz** _tmp6_;
	gint _tmp6__length1;
	Baz** _tmp7_;
	gint _tmp7__length1;
	Baz** result;
	g_return_val_if_fail (IS_BAZ (self), NULL);
	_tmp1_ = baz_get_array (self, TYPE_BAZ, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, &_tmp0_);
	a = _tmp1_;
	a_length1 = _tmp0_;
	_a_size_ = a_length1;
	_tmp2_ = baz_get_object (self);
	_vala_array_add1 (&a, &a_length1, &_a_size_, G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, TYPE_BAZ, Baz));
	_tmp3_ = a;
	_tmp3__length1 = a_length1;
	_vala_assert (_tmp3__length1 == 2, "a.length == 2");
	_tmp4_ = baz_get_object (self);
	_tmp5_ = _tmp4_;
	_tmp6_ = a;
	_tmp6__length1 = a_length1;
	_vala_assert (!_vala_baz_array_contains (_tmp6_, _tmp6__length1, _tmp5_), "!(get_object () in a)");
	_g_object_unref0 (_tmp5_);
	_tmp7_ = a;
	_tmp7__length1 = a_length1;
	if (result_length1) {
		*result_length1 = _tmp7__length1;
	}
	result = _tmp7_;
	return result;
}

static void
_vala_array_add2 (gpointer* * array,
                  gint* length,
                  gint* size,
                  gpointer value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gpointer, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}

static gboolean
_vala_valageneric_array_contains (gpointer * stack,
                                  gssize stack_length,
                                  const gpointer needle)
{
	gssize i;
	for (i = 0; i < stack_length; i++) {
		if (needle == stack[i]) {
			return TRUE;
		}
	}
	return FALSE;
}

gpointer*
baz_create_array2 (Baz* self,
                   GType v_type,
                   GBoxedCopyFunc v_dup_func,
                   GDestroyNotify v_destroy_func,
                   gint* result_length1)
{
	gpointer* a = NULL;
	gint _tmp0_ = 0;
	gpointer* _tmp1_;
	gint a_length1;
	gint _a_size_;
	Baz* _tmp2_;
	gpointer* _tmp3_;
	gint _tmp3__length1;
	Baz* _tmp4_;
	Baz* _tmp5_;
	gpointer* _tmp6_;
	gint _tmp6__length1;
	gpointer* _tmp7_;
	gint _tmp7__length1;
	gpointer* result;
	g_return_val_if_fail (IS_BAZ (self), NULL);
	_tmp1_ = baz_get_array2 (self, v_type, (GBoxedCopyFunc) v_dup_func, (GDestroyNotify) v_destroy_func, &_tmp0_);
	a = _tmp1_;
	a_length1 = _tmp0_;
	_a_size_ = a_length1;
	_tmp2_ = baz_get_object (self);
	_vala_array_add2 (&a, &a_length1, &_a_size_, (gpointer) _tmp2_);
	_tmp3_ = a;
	_tmp3__length1 = a_length1;
	_vala_assert (_tmp3__length1 == 3, "a.length == 3");
	_tmp4_ = baz_get_object (self);
	_tmp5_ = _tmp4_;
	_tmp6_ = a;
	_tmp6__length1 = a_length1;
	_vala_assert (!_vala_valageneric_array_contains (_tmp6_, _tmp6__length1, _tmp5_), "!(get_object () in a)");
	_g_object_unref0 (_tmp5_);
	_tmp7_ = a;
	_tmp7__length1 = a_length1;
	if (result_length1) {
		*result_length1 = _tmp7__length1;
	}
	result = _tmp7_;
	return result;
}

static void
_vala_array_add3 (gpointer* * array,
                  gint* length,
                  gint* size,
                  gpointer value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gpointer, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}

static gpointer*
baz_get_array (Baz* self,
               GType t_type,
               GBoxedCopyFunc t_dup_func,
               GDestroyNotify t_destroy_func,
               gint* result_length1)
{
	gpointer* a = NULL;
	gpointer* _tmp0_;
	gint a_length1;
	gint _a_size_;
	Baz* _tmp1_;
	gpointer* _tmp2_;
	gint _tmp2__length1;
	gpointer* result;
	g_return_val_if_fail (IS_BAZ (self), NULL);
	_tmp0_ = g_new0 (gpointer, 0);
	a = _tmp0_;
	a_length1 = 0;
	_a_size_ = a_length1;
	_tmp1_ = baz_get_object (self);
	_vala_array_add3 (&a, &a_length1, &_a_size_, (gpointer) _tmp1_);
	_tmp2_ = a;
	_tmp2__length1 = a_length1;
	if (result_length1) {
		*result_length1 = _tmp2__length1;
	}
	result = _tmp2_;
	return result;
}

static void
_vala_array_add4 (gpointer* * array,
                  gint* length,
                  gint* size,
                  gpointer value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gpointer, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}

static void
_vala_array_add5 (gpointer* * array,
                  gint* length,
                  gint* size,
                  gpointer value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gpointer, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}

static gpointer*
baz_get_array2 (Baz* self,
                GType g_type,
                GBoxedCopyFunc g_dup_func,
                GDestroyNotify g_destroy_func,
                gint* result_length1)
{
	gpointer* a = NULL;
	gpointer* _tmp0_;
	gint a_length1;
	gint _a_size_;
	Baz* _tmp1_;
	Baz* _tmp2_;
	gpointer* _tmp3_;
	gint _tmp3__length1;
	gpointer* result;
	g_return_val_if_fail (IS_BAZ (self), NULL);
	_tmp0_ = g_new0 (gpointer, 0);
	a = _tmp0_;
	a_length1 = 0;
	_a_size_ = a_length1;
	_tmp1_ = baz_get_object (self);
	_vala_array_add4 (&a, &a_length1, &_a_size_, (gpointer) _tmp1_);
	_tmp2_ = baz_get_object (self);
	_vala_array_add5 (&a, &a_length1, &_a_size_, (gpointer) _tmp2_);
	_tmp3_ = a;
	_tmp3__length1 = a_length1;
	if (result_length1) {
		*result_length1 = _tmp3__length1;
	}
	result = _tmp3_;
	return result;
}

static void
baz_class_init (BazClass * klass,
                gpointer klass_data)
{
	baz_parent_class = g_type_class_peek_parent (klass);
}

static void
baz_instance_init (Baz * self,
                   gpointer klass)
{
}

static GType
baz_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BazClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) baz_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Baz), 0, (GInstanceInitFunc) baz_instance_init, NULL };
	GType baz_type_id;
	baz_type_id = g_type_register_static (G_TYPE_OBJECT, "Baz", &g_define_type_info, 0);
	return baz_type_id;
}

GType
baz_get_type (void)
{
	static volatile gsize baz_type_id__once = 0;
	if (g_once_init_enter (&baz_type_id__once)) {
		GType baz_type_id;
		baz_type_id = baz_get_type_once ();
		g_once_init_leave (&baz_type_id__once, baz_type_id);
	}
	return baz_type_id__once;
}

void
test_generics_array (void)
{
	Baz* g = NULL;
	Baz* _tmp0_;
	Baz** a = NULL;
	gint _tmp1_ = 0;
	Baz** _tmp2_;
	gint a_length1;
	gint _a_size_;
	Baz** b = NULL;
	gint _tmp3_ = 0;
	gpointer* _tmp4_;
	gint b_length1;
	gint _b_size_;
	_tmp0_ = baz_new ();
	g = _tmp0_;
	_tmp2_ = baz_create_array (g, &_tmp1_);
	a = _tmp2_;
	a_length1 = _tmp1_;
	_a_size_ = a_length1;
	_vala_assert (a_length1 == 2, "a.length == 2");
	_tmp4_ = baz_create_array2 (g, TYPE_BAZ, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, &_tmp3_);
	b = _tmp4_;
	b_length1 = _tmp3_;
	_b_size_ = b_length1;
	_vala_assert (b_length1 == 3, "b.length == 3");
	b = (_vala_array_free (b, b_length1, (GDestroyNotify) g_object_unref), NULL);
	a = (_vala_array_free (a, a_length1, (GDestroyNotify) g_object_unref), NULL);
	_g_object_unref0 (g);
}

static void
_vala_main (void)
{
	test_generics_array ();
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

