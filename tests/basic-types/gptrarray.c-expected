/* basic_types_gptrarray.c generated by valac, the Vala compiler
 * generated from basic_types_gptrarray.vala, do not modify */

#include <glib-object.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block1Data Block1Data;
#define _g_ptr_array_unref0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL)))
typedef struct _Block2Data Block2Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
	gint i;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _Block1Data {
	int _ref_count_;
	GPtrArray* self;
	GCompareFunc compare_func;
};

struct _Block2Data {
	int _ref_count_;
	GPtrArray* self;
	GCompareDataFunc compare_func;
	gpointer compare_func_target;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (gint i);
VALA_EXTERN Foo* foo_construct (GType object_type,
                    gint i);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
VALA_EXTERN gint compare_foo (Foo* a,
                  Foo* b);
static void _vala_main (void);
static void _g_object_unref0_ (gpointer var);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static gint ___lambda0__gcompare_data_func (gconstpointer a,
                                     gconstpointer b,
                                     gpointer self);
static gint _compare_foo_gcompare_func (gconstpointer a,
                                 gconstpointer b);
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
static gint ___lambda1__gcompare_data_func (gconstpointer a,
                                     gconstpointer b,
                                     gpointer self);
static gint _compare_foo_gcompare_data_func (gconstpointer a,
                                      gconstpointer b,
                                      gpointer self);

Foo*
foo_construct (GType object_type,
               gint i)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	self->i = i;
	return self;
}

Foo*
foo_new (gint i)
{
	return foo_construct (TYPE_FOO, i);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gint
compare_foo (Foo* a,
             Foo* b)
{
	gint result;
	g_return_val_if_fail (IS_FOO (a), 0);
	g_return_val_if_fail (IS_FOO (b), 0);
	result = b->i - a->i;
	return result;
}

static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

static gint
vala_g_ptr_array_get_length (GPtrArray* self)
{
	gint result;
	g_return_val_if_fail (self != NULL, 0);
	result = (gint) self->len;
	return result;
}

static void
g_ptr_array_set (GPtrArray* self,
                 guint index,
                 gpointer data)
{
	gpointer _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = data;
	data = NULL;
	g_ptr_array_add (self, _tmp0_);
	g_ptr_array_remove_index_fast (self, index);
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		GPtrArray* self;
		self = _data1_->self;
		_g_ptr_array_unref0 (self);
		g_slice_free (Block1Data, _data1_);
	}
}

static gint
__lambda0_ (Block1Data* _data1_,
            gconstpointer** a,
            gconstpointer** b)
{
	GPtrArray* self;
	gint result;
	self = _data1_->self;
	result = _data1_->compare_func ((gconstpointer**) (*a), (gconstpointer**) (*b));
	return result;
}

static gint
___lambda0__gcompare_data_func (gconstpointer a,
                                gconstpointer b,
                                gpointer self)
{
	gint result;
	result = __lambda0_ (self, a, b);
	return result;
}

static void
vala_g_ptr_array_sort (GPtrArray* self,
                       GCompareFunc compare_func)
{
	Block1Data* _data1_;
	g_return_if_fail (self != NULL);
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->self = g_ptr_array_ref (self);
	_data1_->compare_func = compare_func;
	g_ptr_array_sort_with_data (self, ___lambda0__gcompare_data_func, _data1_);
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

static gint
_compare_foo_gcompare_func (gconstpointer a,
                            gconstpointer b)
{
	gint result;
	result = compare_foo ((Foo*) a, (Foo*) b);
	return result;
}

static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
	g_atomic_int_inc (&_data2_->_ref_count_);
	return _data2_;
}

static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
		GPtrArray* self;
		self = _data2_->self;
		_g_ptr_array_unref0 (self);
		g_slice_free (Block2Data, _data2_);
	}
}

static gint
__lambda1_ (Block2Data* _data2_,
            gconstpointer** a,
            gconstpointer** b)
{
	GPtrArray* self;
	gint result;
	self = _data2_->self;
	result = _data2_->compare_func ((gconstpointer**) (*a), (gconstpointer**) (*b), _data2_->compare_func_target);
	return result;
}

static gint
___lambda1__gcompare_data_func (gconstpointer a,
                                gconstpointer b,
                                gpointer self)
{
	gint result;
	result = __lambda1_ (self, a, b);
	return result;
}

static void
vala_g_ptr_array_sort_with_data (GPtrArray* self,
                                 GCompareDataFunc compare_func,
                                 gpointer compare_func_target)
{
	Block2Data* _data2_;
	g_return_if_fail (self != NULL);
	_data2_ = g_slice_new0 (Block2Data);
	_data2_->_ref_count_ = 1;
	_data2_->self = g_ptr_array_ref (self);
	_data2_->compare_func = compare_func;
	_data2_->compare_func_target = compare_func_target;
	g_ptr_array_sort_with_data (self, ___lambda1__gcompare_data_func, _data2_);
	block2_data_unref (_data2_);
	_data2_ = NULL;
}

static gint
_compare_foo_gcompare_data_func (gconstpointer a,
                                 gconstpointer b,
                                 gpointer self)
{
	gint result;
	result = compare_foo ((Foo*) a, (Foo*) b);
	return result;
}

static void
_vala_main (void)
{
	Foo* foo1 = NULL;
	Foo* _tmp0_;
	Foo* foo2 = NULL;
	Foo* _tmp1_;
	Foo* foo3 = NULL;
	Foo* _tmp2_;
	Foo* foo4 = NULL;
	Foo* _tmp3_;
	Foo* foo5 = NULL;
	Foo* _tmp4_;
	Foo* _tmp76_;
	Foo* _tmp77_;
	Foo* _tmp78_;
	Foo* _tmp79_;
	Foo* _tmp80_;
	Foo* _tmp147_;
	Foo* _tmp148_;
	Foo* _tmp149_;
	Foo* _tmp150_;
	Foo* _tmp151_;
	_tmp0_ = foo_new (5);
	foo1 = _tmp0_;
	_tmp1_ = foo_new (4);
	foo2 = _tmp1_;
	_tmp2_ = foo_new (3);
	foo3 = _tmp2_;
	_tmp3_ = foo_new (2);
	foo4 = _tmp3_;
	_tmp4_ = foo_new (1);
	foo5 = _tmp4_;
	{
		GPtrArray* array = NULL;
		GPtrArray* _tmp5_;
		GPtrArray* _tmp6_;
		Foo* _tmp7_;
		Foo* _tmp8_;
		Foo* _tmp9_;
		GPtrArray* _tmp10_;
		Foo* _tmp11_;
		Foo* _tmp12_;
		Foo* _tmp13_;
		GPtrArray* _tmp14_;
		Foo* _tmp15_;
		Foo* _tmp16_;
		Foo* _tmp17_;
		GPtrArray* _tmp18_;
		gint _tmp19_;
		gint _tmp20_;
		gint loop_size = 0;
		GPtrArray* _tmp21_;
		GPtrArray* _tmp30_;
		Foo* _tmp40_;
		GPtrArray* _tmp41_;
		gconstpointer _tmp42_;
		GPtrArray* _tmp43_;
		Foo* _tmp44_;
		Foo* _tmp45_;
		Foo* _tmp46_;
		GPtrArray* _tmp47_;
		gconstpointer _tmp48_;
		Foo* _tmp49_;
		Foo* _tmp50_;
		GPtrArray* _tmp51_;
		gint _tmp52_;
		gint _tmp53_;
		GPtrArray* _tmp54_;
		Foo* _tmp55_;
		Foo* _tmp56_;
		Foo* _tmp57_;
		GPtrArray* _tmp58_;
		gint _tmp59_;
		gint _tmp60_;
		GPtrArray* _tmp61_;
		Foo* _tmp62_;
		Foo* _tmp63_;
		GPtrArray* _tmp64_;
		gint _tmp65_;
		gint _tmp66_;
		GPtrArray* _tmp67_;
		GPtrArray* _tmp68_;
		GPtrArray* _tmp69_;
		gint _tmp70_;
		gint _tmp71_;
		GPtrArray* _tmp72_;
		GPtrArray* _tmp73_;
		gint _tmp74_;
		gint _tmp75_;
		_tmp5_ = g_ptr_array_new_full ((guint) 8, _g_object_unref0_);
		array = _tmp5_;
		_tmp6_ = array;
		_tmp7_ = foo1;
		_tmp8_ = _g_object_ref0 (_tmp7_);
		g_ptr_array_add (_tmp6_, _tmp8_);
		_tmp9_ = foo1;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp9_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo1.ref_count == 2");
		_tmp10_ = array;
		_tmp11_ = foo2;
		_tmp12_ = _g_object_ref0 (_tmp11_);
		g_ptr_array_add (_tmp10_, _tmp12_);
		_tmp13_ = foo2;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp13_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo2.ref_count == 2");
		_tmp14_ = array;
		_tmp15_ = foo3;
		_tmp16_ = _g_object_ref0 (_tmp15_);
		g_ptr_array_add (_tmp14_, _tmp16_);
		_tmp17_ = foo3;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp17_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo3.ref_count == 2");
		_tmp18_ = array;
		_tmp19_ = vala_g_ptr_array_get_length (_tmp18_);
		_tmp20_ = _tmp19_;
		_vala_assert (_tmp20_ == 3, "array.length == 3");
		loop_size = 0;
		_tmp21_ = array;
		{
			GPtrArray* element_collection = NULL;
			guint element_index = 0U;
			element_collection = _tmp21_;
			for (element_index = 0; element_index < element_collection->len; element_index = element_index + 1) {
				Foo* element = NULL;
				element = (Foo*) g_ptr_array_index (element_collection, element_index);
				{
					gint _tmp22_;
					Foo* _tmp23_;
					_tmp22_ = loop_size;
					loop_size = _tmp22_ + 1;
					_tmp23_ = element;
					_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp23_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "element.ref_count == 2");
					switch (loop_size) {
						case 1:
						{
							Foo* _tmp24_;
							Foo* _tmp25_;
							_tmp24_ = element;
							_tmp25_ = foo1;
							_vala_assert (_tmp24_ == _tmp25_, "element == foo1");
							break;
						}
						case 2:
						{
							Foo* _tmp26_;
							Foo* _tmp27_;
							_tmp26_ = element;
							_tmp27_ = foo2;
							_vala_assert (_tmp26_ == _tmp27_, "element == foo2");
							break;
						}
						case 3:
						{
							Foo* _tmp28_;
							Foo* _tmp29_;
							_tmp28_ = element;
							_tmp29_ = foo3;
							_vala_assert (_tmp28_ == _tmp29_, "element == foo3");
							break;
						}
						default:
						break;
					}
				}
			}
		}
		_vala_assert (loop_size == 3, "loop_size == 3");
		loop_size = 0;
		_tmp30_ = array;
		{
			GPtrArray* element_collection = NULL;
			guint element_index = 0U;
			element_collection = _tmp30_;
			for (element_index = 0; element_index < element_collection->len; element_index = element_index + 1) {
				Foo* _tmp31_;
				Foo* element = NULL;
				_tmp31_ = _g_object_ref0 ((Foo*) g_ptr_array_index (element_collection, element_index));
				element = _tmp31_;
				{
					gint _tmp32_;
					Foo* _tmp33_;
					_tmp32_ = loop_size;
					loop_size = _tmp32_ + 1;
					_tmp33_ = element;
					_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp33_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 3), "element.ref_count == 3");
					switch (loop_size) {
						case 1:
						{
							Foo* _tmp34_;
							Foo* _tmp35_;
							_tmp34_ = element;
							_tmp35_ = foo1;
							_vala_assert (_tmp34_ == _tmp35_, "element == foo1");
							break;
						}
						case 2:
						{
							Foo* _tmp36_;
							Foo* _tmp37_;
							_tmp36_ = element;
							_tmp37_ = foo2;
							_vala_assert (_tmp36_ == _tmp37_, "element == foo2");
							break;
						}
						case 3:
						{
							Foo* _tmp38_;
							Foo* _tmp39_;
							_tmp38_ = element;
							_tmp39_ = foo3;
							_vala_assert (_tmp38_ == _tmp39_, "element == foo3");
							break;
						}
						default:
						break;
					}
					_g_object_unref0 (element);
				}
			}
		}
		_vala_assert (loop_size == 3, "loop_size == 3");
		_tmp40_ = foo2;
		_tmp41_ = array;
		_tmp42_ = g_ptr_array_index (_tmp41_, (guint) 1);
		_vala_assert (_tmp40_ == ((Foo*) _tmp42_), "foo2 == array.get (1)");
		_tmp43_ = array;
		_tmp44_ = foo4;
		_tmp45_ = _g_object_ref0 (_tmp44_);
		g_ptr_array_set (_tmp43_, (guint) 1, _tmp45_);
		_tmp46_ = foo4;
		_tmp47_ = array;
		_tmp48_ = g_ptr_array_index (_tmp47_, (guint) 1);
		_vala_assert (_tmp46_ == ((Foo*) _tmp48_), "foo4 == array.get (1)");
		_tmp49_ = foo2;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp49_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo2.ref_count == 1");
		_tmp50_ = foo4;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp50_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo4.ref_count == 2");
		_tmp51_ = array;
		_tmp52_ = vala_g_ptr_array_get_length (_tmp51_);
		_tmp53_ = _tmp52_;
		_vala_assert (_tmp53_ == 3, "array.length == 3");
		_tmp54_ = array;
		_tmp55_ = foo5;
		_tmp56_ = _g_object_ref0 (_tmp55_);
		g_ptr_array_insert (_tmp54_, 2, _tmp56_);
		_tmp57_ = foo5;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp57_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo5.ref_count == 2");
		_tmp58_ = array;
		_tmp59_ = vala_g_ptr_array_get_length (_tmp58_);
		_tmp60_ = _tmp59_;
		_vala_assert (_tmp60_ == 4, "array.length == 4");
		_tmp61_ = array;
		_tmp62_ = foo4;
		_vala_assert (g_ptr_array_remove (_tmp61_, _tmp62_), "array.remove (foo4)");
		_tmp63_ = foo4;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp63_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo4.ref_count == 1");
		_tmp64_ = array;
		_tmp65_ = vala_g_ptr_array_get_length (_tmp64_);
		_tmp66_ = _tmp65_;
		_vala_assert (_tmp66_ == 3, "array.length == 3");
		_tmp67_ = array;
		vala_g_ptr_array_sort (_tmp67_, _compare_foo_gcompare_func);
		_tmp68_ = array;
		vala_g_ptr_array_sort_with_data (_tmp68_, _compare_foo_gcompare_data_func, NULL);
		_tmp69_ = array;
		_tmp70_ = vala_g_ptr_array_get_length (_tmp69_);
		_tmp71_ = _tmp70_;
		_vala_assert (_tmp71_ == 3, "array.length == 3");
		_tmp72_ = array;
		g_ptr_array_set_size (_tmp72_, 0);
		_tmp73_ = array;
		_tmp74_ = vala_g_ptr_array_get_length (_tmp73_);
		_tmp75_ = _tmp74_;
		_vala_assert (_tmp75_ == 0, "array.length == 0");
		_g_ptr_array_unref0 (array);
	}
	_tmp76_ = foo1;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp76_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo1.ref_count == 1");
	_tmp77_ = foo2;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp77_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo2.ref_count == 1");
	_tmp78_ = foo3;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp78_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo3.ref_count == 1");
	_tmp79_ = foo4;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp79_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo4.ref_count == 1");
	_tmp80_ = foo5;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp80_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo5.ref_count == 1");
	{
		GPtrArray* array = NULL;
		GPtrArray* _tmp81_;
		GPtrArray* _tmp82_;
		Foo* _tmp83_;
		Foo* _tmp84_;
		GPtrArray* _tmp85_;
		Foo* _tmp86_;
		Foo* _tmp87_;
		GPtrArray* _tmp88_;
		Foo* _tmp89_;
		Foo* _tmp90_;
		GPtrArray* _tmp91_;
		gint _tmp92_;
		gint _tmp93_;
		gint loop_size = 0;
		GPtrArray* _tmp94_;
		GPtrArray* _tmp103_;
		Foo* _tmp113_;
		GPtrArray* _tmp114_;
		gconstpointer _tmp115_;
		GPtrArray* _tmp116_;
		Foo* _tmp117_;
		Foo* _tmp118_;
		GPtrArray* _tmp119_;
		gconstpointer _tmp120_;
		Foo* _tmp121_;
		Foo* _tmp122_;
		GPtrArray* _tmp123_;
		gint _tmp124_;
		gint _tmp125_;
		GPtrArray* _tmp126_;
		Foo* _tmp127_;
		Foo* _tmp128_;
		GPtrArray* _tmp129_;
		gint _tmp130_;
		gint _tmp131_;
		GPtrArray* _tmp132_;
		Foo* _tmp133_;
		Foo* _tmp134_;
		GPtrArray* _tmp135_;
		gint _tmp136_;
		gint _tmp137_;
		GPtrArray* _tmp138_;
		GPtrArray* _tmp139_;
		GPtrArray* _tmp140_;
		gint _tmp141_;
		gint _tmp142_;
		GPtrArray* _tmp143_;
		GPtrArray* _tmp144_;
		gint _tmp145_;
		gint _tmp146_;
		_tmp81_ = g_ptr_array_new_full ((guint) 8, NULL);
		array = _tmp81_;
		_tmp82_ = array;
		_tmp83_ = foo1;
		g_ptr_array_add (_tmp82_, _tmp83_);
		_tmp84_ = foo1;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp84_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo1.ref_count == 1");
		_tmp85_ = array;
		_tmp86_ = foo2;
		g_ptr_array_add (_tmp85_, _tmp86_);
		_tmp87_ = foo2;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp87_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo2.ref_count == 1");
		_tmp88_ = array;
		_tmp89_ = foo3;
		g_ptr_array_add (_tmp88_, _tmp89_);
		_tmp90_ = foo3;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp90_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo3.ref_count == 1");
		_tmp91_ = array;
		_tmp92_ = vala_g_ptr_array_get_length (_tmp91_);
		_tmp93_ = _tmp92_;
		_vala_assert (_tmp93_ == 3, "array.length == 3");
		loop_size = 0;
		_tmp94_ = array;
		{
			GPtrArray* element_collection = NULL;
			guint element_index = 0U;
			element_collection = _tmp94_;
			for (element_index = 0; element_index < element_collection->len; element_index = element_index + 1) {
				Foo* element = NULL;
				element = (Foo*) g_ptr_array_index (element_collection, element_index);
				{
					gint _tmp95_;
					Foo* _tmp96_;
					_tmp95_ = loop_size;
					loop_size = _tmp95_ + 1;
					_tmp96_ = element;
					_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp96_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "element.ref_count == 1");
					switch (loop_size) {
						case 1:
						{
							Foo* _tmp97_;
							Foo* _tmp98_;
							_tmp97_ = element;
							_tmp98_ = foo1;
							_vala_assert (_tmp97_ == _tmp98_, "element == foo1");
							break;
						}
						case 2:
						{
							Foo* _tmp99_;
							Foo* _tmp100_;
							_tmp99_ = element;
							_tmp100_ = foo2;
							_vala_assert (_tmp99_ == _tmp100_, "element == foo2");
							break;
						}
						case 3:
						{
							Foo* _tmp101_;
							Foo* _tmp102_;
							_tmp101_ = element;
							_tmp102_ = foo3;
							_vala_assert (_tmp101_ == _tmp102_, "element == foo3");
							break;
						}
						default:
						break;
					}
				}
			}
		}
		_vala_assert (loop_size == 3, "loop_size == 3");
		loop_size = 0;
		_tmp103_ = array;
		{
			GPtrArray* element_collection = NULL;
			guint element_index = 0U;
			element_collection = _tmp103_;
			for (element_index = 0; element_index < element_collection->len; element_index = element_index + 1) {
				Foo* _tmp104_;
				Foo* element = NULL;
				_tmp104_ = _g_object_ref0 ((Foo*) g_ptr_array_index (element_collection, element_index));
				element = _tmp104_;
				{
					gint _tmp105_;
					Foo* _tmp106_;
					_tmp105_ = loop_size;
					loop_size = _tmp105_ + 1;
					_tmp106_ = element;
					_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp106_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "element.ref_count == 2");
					switch (loop_size) {
						case 1:
						{
							Foo* _tmp107_;
							Foo* _tmp108_;
							_tmp107_ = element;
							_tmp108_ = foo1;
							_vala_assert (_tmp107_ == _tmp108_, "element == foo1");
							break;
						}
						case 2:
						{
							Foo* _tmp109_;
							Foo* _tmp110_;
							_tmp109_ = element;
							_tmp110_ = foo2;
							_vala_assert (_tmp109_ == _tmp110_, "element == foo2");
							break;
						}
						case 3:
						{
							Foo* _tmp111_;
							Foo* _tmp112_;
							_tmp111_ = element;
							_tmp112_ = foo3;
							_vala_assert (_tmp111_ == _tmp112_, "element == foo3");
							break;
						}
						default:
						break;
					}
					_g_object_unref0 (element);
				}
			}
		}
		_vala_assert (loop_size == 3, "loop_size == 3");
		_tmp113_ = foo2;
		_tmp114_ = array;
		_tmp115_ = g_ptr_array_index (_tmp114_, (guint) 1);
		_vala_assert (_tmp113_ == ((Foo*) _tmp115_), "foo2 == array.get (1)");
		_tmp116_ = array;
		_tmp117_ = foo4;
		g_ptr_array_set (_tmp116_, (guint) 1, _tmp117_);
		_tmp118_ = foo4;
		_tmp119_ = array;
		_tmp120_ = g_ptr_array_index (_tmp119_, (guint) 1);
		_vala_assert (_tmp118_ == ((Foo*) _tmp120_), "foo4 == array.get (1)");
		_tmp121_ = foo2;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp121_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo2.ref_count == 1");
		_tmp122_ = foo4;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp122_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo4.ref_count == 1");
		_tmp123_ = array;
		_tmp124_ = vala_g_ptr_array_get_length (_tmp123_);
		_tmp125_ = _tmp124_;
		_vala_assert (_tmp125_ == 3, "array.length == 3");
		_tmp126_ = array;
		_tmp127_ = foo5;
		g_ptr_array_insert (_tmp126_, 2, _tmp127_);
		_tmp128_ = foo5;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp128_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo5.ref_count == 1");
		_tmp129_ = array;
		_tmp130_ = vala_g_ptr_array_get_length (_tmp129_);
		_tmp131_ = _tmp130_;
		_vala_assert (_tmp131_ == 4, "array.length == 4");
		_tmp132_ = array;
		_tmp133_ = foo4;
		_vala_assert (g_ptr_array_remove (_tmp132_, _tmp133_), "array.remove (foo4)");
		_tmp134_ = foo4;
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp134_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo4.ref_count == 1");
		_tmp135_ = array;
		_tmp136_ = vala_g_ptr_array_get_length (_tmp135_);
		_tmp137_ = _tmp136_;
		_vala_assert (_tmp137_ == 3, "array.length == 3");
		_tmp138_ = array;
		vala_g_ptr_array_sort (_tmp138_, _compare_foo_gcompare_func);
		_tmp139_ = array;
		vala_g_ptr_array_sort_with_data (_tmp139_, _compare_foo_gcompare_data_func, NULL);
		_tmp140_ = array;
		_tmp141_ = vala_g_ptr_array_get_length (_tmp140_);
		_tmp142_ = _tmp141_;
		_vala_assert (_tmp142_ == 3, "array.length == 3");
		_tmp143_ = array;
		g_ptr_array_set_size (_tmp143_, 0);
		_tmp144_ = array;
		_tmp145_ = vala_g_ptr_array_get_length (_tmp144_);
		_tmp146_ = _tmp145_;
		_vala_assert (_tmp146_ == 0, "array.length == 0");
		_g_ptr_array_unref0 (array);
	}
	_tmp147_ = foo1;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp147_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo1.ref_count == 1");
	_tmp148_ = foo2;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp148_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo2.ref_count == 1");
	_tmp149_ = foo3;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp149_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo3.ref_count == 1");
	_tmp150_ = foo4;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp150_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo4.ref_count == 1");
	_tmp151_ = foo5;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (_tmp151_, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo5.ref_count == 1");
	_g_object_unref0 (foo5);
	_g_object_unref0 (foo4);
	_g_object_unref0 (foo3);
	_g_object_unref0 (foo2);
	_g_object_unref0 (foo1);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

