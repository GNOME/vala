/* basic_types_integers_negative_rank.c generated by valac, the Vala compiler
 * generated from basic_types_integers_negative_rank.vala, do not modify */

#include <stdint.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

typedef int32_t gint;
typedef gint BarHandle;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	{
		gint foo = 0;
		foo = 0;
		_vala_assert (foo == 0, "foo == 0");
	}
	{
		gint foo = 0;
		foo = -1;
		_vala_assert (foo == -1, "foo == -1");
	}
	{
		gint foo = 0;
		foo = 42;
		_vala_assert (foo == 42, "foo == 42");
		foo = 64;
		_vala_assert (foo == 64, "foo == 64");
	}
	{
		gint foo = 0;
		BarHandle bar = 0;
		foo = 36;
		bar = (BarHandle) 64;
		foo = (gint) bar;
		_vala_assert (foo == 64, "foo == 64");
		foo = 88;
		bar = (BarHandle) foo;
		_vala_assert (((gint) bar) == 88, "bar == 88");
	}
	{
		gint foo = 0;
		BarHandle bar = 0;
		guint baz = 0U;
		foo = 99;
		bar = (BarHandle) foo;
		_vala_assert (((gint) bar) == 99, "bar == 99");
		baz = (guint) bar;
		_vala_assert (baz == ((guint) 99), "baz == 99");
	}
	{
		gint foo = 0;
		gint baz = 0;
		foo = 28;
		baz = (gint) foo;
		_vala_assert (baz == 28, "baz == 28");
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

