/* basic_types_floats_boxed_cast.c generated by valac, the Vala compiler
 * generated from basic_types_floats_boxed_cast.vala, do not modify */

#include <glib.h>
#include <float.h>
#include <math.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
static gfloat* _float_dup (gfloat* self);
static gboolean _float_equal (const gfloat * s1,
                       const gfloat * s2);
static gdouble* _double_dup (gdouble* self);
static gboolean _double_equal (const gdouble * s1,
                        const gdouble * s2);

static gfloat*
_float_dup (gfloat* self)
{
	gfloat* dup;
	dup = g_new0 (gfloat, 1);
	memcpy (dup, self, sizeof (gfloat));
	return dup;
}

static gpointer
__float_dup0 (gpointer self)
{
	return self ? _float_dup (self) : NULL;
}

static gboolean
_float_equal (const gfloat * s1,
              const gfloat * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static gdouble*
_double_dup (gdouble* self)
{
	gdouble* dup;
	dup = g_new0 (gdouble, 1);
	memcpy (dup, self, sizeof (gdouble));
	return dup;
}

static gpointer
__double_dup0 (gpointer self)
{
	return self ? _double_dup (self) : NULL;
}

static gboolean
_double_equal (const gdouble * s1,
               const gdouble * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static void
_vala_main (void)
{
	gfloat* _tmp0_ = NULL;
	gfloat _tmp1_;
	gfloat* _tmp2_;
	gfloat* f = NULL;
	gfloat* _tmp3_;
	gfloat _tmp4_;
	gdouble* _tmp5_ = NULL;
	gdouble _tmp6_;
	gdouble* _tmp7_;
	gdouble* d = NULL;
	gdouble* _tmp8_;
	gdouble _tmp9_;
	_tmp1_ = 23.0f;
	_tmp2_ = __float_dup0 (&_tmp1_);
	_tmp0_ = _tmp2_;
	_tmp3_ = _tmp0_;
	_tmp0_ = NULL;
	f = _tmp3_;
	_tmp4_ = 23.0f;
	_vala_assert (_float_equal (f, &_tmp4_) == TRUE, "f == 23.0f");
	_tmp6_ = 42.0;
	_tmp7_ = __double_dup0 (&_tmp6_);
	_tmp5_ = _tmp7_;
	_tmp8_ = _tmp5_;
	_tmp5_ = NULL;
	d = _tmp8_;
	_tmp9_ = 42.0;
	_vala_assert (_double_equal (d, &_tmp9_) == TRUE, "d == 42.0");
	_g_free0 (d);
	_g_free0 (_tmp5_);
	_g_free0 (f);
	_g_free0 (_tmp0_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

