/* basic_types_arrays_fixed_assignment.c generated by valac, the Vala compiler
 * generated from basic_types_arrays_fixed_assignment.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN gchar* foo[3];
gchar* foo[3] = {0};

static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static void
_vala_main (void)
{
	{
	}
	{
		gchar* _tmp0_;
		gchar* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_[3] = {0};
		const gchar* _tmp4_;
		_tmp0_ = g_strdup ("foo");
		_tmp1_ = g_strdup ("bar");
		_tmp2_ = g_strdup ("baz");
		_tmp3_[0] = _tmp0_;
		_tmp3_[1] = _tmp1_;
		_tmp3_[2] = _tmp2_;
		_vala_array_destroy (foo, 3, (GDestroyNotify) g_free);
		memcpy (foo, _tmp3_, 3 * sizeof (gchar*));
		_tmp4_ = foo[1];
		_vala_assert (g_strcmp0 (_tmp4_, "bar") == 0, "foo[1] == \"bar\"");
	}
	{
		gchar* _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_[3] = {0};
		const gchar* _tmp9_;
		_tmp5_ = g_strdup ("foo");
		_tmp6_ = g_strdup ("bar");
		_tmp7_ = g_strdup ("baz");
		_tmp8_[0] = _tmp5_;
		_tmp8_[1] = _tmp6_;
		_tmp8_[2] = _tmp7_;
		_vala_array_destroy (foo, 3, (GDestroyNotify) g_free);
		memcpy (foo, _tmp8_, 3 * sizeof (gchar*));
		_tmp9_ = foo[1];
		_vala_assert (g_strcmp0 (_tmp9_, "bar") == 0, "foo[1] == \"bar\"");
	}
	{
		gchar* bar[3] = {0};
		_vala_array_destroy (bar, 3, (GDestroyNotify) g_free);
	}
	{
		gchar* bar[3] = {0};
		gchar* _tmp10_;
		gchar* _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_[3] = {0};
		const gchar* _tmp14_;
		_tmp10_ = g_strdup ("foo");
		_tmp11_ = g_strdup ("bar");
		_tmp12_ = g_strdup ("baz");
		_tmp13_[0] = _tmp10_;
		_tmp13_[1] = _tmp11_;
		_tmp13_[2] = _tmp12_;
		memcpy (bar, _tmp13_, 3 * sizeof (gchar*));
		_tmp14_ = bar[1];
		_vala_assert (g_strcmp0 (_tmp14_, "bar") == 0, "bar[1] == \"bar\"");
		_vala_array_destroy (bar, 3, (GDestroyNotify) g_free);
	}
	{
		gchar* bar[3] = {0};
		gchar* _tmp15_;
		gchar* _tmp16_;
		gchar* _tmp17_;
		gchar* _tmp18_[3] = {0};
		const gchar* _tmp19_;
		_tmp15_ = g_strdup ("foo");
		_tmp16_ = g_strdup ("bar");
		_tmp17_ = g_strdup ("baz");
		_tmp18_[0] = _tmp15_;
		_tmp18_[1] = _tmp16_;
		_tmp18_[2] = _tmp17_;
		memcpy (bar, _tmp18_, 3 * sizeof (gchar*));
		_tmp19_ = bar[1];
		_vala_assert (g_strcmp0 (_tmp19_, "bar") == 0, "bar[1] == \"bar\"");
		_vala_array_destroy (bar, 3, (GDestroyNotify) g_free);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

