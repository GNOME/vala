/* basic_types_bug622178.c generated by valac, the Vala compiler
 * generated from basic_types_bug622178.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;

#define TYPE_BAR (bar_get_type ())
typedef struct _Bar Bar;

#define TYPE_MANAM (manam_get_type ())
typedef struct _Manam Manam;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint bar;
	guint8* data;
	gint data_length1;
	gint _data_size_;
	gint baz;
};

struct _Bar {
	gint bar;
	guint8* data;
	gint data_length1;
	gint data_length2;
	gint baz;
};

struct _Manam {
	const gchar* data[2];
	gint idata[2];
	gint bar;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Foo, foo_destroy)
static guint8* _vala_array_dup1 (guint8* self,
                          gssize length);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Bar* bar_dup (const Bar* self);
VALA_EXTERN void bar_free (Bar* self);
VALA_EXTERN void bar_copy (const Bar* self,
               Bar* dest);
VALA_EXTERN void bar_destroy (Bar* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Bar, bar_destroy)
static guint8* _vala_array_dup2 (guint8* self,
                          gssize length);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Manam* manam_dup (const Manam* self);
VALA_EXTERN void manam_free (Manam* self);
static void _vala_main (void);
static inline gpointer _vala_memdup2 (gconstpointer mem,
                        gsize byte_size);

const Manam MANAM[1] = {{{"foo", "bar"}, {4711, 23}, 42}};

static guint8*
_vala_array_dup1 (guint8* self,
                  gssize length)
{
	if (length > 0) {
		return _vala_memdup2 (self, length * sizeof (guint8));
	}
	return NULL;
}

void
foo_copy (const Foo* self,
          Foo* dest)
{
	guint8* _tmp0_;
	gint _tmp0__length1;
	guint8* _tmp1_;
	gint _tmp1__length1;
	(*dest).bar = (*self).bar;
	_tmp0_ = (*self).data;
	_tmp0__length1 = (*self).data_length1;
	_tmp1_ = (_tmp0_ != NULL) ? _vala_array_dup1 (_tmp0_, _tmp0__length1) : _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	(*dest).data = (g_free ((*dest).data), NULL);
	(*dest).data = _tmp1_;
	(*dest).data_length1 = _tmp1__length1;
	(*dest)._data_size_ = (*dest).data_length1;
	(*dest).baz = (*self).baz;
}

void
foo_destroy (Foo* self)
{
	(*self).data = (g_free ((*self).data), NULL);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static guint8*
_vala_array_dup2 (guint8* self,
                  gssize length)
{
	if (length > 0) {
		return _vala_memdup2 (self, length * sizeof (guint8));
	}
	return NULL;
}

void
bar_copy (const Bar* self,
          Bar* dest)
{
	guint8* _tmp0_;
	gint _tmp0__length1;
	gint _tmp0__length2;
	guint8* _tmp1_;
	gint _tmp1__length1;
	gint _tmp1__length2;
	(*dest).bar = (*self).bar;
	_tmp0_ = (*self).data;
	_tmp0__length1 = (*self).data_length1;
	_tmp0__length2 = (*self).data_length2;
	_tmp1_ = (_tmp0_ != NULL) ? _vala_array_dup2 (_tmp0_, _tmp0__length1 * _tmp0__length2) : _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	_tmp1__length2 = _tmp0__length2;
	(*dest).data = (g_free ((*dest).data), NULL);
	(*dest).data = _tmp1_;
	(*dest).data_length1 = _tmp1__length1;
	(*dest).data_length2 = _tmp1__length2;
	(*dest).baz = (*self).baz;
}

void
bar_destroy (Bar* self)
{
	(*self).data = (g_free ((*self).data), NULL);
}

Bar*
bar_dup (const Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	bar_copy (self, dup);
	return dup;
}

void
bar_free (Bar* self)
{
	bar_destroy (self);
	g_free (self);
}

static GType
bar_get_type_once (void)
{
	GType bar_type_id;
	bar_type_id = g_boxed_type_register_static ("Bar", (GBoxedCopyFunc) bar_dup, (GBoxedFreeFunc) bar_free);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

Manam*
manam_dup (const Manam* self)
{
	Manam* dup;
	dup = g_new0 (Manam, 1);
	memcpy (dup, self, sizeof (Manam));
	return dup;
}

void
manam_free (Manam* self)
{
	g_free (self);
}

static GType
manam_get_type_once (void)
{
	GType manam_type_id;
	manam_type_id = g_boxed_type_register_static ("Manam", (GBoxedCopyFunc) manam_dup, (GBoxedFreeFunc) manam_free);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static void
_vala_main (void)
{
	Foo foo = {0};
	guint8* _tmp0_;
	Foo _tmp1_ = {0};
	Foo _tmp2_;
	Foo _tmp3_;
	Foo _tmp4_;
	guint8* _tmp5_;
	gint _tmp5__length1;
	Foo _tmp6_;
	guint8* _tmp7_;
	gint _tmp7__length1;
	guint8 _tmp8_;
	Bar bar = {0};
	guint8* _tmp9_;
	Bar _tmp10_ = {0};
	Bar _tmp11_;
	Bar _tmp12_;
	Bar _tmp13_;
	guint8* _tmp14_;
	gint _tmp14__length1;
	gint _tmp14__length2;
	gint _tmp15_;
	Bar _tmp16_;
	guint8* _tmp17_;
	gint _tmp17__length1;
	gint _tmp17__length2;
	gint _tmp18_;
	Bar _tmp19_;
	guint8* _tmp20_;
	gint _tmp20__length1;
	gint _tmp20__length2;
	guint8 _tmp21_;
	const gchar** sa = NULL;
	const gchar** _tmp22_;
	gint sa_length1;
	gint _sa_size_;
	Manam manam = {0};
	gint _tmp23_[2] = {0};
	Manam _tmp24_ = {0};
	Manam _tmp25_;
	Manam _tmp26_;
	const gchar* _tmp27_;
	Manam _tmp28_;
	Manam _tmp29_;
	gint _tmp30_;
	Manam _tmp31_;
	Manam _tmp32_;
	Manam _tmp33_;
	const gchar* _tmp34_;
	Manam _tmp35_;
	Manam _tmp36_;
	gint _tmp37_;
	Manam _tmp38_;
	_tmp0_ = g_new0 (guint8, 4);
	_tmp0_[0] = (guint8) 0;
	_tmp0_[1] = (guint8) 1;
	_tmp0_[2] = (guint8) 2;
	_tmp0_[3] = (guint8) 3;
	_tmp1_.bar = 23;
	_tmp1_.data = (g_free (_tmp1_.data), NULL);
	_tmp1_.data = _tmp0_;
	_tmp1_.data_length1 = 4;
	_tmp1_._data_size_ = _tmp1_.data_length1;
	_tmp1_.baz = 42;
	foo = _tmp1_;
	_tmp2_ = foo;
	_vala_assert (_tmp2_.bar == 23, "foo.bar == 23");
	_tmp3_ = foo;
	_vala_assert (_tmp3_.baz == 42, "foo.baz == 42");
	_tmp4_ = foo;
	_tmp5_ = _tmp4_.data;
	_tmp5__length1 = _tmp4_.data_length1;
	_vala_assert (_tmp5__length1 == 4, "foo.data.length == 4");
	_tmp6_ = foo;
	_tmp7_ = _tmp6_.data;
	_tmp7__length1 = _tmp6_.data_length1;
	_tmp8_ = _tmp7_[3];
	_vala_assert (((gint) _tmp8_) == 3, "foo.data[3] == 3");
	_tmp9_ = g_new0 (guint8, 3 * 2);
	_tmp9_[0] = (guint8) 1;
	_tmp9_[1] = (guint8) 2;
	_tmp9_[2] = (guint8) 3;
	_tmp9_[3] = (guint8) 4;
	_tmp9_[4] = (guint8) 5;
	_tmp9_[5] = (guint8) 6;
	_tmp10_.bar = 23;
	_tmp10_.data = (g_free (_tmp10_.data), NULL);
	_tmp10_.data = _tmp9_;
	_tmp10_.data_length1 = 3;
	_tmp10_.data_length2 = 2;
	_tmp10_.baz = 42;
	bar = _tmp10_;
	_tmp11_ = bar;
	_vala_assert (_tmp11_.bar == 23, "bar.bar == 23");
	_tmp12_ = bar;
	_vala_assert (_tmp12_.baz == 42, "bar.baz == 42");
	_tmp13_ = bar;
	_tmp14_ = _tmp13_.data;
	_tmp14__length1 = _tmp13_.data_length1;
	_tmp14__length2 = _tmp13_.data_length2;
	_tmp15_ = _tmp14__length1;
	_vala_assert (_tmp15_ == 3, "bar.data.length[0] == 3");
	_tmp16_ = bar;
	_tmp17_ = _tmp16_.data;
	_tmp17__length1 = _tmp16_.data_length1;
	_tmp17__length2 = _tmp16_.data_length2;
	_tmp18_ = _tmp17__length2;
	_vala_assert (_tmp18_ == 2, "bar.data.length[1] == 2");
	_tmp19_ = bar;
	_tmp20_ = _tmp19_.data;
	_tmp20__length1 = _tmp19_.data_length1;
	_tmp20__length2 = _tmp19_.data_length2;
	_tmp21_ = _tmp20_[(2 * _tmp20__length2) + 0];
	_vala_assert (((gint) _tmp21_) == 5, "bar.data[2,0] == 5");
	_tmp22_ = g_new0 (const gchar*, 2 + 1);
	_tmp22_[0] = "foo";
	_tmp22_[1] = "bar";
	sa = _tmp22_;
	sa_length1 = 2;
	_sa_size_ = sa_length1;
	_tmp23_[0] = 4711;
	_tmp23_[1] = 23;
	memcpy (_tmp24_.data, sa, 2 * sizeof (const gchar*));
	memcpy (_tmp24_.idata, _tmp23_, 2 * sizeof (gint));
	_tmp24_.bar = 42;
	manam = _tmp24_;
	_tmp25_ = manam;
	_vala_assert (2 == 2, "manam.data.length == 2");
	_tmp26_ = manam;
	_tmp27_ = _tmp26_.data[1];
	_vala_assert (g_strcmp0 (_tmp27_, "bar") == 0, "manam.data[1] == \"bar\"");
	_tmp28_ = manam;
	_vala_assert (2 == 2, "manam.idata.length == 2");
	_tmp29_ = manam;
	_tmp30_ = _tmp29_.idata[1];
	_vala_assert (_tmp30_ == 23, "manam.idata[1] == 23");
	_tmp31_ = manam;
	_vala_assert (_tmp31_.bar == 42, "manam.bar == 42");
	_tmp32_ = MANAM[0];
	_vala_assert (2 == 2, "MANAM[0].data.length == 2");
	_tmp33_ = MANAM[0];
	_tmp34_ = _tmp33_.data[1];
	_vala_assert (g_strcmp0 (_tmp34_, "bar") == 0, "MANAM[0].data[1] == \"bar\"");
	_tmp35_ = MANAM[0];
	_vala_assert (2 == 2, "MANAM[0].idata.length == 2");
	_tmp36_ = MANAM[0];
	_tmp37_ = _tmp36_.idata[1];
	_vala_assert (_tmp37_ == 23, "MANAM[0].idata[1] == 23");
	_tmp38_ = MANAM[0];
	_vala_assert (_tmp38_.bar == 42, "MANAM[0].bar == 42");
	sa = (g_free (sa), NULL);
	bar_destroy (&bar);
	foo_destroy (&foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static inline gpointer
_vala_memdup2 (gconstpointer mem,
               gsize byte_size)
{
	gpointer new_mem;
	if (mem && byte_size != 0) {
		new_mem = g_malloc (byte_size);
		memcpy (new_mem, mem, byte_size);
	} else {
		new_mem = NULL;
	}
	return new_mem;
}

