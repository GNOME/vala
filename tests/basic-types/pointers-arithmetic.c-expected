/* basic_types_pointers_arithmetic.c generated by valac, the Vala compiler
 * generated from basic_types_pointers_arithmetic.vala, do not modify */

#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN void test_chars (void);
VALA_EXTERN void test_strings (void);
static void _vala_main (void);

void
test_chars (void)
{
	gchar* s = NULL;
	gchar* begin = NULL;
	gchar* end = NULL;
	gchar _tmp0_;
	gchar _tmp1_;
	s = "foo";
	begin = s;
	end = begin + 2;
	_tmp0_ = begin[0];
	_vala_assert (_tmp0_ == 'f', "begin[0] == 'f'");
	_tmp1_ = end[0];
	_vala_assert (_tmp1_ == 'o', "end[0] == 'o'");
}

void
test_strings (void)
{
	gchar* s = NULL;
	gchar* _tmp0_;
	const gchar* begin = NULL;
	const gchar* end = NULL;
	gint _tmp1_;
	gint _tmp2_;
	gchar _tmp3_;
	gchar _tmp4_;
	_tmp0_ = g_strdup ("foo");
	s = _tmp0_;
	begin = s;
	_tmp1_ = strlen (s);
	_tmp2_ = _tmp1_;
	end = (begin + _tmp2_) - 1;
	_tmp3_ = ((gchar*) begin)[0];
	_vala_assert (_tmp3_ == 'f', "((char*) begin)[0] == 'f'");
	_tmp4_ = ((gchar*) end)[0];
	_vala_assert (_tmp4_ == 'o', "((char*) end)[0] == 'o'");
	_g_free0 (s);
}

static void
_vala_main (void)
{
	test_chars ();
	test_strings ();
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

