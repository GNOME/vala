/* basic_types_bug610660.c generated by valac, the Vala compiler
 * generated from basic_types_bug610660.vala, do not modify */

#include <glib.h>
#include <float.h>
#include <math.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	{
		gdouble d = 0.0;
		d = 42.0;
		d = fmod (d, 42.0);
		_vala_assert (d == 0.0, "d == 0.0");
	}
	{
		gdouble d = 0.0;
		d = 23.0;
		d = fmod (d, 23.0);
		_vala_assert (d == 0.0, "d == 0.0");
	}
	{
		gfloat f = 0.0F;
		f = 42.0f;
		f = fmodf (f, 42.0f);
		_vala_assert (f == 0.0f, "f == 0.0f");
	}
	{
		gfloat f = 0.0F;
		f = 23.0f;
		f = fmodf (f, 23.0f);
		_vala_assert (f == 0.0f, "f == 0.0f");
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

