/* basic_types_glists_remove.c generated by valac, the Vala compiler
 * generated from basic_types_glists_remove.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static GType foo_get_type_once (void);
VALA_EXTERN void test_glist (void);
static void _g_object_unref0_ (gpointer var);
static inline void _g_list_free__g_object_unref0_ (GList* self);
VALA_EXTERN void test_gslist (void);
static inline void _g_slist_free__g_object_unref0_ (GSList* self);
VALA_EXTERN void test_gqueue (void);
static inline void _g_queue_free__g_object_unref0_ (GQueue* self);
static void _vala_main (void);

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

static GList*
vala_g_list_remove_full (GList* self,
                         gconstpointer data,
                         GFreeFunc func)
{
	GList* l = NULL;
	GList* result;
	l = self;
	while (TRUE) {
		GList* _tmp0_;
		GList* _tmp1_;
		gconstpointer _tmp2_;
		_tmp0_ = l;
		if (!(_tmp0_ != NULL)) {
			break;
		}
		_tmp1_ = l;
		_tmp2_ = ((GList*) _tmp1_)->data;
		if (_tmp2_ != data) {
			GList* _tmp3_;
			GList* _tmp4_;
			_tmp3_ = l;
			_tmp4_ = ((GList*) _tmp3_)->next;
			l = _tmp4_;
		} else {
			GList* _tmp5_;
			gconstpointer _tmp6_;
			GList* _tmp7_;
			_tmp5_ = l;
			_tmp6_ = ((GList*) _tmp5_)->data;
			func (_tmp6_);
			_tmp7_ = l;
			self = g_list_delete_link (self, (GList*) _tmp7_);
			break;
		}
	}
	result = self;
	return result;
}

static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}

static inline void
_g_list_free__g_object_unref0_ (GList* self)
{
	g_list_free_full (self, (GDestroyNotify) _g_object_unref0_);
}

static GList*
vala_g_list_remove_all_full (GList* self,
                             gconstpointer data,
                             GFreeFunc func)
{
	GList* l = NULL;
	GList* result;
	l = self;
	while (TRUE) {
		GList* _tmp0_;
		GList* _tmp1_;
		gconstpointer _tmp2_;
		_tmp0_ = l;
		if (!(_tmp0_ != NULL)) {
			break;
		}
		_tmp1_ = l;
		_tmp2_ = ((GList*) _tmp1_)->data;
		if (_tmp2_ != data) {
			GList* _tmp3_;
			GList* _tmp4_;
			_tmp3_ = l;
			_tmp4_ = ((GList*) _tmp3_)->next;
			l = _tmp4_;
		} else {
			GList* _tmp5_;
			gconstpointer _tmp6_;
			GList* _tmp7_;
			_tmp5_ = l;
			_tmp6_ = ((GList*) _tmp5_)->data;
			func (_tmp6_);
			_tmp7_ = l;
			self = g_list_delete_link (self, (GList*) _tmp7_);
			l = self;
		}
	}
	result = self;
	return result;
}

void
test_glist (void)
{
	{
		GList* list = NULL;
		Foo* foo = NULL;
		Foo* _tmp0_;
		Foo* _tmp1_;
		list = NULL;
		_tmp0_ = foo_new ();
		foo = _tmp0_;
		_tmp1_ = _g_object_ref0 (foo);
		list = g_list_append (list, _tmp1_);
		_vala_assert (g_list_length (list) == ((guint) 1), "list.length () == 1");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		list = vala_g_list_remove_full (list, foo, _g_object_unref0_);
		_vala_assert (g_list_length (list) == ((guint) 0), "list.length () == 0");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_g_object_unref0 (foo);
		(list == NULL) ? NULL : (list = (_g_list_free__g_object_unref0_ (list), NULL));
	}
	{
		GList* list = NULL;
		Foo* foo = NULL;
		Foo* _tmp2_;
		Foo* _tmp3_;
		Foo* _tmp4_;
		list = NULL;
		_tmp2_ = foo_new ();
		foo = _tmp2_;
		_tmp3_ = _g_object_ref0 (foo);
		list = g_list_append (list, _tmp3_);
		_tmp4_ = _g_object_ref0 (foo);
		list = g_list_append (list, _tmp4_);
		_vala_assert (g_list_length (list) == ((guint) 2), "list.length () == 2");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 3), "foo.ref_count == 3");
		list = vala_g_list_remove_all_full (list, foo, _g_object_unref0_);
		_vala_assert (g_list_length (list) == ((guint) 0), "list.length () == 0");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_g_object_unref0 (foo);
		(list == NULL) ? NULL : (list = (_g_list_free__g_object_unref0_ (list), NULL));
	}
	{
		GList* list = NULL;
		const gchar* s = NULL;
		list = NULL;
		s = "foo";
		list = g_list_append (list, s);
		_vala_assert (g_list_length (list) == ((guint) 1), "list.length () == 1");
		list = g_list_remove (list, s);
		_vala_assert (g_list_length (list) == ((guint) 0), "list.length () == 0");
		list = g_list_append (list, s);
		list = g_list_remove_all (list, s);
		_vala_assert (g_list_length (list) == ((guint) 0), "list.length () == 0");
		(list == NULL) ? NULL : (list = (g_list_free (list), NULL));
	}
}

static GSList*
vala_g_slist_remove_full (GSList* self,
                          gconstpointer data,
                          GFreeFunc func)
{
	GSList* l = NULL;
	GSList* result;
	l = self;
	while (TRUE) {
		GSList* _tmp0_;
		GSList* _tmp1_;
		gconstpointer _tmp2_;
		_tmp0_ = l;
		if (!(_tmp0_ != NULL)) {
			break;
		}
		_tmp1_ = l;
		_tmp2_ = ((GSList*) _tmp1_)->data;
		if (_tmp2_ != data) {
			GSList* _tmp3_;
			GSList* _tmp4_;
			_tmp3_ = l;
			_tmp4_ = ((GSList*) _tmp3_)->next;
			l = _tmp4_;
		} else {
			GSList* _tmp5_;
			gconstpointer _tmp6_;
			GSList* _tmp7_;
			_tmp5_ = l;
			_tmp6_ = ((GSList*) _tmp5_)->data;
			func (_tmp6_);
			_tmp7_ = l;
			self = g_slist_delete_link (self, (GSList*) _tmp7_);
			break;
		}
	}
	result = self;
	return result;
}

static inline void
_g_slist_free__g_object_unref0_ (GSList* self)
{
	g_slist_free_full (self, (GDestroyNotify) _g_object_unref0_);
}

static GSList*
vala_g_slist_remove_all_full (GSList* self,
                              gconstpointer data,
                              GFreeFunc func)
{
	GSList* l = NULL;
	GSList* result;
	l = self;
	while (TRUE) {
		GSList* _tmp0_;
		GSList* _tmp1_;
		gconstpointer _tmp2_;
		_tmp0_ = l;
		if (!(_tmp0_ != NULL)) {
			break;
		}
		_tmp1_ = l;
		_tmp2_ = ((GSList*) _tmp1_)->data;
		if (_tmp2_ != data) {
			GSList* _tmp3_;
			GSList* _tmp4_;
			_tmp3_ = l;
			_tmp4_ = ((GSList*) _tmp3_)->next;
			l = _tmp4_;
		} else {
			GSList* _tmp5_;
			gconstpointer _tmp6_;
			GSList* _tmp7_;
			_tmp5_ = l;
			_tmp6_ = ((GSList*) _tmp5_)->data;
			func (_tmp6_);
			_tmp7_ = l;
			self = g_slist_delete_link (self, (GSList*) _tmp7_);
			l = self;
		}
	}
	result = self;
	return result;
}

void
test_gslist (void)
{
	{
		GSList* list = NULL;
		Foo* foo = NULL;
		Foo* _tmp0_;
		Foo* _tmp1_;
		list = NULL;
		_tmp0_ = foo_new ();
		foo = _tmp0_;
		_tmp1_ = _g_object_ref0 (foo);
		list = g_slist_append (list, _tmp1_);
		_vala_assert (g_slist_length (list) == ((guint) 1), "list.length () == 1");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		list = vala_g_slist_remove_full (list, foo, _g_object_unref0_);
		_vala_assert (g_slist_length (list) == ((guint) 0), "list.length () == 0");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_g_object_unref0 (foo);
		(list == NULL) ? NULL : (list = (_g_slist_free__g_object_unref0_ (list), NULL));
	}
	{
		GSList* list = NULL;
		Foo* foo = NULL;
		Foo* _tmp2_;
		Foo* _tmp3_;
		Foo* _tmp4_;
		list = NULL;
		_tmp2_ = foo_new ();
		foo = _tmp2_;
		_tmp3_ = _g_object_ref0 (foo);
		list = g_slist_append (list, _tmp3_);
		_tmp4_ = _g_object_ref0 (foo);
		list = g_slist_append (list, _tmp4_);
		_vala_assert (g_slist_length (list) == ((guint) 2), "list.length () == 2");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 3), "foo.ref_count == 3");
		list = vala_g_slist_remove_all_full (list, foo, _g_object_unref0_);
		_vala_assert (g_slist_length (list) == ((guint) 0), "list.length () == 0");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_g_object_unref0 (foo);
		(list == NULL) ? NULL : (list = (_g_slist_free__g_object_unref0_ (list), NULL));
	}
	{
		GSList* list = NULL;
		const gchar* s = NULL;
		list = NULL;
		s = "foo";
		list = g_slist_append (list, s);
		_vala_assert (g_slist_length (list) == ((guint) 1), "list.length () == 1");
		list = g_slist_remove (list, s);
		_vala_assert (g_slist_length (list) == ((guint) 0), "list.length () == 0");
		list = g_slist_append (list, s);
		list = g_slist_remove_all (list, s);
		_vala_assert (g_slist_length (list) == ((guint) 0), "list.length () == 0");
		(list == NULL) ? NULL : (list = (g_slist_free (list), NULL));
	}
}

static gboolean
vala_g_queue_remove_full (GQueue* self,
                          gconstpointer data,
                          GFreeFunc func)
{
	GList* l = NULL;
	GList* _tmp0_;
	GList* _tmp1_;
	GList* _tmp2_;
	gboolean result;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->head;
	_tmp1_ = g_list_find (_tmp0_, data);
	l = _tmp1_;
	_tmp2_ = l;
	if (_tmp2_ != NULL) {
		GList* _tmp3_;
		gconstpointer _tmp4_;
		GList* _tmp5_;
		_tmp3_ = l;
		_tmp4_ = ((GList*) _tmp3_)->data;
		func (_tmp4_);
		_tmp5_ = l;
		g_queue_delete_link (self, (GList*) _tmp5_);
		result = TRUE;
		return result;
	} else {
		result = FALSE;
		return result;
	}
}

static inline void
_g_queue_free__g_object_unref0_ (GQueue* self)
{
	g_queue_free_full (self, (GDestroyNotify) _g_object_unref0_);
}

static guint
vala_g_queue_remove_all_full (GQueue* self,
                              gconstpointer data,
                              GFreeFunc func)
{
	guint old_length = 0U;
	GList* l = NULL;
	GList* _tmp0_;
	guint result;
	g_return_val_if_fail (self != NULL, 0U);
	old_length = self->length;
	_tmp0_ = self->head;
	l = _tmp0_;
	while (TRUE) {
		GList* _tmp1_;
		GList* next = NULL;
		GList* _tmp2_;
		GList* _tmp3_;
		GList* _tmp4_;
		gconstpointer _tmp5_;
		GList* _tmp9_;
		_tmp1_ = l;
		if (!(_tmp1_ != NULL)) {
			break;
		}
		_tmp2_ = l;
		_tmp3_ = ((GList*) _tmp2_)->next;
		next = _tmp3_;
		_tmp4_ = l;
		_tmp5_ = ((GList*) _tmp4_)->data;
		if (_tmp5_ == data) {
			GList* _tmp6_;
			gconstpointer _tmp7_;
			GList* _tmp8_;
			_tmp6_ = l;
			_tmp7_ = ((GList*) _tmp6_)->data;
			func (_tmp7_);
			_tmp8_ = l;
			g_queue_delete_link (self, (GList*) _tmp8_);
		}
		_tmp9_ = next;
		l = _tmp9_;
	}
	result = old_length - self->length;
	return result;
}

void
test_gqueue (void)
{
	{
		GQueue* queue = NULL;
		GQueue* _tmp0_;
		Foo* foo = NULL;
		Foo* _tmp1_;
		Foo* _tmp2_;
		_tmp0_ = g_queue_new ();
		queue = _tmp0_;
		_tmp1_ = foo_new ();
		foo = _tmp1_;
		_tmp2_ = _g_object_ref0 (foo);
		g_queue_push_head (queue, _tmp2_);
		_vala_assert (queue->length == ((guint) 1), "queue.length == 1");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 2), "foo.ref_count == 2");
		vala_g_queue_remove_full (queue, foo, _g_object_unref0_);
		_vala_assert (queue->length == ((guint) 0), "queue.length == 0");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_g_object_unref0 (foo);
		(queue == NULL) ? NULL : (queue = (_g_queue_free__g_object_unref0_ (queue), NULL));
	}
	{
		GQueue* queue = NULL;
		GQueue* _tmp3_;
		Foo* foo = NULL;
		Foo* _tmp4_;
		Foo* _tmp5_;
		Foo* _tmp6_;
		_tmp3_ = g_queue_new ();
		queue = _tmp3_;
		_tmp4_ = foo_new ();
		foo = _tmp4_;
		_tmp5_ = _g_object_ref0 (foo);
		g_queue_push_head (queue, _tmp5_);
		_tmp6_ = _g_object_ref0 (foo);
		g_queue_push_head (queue, _tmp6_);
		_vala_assert (queue->length == ((guint) 2), "queue.length == 2");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 3), "foo.ref_count == 3");
		vala_g_queue_remove_all_full (queue, foo, _g_object_unref0_);
		_vala_assert (queue->length == ((guint) 0), "queue.length == 0");
		_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (foo, G_TYPE_OBJECT, GObject)->ref_count == ((guint) 1), "foo.ref_count == 1");
		_g_object_unref0 (foo);
		(queue == NULL) ? NULL : (queue = (_g_queue_free__g_object_unref0_ (queue), NULL));
	}
	{
		GQueue* queue = NULL;
		GQueue* _tmp7_;
		const gchar* s = NULL;
		_tmp7_ = g_queue_new ();
		queue = _tmp7_;
		s = "foo";
		g_queue_push_head (queue, s);
		_vala_assert (queue->length == ((guint) 1), "queue.length == 1");
		g_queue_remove (queue, s);
		_vala_assert (queue->length == ((guint) 0), "queue.length == 0");
		g_queue_push_head (queue, s);
		g_queue_remove_all (queue, s);
		_vala_assert (queue->length == ((guint) 0), "queue.length == 0");
		(queue == NULL) ? NULL : (queue = (g_queue_free (queue), NULL));
	}
}

static void
_vala_main (void)
{
	test_glist ();
	test_gslist ();
	test_gqueue ();
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

