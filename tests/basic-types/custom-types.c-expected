/* basic_types_custom_types.c generated by valac, the Vala compiler
 * generated from basic_types_custom_types.vala, do not modify */

#include <stdint.h>
#include <stdbool.h>
#include <glib.h>
#include <float.h>
#include <math.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

typedef int32_t foo_t;
typedef uint64_t faz_t;
typedef float bar_t;
typedef double baz_t;
typedef bool manam_t;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	{
		foo_t foo = {0};
		foo = (foo_t) G_MAXINT32;
		_vala_assert (foo == ((foo_t) G_MAXINT32), "foo == int32.MAX");
	}
	{
		faz_t faz = {0};
		faz = (faz_t) G_MAXUINT64;
		_vala_assert (faz == ((faz_t) G_MAXUINT64), "faz == uint64.MAX");
	}
	{
		bar_t bar = {0};
		bar = (bar_t) FLT_MAX;
		_vala_assert (bar == ((bar_t) FLT_MAX), "bar == float.MAX");
	}
	{
		baz_t baz = {0};
		baz = (baz_t) DBL_MAX;
		_vala_assert (baz == ((baz_t) DBL_MAX), "baz == double.MAX");
	}
	{
		manam_t manam = {0};
		manam = (manam_t) TRUE;
		_vala_assert ((gboolean) manam, "manam");
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

