/* basic_types_pointers.c generated by valac, the Vala compiler
 * generated from basic_types_pointers.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_SIMPLE_STRUCT (simple_struct_get_type ())
typedef struct _SimpleStruct SimpleStruct;
#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _SimpleStruct {
	gint field;
};

VALA_EXTERN GType simple_struct_get_type (void) G_GNUC_CONST ;
VALA_EXTERN SimpleStruct* simple_struct_dup (const SimpleStruct* self);
VALA_EXTERN void simple_struct_free (SimpleStruct* self);
VALA_EXTERN gint simple_struct_test (SimpleStruct *self);
static void simple_struct_main (void);
static void simple_struct_test_pointers_element_access (void);
static void simple_struct_test_pointers_return_value (void);
static gint* simple_struct_return_pointer (void);

static const gint SIMPLE_STRUCT_array[1] = {42};

gint
simple_struct_test (SimpleStruct *self)
{
	gint result;
	result = (*self).field;
	return result;
}

static void
simple_struct_main (void)
{
	SimpleStruct* st = NULL;
	SimpleStruct* _tmp0_;
	_tmp0_ = g_new0 (SimpleStruct, 1);
	st = _tmp0_;
	(*st).field = 1;
	_vala_assert ((*st).field == simple_struct_test (st), "st->field == st->test ()");
	_g_free0 (st);
	simple_struct_test_pointers_element_access ();
	simple_struct_test_pointers_return_value ();
}

int
main (int argc,
      char ** argv)
{
	simple_struct_main ();
	return 0;
}

static void
simple_struct_test_pointers_element_access (void)
{
	gint* array = NULL;
	gint* _tmp0_;
	gint _tmp1_;
	_tmp0_ = g_new0 (gint, 42);
	array = _tmp0_;
	array[0] = 23;
	_tmp1_ = array[0];
	_vala_assert (_tmp1_ == 23, "array[0] == 23");
	_g_free0 (array);
}

static gint*
simple_struct_return_pointer (void)
{
	gint* result;
	result = SIMPLE_STRUCT_array;
	return result;
}

static void
simple_struct_test_pointers_return_value (void)
{
	gint i = 0;
	gint* _tmp0_;
	gint _tmp1_;
	_tmp0_ = simple_struct_return_pointer ();
	_tmp1_ = _tmp0_[0];
	i = _tmp1_;
	_vala_assert (i == 42, "i == 42");
}

SimpleStruct*
simple_struct_dup (const SimpleStruct* self)
{
	SimpleStruct* dup;
	dup = g_new0 (SimpleStruct, 1);
	memcpy (dup, self, sizeof (SimpleStruct));
	return dup;
}

void
simple_struct_free (SimpleStruct* self)
{
	g_free (self);
}

static GType
simple_struct_get_type_once (void)
{
	GType simple_struct_type_id;
	simple_struct_type_id = g_boxed_type_register_static ("SimpleStruct", (GBoxedCopyFunc) simple_struct_dup, (GBoxedFreeFunc) simple_struct_free);
	return simple_struct_type_id;
}

GType
simple_struct_get_type (void)
{
	static volatile gsize simple_struct_type_id__once = 0;
	if (g_once_init_enter (&simple_struct_type_id__once)) {
		GType simple_struct_type_id;
		simple_struct_type_id = simple_struct_get_type_once ();
		g_once_init_leave (&simple_struct_type_id__once, simple_struct_type_id);
	}
	return simple_struct_type_id__once;
}

