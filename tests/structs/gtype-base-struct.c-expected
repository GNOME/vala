/* structs_gtype_base_struct.c generated by valac, the Vala compiler
 * generated from structs_gtype_base_struct.vala, do not modify */

#include <glib.h>
#include <float.h>
#include <math.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef gint foo_int;
typedef guint foo_uint;
typedef gint64 foo_int64;
typedef guint64 foo_uint64;
typedef glong foo_long;
typedef gulong foo_ulong;
typedef gboolean foo_bool;
typedef gchar foo_char;
typedef guchar foo_uchar;
typedef gfloat foo_float;
typedef gdouble foo_double;
typedef GType foo_gtype;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_PROP_INT_PROPERTY,
	FOO_PROP_UINT_PROPERTY,
	FOO_PROP_INT64_PROPERTY,
	FOO_PROP_UINT64_PROPERTY,
	FOO_PROP_LONG_PROPERTY,
	FOO_PROP_ULONG_PROPERTY,
	FOO_PROP_BOOL_PROPERTY,
	FOO_PROP_CHAR_PROPERTY,
	FOO_PROP_UCHAR_PROPERTY,
	FOO_PROP_FLOAT_PROPERTY,
	FOO_PROP_DOUBLE_PROPERTY,
	FOO_PROP_GTYPE_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooPrivate {
	foo_int _prop_int;
	foo_uint _prop_uint;
	foo_int64 _prop_int64;
	foo_uint64 _prop_uint64;
	foo_long _prop_long;
	foo_ulong _prop_ulong;
	foo_bool _prop_bool;
	foo_char _prop_char;
	foo_uchar _prop_uchar;
	foo_float _prop_float;
	foo_double _prop_double;
	foo_gtype _prop_gtype;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
VALA_EXTERN foo_int foo_get_prop_int (Foo* self);
VALA_EXTERN void foo_set_prop_int (Foo* self,
                       foo_int value);
VALA_EXTERN foo_uint foo_get_prop_uint (Foo* self);
VALA_EXTERN void foo_set_prop_uint (Foo* self,
                        foo_uint value);
VALA_EXTERN foo_int64 foo_get_prop_int64 (Foo* self);
VALA_EXTERN void foo_set_prop_int64 (Foo* self,
                         foo_int64 value);
VALA_EXTERN foo_uint64 foo_get_prop_uint64 (Foo* self);
VALA_EXTERN void foo_set_prop_uint64 (Foo* self,
                          foo_uint64 value);
VALA_EXTERN foo_long foo_get_prop_long (Foo* self);
VALA_EXTERN void foo_set_prop_long (Foo* self,
                        foo_long value);
VALA_EXTERN foo_ulong foo_get_prop_ulong (Foo* self);
VALA_EXTERN void foo_set_prop_ulong (Foo* self,
                         foo_ulong value);
VALA_EXTERN foo_bool foo_get_prop_bool (Foo* self);
VALA_EXTERN void foo_set_prop_bool (Foo* self,
                        foo_bool value);
VALA_EXTERN foo_char foo_get_prop_char (Foo* self);
VALA_EXTERN void foo_set_prop_char (Foo* self,
                        foo_char value);
VALA_EXTERN foo_uchar foo_get_prop_uchar (Foo* self);
VALA_EXTERN void foo_set_prop_uchar (Foo* self,
                         foo_uchar value);
VALA_EXTERN foo_float foo_get_prop_float (Foo* self);
VALA_EXTERN void foo_set_prop_float (Foo* self,
                         foo_float value);
VALA_EXTERN foo_double foo_get_prop_double (Foo* self);
VALA_EXTERN void foo_set_prop_double (Foo* self,
                          foo_double value);
VALA_EXTERN foo_gtype foo_get_prop_gtype (Foo* self);
VALA_EXTERN void foo_set_prop_gtype (Foo* self,
                         foo_gtype value);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
static void _vala_main (void);

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

foo_int
foo_get_prop_int (Foo* self)
{
	foo_int result;
	g_return_val_if_fail (IS_FOO (self), 0);
	result = self->priv->_prop_int;
	return result;
}

void
foo_set_prop_int (Foo* self,
                  foo_int value)
{
	foo_int old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_int (self);
	if (old_value != value) {
		self->priv->_prop_int = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_INT_PROPERTY]);
	}
}

foo_uint
foo_get_prop_uint (Foo* self)
{
	foo_uint result;
	g_return_val_if_fail (IS_FOO (self), 0U);
	result = self->priv->_prop_uint;
	return result;
}

void
foo_set_prop_uint (Foo* self,
                   foo_uint value)
{
	foo_uint old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_uint (self);
	if (old_value != value) {
		self->priv->_prop_uint = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_UINT_PROPERTY]);
	}
}

foo_int64
foo_get_prop_int64 (Foo* self)
{
	foo_int64 result;
	g_return_val_if_fail (IS_FOO (self), 0LL);
	result = self->priv->_prop_int64;
	return result;
}

void
foo_set_prop_int64 (Foo* self,
                    foo_int64 value)
{
	foo_int64 old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_int64 (self);
	if (old_value != value) {
		self->priv->_prop_int64 = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_INT64_PROPERTY]);
	}
}

foo_uint64
foo_get_prop_uint64 (Foo* self)
{
	foo_uint64 result;
	g_return_val_if_fail (IS_FOO (self), 0ULL);
	result = self->priv->_prop_uint64;
	return result;
}

void
foo_set_prop_uint64 (Foo* self,
                     foo_uint64 value)
{
	foo_uint64 old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_uint64 (self);
	if (old_value != value) {
		self->priv->_prop_uint64 = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_UINT64_PROPERTY]);
	}
}

foo_long
foo_get_prop_long (Foo* self)
{
	foo_long result;
	g_return_val_if_fail (IS_FOO (self), 0L);
	result = self->priv->_prop_long;
	return result;
}

void
foo_set_prop_long (Foo* self,
                   foo_long value)
{
	foo_long old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_long (self);
	if (old_value != value) {
		self->priv->_prop_long = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_LONG_PROPERTY]);
	}
}

foo_ulong
foo_get_prop_ulong (Foo* self)
{
	foo_ulong result;
	g_return_val_if_fail (IS_FOO (self), 0UL);
	result = self->priv->_prop_ulong;
	return result;
}

void
foo_set_prop_ulong (Foo* self,
                    foo_ulong value)
{
	foo_ulong old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_ulong (self);
	if (old_value != value) {
		self->priv->_prop_ulong = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_ULONG_PROPERTY]);
	}
}

foo_bool
foo_get_prop_bool (Foo* self)
{
	foo_bool result;
	g_return_val_if_fail (IS_FOO (self), FALSE);
	result = self->priv->_prop_bool;
	return result;
}

void
foo_set_prop_bool (Foo* self,
                   foo_bool value)
{
	foo_bool old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_bool (self);
	if (old_value != value) {
		self->priv->_prop_bool = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_BOOL_PROPERTY]);
	}
}

foo_char
foo_get_prop_char (Foo* self)
{
	foo_char result;
	g_return_val_if_fail (IS_FOO (self), '\0');
	result = self->priv->_prop_char;
	return result;
}

void
foo_set_prop_char (Foo* self,
                   foo_char value)
{
	foo_char old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_char (self);
	if (old_value != value) {
		self->priv->_prop_char = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_CHAR_PROPERTY]);
	}
}

foo_uchar
foo_get_prop_uchar (Foo* self)
{
	foo_uchar result;
	g_return_val_if_fail (IS_FOO (self), '\0');
	result = self->priv->_prop_uchar;
	return result;
}

void
foo_set_prop_uchar (Foo* self,
                    foo_uchar value)
{
	foo_uchar old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_uchar (self);
	if (old_value != value) {
		self->priv->_prop_uchar = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_UCHAR_PROPERTY]);
	}
}

foo_float
foo_get_prop_float (Foo* self)
{
	foo_float result;
	g_return_val_if_fail (IS_FOO (self), 0.0F);
	result = self->priv->_prop_float;
	return result;
}

void
foo_set_prop_float (Foo* self,
                    foo_float value)
{
	foo_float old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_float (self);
	if (old_value != value) {
		self->priv->_prop_float = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_FLOAT_PROPERTY]);
	}
}

foo_double
foo_get_prop_double (Foo* self)
{
	foo_double result;
	g_return_val_if_fail (IS_FOO (self), 0.0);
	result = self->priv->_prop_double;
	return result;
}

void
foo_set_prop_double (Foo* self,
                     foo_double value)
{
	foo_double old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_double (self);
	if (old_value != value) {
		self->priv->_prop_double = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_DOUBLE_PROPERTY]);
	}
}

foo_gtype
foo_get_prop_gtype (Foo* self)
{
	foo_gtype result;
	g_return_val_if_fail (IS_FOO (self), 0UL);
	result = self->priv->_prop_gtype;
	return result;
}

void
foo_set_prop_gtype (Foo* self,
                    foo_gtype value)
{
	foo_gtype old_value;
	g_return_if_fail (IS_FOO (self));
	old_value = foo_get_prop_gtype (self);
	if (old_value != value) {
		self->priv->_prop_gtype = value;
		g_object_notify_by_pspec ((GObject *) self, foo_properties[FOO_PROP_GTYPE_PROPERTY]);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_INT_PROPERTY, foo_properties[FOO_PROP_INT_PROPERTY] = g_param_spec_int ("prop-int", "prop-int", "prop-int", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_UINT_PROPERTY, foo_properties[FOO_PROP_UINT_PROPERTY] = g_param_spec_uint ("prop-uint", "prop-uint", "prop-uint", 0, G_MAXUINT, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_INT64_PROPERTY, foo_properties[FOO_PROP_INT64_PROPERTY] = g_param_spec_int64 ("prop-int64", "prop-int64", "prop-int64", G_MININT64, G_MAXINT64, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_UINT64_PROPERTY, foo_properties[FOO_PROP_UINT64_PROPERTY] = g_param_spec_uint64 ("prop-uint64", "prop-uint64", "prop-uint64", 0, G_MAXUINT64, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_LONG_PROPERTY, foo_properties[FOO_PROP_LONG_PROPERTY] = g_param_spec_long ("prop-long", "prop-long", "prop-long", G_MINLONG, G_MAXLONG, 0L, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_ULONG_PROPERTY, foo_properties[FOO_PROP_ULONG_PROPERTY] = g_param_spec_ulong ("prop-ulong", "prop-ulong", "prop-ulong", 0, G_MAXULONG, 0UL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_BOOL_PROPERTY, foo_properties[FOO_PROP_BOOL_PROPERTY] = g_param_spec_boolean ("prop-bool", "prop-bool", "prop-bool", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_CHAR_PROPERTY, foo_properties[FOO_PROP_CHAR_PROPERTY] = g_param_spec_char ("prop-char", "prop-char", "prop-char", G_MININT8, G_MAXINT8, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_UCHAR_PROPERTY, foo_properties[FOO_PROP_UCHAR_PROPERTY] = g_param_spec_uchar ("prop-uchar", "prop-uchar", "prop-uchar", 0, G_MAXUINT8, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_FLOAT_PROPERTY, foo_properties[FOO_PROP_FLOAT_PROPERTY] = g_param_spec_float ("prop-float", "prop-float", "prop-float", -G_MAXFLOAT, G_MAXFLOAT, 0.0F, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_DOUBLE_PROPERTY, foo_properties[FOO_PROP_DOUBLE_PROPERTY] = g_param_spec_double ("prop-double", "prop-double", "prop-double", -G_MAXDOUBLE, G_MAXDOUBLE, 0.0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_PROP_GTYPE_PROPERTY, foo_properties[FOO_PROP_GTYPE_PROPERTY] = g_param_spec_gtype ("prop-gtype", "prop-gtype", "prop-gtype", G_TYPE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_PROP_INT_PROPERTY:
		g_value_set_int (value, foo_get_prop_int (self));
		break;
		case FOO_PROP_UINT_PROPERTY:
		g_value_set_uint (value, foo_get_prop_uint (self));
		break;
		case FOO_PROP_INT64_PROPERTY:
		g_value_set_int64 (value, foo_get_prop_int64 (self));
		break;
		case FOO_PROP_UINT64_PROPERTY:
		g_value_set_uint64 (value, foo_get_prop_uint64 (self));
		break;
		case FOO_PROP_LONG_PROPERTY:
		g_value_set_long (value, foo_get_prop_long (self));
		break;
		case FOO_PROP_ULONG_PROPERTY:
		g_value_set_ulong (value, foo_get_prop_ulong (self));
		break;
		case FOO_PROP_BOOL_PROPERTY:
		g_value_set_boolean (value, foo_get_prop_bool (self));
		break;
		case FOO_PROP_CHAR_PROPERTY:
		g_value_set_schar (value, foo_get_prop_char (self));
		break;
		case FOO_PROP_UCHAR_PROPERTY:
		g_value_set_uchar (value, foo_get_prop_uchar (self));
		break;
		case FOO_PROP_FLOAT_PROPERTY:
		g_value_set_float (value, foo_get_prop_float (self));
		break;
		case FOO_PROP_DOUBLE_PROPERTY:
		g_value_set_double (value, foo_get_prop_double (self));
		break;
		case FOO_PROP_GTYPE_PROPERTY:
		g_value_set_gtype (value, foo_get_prop_gtype (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_PROP_INT_PROPERTY:
		foo_set_prop_int (self, g_value_get_int (value));
		break;
		case FOO_PROP_UINT_PROPERTY:
		foo_set_prop_uint (self, g_value_get_uint (value));
		break;
		case FOO_PROP_INT64_PROPERTY:
		foo_set_prop_int64 (self, g_value_get_int64 (value));
		break;
		case FOO_PROP_UINT64_PROPERTY:
		foo_set_prop_uint64 (self, g_value_get_uint64 (value));
		break;
		case FOO_PROP_LONG_PROPERTY:
		foo_set_prop_long (self, g_value_get_long (value));
		break;
		case FOO_PROP_ULONG_PROPERTY:
		foo_set_prop_ulong (self, g_value_get_ulong (value));
		break;
		case FOO_PROP_BOOL_PROPERTY:
		foo_set_prop_bool (self, g_value_get_boolean (value));
		break;
		case FOO_PROP_CHAR_PROPERTY:
		foo_set_prop_char (self, g_value_get_schar (value));
		break;
		case FOO_PROP_UCHAR_PROPERTY:
		foo_set_prop_uchar (self, g_value_get_uchar (value));
		break;
		case FOO_PROP_FLOAT_PROPERTY:
		foo_set_prop_float (self, g_value_get_float (value));
		break;
		case FOO_PROP_DOUBLE_PROPERTY:
		foo_set_prop_double (self, g_value_get_double (value));
		break;
		case FOO_PROP_GTYPE_PROPERTY:
		foo_set_prop_gtype (self, g_value_get_gtype (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	{
		_vala_assert (G_TYPE_INT == G_TYPE_INT, "typeof (foo_int) == GLib.Type.INT");
		_vala_assert (G_TYPE_UINT == G_TYPE_UINT, "typeof (foo_uint) == GLib.Type.UINT");
		_vala_assert (G_TYPE_INT64 == G_TYPE_INT64, "typeof (foo_int64) == GLib.Type.INT64");
		_vala_assert (G_TYPE_UINT64 == G_TYPE_UINT64, "typeof (foo_uint64) == GLib.Type.UINT64");
		_vala_assert (G_TYPE_LONG == G_TYPE_LONG, "typeof (foo_long) == GLib.Type.LONG");
		_vala_assert (G_TYPE_ULONG == G_TYPE_ULONG, "typeof (foo_ulong) == GLib.Type.ULONG");
		_vala_assert (G_TYPE_BOOLEAN == G_TYPE_BOOLEAN, "typeof (foo_bool) == GLib.Type.BOOLEAN");
		_vala_assert (G_TYPE_CHAR == G_TYPE_CHAR, "typeof (foo_char) == GLib.Type.CHAR");
		_vala_assert (G_TYPE_UCHAR == G_TYPE_UCHAR, "typeof (foo_uchar) == GLib.Type.UCHAR");
		_vala_assert (G_TYPE_FLOAT == G_TYPE_FLOAT, "typeof (foo_float) == GLib.Type.FLOAT");
		_vala_assert (G_TYPE_DOUBLE == G_TYPE_DOUBLE, "typeof (foo_double) == GLib.Type.DOUBLE");
		_vala_assert (G_TYPE_GTYPE == G_TYPE_GTYPE, "typeof (foo_gtype) == typeof (GLib.Type)");
	}
	{
		Foo* foo = NULL;
		Foo* _tmp0_;
		_tmp0_ = foo_new ();
		foo = _tmp0_;
		_g_object_unref0 (foo);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

