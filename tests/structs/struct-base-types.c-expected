/* structs_struct_base_types.c generated by valac, the Vala compiler
 * generated from structs_struct_base_types.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_BAR (bar_get_type ())
typedef Foo Bar;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gchar* s;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Foo, foo_destroy)
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Bar* bar_dup (const Bar* self);
VALA_EXTERN void bar_free (Bar* self);
VALA_EXTERN void bar_copy (const Bar* self,
               Bar* dest);
VALA_EXTERN void bar_destroy (Bar* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Bar, bar_destroy)
static void _vala_main (void);

void
foo_copy (const Foo* self,
          Foo* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
}

void
foo_destroy (Foo* self)
{
	_g_free0 ((*self).s);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

void
bar_copy (const Bar* self,
          Bar* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
}

void
bar_destroy (Bar* self)
{
	foo_destroy (self);
}

Bar*
bar_dup (const Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	bar_copy (self, dup);
	return dup;
}

void
bar_free (Bar* self)
{
	bar_destroy (self);
	g_free (self);
}

static GType
bar_get_type_once (void)
{
	GType bar_type_id;
	bar_type_id = g_boxed_type_register_static ("Bar", (GBoxedCopyFunc) bar_dup, (GBoxedFreeFunc) bar_free);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_main (void)
{
	{
		Bar bar = {0};
		gchar* _tmp0_;
		Bar _tmp1_ = {0};
		Foo foo = {0};
		Bar _tmp2_;
		Foo _tmp3_;
		Foo _tmp4_ = {0};
		Bar _tmp5_;
		const gchar* _tmp6_;
		Bar _tmp7_;
		const gchar* _tmp8_;
		Foo _tmp9_;
		const gchar* _tmp10_;
		void* s1 = NULL;
		Foo _tmp11_;
		const gchar* _tmp12_;
		void* s2 = NULL;
		Bar _tmp13_;
		const gchar* _tmp14_;
		_tmp0_ = g_strdup ("bar");
		_g_free0 (_tmp1_.s);
		_tmp1_.s = _tmp0_;
		bar = _tmp1_;
		_tmp2_ = bar;
		_tmp3_ = _tmp2_;
		foo_copy (&_tmp3_, &_tmp4_);
		foo = _tmp4_;
		_tmp5_ = bar;
		_tmp6_ = _tmp5_.s;
		_vala_assert (g_strcmp0 (_tmp6_, "bar") == 0, "bar.s == \"bar\"");
		_tmp7_ = bar;
		_tmp8_ = _tmp7_.s;
		_tmp9_ = foo;
		_tmp10_ = _tmp9_.s;
		_vala_assert (g_strcmp0 (_tmp8_, _tmp10_) == 0, "bar.s == foo.s");
		_tmp11_ = foo;
		_tmp12_ = _tmp11_.s;
		s1 = _tmp12_;
		_tmp13_ = bar;
		_tmp14_ = _tmp13_.s;
		s2 = _tmp14_;
		_vala_assert (s1 != s2, "s1 != s2");
		foo_destroy (&foo);
		bar_destroy (&bar);
	}
	{
		Foo foo = {0};
		gchar* _tmp15_;
		Foo _tmp16_ = {0};
		Bar bar = {0};
		Foo _tmp17_;
		Bar _tmp18_;
		Bar _tmp19_ = {0};
		Foo _tmp20_;
		const gchar* _tmp21_;
		Foo _tmp22_;
		const gchar* _tmp23_;
		Bar _tmp24_;
		const gchar* _tmp25_;
		void* s1 = NULL;
		Foo _tmp26_;
		const gchar* _tmp27_;
		void* s2 = NULL;
		Bar _tmp28_;
		const gchar* _tmp29_;
		_tmp15_ = g_strdup ("foo");
		_g_free0 (_tmp16_.s);
		_tmp16_.s = _tmp15_;
		foo = _tmp16_;
		_tmp17_ = foo;
		_tmp18_ = _tmp17_;
		bar_copy (&_tmp18_, &_tmp19_);
		bar = _tmp19_;
		_tmp20_ = foo;
		_tmp21_ = _tmp20_.s;
		_vala_assert (g_strcmp0 (_tmp21_, "foo") == 0, "foo.s == \"foo\"");
		_tmp22_ = foo;
		_tmp23_ = _tmp22_.s;
		_tmp24_ = bar;
		_tmp25_ = _tmp24_.s;
		_vala_assert (g_strcmp0 (_tmp23_, _tmp25_) == 0, "foo.s == bar.s");
		_tmp26_ = foo;
		_tmp27_ = _tmp26_.s;
		s1 = _tmp27_;
		_tmp28_ = bar;
		_tmp29_ = _tmp28_.s;
		s2 = _tmp29_;
		_vala_assert (s1 != s2, "s1 != s2");
		bar_destroy (&bar);
		foo_destroy (&foo);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

