/* structs_bug694140.c generated by valac, the Vala compiler
 * generated from structs_bug694140.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef gint Foo;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN gchar** colors;
VALA_EXTERN gint colors_length1;
gchar** colors = NULL;
gint colors_length1 = 0;
static gint _colors_size_ = 0;

VALA_EXTERN const gchar* foo_get_bar (Foo self);
VALA_EXTERN void foo_set_bar (Foo self,
                  const gchar* value);
static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

const gchar*
foo_get_bar (Foo self)
{
	const gchar* result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	const gchar* _tmp1_;
	_tmp0_ = colors;
	_tmp0__length1 = colors_length1;
	_tmp1_ = _tmp0_[(gint) self];
	result = _tmp1_;
	return result;
}

void
foo_set_bar (Foo self,
             const gchar* value)
{
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar* _tmp1_;
	_tmp0_ = colors;
	_tmp0__length1 = colors_length1;
	_tmp1_ = g_strdup (value);
	_g_free0 (_tmp0_[(gint) self]);
	_tmp0_[(gint) self] = _tmp1_;
}

static void
_vala_main (void)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar** _tmp4_;
	Foo foo = 0;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	_tmp0_ = g_strdup ("black");
	_tmp1_ = g_strdup ("red");
	_tmp2_ = g_strdup ("green");
	_tmp3_ = g_strdup ("blue");
	_tmp4_ = g_new0 (gchar*, 4 + 1);
	_tmp4_[0] = _tmp0_;
	_tmp4_[1] = _tmp1_;
	_tmp4_[2] = _tmp2_;
	_tmp4_[3] = _tmp3_;
	colors = (_vala_array_free (colors, colors_length1, (GDestroyNotify) g_free), NULL);
	colors = _tmp4_;
	colors_length1 = 4;
	_colors_size_ = colors_length1;
	foo = (Foo) 1;
	_tmp5_ = foo_get_bar (foo);
	_tmp6_ = _tmp5_;
	_vala_assert (g_strcmp0 (_tmp6_, "red") == 0, "foo.bar == \"red\"");
	foo_set_bar (foo, "white");
	_tmp7_ = foo_get_bar (foo);
	_tmp8_ = _tmp7_;
	_vala_assert (g_strcmp0 (_tmp8_, "white") == 0, "foo.bar == \"white\"");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

