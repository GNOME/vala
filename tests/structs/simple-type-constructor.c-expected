/* structs_simple_type_constructor.c generated by valac, the Vala compiler
 * generated from structs_simple_type_constructor.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint i;
	guint j;
};

VALA_EXTERN Foo foo_init (void);
static void _vala_main (void);

Foo
foo_init (void)
{
	Foo self = {0};
	self.i = 42;
	self.j = 4711U;
	return self;
}

static void
_vala_main (void)
{
	Foo foo = {0};
	Foo _tmp0_;
	_tmp0_ = foo_init ();
	foo = _tmp0_;
	_vala_assert (foo.i == 42, "foo.i == 42");
	_vala_assert (foo.j == 4711U, "foo.j == 4711U");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

