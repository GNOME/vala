/* structs_bug596144.c generated by valac, the Vala compiler
 * generated from structs_bug596144.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject* o;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Foo, foo_destroy)
static void _vala_main (void);

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

void
foo_copy (const Foo* self,
          Foo* dest)
{
	GObject* _tmp0_;
	GObject* _tmp1_;
	_tmp0_ = (*self).o;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	_g_object_unref0 ((*dest).o);
	(*dest).o = _tmp1_;
}

void
foo_destroy (Foo* self)
{
	_g_object_unref0 ((*self).o);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_main (void)
{
	GObject* o = NULL;
	GObject* _tmp0_;
	Foo foo = {0};
	GObject* _tmp1_;
	Foo _tmp2_ = {0};
	Foo bar = {0};
	Foo _tmp3_;
	Foo _tmp4_;
	GObject* _tmp5_;
	Foo _tmp6_;
	GObject* _tmp7_;
	_tmp0_ = g_object_new (G_TYPE_OBJECT, NULL);
	o = _tmp0_;
	_tmp1_ = _g_object_ref0 (o);
	memset (&_tmp2_, 0, sizeof (Foo));
	_g_object_unref0 (_tmp2_.o);
	_tmp2_.o = _tmp1_;
	foo = _tmp2_;
	_tmp3_ = foo;
	memset (&foo, 0, sizeof (Foo));
	bar = _tmp3_;
	_tmp4_ = foo;
	_tmp5_ = _tmp4_.o;
	_vala_assert (_tmp5_ == NULL, "foo.o == null");
	_tmp6_ = bar;
	_tmp7_ = _tmp6_.o;
	_vala_assert (_tmp7_ == o, "bar.o == o");
	foo_destroy (&bar);
	foo_destroy (&foo);
	_g_object_unref0 (o);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

