/* structs_simple_type_default_value.c generated by valac, the Vala compiler
 * generated from structs_simple_type_default_value.vala, do not modify */

#if !defined VALA_STRICT_C && defined __GNUC__ && __GNUC__ >= 14
#pragma GCC diagnostic warning "-Wimplicit-function-declaration"
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#pragma GCC diagnostic warning "-Wint-conversion"
#pragma GCC diagnostic warning "-Wreturn-mismatch"
#endif
#if !defined VALA_STRICT_C && defined __clang__ && __clang_major__ >= 16
#pragma clang diagnostic ignored "-Wimplicit-function-declaration"
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wreturn-type"
#endif

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint i;
};

VALA_EXTERN Foo bar (GObject* o);
static void _vala_main (void);

Foo
bar (GObject* o)
{
	Foo _tmp0_ = (Foo) { .i = 23 };
	Foo result;
	g_return_val_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (o, G_TYPE_OBJECT), (Foo) { .i = 23 });
	result = _tmp0_;
	return result;
}

static void
_vala_main (void)
{
	Foo foo = (Foo) { .i = 23 };
	Foo _tmp0_ = (Foo) { .i = 23 };
	foo = _tmp0_;
	_vala_assert (foo.i == 23, "foo.i == 23");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

