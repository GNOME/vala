/* structs_properties.c generated by valac, the Vala compiler
 * generated from structs_properties.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint _i;
	gchar* _s;
	gchar* _os;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Foo, foo_destroy)
VALA_EXTERN gint foo_get_i (Foo* self);
VALA_EXTERN void foo_set_i (Foo* self,
                gint value);
VALA_EXTERN const gchar* foo_get_s (Foo* self);
VALA_EXTERN void foo_set_s (Foo* self,
                const gchar* value);
VALA_EXTERN gchar* foo_get_os (Foo* self);
VALA_EXTERN void foo_set_os (Foo* self,
                 const gchar* value);
VALA_EXTERN const gchar* foo_get_s_get (Foo* self);
VALA_EXTERN void foo_set_s_set (Foo* self,
                    const gchar* value);
static void _vala_main (void);

gint
foo_get_i (Foo* self)
{
	gint result;
	g_return_val_if_fail (self != NULL, 0);
	result = (*self)._i;
	return result;
}

void
foo_set_i (Foo* self,
           gint value)
{
	g_return_if_fail (self != NULL);
	(*self)._i = value;
}

const gchar*
foo_get_s (Foo* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = (*self)._s;
	result = _tmp0_;
	return result;
}

void
foo_set_s (Foo* self,
           const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 ((*self)._s);
	(*self)._s = _tmp0_;
}

gchar*
foo_get_os (Foo* self)
{
	gchar* result;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = (*self)._os;
	_tmp1_ = g_strdup (_tmp0_);
	result = _tmp1_;
	return result;
}

void
foo_set_os (Foo* self,
            const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 ((*self)._os);
	(*self)._os = _tmp0_;
}

const gchar*
foo_get_s_get (Foo* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = (*self)._s;
	result = _tmp0_;
	return result;
}

void
foo_set_s_set (Foo* self,
               const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 ((*self)._s);
	(*self)._s = _tmp0_;
}

void
foo_copy (const Foo* self,
          Foo* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	(*dest)._i = (*self)._i;
	_tmp0_ = (*self)._s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest)._s);
	(*dest)._s = _tmp1_;
	_tmp2_ = (*self)._os;
	_tmp3_ = g_strdup (_tmp2_);
	_g_free0 ((*dest)._os);
	(*dest)._os = _tmp3_;
}

void
foo_destroy (Foo* self)
{
	_g_free0 ((*self)._s);
	_g_free0 ((*self)._os);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_main (void)
{
	{
		Foo foo = {0};
		gchar* _tmp0_;
		gchar* _tmp1_;
		Foo _tmp2_ = {0};
		Foo _tmp3_;
		gint _tmp4_;
		gint _tmp5_;
		Foo _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		Foo _tmp9_;
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		Foo _tmp12_;
		gchar* _tmp13_;
		gchar* _tmp14_;
		gchar* _tmp15_;
		Foo _tmp16_;
		gint _tmp17_;
		gint _tmp18_;
		Foo _tmp19_;
		const gchar* _tmp20_;
		const gchar* _tmp21_;
		Foo _tmp22_;
		const gchar* _tmp23_;
		const gchar* _tmp24_;
		Foo _tmp25_;
		gchar* _tmp26_;
		gchar* _tmp27_;
		gchar* _tmp28_;
		_tmp0_ = g_strdup ("foo");
		_tmp1_ = g_strdup ("bar");
		_tmp2_._i = 23;
		_g_free0 (_tmp2_._s);
		_tmp2_._s = _tmp0_;
		_g_free0 (_tmp2_._os);
		_tmp2_._os = _tmp1_;
		foo = _tmp2_;
		_tmp3_ = foo;
		_tmp4_ = foo_get_i (&_tmp3_);
		_tmp5_ = _tmp4_;
		_vala_assert (_tmp5_ == 23, "foo.i == 23");
		_tmp6_ = foo;
		_tmp7_ = foo_get_s (&_tmp6_);
		_tmp8_ = _tmp7_;
		_vala_assert (g_strcmp0 (_tmp8_, "foo") == 0, "foo.s == \"foo\"");
		_tmp9_ = foo;
		_tmp10_ = foo_get_s_get (&_tmp9_);
		_tmp11_ = _tmp10_;
		_vala_assert (g_strcmp0 (_tmp11_, "foo") == 0, "foo.s_get == \"foo\"");
		_tmp12_ = foo;
		_tmp13_ = foo_get_os (&_tmp12_);
		_tmp14_ = _tmp13_;
		_tmp15_ = _tmp14_;
		_vala_assert (g_strcmp0 (_tmp15_, "bar") == 0, "foo.os == \"bar\"");
		_g_free0 (_tmp15_);
		foo_set_i (&foo, 42);
		foo_set_s_set (&foo, "bar");
		foo_set_os (&foo, "manam");
		_tmp16_ = foo;
		_tmp17_ = foo_get_i (&_tmp16_);
		_tmp18_ = _tmp17_;
		_vala_assert (_tmp18_ == 42, "foo.i == 42");
		_tmp19_ = foo;
		_tmp20_ = foo_get_s (&_tmp19_);
		_tmp21_ = _tmp20_;
		_vala_assert (g_strcmp0 (_tmp21_, "bar") == 0, "foo.s == \"bar\"");
		_tmp22_ = foo;
		_tmp23_ = foo_get_s_get (&_tmp22_);
		_tmp24_ = _tmp23_;
		_vala_assert (g_strcmp0 (_tmp24_, "bar") == 0, "foo.s_get == \"bar\"");
		_tmp25_ = foo;
		_tmp26_ = foo_get_os (&_tmp25_);
		_tmp27_ = _tmp26_;
		_tmp28_ = _tmp27_;
		_vala_assert (g_strcmp0 (_tmp28_, "manam") == 0, "foo.os == \"manam\"");
		_g_free0 (_tmp28_);
		foo_destroy (&foo);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

