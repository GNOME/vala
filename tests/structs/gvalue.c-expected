/* structs_gvalue.c generated by valac, the Vala compiler
 * generated from structs_gvalue.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_free0(var) (var = (g_free (var), NULL))
#define __vala_GValue_free0(var) ((var == NULL) ? NULL : (var = (_vala_GValue_free (var), NULL)))

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
typedef struct _ParamSpecBar ParamSpecBar;

#define TYPE_MANAM (manam_get_type ())
#define MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAM, Manam))
#define IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAM))
#define MANAM_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_MANAM, ManamIface))

typedef struct _Manam Manam;
typedef struct _ManamIface ManamIface;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _bar_unref0(var) ((var == NULL) ? NULL : (var = (bar_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_FOO_STRUCT (foo_struct_get_type ())
typedef struct _FooStruct FooStruct;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Bar {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BarPrivate * priv;
	gint i;
};

struct _BarClass {
	GTypeClass parent_class;
	void (*finalize) (Bar *self);
};

struct _ParamSpecBar {
	GParamSpec parent_instance;
};

struct _ManamIface {
	GTypeInterface parent_iface;
};

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
	gint i;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooStruct {
	gint i;
};

static gpointer bar_parent_class = NULL;
static gpointer foo_parent_class = NULL;
static ManamIface * foo_manam_parent_iface = NULL;

VALA_EXTERN void test_value (void);
VALA_EXTERN void test_value_array (void);
static void _vala_GValue_array_free (GValue * array,
                              gssize array_length);
VALA_EXTERN void test_nullable_value (void);
static void _vala_GValue_free (GValue* self);
VALA_EXTERN void test_nullable_value_array (void);
VALA_EXTERN gpointer bar_ref (gpointer instance);
VALA_EXTERN void bar_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_bar (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_bar (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_bar (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_bar (const GValue* value);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, bar_unref)
VALA_EXTERN Bar* bar_new (void);
VALA_EXTERN Bar* bar_construct (GType object_type);
static void bar_finalize (Bar * obj);
static GType bar_get_type_once (void);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Manam, g_object_unref)
static GType manam_get_type_once (void);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
VALA_EXTERN void test_gtype (void);
VALA_EXTERN void test_gobject (void);
VALA_EXTERN void test_ginterface (void);
VALA_EXTERN void take_value (GValue* v);
VALA_EXTERN gboolean make_bool (void);
VALA_EXTERN GType foo_struct_get_type (void) G_GNUC_CONST ;
VALA_EXTERN FooStruct* foo_struct_dup (const FooStruct* self);
VALA_EXTERN void foo_struct_free (FooStruct* self);
VALA_EXTERN void test_try_cast_value (void);
static gchar** _vala_array_dup1 (gchar** self,
                          gssize length);
static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

void
test_value (void)
{
	GValue v1 = {0};
	GValue _tmp0_ = {0};
	gchar* s = NULL;
	gchar* _tmp1_;
	GValue v2 = {0};
	GValue _tmp2_ = {0};
	const gchar* _tmp3_;
	const gchar* s2 = NULL;
	GValue v3 = {0};
	GValue _tmp4_ = {0};
	const gchar* _tmp5_;
	g_value_init (&_tmp0_, G_TYPE_INT);
	g_value_set_int (&_tmp0_, 1);
	v1 = _tmp0_;
	_vala_assert (g_value_get_int (&v1) == 1, "v1.get_int() == 1");
	_tmp1_ = g_strdup ("hello");
	s = _tmp1_;
	g_value_init (&_tmp2_, G_TYPE_STRING);
	g_value_set_string (&_tmp2_, s);
	v2 = _tmp2_;
	_tmp3_ = g_value_get_string (&v2);
	_vala_assert (g_strcmp0 (_tmp3_, s) == 0, "v2.get_string () == s");
	s2 = "world";
	g_value_init (&_tmp4_, G_TYPE_STRING);
	g_value_set_string (&_tmp4_, s2);
	v3 = _tmp4_;
	_tmp5_ = g_value_get_string (&v3);
	_vala_assert (g_strcmp0 (_tmp5_, s2) == 0, "v3.get_string () == s2");
	G_IS_VALUE (&v3) ? (g_value_unset (&v3), NULL) : NULL;
	G_IS_VALUE (&v2) ? (g_value_unset (&v2), NULL) : NULL;
	_g_free0 (s);
	G_IS_VALUE (&v1) ? (g_value_unset (&v1), NULL) : NULL;
}

static void
_vala_GValue_array_free (GValue * array,
                         gssize array_length)
{
	if (array != NULL) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			g_value_unset (&array[i]);
		}
	}
	g_free (array);
}

void
test_value_array (void)
{
	gint* iarray = NULL;
	gint* _tmp0_;
	gint iarray_length1;
	gint _iarray_size_;
	GValue* viarray = NULL;
	GValue _tmp1_ = {0};
	GValue _tmp2_ = {0};
	GValue _tmp3_ = {0};
	GValue _tmp4_ = {0};
	GValue _tmp5_ = {0};
	GValue* _tmp6_;
	gint viarray_length1;
	gint _viarray_size_;
	GValue* _tmp7_;
	gint _tmp7__length1;
	gint* _tmp8_;
	gint _tmp8__length1;
	gchar** sarray = NULL;
	gchar* _tmp15_;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar** _tmp18_;
	gint sarray_length1;
	gint _sarray_size_;
	GValue* vsarray = NULL;
	GValue _tmp19_ = {0};
	GValue _tmp20_ = {0};
	GValue _tmp21_ = {0};
	GValue* _tmp22_;
	gint vsarray_length1;
	gint _vsarray_size_;
	GValue* _tmp23_;
	gint _tmp23__length1;
	gchar** _tmp24_;
	gint _tmp24__length1;
	_tmp0_ = g_new0 (gint, 5);
	_tmp0_[0] = 1;
	_tmp0_[1] = 2;
	_tmp0_[2] = 3;
	_tmp0_[3] = 4;
	_tmp0_[4] = 5;
	iarray = _tmp0_;
	iarray_length1 = 5;
	_iarray_size_ = iarray_length1;
	g_value_init (&_tmp1_, G_TYPE_INT);
	g_value_set_int (&_tmp1_, 1);
	g_value_init (&_tmp2_, G_TYPE_INT);
	g_value_set_int (&_tmp2_, 2);
	g_value_init (&_tmp3_, G_TYPE_INT);
	g_value_set_int (&_tmp3_, 3);
	g_value_init (&_tmp4_, G_TYPE_INT);
	g_value_set_int (&_tmp4_, 4);
	g_value_init (&_tmp5_, G_TYPE_INT);
	g_value_set_int (&_tmp5_, 5);
	_tmp6_ = g_new0 (GValue, 5);
	_tmp6_[0] = _tmp1_;
	_tmp6_[1] = _tmp2_;
	_tmp6_[2] = _tmp3_;
	_tmp6_[3] = _tmp4_;
	_tmp6_[4] = _tmp5_;
	viarray = _tmp6_;
	viarray_length1 = 5;
	_viarray_size_ = viarray_length1;
	_tmp7_ = viarray;
	_tmp7__length1 = viarray_length1;
	_tmp8_ = iarray;
	_tmp8__length1 = iarray_length1;
	_vala_assert (_tmp7__length1 == _tmp8__length1, "viarray.length == iarray.length");
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp9_ = FALSE;
			_tmp9_ = TRUE;
			while (TRUE) {
				GValue* _tmp11_;
				gint _tmp11__length1;
				GValue* _tmp12_;
				gint _tmp12__length1;
				gint* _tmp13_;
				gint _tmp13__length1;
				gint _tmp14_;
				if (!_tmp9_) {
					gint _tmp10_;
					_tmp10_ = i;
					i = _tmp10_ + 1;
				}
				_tmp9_ = FALSE;
				_tmp11_ = viarray;
				_tmp11__length1 = viarray_length1;
				if (!(i < _tmp11__length1)) {
					break;
				}
				_tmp12_ = viarray;
				_tmp12__length1 = viarray_length1;
				_tmp13_ = iarray;
				_tmp13__length1 = iarray_length1;
				_tmp14_ = _tmp13_[i];
				_vala_assert (g_value_get_int (&_tmp12_[i]) == _tmp14_, "viarray[i].get_int () == iarray[i]");
			}
		}
	}
	_tmp15_ = g_strdup ("hello");
	_tmp16_ = g_strdup ("vala");
	_tmp17_ = g_strdup ("world");
	_tmp18_ = g_new0 (gchar*, 3 + 1);
	_tmp18_[0] = _tmp15_;
	_tmp18_[1] = _tmp16_;
	_tmp18_[2] = _tmp17_;
	sarray = _tmp18_;
	sarray_length1 = 3;
	_sarray_size_ = sarray_length1;
	g_value_init (&_tmp19_, G_TYPE_STRING);
	g_value_set_string (&_tmp19_, "hello");
	g_value_init (&_tmp20_, G_TYPE_STRING);
	g_value_set_string (&_tmp20_, "vala");
	g_value_init (&_tmp21_, G_TYPE_STRING);
	g_value_set_string (&_tmp21_, "world");
	_tmp22_ = g_new0 (GValue, 3);
	_tmp22_[0] = _tmp19_;
	_tmp22_[1] = _tmp20_;
	_tmp22_[2] = _tmp21_;
	vsarray = _tmp22_;
	vsarray_length1 = 3;
	_vsarray_size_ = vsarray_length1;
	_tmp23_ = vsarray;
	_tmp23__length1 = vsarray_length1;
	_tmp24_ = sarray;
	_tmp24__length1 = sarray_length1;
	_vala_assert (_tmp23__length1 == _tmp24__length1, "vsarray.length == sarray.length");
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp25_ = FALSE;
			_tmp25_ = TRUE;
			while (TRUE) {
				GValue* _tmp27_;
				gint _tmp27__length1;
				GValue* _tmp28_;
				gint _tmp28__length1;
				const gchar* _tmp29_;
				gchar** _tmp30_;
				gint _tmp30__length1;
				const gchar* _tmp31_;
				if (!_tmp25_) {
					gint _tmp26_;
					_tmp26_ = i;
					i = _tmp26_ + 1;
				}
				_tmp25_ = FALSE;
				_tmp27_ = vsarray;
				_tmp27__length1 = vsarray_length1;
				if (!(i < _tmp27__length1)) {
					break;
				}
				_tmp28_ = vsarray;
				_tmp28__length1 = vsarray_length1;
				_tmp29_ = g_value_get_string (&_tmp28_[i]);
				_tmp30_ = sarray;
				_tmp30__length1 = sarray_length1;
				_tmp31_ = _tmp30_[i];
				_vala_assert (g_strcmp0 (_tmp29_, _tmp31_) == 0, "vsarray[i].get_string () == sarray[i]");
			}
		}
	}
	vsarray = (_vala_GValue_array_free (vsarray, vsarray_length1), NULL);
	sarray = (_vala_array_free (sarray, sarray_length1, (GDestroyNotify) g_free), NULL);
	viarray = (_vala_GValue_array_free (viarray, viarray_length1), NULL);
	iarray = (g_free (iarray), NULL);
}

static void
_vala_GValue_free (GValue* self)
{
	g_boxed_free (G_TYPE_VALUE, self);
}

void
test_nullable_value (void)
{
	GValue* v1 = NULL;
	GValue* _tmp0_ = NULL;
	gchar* s = NULL;
	gchar* _tmp1_;
	GValue* v2 = NULL;
	GValue* _tmp2_ = NULL;
	const gchar* _tmp3_;
	const gchar* s2 = NULL;
	GValue* v3 = NULL;
	GValue* _tmp4_ = NULL;
	const gchar* _tmp5_;
	_tmp0_ = g_new0 (GValue, 1);
	g_value_init (_tmp0_, G_TYPE_INT);
	g_value_set_int (_tmp0_, 1);
	v1 = _tmp0_;
	_vala_assert (g_value_get_int (v1) == 1, "v1.get_int() == 1");
	_tmp1_ = g_strdup ("hello");
	s = _tmp1_;
	_tmp2_ = g_new0 (GValue, 1);
	g_value_init (_tmp2_, G_TYPE_STRING);
	g_value_set_string (_tmp2_, s);
	v2 = _tmp2_;
	_tmp3_ = g_value_get_string (v2);
	_vala_assert (g_strcmp0 (_tmp3_, s) == 0, "v2.get_string () == s");
	s2 = "world";
	_tmp4_ = g_new0 (GValue, 1);
	g_value_init (_tmp4_, G_TYPE_STRING);
	g_value_set_string (_tmp4_, s2);
	v3 = _tmp4_;
	_tmp5_ = g_value_get_string (v3);
	_vala_assert (g_strcmp0 (_tmp5_, s2) == 0, "v3.get_string () == s2");
	__vala_GValue_free0 (v3);
	__vala_GValue_free0 (v2);
	_g_free0 (s);
	__vala_GValue_free0 (v1);
}

void
test_nullable_value_array (void)
{
	gint* iarray = NULL;
	gint* _tmp0_;
	gint iarray_length1;
	gint _iarray_size_;
	GValue** viarray = NULL;
	GValue* _tmp1_ = NULL;
	GValue* _tmp2_ = NULL;
	GValue* _tmp3_ = NULL;
	GValue* _tmp4_ = NULL;
	GValue* _tmp5_ = NULL;
	GValue** _tmp6_;
	gint viarray_length1;
	gint _viarray_size_;
	GValue** _tmp7_;
	gint _tmp7__length1;
	gint* _tmp8_;
	gint _tmp8__length1;
	gchar** sarray = NULL;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	gchar** _tmp19_;
	gint sarray_length1;
	gint _sarray_size_;
	GValue** vsarray = NULL;
	GValue* _tmp20_ = NULL;
	GValue* _tmp21_ = NULL;
	GValue* _tmp22_ = NULL;
	GValue** _tmp23_;
	gint vsarray_length1;
	gint _vsarray_size_;
	GValue** _tmp24_;
	gint _tmp24__length1;
	gchar** _tmp25_;
	gint _tmp25__length1;
	_tmp0_ = g_new0 (gint, 5);
	_tmp0_[0] = 1;
	_tmp0_[1] = 2;
	_tmp0_[2] = 3;
	_tmp0_[3] = 4;
	_tmp0_[4] = 5;
	iarray = _tmp0_;
	iarray_length1 = 5;
	_iarray_size_ = iarray_length1;
	_tmp1_ = g_new0 (GValue, 1);
	g_value_init (_tmp1_, G_TYPE_INT);
	g_value_set_int (_tmp1_, 1);
	_tmp2_ = g_new0 (GValue, 1);
	g_value_init (_tmp2_, G_TYPE_INT);
	g_value_set_int (_tmp2_, 2);
	_tmp3_ = g_new0 (GValue, 1);
	g_value_init (_tmp3_, G_TYPE_INT);
	g_value_set_int (_tmp3_, 3);
	_tmp4_ = g_new0 (GValue, 1);
	g_value_init (_tmp4_, G_TYPE_INT);
	g_value_set_int (_tmp4_, 4);
	_tmp5_ = g_new0 (GValue, 1);
	g_value_init (_tmp5_, G_TYPE_INT);
	g_value_set_int (_tmp5_, 5);
	_tmp6_ = g_new0 (GValue*, 5);
	_tmp6_[0] = _tmp1_;
	_tmp6_[1] = _tmp2_;
	_tmp6_[2] = _tmp3_;
	_tmp6_[3] = _tmp4_;
	_tmp6_[4] = _tmp5_;
	viarray = _tmp6_;
	viarray_length1 = 5;
	_viarray_size_ = viarray_length1;
	_tmp7_ = viarray;
	_tmp7__length1 = viarray_length1;
	_tmp8_ = iarray;
	_tmp8__length1 = iarray_length1;
	_vala_assert (_tmp7__length1 == _tmp8__length1, "viarray.length == iarray.length");
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp9_ = FALSE;
			_tmp9_ = TRUE;
			while (TRUE) {
				GValue** _tmp11_;
				gint _tmp11__length1;
				GValue** _tmp12_;
				gint _tmp12__length1;
				GValue* _tmp13_;
				gint* _tmp14_;
				gint _tmp14__length1;
				gint _tmp15_;
				if (!_tmp9_) {
					gint _tmp10_;
					_tmp10_ = i;
					i = _tmp10_ + 1;
				}
				_tmp9_ = FALSE;
				_tmp11_ = viarray;
				_tmp11__length1 = viarray_length1;
				if (!(i < _tmp11__length1)) {
					break;
				}
				_tmp12_ = viarray;
				_tmp12__length1 = viarray_length1;
				_tmp13_ = _tmp12_[i];
				_tmp14_ = iarray;
				_tmp14__length1 = iarray_length1;
				_tmp15_ = _tmp14_[i];
				_vala_assert (g_value_get_int (_tmp13_) == _tmp15_, "viarray[i].get_int () == iarray[i]");
			}
		}
	}
	_tmp16_ = g_strdup ("hello");
	_tmp17_ = g_strdup ("vala");
	_tmp18_ = g_strdup ("world");
	_tmp19_ = g_new0 (gchar*, 3 + 1);
	_tmp19_[0] = _tmp16_;
	_tmp19_[1] = _tmp17_;
	_tmp19_[2] = _tmp18_;
	sarray = _tmp19_;
	sarray_length1 = 3;
	_sarray_size_ = sarray_length1;
	_tmp20_ = g_new0 (GValue, 1);
	g_value_init (_tmp20_, G_TYPE_STRING);
	g_value_set_string (_tmp20_, "hello");
	_tmp21_ = g_new0 (GValue, 1);
	g_value_init (_tmp21_, G_TYPE_STRING);
	g_value_set_string (_tmp21_, "vala");
	_tmp22_ = g_new0 (GValue, 1);
	g_value_init (_tmp22_, G_TYPE_STRING);
	g_value_set_string (_tmp22_, "world");
	_tmp23_ = g_new0 (GValue*, 3);
	_tmp23_[0] = _tmp20_;
	_tmp23_[1] = _tmp21_;
	_tmp23_[2] = _tmp22_;
	vsarray = _tmp23_;
	vsarray_length1 = 3;
	_vsarray_size_ = vsarray_length1;
	_tmp24_ = vsarray;
	_tmp24__length1 = vsarray_length1;
	_tmp25_ = sarray;
	_tmp25__length1 = sarray_length1;
	_vala_assert (_tmp24__length1 == _tmp25__length1, "vsarray.length == sarray.length");
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp26_ = FALSE;
			_tmp26_ = TRUE;
			while (TRUE) {
				GValue** _tmp28_;
				gint _tmp28__length1;
				GValue** _tmp29_;
				gint _tmp29__length1;
				GValue* _tmp30_;
				const gchar* _tmp31_;
				gchar** _tmp32_;
				gint _tmp32__length1;
				const gchar* _tmp33_;
				if (!_tmp26_) {
					gint _tmp27_;
					_tmp27_ = i;
					i = _tmp27_ + 1;
				}
				_tmp26_ = FALSE;
				_tmp28_ = vsarray;
				_tmp28__length1 = vsarray_length1;
				if (!(i < _tmp28__length1)) {
					break;
				}
				_tmp29_ = vsarray;
				_tmp29__length1 = vsarray_length1;
				_tmp30_ = _tmp29_[i];
				_tmp31_ = g_value_get_string (_tmp30_);
				_tmp32_ = sarray;
				_tmp32__length1 = sarray_length1;
				_tmp33_ = _tmp32_[i];
				_vala_assert (g_strcmp0 (_tmp31_, _tmp33_) == 0, "vsarray[i].get_string () == sarray[i]");
			}
		}
	}
	vsarray = (_vala_array_free (vsarray, vsarray_length1, (GDestroyNotify) _vala_GValue_free), NULL);
	sarray = (_vala_array_free (sarray, sarray_length1, (GDestroyNotify) g_free), NULL);
	viarray = (_vala_array_free (viarray, viarray_length1, (GDestroyNotify) _vala_GValue_free), NULL);
	iarray = (g_free (iarray), NULL);
}

Bar*
bar_construct (GType object_type)
{
	Bar* self = NULL;
	self = (Bar*) g_type_create_instance (object_type);
	return self;
}

Bar*
bar_new (void)
{
	return bar_construct (TYPE_BAR);
}

static void
value_bar_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_bar_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		bar_unref (value->data[0].v_pointer);
	}
}

static void
value_bar_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = bar_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_bar_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_bar_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Bar * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = bar_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_bar_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Bar ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = bar_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_bar (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecBar* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_BAR), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_bar (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR), NULL);
	return value->data[0].v_pointer;
}

void
value_set_bar (GValue* value,
               gpointer v_object)
{
	Bar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		bar_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bar_unref (old);
	}
}

void
value_take_bar (GValue* value,
                gpointer v_object)
{
	Bar * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_BAR));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_BAR));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		bar_unref (old);
	}
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	((BarClass *) klass)->finalize = bar_finalize;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->ref_count = 1;
}

static void
bar_finalize (Bar * obj)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_BAR, Bar);
	g_signal_handlers_destroy (self);
}

static GType
bar_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_bar_init, value_bar_free_value, value_bar_copy_value, value_bar_peek_pointer, "p", value_bar_collect_value, "p", value_bar_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType bar_type_id;
	bar_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Bar", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

gpointer
bar_ref (gpointer instance)
{
	Bar * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
bar_unref (gpointer instance)
{
	Bar * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		BAR_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
manam_default_init (ManamIface * iface,
                    gpointer iface_data)
{
}

static GType
manam_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ManamIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType manam_type_id;
	manam_type_id = g_type_register_static (G_TYPE_INTERFACE, "Manam", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (manam_type_id, G_TYPE_OBJECT);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
}

static void
foo_manam_interface_init (ManamIface * iface,
                          gpointer iface_data)
{
	foo_manam_parent_iface = g_type_interface_peek_parent (iface);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	static const GInterfaceInfo manam_info = { (GInterfaceInitFunc) foo_manam_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	g_type_add_interface_static (foo_type_id, TYPE_MANAM, &manam_info);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gpointer
_bar_ref0 (gpointer self)
{
	return self ? bar_ref (self) : NULL;
}

void
test_gtype (void)
{
	Bar* o = NULL;
	Bar* _tmp0_;
	GValue vo = {0};
	GValue _tmp1_ = {0};
	Bar* o2 = NULL;
	GValue _tmp2_;
	Bar* _tmp3_;
	_tmp0_ = bar_new ();
	o = _tmp0_;
	o->i = 42;
	g_value_init (&_tmp1_, TYPE_BAR);
	value_set_bar (&_tmp1_, o);
	vo = _tmp1_;
	_tmp2_ = vo;
	_tmp3_ = _bar_ref0 (value_get_bar (&_tmp2_));
	o2 = _tmp3_;
	_vala_assert (o2->i == 42, "o2.i == 42");
	_bar_unref0 (o2);
	G_IS_VALUE (&vo) ? (g_value_unset (&vo), NULL) : NULL;
	_bar_unref0 (o);
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

void
test_gobject (void)
{
	Foo* o = NULL;
	Foo* _tmp0_;
	GValue vo = {0};
	GValue _tmp1_ = {0};
	Foo* o2 = NULL;
	GValue _tmp2_;
	Foo* _tmp3_;
	_tmp0_ = foo_new ();
	o = _tmp0_;
	o->i = 42;
	g_value_init (&_tmp1_, TYPE_FOO);
	g_value_set_object (&_tmp1_, o);
	vo = _tmp1_;
	_tmp2_ = vo;
	_tmp3_ = _g_object_ref0 (g_value_get_object (&_tmp2_));
	o2 = _tmp3_;
	_vala_assert (o2->i == 42, "o2.i == 42");
	_g_object_unref0 (o2);
	G_IS_VALUE (&vo) ? (g_value_unset (&vo), NULL) : NULL;
	_g_object_unref0 (o);
}

void
test_ginterface (void)
{
	Manam* i = NULL;
	Foo* _tmp0_;
	GValue vi = {0};
	GValue _tmp1_ = {0};
	Manam* i2 = NULL;
	GValue _tmp2_;
	Manam* _tmp3_;
	_tmp0_ = foo_new ();
	i = G_TYPE_CHECK_INSTANCE_CAST (_tmp0_, TYPE_MANAM, Manam);
	G_TYPE_CHECK_INSTANCE_CAST (i, TYPE_FOO, Foo)->i = 42;
	g_value_init (&_tmp1_, TYPE_MANAM);
	g_value_set_object (&_tmp1_, i);
	vi = _tmp1_;
	_tmp2_ = vi;
	_tmp3_ = _g_object_ref0 (g_value_get_object (&_tmp2_));
	i2 = _tmp3_;
	_vala_assert (G_TYPE_CHECK_INSTANCE_CAST (i2, TYPE_FOO, Foo)->i == 42, "((Foo) i2).i == 42");
	_g_object_unref0 (i2);
	G_IS_VALUE (&vi) ? (g_value_unset (&vi), NULL) : NULL;
	_g_object_unref0 (i);
}

void
take_value (GValue* v)
{
	g_return_if_fail (v != NULL);
}

gboolean
make_bool (void)
{
	gboolean result;
	result = TRUE;
	return result;
}

FooStruct*
foo_struct_dup (const FooStruct* self)
{
	FooStruct* dup;
	dup = g_new0 (FooStruct, 1);
	memcpy (dup, self, sizeof (FooStruct));
	return dup;
}

void
foo_struct_free (FooStruct* self)
{
	g_free (self);
}

static GType
foo_struct_get_type_once (void)
{
	GType foo_struct_type_id;
	foo_struct_type_id = g_boxed_type_register_static ("FooStruct", (GBoxedCopyFunc) foo_struct_dup, (GBoxedFreeFunc) foo_struct_free);
	return foo_struct_type_id;
}

GType
foo_struct_get_type (void)
{
	static volatile gsize foo_struct_type_id__once = 0;
	if (g_once_init_enter (&foo_struct_type_id__once)) {
		GType foo_struct_type_id;
		foo_struct_type_id = foo_struct_get_type_once ();
		g_once_init_leave (&foo_struct_type_id__once, foo_struct_type_id);
	}
	return foo_struct_type_id__once;
}

static gchar**
_vala_array_dup1 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
test_try_cast_value (void)
{
	FooStruct s = {0};
	FooStruct _tmp0_ = {0};
	GValue vs = {0};
	FooStruct _tmp1_;
	GValue _tmp2_ = {0};
	FooStruct s2 = {0};
	GValue _tmp3_;
	FooStruct* _tmp4_;
	FooStruct _tmp5_ = {0};
	FooStruct _tmp6_;
	gchar** sarray = NULL;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gchar** _tmp10_;
	gint sarray_length1;
	gint _sarray_size_;
	GValue va = {0};
	GValue _tmp11_ = {0};
	gchar** sarray2 = NULL;
	GValue _tmp12_;
	gchar** _tmp13_;
	gchar** _tmp14_;
	gint _tmp14__length1;
	gint sarray2_length1;
	gint _sarray2_size_;
	const gchar* _tmp15_;
	gchar** sarray3 = NULL;
	GValue _tmp16_;
	gchar** _tmp17_;
	gint sarray3_length1;
	gint _sarray3_size_;
	const gchar* _tmp18_;
	_tmp0_.i = 42;
	s = _tmp0_;
	_tmp1_ = s;
	g_value_init (&_tmp2_, TYPE_FOO_STRUCT);
	g_value_set_boxed (&_tmp2_, &_tmp1_);
	vs = _tmp2_;
	_tmp3_ = vs;
	_tmp4_ = g_value_get_boxed (&_tmp3_);
	s2 = (G_VALUE_HOLDS (&_tmp3_, TYPE_FOO_STRUCT) && _tmp4_) ? (*_tmp4_) : (g_warning ("Invalid GValue unboxing (wrong type or NULL)"), _tmp5_);
	_tmp6_ = s2;
	_vala_assert (_tmp6_.i == 42, "s2.i == 42");
	_tmp7_ = g_strdup ("hello");
	_tmp8_ = g_strdup ("vala");
	_tmp9_ = g_strdup ("world");
	_tmp10_ = g_new0 (gchar*, 3 + 1);
	_tmp10_[0] = _tmp7_;
	_tmp10_[1] = _tmp8_;
	_tmp10_[2] = _tmp9_;
	sarray = _tmp10_;
	sarray_length1 = 3;
	_sarray_size_ = sarray_length1;
	g_value_init (&_tmp11_, G_TYPE_STRV);
	g_value_set_boxed (&_tmp11_, sarray);
	va = _tmp11_;
	_tmp12_ = va;
	_tmp13_ = g_value_get_boxed (&_tmp12_);
	_tmp14_ = (_tmp13_ != NULL) ? _vala_array_dup1 (_tmp13_, g_strv_length (_tmp13_)) : _tmp13_;
	_tmp14__length1 = g_strv_length (_tmp13_);
	sarray2 = _tmp14_;
	sarray2_length1 = _tmp14__length1;
	_sarray2_size_ = sarray2_length1;
	_tmp15_ = sarray2[1];
	_vala_assert (g_strcmp0 (_tmp15_, "vala") == 0, "sarray2[1] == \"vala\"");
	_tmp16_ = va;
	_tmp17_ = g_value_get_boxed (&_tmp16_);
	sarray3 = _tmp17_;
	sarray3_length1 = g_strv_length (_tmp17_);
	_sarray3_size_ = sarray3_length1;
	_tmp18_ = sarray3[2];
	_vala_assert (g_strcmp0 (_tmp18_, "world") == 0, "sarray3[2] == \"world\"");
	sarray2 = (_vala_array_free (sarray2, sarray2_length1, (GDestroyNotify) g_free), NULL);
	G_IS_VALUE (&va) ? (g_value_unset (&va), NULL) : NULL;
	sarray = (_vala_array_free (sarray, sarray_length1, (GDestroyNotify) g_free), NULL);
	G_IS_VALUE (&vs) ? (g_value_unset (&vs), NULL) : NULL;
}

static void
_vala_main (void)
{
	GValue _tmp0_ = {0};
	test_value ();
	test_value_array ();
	test_nullable_value ();
	test_nullable_value_array ();
	test_gtype ();
	test_gobject ();
	test_ginterface ();
	g_value_init (&_tmp0_, G_TYPE_BOOLEAN);
	g_value_set_boolean (&_tmp0_, make_bool ());
	take_value (&_tmp0_);
	G_IS_VALUE (&_tmp0_) ? (g_value_unset (&_tmp0_), NULL) : NULL;
	test_try_cast_value ();
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

