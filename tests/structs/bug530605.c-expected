/* structs_bug530605.c generated by valac, the Vala compiler
 * generated from structs_bug530605.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint bar;
	gchar* baz;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Foo, foo_destroy)
VALA_EXTERN void foo_init (Foo *self,
               gint bar,
               const gchar* baz);
static void _vala_main (void);
static gboolean _foo_equal (const Foo * s1,
                     const Foo * s2);

void
foo_init (Foo *self,
          gint bar,
          const gchar* baz)
{
	gchar* _tmp0_;
	g_return_if_fail (baz != NULL);
	memset (self, 0, sizeof (Foo));
	(*self).bar = bar;
	_tmp0_ = g_strdup (baz);
	_g_free0 ((*self).baz);
	(*self).baz = _tmp0_;
}

void
foo_copy (const Foo* self,
          Foo* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	(*dest).bar = (*self).bar;
	_tmp0_ = (*self).baz;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).baz);
	(*dest).baz = _tmp1_;
}

void
foo_destroy (Foo* self)
{
	_g_free0 ((*self).baz);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gpointer
_foo_dup0 (gpointer self)
{
	return self ? foo_dup (self) : NULL;
}

static gboolean
_foo_equal (const Foo * s1,
            const Foo * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (s1->bar != s2->bar) {
		return FALSE;
	}
	if (g_strcmp0 (s1->baz, s2->baz)) {
		return FALSE;
	}
	return TRUE;
}

static void
_vala_main (void)
{
	Foo a = {0};
	Foo b = {0};
	Foo* c = NULL;
	Foo _tmp0_ = {0};
	Foo _tmp1_;
	Foo* _tmp2_;
	Foo* _tmp3_;
	Foo d = {0};
	Foo e = {0};
	Foo _tmp4_;
	Foo _tmp5_;
	Foo _tmp6_;
	Foo _tmp7_;
	Foo _tmp8_;
	Foo _tmp9_;
	Foo _tmp10_;
	foo_init (&a, 42, "hello");
	foo_init (&b, 42, "hello");
	foo_init (&_tmp0_, 42, "hello");
	_tmp1_ = _tmp0_;
	_tmp2_ = _foo_dup0 (&_tmp1_);
	_tmp3_ = _tmp2_;
	foo_destroy (&_tmp1_);
	c = _tmp3_;
	foo_init (&d, 42, "world");
	foo_init (&e, 23, "hello");
	_tmp4_ = a;
	_tmp5_ = b;
	_vala_assert (_foo_equal (&_tmp4_, &_tmp5_) == TRUE, "a == b");
	_tmp6_ = a;
	_vala_assert (_foo_equal (&_tmp6_, c) == TRUE, "a == c");
	_tmp7_ = a;
	_tmp8_ = d;
	_vala_assert (_foo_equal (&_tmp7_, &_tmp8_) != TRUE, "a != d");
	_tmp9_ = a;
	_tmp10_ = e;
	_vala_assert (_foo_equal (&_tmp9_, &_tmp10_) != TRUE, "a != e");
	foo_destroy (&e);
	foo_destroy (&d);
	_foo_free0 (c);
	foo_destroy (&b);
	foo_destroy (&a);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

