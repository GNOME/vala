/* structs_simple_type_boxed.c generated by valac, the Vala compiler
 * generated from structs_simple_type_boxed.vala, do not modify */

#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

typedef struct _Foo Foo;
#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint i;
	guint j;
};

static void _vala_main (void);
static Foo* _foo_dup (Foo* self);

static Foo*
_foo_dup (Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	memcpy (dup, self, sizeof (Foo));
	return dup;
}

static gpointer
__foo_dup0 (gpointer self)
{
	return self ? _foo_dup (self) : NULL;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo _tmp0_ = {0};
	Foo* _tmp1_;
	_tmp0_.i = 42;
	_tmp0_.j = 4711U;
	_tmp1_ = __foo_dup0 (&_tmp0_);
	foo = _tmp1_;
	_vala_assert ((*foo).i == 42, "foo.i == 42");
	_vala_assert ((*foo).j == 4711U, "foo.j == 4711U");
	_g_free0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

