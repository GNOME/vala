/* structs_cast_struct_boxed.c generated by valac, the Vala compiler
 * generated from structs_cast_struct_boxed.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>
#include <stdlib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))

#define TYPE_BAR (bar_get_type ())
typedef struct _Bar Bar;
#define _bar_free0(var) ((var == NULL) ? NULL : (var = (bar_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint i;
};

struct _Bar {
	gchar* s;
};

VALA_EXTERN Foo* foo;
Foo* foo = NULL;
VALA_EXTERN Bar* bar;
Bar* bar = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN Foo* foo_heap_owned (void);
VALA_EXTERN Foo* foo_heap_unowned (void);
VALA_EXTERN void test_without_destroy (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Bar* bar_dup (const Bar* self);
VALA_EXTERN void bar_free (Bar* self);
VALA_EXTERN void bar_copy (const Bar* self,
               Bar* dest);
VALA_EXTERN void bar_destroy (Bar* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Bar, bar_destroy)
VALA_EXTERN Bar* bar_heap_owned (void);
VALA_EXTERN Bar* bar_heap_unowned (void);
VALA_EXTERN void test_with_destroy (void);
static void _vala_main (void);

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	memcpy (dup, self, sizeof (Foo));
	return dup;
}

void
foo_free (Foo* self)
{
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gpointer
_foo_dup0 (gpointer self)
{
	return self ? foo_dup (self) : NULL;
}

Foo*
foo_heap_owned (void)
{
	Foo _tmp0_ = {0};
	Foo* _tmp1_;
	Foo* _tmp2_;
	Foo* _tmp3_;
	Foo* result;
	_tmp0_.i = 23;
	_tmp1_ = _foo_dup0 (&_tmp0_);
	_foo_free0 (foo);
	foo = _tmp1_;
	_tmp2_ = foo;
	_tmp3_ = _foo_dup0 (_tmp2_);
	result = _tmp3_;
	return result;
}

Foo*
foo_heap_unowned (void)
{
	Foo _tmp0_ = {0};
	Foo* _tmp1_;
	Foo* _tmp2_;
	Foo* result;
	_tmp0_.i = 42;
	_tmp1_ = _foo_dup0 (&_tmp0_);
	_foo_free0 (foo);
	foo = _tmp1_;
	_tmp2_ = foo;
	result = _tmp2_;
	return result;
}

void
test_without_destroy (void)
{
	{
		Foo f = {0};
		Foo* _tmp0_;
		Foo* _tmp1_;
		Foo _tmp2_;
		Foo _tmp3_;
		_tmp0_ = foo_heap_owned ();
		_tmp1_ = _tmp0_;
		_tmp2_ = *_tmp1_;
		_foo_free0 (_tmp1_);
		f = _tmp2_;
		_tmp3_ = f;
		_vala_assert (_tmp3_.i == 23, "f.i == 23");
	}
	{
		Foo f = {0};
		Foo* _tmp4_;
		Foo _tmp5_;
		Foo _tmp6_;
		_tmp4_ = foo_heap_owned ();
		_tmp5_ = (Foo) (*_tmp4_);
		_g_free0 (_tmp4_);
		f = _tmp5_;
		_tmp6_ = f;
		_vala_assert (_tmp6_.i == 23, "f.i == 23");
	}
	{
		Foo f = {0};
		Foo* _tmp7_;
		Foo _tmp8_;
		Foo _tmp9_;
		_tmp7_ = foo_heap_owned ();
		_tmp8_ = (Foo) (*_tmp7_);
		_g_free0 (_tmp7_);
		f = _tmp8_;
		_tmp9_ = f;
		_vala_assert (_tmp9_.i == 23, "f.i == 23");
	}
	{
		Foo f = {0};
		Foo _tmp10_;
		f = *foo_heap_unowned ();
		_tmp10_ = f;
		_vala_assert (_tmp10_.i == 42, "f.i == 42");
	}
	{
		Foo f = {0};
		Foo _tmp11_;
		f = (Foo) (*foo_heap_unowned ());
		_tmp11_ = f;
		_vala_assert (_tmp11_.i == 42, "f.i == 42");
	}
	{
		Foo f = {0};
		Foo _tmp12_;
		f = (Foo) (*foo_heap_unowned ());
		_tmp12_ = f;
		_vala_assert (_tmp12_.i == 42, "f.i == 42");
	}
}

void
bar_copy (const Bar* self,
          Bar* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
}

void
bar_destroy (Bar* self)
{
	_g_free0 ((*self).s);
}

Bar*
bar_dup (const Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	bar_copy (self, dup);
	return dup;
}

void
bar_free (Bar* self)
{
	bar_destroy (self);
	g_free (self);
}

static GType
bar_get_type_once (void)
{
	GType bar_type_id;
	bar_type_id = g_boxed_type_register_static ("Bar", (GBoxedCopyFunc) bar_dup, (GBoxedFreeFunc) bar_free);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static gpointer
_bar_dup0 (gpointer self)
{
	return self ? bar_dup (self) : NULL;
}

Bar*
bar_heap_owned (void)
{
	gchar* _tmp0_;
	Bar _tmp1_ = {0};
	Bar _tmp2_;
	Bar* _tmp3_;
	Bar* _tmp4_;
	Bar* _tmp5_;
	Bar* result;
	_tmp0_ = g_strdup ("bar");
	_g_free0 (_tmp1_.s);
	_tmp1_.s = _tmp0_;
	_tmp2_ = _tmp1_;
	_tmp3_ = _bar_dup0 (&_tmp2_);
	_bar_free0 (bar);
	bar = _tmp3_;
	bar_destroy (&_tmp2_);
	_tmp4_ = bar;
	_tmp5_ = _bar_dup0 (_tmp4_);
	result = _tmp5_;
	return result;
}

Bar*
bar_heap_unowned (void)
{
	gchar* _tmp0_;
	Bar _tmp1_ = {0};
	Bar _tmp2_;
	Bar* _tmp3_;
	Bar* _tmp4_;
	Bar* result;
	_tmp0_ = g_strdup ("manam");
	_g_free0 (_tmp1_.s);
	_tmp1_.s = _tmp0_;
	_tmp2_ = _tmp1_;
	_tmp3_ = _bar_dup0 (&_tmp2_);
	_bar_free0 (bar);
	bar = _tmp3_;
	bar_destroy (&_tmp2_);
	_tmp4_ = bar;
	result = _tmp4_;
	return result;
}

void
test_with_destroy (void)
{
	{
		Bar b = {0};
		Bar* _tmp0_;
		Bar* _tmp1_;
		Bar _tmp2_;
		Bar _tmp3_ = {0};
		Bar _tmp4_;
		Bar _tmp5_;
		const gchar* _tmp6_;
		_tmp0_ = bar_heap_owned ();
		_tmp1_ = _tmp0_;
		_tmp2_ = *_tmp1_;
		bar_copy (&_tmp2_, &_tmp3_);
		_tmp4_ = _tmp3_;
		_bar_free0 (_tmp1_);
		b = _tmp4_;
		_tmp5_ = b;
		_tmp6_ = _tmp5_.s;
		_vala_assert (g_strcmp0 (_tmp6_, "bar") == 0, "b.s == \"bar\"");
		bar_destroy (&b);
	}
	{
		Bar b = {0};
		Bar* _tmp7_;
		Bar _tmp8_;
		Bar _tmp9_;
		const gchar* _tmp10_;
		_tmp7_ = bar_heap_owned ();
		_tmp8_ = (Bar) (*_tmp7_);
		_g_free0 (_tmp7_);
		b = _tmp8_;
		_tmp9_ = b;
		_tmp10_ = _tmp9_.s;
		_vala_assert (g_strcmp0 (_tmp10_, "bar") == 0, "b.s == \"bar\"");
		bar_destroy (&b);
	}
	{
		Bar b = {0};
		Bar* _tmp11_;
		Bar _tmp12_;
		Bar _tmp13_;
		const gchar* _tmp14_;
		_tmp11_ = bar_heap_owned ();
		_tmp12_ = (Bar) (*_tmp11_);
		_g_free0 (_tmp11_);
		b = _tmp12_;
		_tmp13_ = b;
		_tmp14_ = _tmp13_.s;
		_vala_assert (g_strcmp0 (_tmp14_, "bar") == 0, "b.s == \"bar\"");
		bar_destroy (&b);
	}
	{
		Bar b = {0};
		Bar _tmp15_;
		Bar _tmp16_ = {0};
		Bar _tmp17_;
		const gchar* _tmp18_;
		_tmp15_ = *bar_heap_unowned ();
		bar_copy (&_tmp15_, &_tmp16_);
		b = _tmp16_;
		_tmp17_ = b;
		_tmp18_ = _tmp17_.s;
		_vala_assert (g_strcmp0 (_tmp18_, "manam") == 0, "b.s == \"manam\"");
		bar_destroy (&b);
	}
	{
		Bar b = {0};
		Bar _tmp19_;
		Bar _tmp20_ = {0};
		Bar _tmp21_;
		const gchar* _tmp22_;
		_tmp19_ = (Bar) (*bar_heap_unowned ());
		bar_copy (&_tmp19_, &_tmp20_);
		b = _tmp20_;
		_tmp21_ = b;
		_tmp22_ = _tmp21_.s;
		_vala_assert (g_strcmp0 (_tmp22_, "manam") == 0, "b.s == \"manam\"");
		bar_destroy (&b);
	}
	{
		Bar b = {0};
		Bar _tmp23_;
		Bar _tmp24_ = {0};
		Bar _tmp25_;
		const gchar* _tmp26_;
		_tmp23_ = (Bar) (*bar_heap_unowned ());
		bar_copy (&_tmp23_, &_tmp24_);
		b = _tmp24_;
		_tmp25_ = b;
		_tmp26_ = _tmp25_.s;
		_vala_assert (g_strcmp0 (_tmp26_, "manam") == 0, "b.s == \"manam\"");
		bar_destroy (&b);
	}
	{
		Bar b = {0};
		Bar _tmp27_;
		const gchar* _tmp28_;
		b = *bar_heap_unowned ();
		_tmp27_ = b;
		_tmp28_ = _tmp27_.s;
		_vala_assert (g_strcmp0 (_tmp28_, "manam") == 0, "b.s == \"manam\"");
	}
	{
		Bar b = {0};
		Bar _tmp29_;
		const gchar* _tmp30_;
		b = (Bar) (*bar_heap_unowned ());
		_tmp29_ = b;
		_tmp30_ = _tmp29_.s;
		_vala_assert (g_strcmp0 (_tmp30_, "manam") == 0, "b.s == \"manam\"");
	}
	{
		Bar b = {0};
		Bar _tmp31_;
		const gchar* _tmp32_;
		b = (Bar) (*bar_heap_unowned ());
		_tmp31_ = b;
		_tmp32_ = _tmp31_.s;
		_vala_assert (g_strcmp0 (_tmp32_, "manam") == 0, "b.s == \"manam\"");
	}
}

static void
_vala_main (void)
{
	test_without_destroy ();
	test_with_destroy ();
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

