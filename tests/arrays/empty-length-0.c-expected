/* arrays_empty_length_0.c generated by valac, the Vala compiler
 * generated from arrays_empty_length_0.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_MANAM (manam_get_type ())
typedef struct _Manam Manam;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Manam {
	gchar* s;
};

VALA_EXTERN gchar** foo;
VALA_EXTERN gint foo_length1;
gchar** foo = NULL;
gint foo_length1 = 0;
static gint _foo_size_ = 0;
VALA_EXTERN gint* bar;
VALA_EXTERN gint bar_length1;
gint* bar = NULL;
gint bar_length1 = 0;
static gint _bar_size_ = 0;
VALA_EXTERN Manam* manam;
VALA_EXTERN gint manam_length1;
Manam* manam = NULL;
gint manam_length1 = 0;
static gint _manam_size_ = 0;

VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Manam* manam_dup (const Manam* self);
VALA_EXTERN void manam_free (Manam* self);
VALA_EXTERN void manam_copy (const Manam* self,
                 Manam* dest);
VALA_EXTERN void manam_destroy (Manam* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Manam, manam_destroy)
VALA_EXTERN gchar** get_foo (gint* result_length1);
static gchar** _vala_array_dup1 (gchar** self,
                          gssize length);
VALA_EXTERN gint* get_bar (gint* result_length1);
static gint* _vala_array_dup2 (gint* self,
                        gssize length);
VALA_EXTERN Manam* get_manam (gint* result_length1);
static Manam* _vala_array_dup3 (Manam* self,
                         gssize length);
static void _vala_main (void);
static void _vala_Manam_array_free (Manam * array,
                             gssize array_length);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);
static inline gpointer _vala_memdup2 (gconstpointer mem,
                        gsize byte_size);

void
manam_copy (const Manam* self,
            Manam* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
}

void
manam_destroy (Manam* self)
{
	_g_free0 ((*self).s);
}

Manam*
manam_dup (const Manam* self)
{
	Manam* dup;
	dup = g_new0 (Manam, 1);
	manam_copy (self, dup);
	return dup;
}

void
manam_free (Manam* self)
{
	manam_destroy (self);
	g_free (self);
}

static GType
manam_get_type_once (void)
{
	GType manam_type_id;
	manam_type_id = g_boxed_type_register_static ("Manam", (GBoxedCopyFunc) manam_dup, (GBoxedFreeFunc) manam_free);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static gchar**
_vala_array_dup1 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

gchar**
get_foo (gint* result_length1)
{
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	gchar** _tmp2_;
	gint _tmp2__length1;
	gchar** result;
	_tmp0_ = foo;
	_tmp0__length1 = foo_length1;
	_tmp1_ = (_tmp0_ != NULL) ? _vala_array_dup1 (_tmp0_, _tmp0__length1) : _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	_tmp2_ = _tmp1_;
	_tmp2__length1 = _tmp1__length1;
	if (result_length1) {
		*result_length1 = _tmp2__length1;
	}
	result = _tmp2_;
	return result;
}

static gint*
_vala_array_dup2 (gint* self,
                  gssize length)
{
	if (length > 0) {
		return _vala_memdup2 (self, length * sizeof (gint));
	}
	return NULL;
}

gint*
get_bar (gint* result_length1)
{
	gint* _tmp0_;
	gint _tmp0__length1;
	gint* _tmp1_;
	gint _tmp1__length1;
	gint* _tmp2_;
	gint _tmp2__length1;
	gint* result;
	_tmp0_ = bar;
	_tmp0__length1 = bar_length1;
	_tmp1_ = (_tmp0_ != NULL) ? _vala_array_dup2 (_tmp0_, _tmp0__length1) : _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	_tmp2_ = _tmp1_;
	_tmp2__length1 = _tmp1__length1;
	if (result_length1) {
		*result_length1 = _tmp2__length1;
	}
	result = _tmp2_;
	return result;
}

static Manam*
_vala_array_dup3 (Manam* self,
                  gssize length)
{
	if (length > 0) {
		Manam* result;
		gssize i;
		result = g_new0 (Manam, length);
		for (i = 0; i < length; i++) {
			Manam _tmp0_;
			Manam _tmp1_ = {0};
			_tmp0_ = self[i];
			manam_copy (&_tmp0_, &_tmp1_);
			result[i] = _tmp1_;
		}
		return result;
	}
	return NULL;
}

Manam*
get_manam (gint* result_length1)
{
	Manam* _tmp0_;
	gint _tmp0__length1;
	Manam* _tmp1_;
	gint _tmp1__length1;
	Manam* _tmp2_;
	gint _tmp2__length1;
	Manam* result;
	_tmp0_ = manam;
	_tmp0__length1 = manam_length1;
	_tmp1_ = (_tmp0_ != NULL) ? _vala_array_dup3 (_tmp0_, _tmp0__length1) : _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	_tmp2_ = _tmp1_;
	_tmp2__length1 = _tmp1__length1;
	if (result_length1) {
		*result_length1 = _tmp2__length1;
	}
	result = _tmp2_;
	return result;
}

static void
_vala_Manam_array_free (Manam * array,
                        gssize array_length)
{
	if (array != NULL) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			manam_destroy (&array[i]);
		}
	}
	g_free (array);
}

static void
_vala_main (void)
{
	{
		gchar** _tmp0_;
		gchar** _tmp1_;
		gint _tmp1__length1;
		gint _tmp2_ = 0;
		gchar** _tmp3_;
		gchar** _tmp4_;
		gint _tmp4__length1;
		_tmp0_ = g_new0 (gchar*, 0 + 1);
		foo = (_vala_array_free (foo, foo_length1, (GDestroyNotify) g_free), NULL);
		foo = _tmp0_;
		foo_length1 = 0;
		_foo_size_ = foo_length1;
		_tmp1_ = foo;
		_tmp1__length1 = foo_length1;
		_vala_assert (_tmp1_ != NULL, "foo != null");
		_tmp3_ = get_foo (&_tmp2_);
		_tmp4_ = _tmp3_;
		_tmp4__length1 = _tmp2_;
		_vala_assert (_tmp4_ != NULL, "get_foo () != null");
		_tmp4_ = (_vala_array_free (_tmp4_, _tmp4__length1, (GDestroyNotify) g_free), NULL);
	}
	{
		gchar** _tmp5_;
		gchar** _tmp6_;
		gint _tmp6__length1;
		gint _tmp7_ = 0;
		gchar** _tmp8_;
		gchar** _tmp9_;
		gint _tmp9__length1;
		_tmp5_ = g_new0 (gchar*, 0 + 1);
		foo = (_vala_array_free (foo, foo_length1, (GDestroyNotify) g_free), NULL);
		foo = _tmp5_;
		foo_length1 = 0;
		_foo_size_ = foo_length1;
		_tmp6_ = foo;
		_tmp6__length1 = foo_length1;
		_vala_assert (_tmp6_ != NULL, "foo != null");
		_tmp8_ = get_foo (&_tmp7_);
		_tmp9_ = _tmp8_;
		_tmp9__length1 = _tmp7_;
		_vala_assert (_tmp9_ != NULL, "get_foo () != null");
		_tmp9_ = (_vala_array_free (_tmp9_, _tmp9__length1, (GDestroyNotify) g_free), NULL);
	}
	{
		gint* _tmp10_;
		gint _tmp11_ = 0;
		gint* _tmp12_;
		gint* _tmp13_;
		gint _tmp13__length1;
		_tmp10_ = g_new0 (gint, 0);
		bar = (g_free (bar), NULL);
		bar = _tmp10_;
		bar_length1 = 0;
		_bar_size_ = bar_length1;
		_tmp12_ = get_bar (&_tmp11_);
		_tmp13_ = _tmp12_;
		_tmp13__length1 = _tmp11_;
		_vala_assert (_tmp13_ == NULL, "get_bar () == null");
		_tmp13_ = (g_free (_tmp13_), NULL);
	}
	{
		gint* _tmp14_;
		gint _tmp15_ = 0;
		gint* _tmp16_;
		gint* _tmp17_;
		gint _tmp17__length1;
		_tmp14_ = g_new0 (gint, 0);
		bar = (g_free (bar), NULL);
		bar = _tmp14_;
		bar_length1 = 0;
		_bar_size_ = bar_length1;
		_tmp16_ = get_bar (&_tmp15_);
		_tmp17_ = _tmp16_;
		_tmp17__length1 = _tmp15_;
		_vala_assert (_tmp17_ == NULL, "get_bar () == null");
		_tmp17_ = (g_free (_tmp17_), NULL);
	}
	{
		Manam* _tmp18_;
		gint _tmp19_ = 0;
		Manam* _tmp20_;
		Manam* _tmp21_;
		gint _tmp21__length1;
		_tmp18_ = g_new0 (Manam, 0);
		manam = (_vala_Manam_array_free (manam, manam_length1), NULL);
		manam = _tmp18_;
		manam_length1 = 0;
		_manam_size_ = manam_length1;
		_tmp20_ = get_manam (&_tmp19_);
		_tmp21_ = _tmp20_;
		_tmp21__length1 = _tmp19_;
		_vala_assert (_tmp21_ == NULL, "get_manam () == null");
		_tmp21_ = (_vala_Manam_array_free (_tmp21_, _tmp21__length1), NULL);
	}
	{
		Manam* _tmp22_;
		gint _tmp23_ = 0;
		Manam* _tmp24_;
		Manam* _tmp25_;
		gint _tmp25__length1;
		_tmp22_ = g_new0 (Manam, 0);
		manam = (_vala_Manam_array_free (manam, manam_length1), NULL);
		manam = _tmp22_;
		manam_length1 = 0;
		_manam_size_ = manam_length1;
		_tmp24_ = get_manam (&_tmp23_);
		_tmp25_ = _tmp24_;
		_tmp25__length1 = _tmp23_;
		_vala_assert (_tmp25_ == NULL, "get_manam () == null");
		_tmp25_ = (_vala_Manam_array_free (_tmp25_, _tmp25__length1), NULL);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static inline gpointer
_vala_memdup2 (gconstpointer mem,
               gsize byte_size)
{
	gpointer new_mem;
	if (mem && byte_size != 0) {
		new_mem = g_malloc (byte_size);
		memcpy (new_mem, mem, byte_size);
	} else {
		new_mem = NULL;
	}
	return new_mem;
}

