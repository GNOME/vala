/* arrays_in_operator_with_boxed_needle.c generated by valac, the Vala compiler
 * generated from arrays_in_operator_with_boxed_needle.vala, do not modify */

#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
static gboolean _vala_int_array_contains (gint * stack,
                                   gssize stack_length,
                                   const gint needle);
static gint* _int_dup (gint* self);

static gboolean
_vala_int_array_contains (gint * stack,
                          gssize stack_length,
                          const gint needle)
{
	gssize i;
	for (i = 0; i < stack_length; i++) {
		if (needle == stack[i]) {
			return TRUE;
		}
	}
	return FALSE;
}

static gint*
_int_dup (gint* self)
{
	gint* dup;
	dup = g_new0 (gint, 1);
	memcpy (dup, self, sizeof (gint));
	return dup;
}

static gpointer
__int_dup0 (gpointer self)
{
	return self ? _int_dup (self) : NULL;
}

static void
_vala_main (void)
{
	gint* foo = NULL;
	gint* _tmp0_;
	gint foo_length1;
	gint _foo_size_;
	gint* i = NULL;
	gint* _tmp1_;
	gint _tmp2_;
	gint* _tmp3_;
	gint* _tmp4_;
	gint _tmp5_;
	gint* _tmp6_;
	gint* _tmp7_;
	_tmp0_ = g_new0 (gint, 3);
	_tmp0_[0] = 0;
	_tmp0_[1] = 23;
	_tmp0_[2] = 42;
	foo = _tmp0_;
	foo_length1 = 3;
	_foo_size_ = foo_length1;
	i = NULL;
	_tmp1_ = i;
	_vala_assert (!((_tmp1_ == NULL) ? FALSE : _vala_int_array_contains (foo, foo_length1, *_tmp1_)), "!(i in foo)");
	_tmp2_ = 23;
	_tmp3_ = __int_dup0 (&_tmp2_);
	_g_free0 (i);
	i = _tmp3_;
	_tmp4_ = i;
	_vala_assert (((_tmp4_ == NULL) ? FALSE : _vala_int_array_contains (foo, foo_length1, *_tmp4_)), "i in foo");
	_tmp5_ = 4711;
	_tmp6_ = __int_dup0 (&_tmp5_);
	_g_free0 (i);
	i = _tmp6_;
	_tmp7_ = i;
	_vala_assert (!((_tmp7_ == NULL) ? FALSE : _vala_int_array_contains (foo, foo_length1, *_tmp7_)), "!(i in foo)");
	_g_free0 (i);
	foo = (g_free (foo), NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

