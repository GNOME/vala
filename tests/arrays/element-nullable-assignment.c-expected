/* arrays_element_nullable_assignment.c generated by valac, the Vala compiler
 * generated from arrays_element_nullable_assignment.vala, do not modify */

#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
static gint* _int_dup (gint* self);
static gboolean _int_equal (const gint * s1,
                     const gint * s2);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static gint*
_int_dup (gint* self)
{
	gint* dup;
	dup = g_new0 (gint, 1);
	memcpy (dup, self, sizeof (gint));
	return dup;
}

static gpointer
__int_dup0 (gpointer self)
{
	return self ? _int_dup (self) : NULL;
}

static gboolean
_int_equal (const gint * s1,
            const gint * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static void
_vala_main (void)
{
	gint** foo = NULL;
	gint _tmp0_;
	gint* _tmp1_;
	gint _tmp2_;
	gint* _tmp3_;
	gint _tmp4_;
	gint* _tmp5_;
	gint** _tmp6_;
	gint foo_length1;
	gint _foo_size_;
	gint* _tmp7_;
	gint _tmp8_;
	gint* _tmp9_;
	gint* _tmp10_;
	gint _tmp11_;
	gint* _tmp12_;
	gint* _tmp13_;
	gint _tmp14_;
	gint* _tmp15_;
	gint* _tmp16_;
	gint _tmp17_;
	gint* _tmp18_;
	gint _tmp19_;
	gint* _tmp20_;
	gint _tmp21_;
	_tmp0_ = 23;
	_tmp1_ = __int_dup0 (&_tmp0_);
	_tmp2_ = 42;
	_tmp3_ = __int_dup0 (&_tmp2_);
	_tmp4_ = 4711;
	_tmp5_ = __int_dup0 (&_tmp4_);
	_tmp6_ = g_new0 (gint*, 3);
	_tmp6_[0] = _tmp1_;
	_tmp6_[1] = _tmp3_;
	_tmp6_[2] = _tmp5_;
	foo = _tmp6_;
	foo_length1 = 3;
	_foo_size_ = foo_length1;
	_tmp7_ = foo[0];
	_tmp8_ = (*_tmp7_) + 1;
	_tmp9_ = __int_dup0 (&_tmp8_);
	_g_free0 (foo[0]);
	foo[0] = _tmp9_;
	_tmp10_ = foo[1];
	_tmp11_ = (*_tmp10_) * 3;
	_tmp12_ = __int_dup0 (&_tmp11_);
	_g_free0 (foo[1]);
	foo[1] = _tmp12_;
	_tmp13_ = foo[2];
	_tmp14_ = (*_tmp13_) - 2;
	_tmp15_ = __int_dup0 (&_tmp14_);
	_g_free0 (foo[2]);
	foo[2] = _tmp15_;
	_tmp16_ = foo[0];
	_tmp17_ = 24;
	_vala_assert (_int_equal (_tmp16_, &_tmp17_) == TRUE, "foo[0] == 24");
	_tmp18_ = foo[1];
	_tmp19_ = 126;
	_vala_assert (_int_equal (_tmp18_, &_tmp19_) == TRUE, "foo[1] == 126");
	_tmp20_ = foo[2];
	_tmp21_ = 4709;
	_vala_assert (_int_equal (_tmp20_, &_tmp21_) == TRUE, "foo[2] == 4709");
	foo = (_vala_array_free (foo, foo_length1, (GDestroyNotify) g_free), NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

