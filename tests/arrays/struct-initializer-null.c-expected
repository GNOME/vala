/* arrays_struct_initializer_null.c generated by valac, the Vala compiler
 * generated from arrays_struct_initializer_null.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;

struct _Foo {
	const gchar* s;
	gint i;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
static void _vala_main (void);

const Foo FOOS[2] = {{"foo", 23}, {0}};
const Foo BARS[2] = {{"bar", 42}, (Foo) {0}};

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	memcpy (dup, self, sizeof (Foo));
	return dup;
}

void
foo_free (Foo* self)
{
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_main (void)
{
	Foo* foos = NULL;
	Foo _tmp0_ = {0};
	Foo _tmp1_ = {0};
	Foo* _tmp2_;
	gint foos_length1;
	gint _foos_size_;
	Foo* bars = NULL;
	Foo _tmp3_ = {0};
	Foo* _tmp4_;
	gint bars_length1;
	gint _bars_size_;
	memset (&_tmp0_, 0, sizeof (Foo));
	_tmp0_.s = "foo";
	_tmp0_.i = 23;
	memset (&_tmp1_, 0, sizeof (Foo));
	_tmp2_ = g_new0 (Foo, 2);
	_tmp2_[0] = _tmp0_;
	_tmp2_[1] = _tmp1_;
	foos = _tmp2_;
	foos_length1 = 2;
	_foos_size_ = foos_length1;
	memset (&_tmp3_, 0, sizeof (Foo));
	_tmp3_.s = "bar";
	_tmp3_.i = 42;
	_tmp4_ = g_new0 (Foo, 2);
	_tmp4_[0] = _tmp3_;
	_tmp4_[1] = (Foo) {0};
	bars = _tmp4_;
	bars_length1 = 2;
	_bars_size_ = bars_length1;
	bars = (g_free (bars), NULL);
	foos = (g_free (foos), NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

