/* generics_member_dup_destroy.c generated by valac, the Vala compiler
 * generated from generics_member_dup_destroy.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*FooFunc) (gpointer user_data);

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_G_TYPE,
	FOO_G_DUP_FUNC,
	FOO_G_DESTROY_FUNC,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _FooFooAsyncData FooFooAsyncData;
typedef struct _BarAsyncData BarAsyncData;
typedef struct _Block1Data Block1Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooPrivate {
	GType g_type;
	GBoxedCopyFunc g_dup_func;
	GDestroyNotify g_destroy_func;
};

struct _FooFooAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	Foo* self;
	gpointer g;
};

struct _BarAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gpointer t;
	GType t_type;
	GBoxedCopyFunc t_dup_func;
	GDestroyNotify t_destroy_func;
};

struct _Block1Data {
	int _ref_count_;
	GType t_type;
	GBoxedCopyFunc t_dup_func;
	GDestroyNotify t_destroy_func;
	gpointer t;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN Foo* foo_new (GType g_type,
              GBoxedCopyFunc g_dup_func,
              GDestroyNotify g_destroy_func);
VALA_EXTERN Foo* foo_construct (GType object_type,
                    GType g_type,
                    GBoxedCopyFunc g_dup_func,
                    GDestroyNotify g_destroy_func);
VALA_EXTERN void foo_foo (Foo* self);
static void foo_foo_async_data_free (gpointer _data);
VALA_EXTERN void foo_foo_async (Foo* self,
                    GAsyncReadyCallback _callback_,
                    gpointer _user_data_);
VALA_EXTERN void foo_foo_finish (Foo* self,
                     GAsyncResult* _res_);
static gboolean foo_foo_async_co (FooFooAsyncData* _data_);
VALA_EXTERN void foo_foo_captured (Foo* self);
static void _vala_lambda0_ (Foo* self);
static void __vala_lambda0__foo_func (gpointer self);
static GType foo_get_type_once (void);
static void _vala_foo_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_foo_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
VALA_EXTERN void bar (GType t_type,
          GBoxedCopyFunc t_dup_func,
          GDestroyNotify t_destroy_func,
          gconstpointer t);
static void bar_async_data_free (gpointer _data);
VALA_EXTERN void bar_async (GType t_type,
                GBoxedCopyFunc t_dup_func,
                GDestroyNotify t_destroy_func,
                gconstpointer t,
                GAsyncReadyCallback _callback_,
                gpointer _user_data_);
VALA_EXTERN void bar_finish (GAsyncResult* _res_);
static gboolean bar_async_co (BarAsyncData* _data_);
VALA_EXTERN void bar_captured (GType t_type,
                   GBoxedCopyFunc t_dup_func,
                   GDestroyNotify t_destroy_func,
                   gconstpointer t);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda1_ (Block1Data* _data1_);
static void __vala_lambda1__foo_func (gpointer self);
static void _vala_main (void);

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

Foo*
foo_construct (GType object_type,
               GType g_type,
               GBoxedCopyFunc g_dup_func,
               GDestroyNotify g_destroy_func)
{
	Foo * self = NULL;
	gpointer g = NULL;
	self = (Foo*) g_object_new (object_type, "g-type", g_type, "g-dup-func", g_dup_func, "g-destroy-func", g_destroy_func, NULL);
	self->priv->g_type = g_type;
	self->priv->g_dup_func = g_dup_func;
	self->priv->g_destroy_func = g_destroy_func;
	_vala_assert (g_type == G_TYPE_STRING, "typeof (G) == typeof (string)");
	_vala_assert (g_dup_func == ((GBoxedCopyFunc) g_strdup), "G.dup == (BoxedCopyFunc) string.dup");
	_vala_assert (g_destroy_func == ((GDestroyNotify) g_free), "G.destroy == (DestroyNotify) free");
	g = NULL;
	_vala_assert (g_dup_func == ((GBoxedCopyFunc) g_strdup), "g.dup == (BoxedCopyFunc) string.dup");
	_vala_assert (g_destroy_func == ((GDestroyNotify) g_free), "g.destroy == (DestroyNotify) free");
	((g == NULL) || (g_destroy_func == NULL)) ? NULL : (g = (g_destroy_func (g), NULL));
	return self;
}

Foo*
foo_new (GType g_type,
         GBoxedCopyFunc g_dup_func,
         GDestroyNotify g_destroy_func)
{
	return foo_construct (TYPE_FOO, g_type, g_dup_func, g_destroy_func);
}

void
foo_foo (Foo* self)
{
	gpointer g = NULL;
	g_return_if_fail (IS_FOO (self));
	_vala_assert (self->priv->g_type == G_TYPE_STRING, "typeof (G) == typeof (string)");
	_vala_assert (self->priv->g_dup_func == ((GBoxedCopyFunc) g_strdup), "G.dup == (BoxedCopyFunc) string.dup");
	_vala_assert (self->priv->g_destroy_func == ((GDestroyNotify) g_free), "G.destroy == (DestroyNotify) free");
	g = NULL;
	_vala_assert (self->priv->g_dup_func == ((GBoxedCopyFunc) g_strdup), "g.dup == (BoxedCopyFunc) string.dup");
	_vala_assert (self->priv->g_destroy_func == ((GDestroyNotify) g_free), "g.destroy == (DestroyNotify) free");
	((g == NULL) || (self->priv->g_destroy_func == NULL)) ? NULL : (g = (self->priv->g_destroy_func (g), NULL));
}

static void
foo_foo_async_data_free (gpointer _data)
{
	FooFooAsyncData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (FooFooAsyncData, _data_);
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

void
foo_foo_async (Foo* self,
               GAsyncReadyCallback _callback_,
               gpointer _user_data_)
{
	FooFooAsyncData* _data_;
	Foo* _tmp0_;
	g_return_if_fail (IS_FOO (self));
	_data_ = g_slice_new0 (FooFooAsyncData);
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, foo_foo_async_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	foo_foo_async_co (_data_);
}

void
foo_foo_finish (Foo* self,
                GAsyncResult* _res_)
{
	FooFooAsyncData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static gboolean
foo_foo_async_co (FooFooAsyncData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_vala_assert (_data_->self->priv->g_type == G_TYPE_STRING, "typeof (G) == typeof (string)");
	_vala_assert (_data_->self->priv->g_dup_func == ((GBoxedCopyFunc) g_strdup), "G.dup == (BoxedCopyFunc) string.dup");
	_vala_assert (_data_->self->priv->g_destroy_func == ((GDestroyNotify) g_free), "G.destroy == (DestroyNotify) free");
	_data_->g = NULL;
	_vala_assert (_data_->self->priv->g_dup_func == ((GBoxedCopyFunc) g_strdup), "g.dup == (BoxedCopyFunc) string.dup");
	_vala_assert (_data_->self->priv->g_destroy_func == ((GDestroyNotify) g_free), "g.destroy == (DestroyNotify) free");
	((_data_->g == NULL) || (_data_->self->priv->g_destroy_func == NULL)) ? NULL : (_data_->g = (_data_->self->priv->g_destroy_func (_data_->g), NULL));
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
_vala_lambda0_ (Foo* self)
{
	gpointer g = NULL;
	_vala_assert (self->priv->g_type == G_TYPE_STRING, "typeof (G) == typeof (string)");
	_vala_assert (self->priv->g_dup_func == ((GBoxedCopyFunc) g_strdup), "G.dup == (BoxedCopyFunc) string.dup");
	_vala_assert (self->priv->g_destroy_func == ((GDestroyNotify) g_free), "G.destroy == (DestroyNotify) free");
	g = NULL;
	_vala_assert (self->priv->g_dup_func == ((GBoxedCopyFunc) g_strdup), "g.dup == (BoxedCopyFunc) string.dup");
	_vala_assert (self->priv->g_destroy_func == ((GDestroyNotify) g_free), "g.destroy == (DestroyNotify) free");
	((g == NULL) || (self->priv->g_destroy_func == NULL)) ? NULL : (g = (self->priv->g_destroy_func (g), NULL));
}

static void
__vala_lambda0__foo_func (gpointer self)
{
	_vala_lambda0_ ((Foo*) self);
}

void
foo_foo_captured (Foo* self)
{
	FooFunc f = NULL;
	gpointer f_target;
	GDestroyNotify f_target_destroy_notify;
	g_return_if_fail (IS_FOO (self));
	f = __vala_lambda0__foo_func;
	f_target = g_object_ref (self);
	f_target_destroy_notify = g_object_unref;
	f (f_target);
	(f_target_destroy_notify == NULL) ? NULL : (f_target_destroy_notify (f_target), NULL);
	f = NULL;
	f_target = NULL;
	f_target_destroy_notify = NULL;
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_foo_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_foo_set_property;
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_G_TYPE, g_param_spec_gtype ("g-type", "type", "type", G_TYPE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_G_DUP_FUNC, g_param_spec_pointer ("g-dup-func", "dup func", "dup func", G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOO_G_DESTROY_FUNC, g_param_spec_pointer ("g-destroy-func", "destroy func", "destroy func", G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_foo_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_G_TYPE:
		g_value_set_gtype (value, self->priv->g_type);
		break;
		case FOO_G_DUP_FUNC:
		g_value_set_pointer (value, self->priv->g_dup_func);
		break;
		case FOO_G_DESTROY_FUNC:
		g_value_set_pointer (value, self->priv->g_destroy_func);
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_foo_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_FOO, Foo);
	switch (property_id) {
		case FOO_G_TYPE:
		self->priv->g_type = g_value_get_gtype (value);
		break;
		case FOO_G_DUP_FUNC:
		self->priv->g_dup_func = g_value_get_pointer (value);
		break;
		case FOO_G_DESTROY_FUNC:
		self->priv->g_destroy_func = g_value_get_pointer (value);
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

void
bar (GType t_type,
     GBoxedCopyFunc t_dup_func,
     GDestroyNotify t_destroy_func,
     gconstpointer t)
{
	_vala_assert (t_type == TYPE_FOO, "typeof (T) == typeof (Foo)");
	_vala_assert (t_dup_func == ((GBoxedCopyFunc) g_object_ref), "T.dup == (BoxedCopyFunc) Object.@ref");
	_vala_assert (t_destroy_func == ((GDestroyNotify) g_object_unref), "T.destroy == (DestroyNotify) Object.unref");
	_vala_assert (t_dup_func == ((GBoxedCopyFunc) g_object_ref), "t.dup == (BoxedCopyFunc) Object.@ref");
	_vala_assert (t_destroy_func == ((GDestroyNotify) g_object_unref), "t.destroy == (DestroyNotify) Object.unref");
}

static void
bar_async_data_free (gpointer _data)
{
	BarAsyncData* _data_;
	_data_ = _data;
	((_data_->t == NULL) || (_data_->t_destroy_func == NULL)) ? NULL : (_data_->t = (_data_->t_destroy_func (_data_->t), NULL));
	g_slice_free (BarAsyncData, _data_);
}

void
bar_async (GType t_type,
           GBoxedCopyFunc t_dup_func,
           GDestroyNotify t_destroy_func,
           gconstpointer t,
           GAsyncReadyCallback _callback_,
           gpointer _user_data_)
{
	BarAsyncData* _data_;
	gpointer _tmp0_;
	_data_ = g_slice_new0 (BarAsyncData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, bar_async_data_free);
	_tmp0_ = ((t != NULL) && (t_dup_func != NULL)) ? t_dup_func ((gpointer) t) : ((gpointer) t);
	((_data_->t == NULL) || (_data_->t_destroy_func == NULL)) ? NULL : (_data_->t = (_data_->t_destroy_func (_data_->t), NULL));
	_data_->t = _tmp0_;
	_data_->t_type = t_type;
	_data_->t_dup_func = t_dup_func;
	_data_->t_destroy_func = t_destroy_func;
	bar_async_co (_data_);
}

void
bar_finish (GAsyncResult* _res_)
{
	BarAsyncData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static gboolean
bar_async_co (BarAsyncData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_vala_assert (_data_->t_type == TYPE_FOO, "typeof (T) == typeof (Foo)");
	_vala_assert (_data_->t_dup_func == ((GBoxedCopyFunc) g_object_ref), "T.dup == (BoxedCopyFunc) Object.@ref");
	_vala_assert (_data_->t_destroy_func == ((GDestroyNotify) g_object_unref), "T.destroy == (DestroyNotify) Object.unref");
	_vala_assert (_data_->t_dup_func == ((GBoxedCopyFunc) g_object_ref), "t.dup == (BoxedCopyFunc) Object.@ref");
	_vala_assert (_data_->t_destroy_func == ((GDestroyNotify) g_object_unref), "t.destroy == (DestroyNotify) Object.unref");
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		GType t_type;
		GBoxedCopyFunc t_dup_func;
		GDestroyNotify t_destroy_func;
		t_type = _data1_->t_type;
		t_dup_func = _data1_->t_dup_func;
		t_destroy_func = _data1_->t_destroy_func;
		((_data1_->t == NULL) || (t_destroy_func == NULL)) ? NULL : (_data1_->t = (t_destroy_func (_data1_->t), NULL));
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda1_ (Block1Data* _data1_)
{
	GType t_type;
	GBoxedCopyFunc t_dup_func;
	GDestroyNotify t_destroy_func;
	t_type = _data1_->t_type;
	t_dup_func = _data1_->t_dup_func;
	t_destroy_func = _data1_->t_destroy_func;
	_vala_assert (t_type == TYPE_FOO, "typeof (T) == typeof (Foo)");
	_vala_assert (t_dup_func == ((GBoxedCopyFunc) g_object_ref), "T.dup == (BoxedCopyFunc) Object.@ref");
	_vala_assert (t_destroy_func == ((GDestroyNotify) g_object_unref), "T.destroy == (DestroyNotify) Object.unref");
	_vala_assert (t_dup_func == ((GBoxedCopyFunc) g_object_ref), "t.dup == (BoxedCopyFunc) Object.@ref");
	_vala_assert (t_destroy_func == ((GDestroyNotify) g_object_unref), "t.destroy == (DestroyNotify) Object.unref");
}

static void
__vala_lambda1__foo_func (gpointer self)
{
	_vala_lambda1_ (self);
}

void
bar_captured (GType t_type,
              GBoxedCopyFunc t_dup_func,
              GDestroyNotify t_destroy_func,
              gconstpointer t)
{
	Block1Data* _data1_;
	gpointer _tmp0_;
	FooFunc f = NULL;
	gpointer f_target;
	GDestroyNotify f_target_destroy_notify;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->t_type = t_type;
	_data1_->t_dup_func = t_dup_func;
	_data1_->t_destroy_func = t_destroy_func;
	_tmp0_ = ((t != NULL) && (t_dup_func != NULL)) ? t_dup_func ((gpointer) t) : ((gpointer) t);
	((_data1_->t == NULL) || (t_destroy_func == NULL)) ? NULL : (_data1_->t = (t_destroy_func (_data1_->t), NULL));
	_data1_->t = _tmp0_;
	f = __vala_lambda1__foo_func;
	f_target = block1_data_ref (_data1_);
	f_target_destroy_notify = block1_data_unref;
	f (f_target);
	(f_target_destroy_notify == NULL) ? NULL : (f_target_destroy_notify (f_target), NULL);
	f = NULL;
	f_target = NULL;
	f_target_destroy_notify = NULL;
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	_tmp0_ = foo_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free);
	foo = _tmp0_;
	foo_foo (foo);
	foo_foo_async (foo, NULL, NULL);
	foo_foo_captured (foo);
	bar (TYPE_FOO, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, foo);
	bar_async (TYPE_FOO, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, foo, NULL, NULL);
	bar_captured (TYPE_FOO, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, foo);
	_g_object_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

