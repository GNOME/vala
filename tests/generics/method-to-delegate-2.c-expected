/* generics_method_to_delegate_2.c generated by valac, the Vala compiler
 * generated from generics_method_to_delegate_2.vala, do not modify */

#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*Func) (gconstpointer g, gpointer user_data);
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN void foo (const gchar* s);
VALA_EXTERN void call_foo (Func f,
               gpointer f_target);
VALA_EXTERN void bar (gint i);
VALA_EXTERN void call_bar (Func f,
               gpointer f_target);
static void _vala_main (void);
static void _foo_func (gconstpointer g,
                gpointer self);
static void _bar_func (gconstpointer g,
                gpointer self);

void
foo (const gchar* s)
{
	g_return_if_fail (s != NULL);
	_vala_assert (g_strcmp0 (s, "foo") == 0, "s == \"foo\"");
}

void
call_foo (Func f,
          gpointer f_target)
{
	f ("foo", f_target);
}

void
bar (gint i)
{
	_vala_assert (i == 42, "i == 42");
}

void
call_bar (Func f,
          gpointer f_target)
{
	f ((gpointer) ((gintptr) 42), f_target);
}

static void
_foo_func (gconstpointer g,
           gpointer self)
{
	foo ((const gchar*) g);
}

static void
_bar_func (gconstpointer g,
           gpointer self)
{
	bar ((gint) ((gintptr) g));
}

static void
_vala_main (void)
{
	call_foo (_foo_func, NULL);
	call_bar (_bar_func, NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

