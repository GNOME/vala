/* generics_integer_type_cast_return.c generated by valac, the Vala compiler
 * generated from generics_integer_type_cast_return.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN gpointer manam (GType t_type,
                GBoxedCopyFunc t_dup_func,
                GDestroyNotify t_destroy_func,
                gint i);
static gint* _int_dup (gint* self);
VALA_EXTERN gpointer minim (GType t_type,
                GBoxedCopyFunc t_dup_func,
                GDestroyNotify t_destroy_func,
                guint i);
static guint* _uint_dup (guint* self);
static void _vala_main (void);
static gboolean _int_equal (const gint * s1,
                     const gint * s2);
static gboolean _uint_equal (const guint * s1,
                      const guint * s2);

static gint*
_int_dup (gint* self)
{
	gint* dup;
	dup = g_new0 (gint, 1);
	memcpy (dup, self, sizeof (gint));
	return dup;
}

static gpointer
__int_dup0 (gpointer self)
{
	return self ? _int_dup (self) : NULL;
}

gpointer
manam (GType t_type,
       GBoxedCopyFunc t_dup_func,
       GDestroyNotify t_destroy_func,
       gint i)
{
	gint* _tmp0_ = NULL;
	gint* _tmp1_;
	gint* _tmp2_;
	gpointer result;
	_tmp1_ = __int_dup0 (&i);
	_tmp0_ = _tmp1_;
	_tmp2_ = _tmp0_;
	_tmp0_ = NULL;
	result = _tmp2_;
	_g_free0 (_tmp0_);
	return result;
}

static guint*
_uint_dup (guint* self)
{
	guint* dup;
	dup = g_new0 (guint, 1);
	memcpy (dup, self, sizeof (guint));
	return dup;
}

static gpointer
__uint_dup0 (gpointer self)
{
	return self ? _uint_dup (self) : NULL;
}

gpointer
minim (GType t_type,
       GBoxedCopyFunc t_dup_func,
       GDestroyNotify t_destroy_func,
       guint i)
{
	guint* _tmp0_ = NULL;
	guint* _tmp1_;
	guint* _tmp2_;
	gpointer result;
	_tmp1_ = __uint_dup0 (&i);
	_tmp0_ = _tmp1_;
	_tmp2_ = _tmp0_;
	_tmp0_ = NULL;
	result = _tmp2_;
	_g_free0 (_tmp0_);
	return result;
}

static gboolean
_int_equal (const gint * s1,
            const gint * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static gboolean
_uint_equal (const guint * s1,
             const guint * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static void
_vala_main (void)
{
	gpointer _tmp0_;
	gint* _tmp1_;
	gint _tmp2_;
	gpointer _tmp3_;
	guint* _tmp4_;
	guint _tmp5_;
	gpointer _tmp6_;
	gpointer _tmp7_;
	_tmp0_ = manam (G_TYPE_INT, (GBoxedCopyFunc) _int_dup, (GDestroyNotify) g_free, G_MININT);
	_tmp1_ = (gint*) _tmp0_;
	_tmp2_ = G_MININT;
	_vala_assert (_int_equal (_tmp1_, &_tmp2_) == TRUE, "manam<int?> (int.MIN) == int.MIN");
	_g_free0 (_tmp1_);
	_tmp3_ = minim (G_TYPE_UINT, (GBoxedCopyFunc) _uint_dup, (GDestroyNotify) g_free, G_MAXUINT);
	_tmp4_ = (guint*) _tmp3_;
	_tmp5_ = G_MAXUINT;
	_vala_assert (_uint_equal (_tmp4_, &_tmp5_) == TRUE, "minim<uint?> (uint.MAX) == uint.MAX");
	_g_free0 (_tmp4_);
	_tmp6_ = manam (G_TYPE_INT, (GBoxedCopyFunc) _int_dup, (GDestroyNotify) g_free, G_MININT);
	_vala_assert (((gint) (*((gint*) ((gint*) _tmp6_)))) == G_MININT, "(int) ((int?) manam<int?> (int.MIN)) == int.MIN");
	_g_free0 (_tmp6_);
	_tmp7_ = minim (G_TYPE_UINT, (GBoxedCopyFunc) _uint_dup, (GDestroyNotify) g_free, G_MAXUINT);
	_vala_assert (((guint) (*((guint*) ((guint*) _tmp7_)))) == G_MAXUINT, "(uint) ((uint?) minim<uint?> (uint.MAX)) == uint.MAX");
	_g_free0 (_tmp7_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

