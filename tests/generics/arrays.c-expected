/* generics_arrays.c generated by valac, the Vala compiler
 * generated from generics_arrays.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
	gpointer* ga;
	gint ga_length1;
	gint _ga_size_;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
};

struct _FooPrivate {
	GType g_type;
	GBoxedCopyFunc g_dup_func;
	GDestroyNotify g_destroy_func;
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

static gint Foo_private_offset;
static gpointer foo_parent_class = NULL;

VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN Foo* foo_new (GType g_type,
              GBoxedCopyFunc g_dup_func,
              GDestroyNotify g_destroy_func,
              gconstpointer g);
VALA_EXTERN Foo* foo_construct (GType object_type,
                    GType g_type,
                    GBoxedCopyFunc g_dup_func,
                    GDestroyNotify g_destroy_func,
                    gconstpointer g);
static gpointer* _vala_array_dup1 (gpointer* self,
                            gssize length,
                            GBoxedCopyFunc g_dup_func);
VALA_EXTERN void foo_foo (Foo* self,
              gpointer* gs,
              gint gs_length1);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN void bar (GType g_type,
          GBoxedCopyFunc g_dup_func,
          GDestroyNotify g_destroy_func,
          gconstpointer g);
static gpointer* _vala_array_dup2 (gpointer* self,
                            gssize length,
                            GBoxedCopyFunc g_dup_func);
static void _vala_main (void);
static gchar** _vala_array_dup3 (gchar** self,
                          gssize length);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static inline gpointer
foo_get_instance_private (Foo* self)
{
	return G_STRUCT_MEMBER_P (self, Foo_private_offset);
}

static gpointer*
_vala_array_dup1 (gpointer* self,
                  gssize length,
                  GBoxedCopyFunc g_dup_func)
{
	if (length > 0) {
		gpointer* result;
		gssize i;
		result = g_new0 (gpointer, length);
		for (i = 0; i < length; i++) {
			gpointer _tmp0_;
			_tmp0_ = ((self[i] != NULL) && (g_dup_func != NULL)) ? g_dup_func ((gpointer) self[i]) : ((gpointer) self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

Foo*
foo_construct (GType object_type,
               GType g_type,
               GBoxedCopyFunc g_dup_func,
               GDestroyNotify g_destroy_func,
               gconstpointer g)
{
	Foo* self = NULL;
	gpointer* gs = NULL;
	gpointer _tmp0_;
	gpointer* _tmp1_;
	gint gs_length1;
	gint _gs_size_;
	gconstpointer _tmp2_;
	gpointer* _tmp3_;
	gint _tmp3__length1;
	gpointer* _tmp4_;
	gint _tmp4__length1;
	gpointer* _tmp5_;
	gint _tmp5__length1;
	gconstpointer _tmp6_;
	self = (Foo*) g_type_create_instance (object_type);
	self->priv->g_type = g_type;
	self->priv->g_dup_func = g_dup_func;
	self->priv->g_destroy_func = g_destroy_func;
	_tmp0_ = ((g != NULL) && (g_dup_func != NULL)) ? g_dup_func ((gpointer) g) : ((gpointer) g);
	_tmp1_ = g_new0 (gpointer, 1);
	_tmp1_[0] = _tmp0_;
	gs = _tmp1_;
	gs_length1 = 1;
	_gs_size_ = gs_length1;
	_vala_assert (gs_length1 == 1, "gs.length == 1");
	_tmp2_ = gs[0];
	_vala_assert (g_strcmp0 (_tmp2_, "foo") == 0, "gs[0] == \"foo\"");
	_tmp3_ = (gs != NULL) ? _vala_array_dup1 (gs, gs_length1, g_dup_func) : gs;
	_tmp3__length1 = gs_length1;
	self->ga = (_vala_array_free (self->ga, self->ga_length1, (GDestroyNotify) g_destroy_func), NULL);
	self->ga = _tmp3_;
	self->ga_length1 = _tmp3__length1;
	self->_ga_size_ = self->ga_length1;
	_tmp4_ = self->ga;
	_tmp4__length1 = self->ga_length1;
	_vala_assert (_tmp4__length1 == 1, "ga.length == 1");
	_tmp5_ = self->ga;
	_tmp5__length1 = self->ga_length1;
	_tmp6_ = _tmp5_[0];
	_vala_assert (g_strcmp0 (_tmp6_, "foo") == 0, "ga[0] == \"foo\"");
	gs = (_vala_array_free (gs, gs_length1, (GDestroyNotify) g_destroy_func), NULL);
	return self;
}

Foo*
foo_new (GType g_type,
         GBoxedCopyFunc g_dup_func,
         GDestroyNotify g_destroy_func,
         gconstpointer g)
{
	return foo_construct (TYPE_FOO, g_type, g_dup_func, g_destroy_func, g);
}

void
foo_foo (Foo* self,
         gpointer* gs,
         gint gs_length1)
{
	gconstpointer _tmp0_;
	g_return_if_fail (IS_FOO (self));
	_vala_assert (gs_length1 == 1, "gs.length == 1");
	_tmp0_ = gs[0];
	_vala_assert (g_strcmp0 (_tmp0_, "foo") == 0, "gs[0] == \"foo\"");
	gs = (_vala_array_free (gs, gs_length1, (GDestroyNotify) self->priv->g_destroy_func), NULL);
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	g_type_class_adjust_private_offset (klass, &Foo_private_offset);
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->priv = foo_get_instance_private (self);
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
	self->ga = (_vala_array_free (self->ga, self->ga_length1, (GDestroyNotify) self->priv->g_destroy_func), NULL);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Foo_private_offset = g_type_add_instance_private (foo_type_id, sizeof (FooPrivate));
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static gpointer*
_vala_array_dup2 (gpointer* self,
                  gssize length,
                  GBoxedCopyFunc g_dup_func)
{
	if (length > 0) {
		gpointer* result;
		gssize i;
		result = g_new0 (gpointer, length);
		for (i = 0; i < length; i++) {
			gpointer _tmp0_;
			_tmp0_ = ((self[i] != NULL) && (g_dup_func != NULL)) ? g_dup_func ((gpointer) self[i]) : ((gpointer) self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

void
bar (GType g_type,
     GBoxedCopyFunc g_dup_func,
     GDestroyNotify g_destroy_func,
     gconstpointer g)
{
	gpointer* gs = NULL;
	gpointer _tmp0_;
	gpointer* _tmp1_;
	gint gs_length1;
	gint _gs_size_;
	gconstpointer _tmp2_;
	gpointer* gs_copy = NULL;
	gpointer* _tmp3_;
	gint _tmp3__length1;
	gint gs_copy_length1;
	gint _gs_copy_size_;
	gconstpointer _tmp4_;
	_tmp0_ = ((g != NULL) && (g_dup_func != NULL)) ? g_dup_func ((gpointer) g) : ((gpointer) g);
	_tmp1_ = g_new0 (gpointer, 1);
	_tmp1_[0] = _tmp0_;
	gs = _tmp1_;
	gs_length1 = 1;
	_gs_size_ = gs_length1;
	_vala_assert (gs_length1 == 1, "gs.length == 1");
	_tmp2_ = gs[0];
	_vala_assert (g_strcmp0 (_tmp2_, "bar") == 0, "gs[0] == \"bar\"");
	_tmp3_ = (gs != NULL) ? _vala_array_dup2 (gs, gs_length1, g_dup_func) : gs;
	_tmp3__length1 = gs_length1;
	gs_copy = _tmp3_;
	gs_copy_length1 = _tmp3__length1;
	_gs_copy_size_ = gs_copy_length1;
	_vala_assert (gs_copy_length1 == 1, "gs_copy.length == 1");
	_tmp4_ = gs_copy[0];
	_vala_assert (g_strcmp0 (_tmp4_, "bar") == 0, "gs_copy[0] == \"bar\"");
	gs_copy = (_vala_array_free (gs_copy, gs_copy_length1, (GDestroyNotify) g_destroy_func), NULL);
	gs = (_vala_array_free (gs, gs_length1, (GDestroyNotify) g_destroy_func), NULL);
}

static gchar**
_vala_array_dup3 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	gpointer* _tmp1_;
	gint _tmp1__length1;
	gchar** _tmp2_;
	gint _tmp2__length1;
	_tmp0_ = foo_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, "foo");
	foo = _tmp0_;
	_tmp1_ = foo->ga;
	_tmp1__length1 = foo->ga_length1;
	_tmp2_ = (_tmp1_ != NULL) ? _vala_array_dup3 (_tmp1_, _tmp1__length1) : _tmp1_;
	_tmp2__length1 = _tmp1__length1;
	foo_foo (foo, _tmp2_, (gint) _tmp2__length1);
	bar (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, "bar");
	_foo_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

