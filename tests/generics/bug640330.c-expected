/* generics_bug640330.c generated by valac, the Vala compiler
 * generated from generics_bug640330.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define FOO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_FOO, FooIface))

typedef struct _Foo Foo;
typedef struct _FooIface FooIface;

#define TYPE_BAR (bar_get_type ())
#define BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_BAR, Bar))
#define BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_BAR, BarClass))
#define IS_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_BAR))
#define IS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_BAR))
#define BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_BAR, BarClass))

typedef struct _Bar Bar;
typedef struct _BarClass BarClass;
typedef struct _BarPrivate BarPrivate;
enum  {
	BAR_0_PROPERTY,
	BAR_G_TYPE,
	BAR_G_DUP_FUNC,
	BAR_G_DESTROY_FUNC,
	BAR_NUM_PROPERTIES
};
static GParamSpec* bar_properties[BAR_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FooIface {
	GTypeInterface parent_iface;
	GType (*get_g_type) (Foo* self);
	GBoxedCopyFunc (*get_g_dup_func) (Foo* self);
	GDestroyNotify (*get_g_destroy_func) (Foo* self);
	gpointer (*get_foo) (Foo* self, gconstpointer g);
};

struct _Bar {
	GObject parent_instance;
	BarPrivate * priv;
};

struct _BarClass {
	GObjectClass parent_class;
};

struct _BarPrivate {
	GType g_type;
	GBoxedCopyFunc g_dup_func;
	GDestroyNotify g_destroy_func;
};

static gint Bar_private_offset;
static gpointer bar_parent_class = NULL;
static FooIface * bar_foo_parent_iface = NULL;

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
VALA_EXTERN gpointer foo_get_foo (Foo* self,
                      gconstpointer g);
static gpointer foo_real_get_foo (Foo* self,
                           gconstpointer g);
static GType foo_get_type_once (void);
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Bar, g_object_unref)
VALA_EXTERN Bar* bar_new (GType g_type,
              GBoxedCopyFunc g_dup_func,
              GDestroyNotify g_destroy_func);
VALA_EXTERN Bar* bar_construct (GType object_type,
                    GType g_type,
                    GBoxedCopyFunc g_dup_func,
                    GDestroyNotify g_destroy_func);
static GType bar_get_type_once (void);
static void _vala_bar_get_property (GObject * object,
                             guint property_id,
                             GValue * value,
                             GParamSpec * pspec);
static void _vala_bar_set_property (GObject * object,
                             guint property_id,
                             const GValue * value,
                             GParamSpec * pspec);
static void _vala_main (void);

static gpointer
foo_real_get_foo (Foo* self,
                  gconstpointer g)
{
	gpointer g_copy = NULL;
	gpointer _tmp0_;
	GCompareFunc _tmp1_;
	gpointer _tmp2_;
	gpointer result;
	_vala_assert (FOO_GET_INTERFACE (self)->get_g_type (self) == G_TYPE_STRING, "typeof (G) == typeof (string)");
	_tmp0_ = ((g != NULL) && (FOO_GET_INTERFACE (self)->get_g_dup_func (self) != NULL)) ? FOO_GET_INTERFACE (self)->get_g_dup_func (self) ((gpointer) g) : ((gpointer) g);
	g_copy = _tmp0_;
	_tmp1_ = ((GCompareFunc) g_strcmp0);
	_vala_assert (_tmp1_ ((const gchar*) g_copy, "foo") == 0, "GLib.strcmp ((string) g_copy, \"foo\") == 0");
	_vala_assert (g_copy != g, "g_copy != g");
	_tmp2_ = ((g != NULL) && (FOO_GET_INTERFACE (self)->get_g_dup_func (self) != NULL)) ? FOO_GET_INTERFACE (self)->get_g_dup_func (self) ((gpointer) g) : ((gpointer) g);
	result = _tmp2_;
	((g_copy == NULL) || (FOO_GET_INTERFACE (self)->get_g_destroy_func (self) == NULL)) ? NULL : (g_copy = (FOO_GET_INTERFACE (self)->get_g_destroy_func (self) (g_copy), NULL));
	return result;
}

gpointer
foo_get_foo (Foo* self,
             gconstpointer g)
{
	FooIface* _iface_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_iface_ = FOO_GET_INTERFACE (self);
	if (_iface_->get_foo) {
		return _iface_->get_foo (self, g);
	}
	return NULL;
}

static void
foo_default_init (FooIface * iface,
                  gpointer iface_data)
{
	iface->get_foo = foo_real_get_foo;
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_INTERFACE, "Foo", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (foo_type_id, G_TYPE_OBJECT);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static inline gpointer
bar_get_instance_private (Bar* self)
{
	return G_STRUCT_MEMBER_P (self, Bar_private_offset);
}

Bar*
bar_construct (GType object_type,
               GType g_type,
               GBoxedCopyFunc g_dup_func,
               GDestroyNotify g_destroy_func)
{
	Bar * self = NULL;
	self = (Bar*) g_object_new (object_type, "g-type", g_type, "g-dup-func", g_dup_func, "g-destroy-func", g_destroy_func, NULL);
	self->priv->g_type = g_type;
	self->priv->g_dup_func = g_dup_func;
	self->priv->g_destroy_func = g_destroy_func;
	return self;
}

Bar*
bar_new (GType g_type,
         GBoxedCopyFunc g_dup_func,
         GDestroyNotify g_destroy_func)
{
	return bar_construct (TYPE_BAR, g_type, g_dup_func, g_destroy_func);
}

static void
bar_class_init (BarClass * klass,
                gpointer klass_data)
{
	bar_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Bar_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_bar_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_bar_set_property;
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_G_TYPE, g_param_spec_gtype ("g-type", "type", "type", G_TYPE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_G_DUP_FUNC, g_param_spec_pointer ("g-dup-func", "dup func", "dup func", G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), BAR_G_DESTROY_FUNC, g_param_spec_pointer ("g-destroy-func", "destroy func", "destroy func", G_PARAM_STATIC_STRINGS | G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
}

static GType
bar_foo_get_g_type (Bar* self)
{
	return (GType) self->priv->g_type;
}

static GBoxedCopyFunc
bar_foo_get_g_dup_func (Bar* self)
{
	return (GBoxedCopyFunc) self->priv->g_dup_func;
}

static GDestroyNotify
bar_foo_get_g_destroy_func (Bar* self)
{
	return (GDestroyNotify) self->priv->g_destroy_func;
}

static void
bar_foo_interface_init (FooIface * iface,
                        gpointer iface_data)
{
	bar_foo_parent_iface = g_type_interface_peek_parent (iface);
	iface->get_g_type = (GType (*) (Foo *)) bar_foo_get_g_type;
	iface->get_g_dup_func = (GBoxedCopyFunc (*) (Foo *)) bar_foo_get_g_dup_func;
	iface->get_g_destroy_func = (GDestroyNotify (*) (Foo *)) bar_foo_get_g_destroy_func;
}

static void
bar_instance_init (Bar * self,
                   gpointer klass)
{
	self->priv = bar_get_instance_private (self);
}

static GType
bar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (BarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Bar), 0, (GInstanceInitFunc) bar_instance_init, NULL };
	static const GInterfaceInfo foo_info = { (GInterfaceInitFunc) bar_foo_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType bar_type_id;
	bar_type_id = g_type_register_static (G_TYPE_OBJECT, "Bar", &g_define_type_info, 0);
	g_type_add_interface_static (bar_type_id, TYPE_FOO, &foo_info);
	Bar_private_offset = g_type_add_instance_private (bar_type_id, sizeof (BarPrivate));
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_bar_get_property (GObject * object,
                        guint property_id,
                        GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_G_TYPE:
		g_value_set_gtype (value, self->priv->g_type);
		break;
		case BAR_G_DUP_FUNC:
		g_value_set_pointer (value, self->priv->g_dup_func);
		break;
		case BAR_G_DESTROY_FUNC:
		g_value_set_pointer (value, self->priv->g_destroy_func);
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_bar_set_property (GObject * object,
                        guint property_id,
                        const GValue * value,
                        GParamSpec * pspec)
{
	Bar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_BAR, Bar);
	switch (property_id) {
		case BAR_G_TYPE:
		self->priv->g_type = g_value_get_gtype (value);
		break;
		case BAR_G_DUP_FUNC:
		self->priv->g_dup_func = g_value_get_pointer (value);
		break;
		case BAR_G_DESTROY_FUNC:
		self->priv->g_destroy_func = g_value_get_pointer (value);
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_main (void)
{
	Bar* bar = NULL;
	Bar* _tmp0_;
	gpointer _tmp1_;
	gchar* _tmp2_;
	_tmp0_ = bar_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free);
	bar = _tmp0_;
	_tmp1_ = foo_get_foo (G_TYPE_CHECK_INSTANCE_CAST (bar, TYPE_FOO, Foo), "foo");
	_tmp2_ = (gchar*) _tmp1_;
	_vala_assert (g_strcmp0 ("foo", _tmp2_) == 0, "\"foo\" == bar.get_foo (\"foo\")");
	_g_free0 (_tmp2_);
	_g_object_unref0 (bar);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

