/* generics_parameter_sizeof_initializer.c generated by valac, the Vala compiler
 * generated from generics_parameter_sizeof_initializer.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
#define _g_array_unref0(var) ((var == NULL) ? NULL : (var = (g_array_unref (var), NULL)))
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	int dummy;
};

VALA_EXTERN void foo_free (Foo * self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_free)
static void foo_instance_init (Foo * self);
VALA_EXTERN Foo* foo_new (gulong real_foo,
              gulong foo);
VALA_EXTERN void foo_bar (Foo* self,
              gulong real_foo,
              gulong foo);
static void _vala_main (void);

Foo*
foo_new (gulong real_foo,
         gulong foo)
{
	Foo* self;
	self = g_slice_new0 (Foo);
	foo_instance_init (self);
	_vala_assert (foo == real_foo, "foo == real_foo");
	return self;
}

void
foo_bar (Foo* self,
         gulong real_foo,
         gulong foo)
{
	g_return_if_fail (self != NULL);
	_vala_assert (foo == real_foo, "foo == real_foo");
}

static void
foo_instance_init (Foo * self)
{
}

void
foo_free (Foo * self)
{
	g_slice_free (Foo, self);
}

static void
_vala_main (void)
{
	{
		GArray* garray = NULL;
		GArray* _tmp0_;
		_tmp0_ = g_array_new (TRUE, TRUE, sizeof (guint32));
		garray = _tmp0_;
		_g_array_unref0 (garray);
	}
	{
		Foo* foo = NULL;
		Foo* _tmp1_;
		_tmp1_ = foo_new (sizeof (guint32), sizeof (guint32));
		foo = _tmp1_;
		foo_bar (foo, (gulong) 4, sizeof (guint32));
		_foo_free0 (foo);
	}
	{
		Foo* foo = NULL;
		Foo* _tmp2_;
		_tmp2_ = foo_new (sizeof (gint16), sizeof (gint16));
		foo = _tmp2_;
		foo_bar (foo, (gulong) 2, sizeof (gint16));
		_foo_free0 (foo);
	}
	{
		Foo* foo = NULL;
		Foo* _tmp3_;
		_tmp3_ = foo_new (sizeof (guint8), sizeof (guint8));
		foo = _tmp3_;
		foo_bar (foo, (gulong) 1, sizeof (guint8));
		_foo_free0 (foo);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

