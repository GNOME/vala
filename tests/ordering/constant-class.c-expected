/* ordering_constant_class.c generated by valac, the Vala compiler
 * generated from ordering_constant_class.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>

#define FOO 42
#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOOCLASS (fooclass_get_type ())
#define FOOCLASS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOOCLASS, FooClass))
#define FOOCLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOOCLASS, FooClassClass))
#define IS_FOOCLASS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOOCLASS))
#define IS_FOOCLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOOCLASS))
#define FOOCLASS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOOCLASS, FooClassClass))

typedef struct _FooClass FooClass;
typedef struct _FooClassClass FooClassClass;
typedef struct _FooClassPrivate FooClassPrivate;
typedef struct _ParamSpecFooClass ParamSpecFooClass;
#define _fooclass_unref0(var) ((var == NULL) ? NULL : (var = (fooclass_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FooClass {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooClassPrivate * priv;
	gint field;
	gint array[FOO];
};

struct _FooClassClass {
	GTypeClass parent_class;
	void (*finalize) (FooClass *self);
};

struct _FooClassPrivate {
	gint pfield;
	gint parray[FOO];
};

struct _ParamSpecFooClass {
	GParamSpec parent_instance;
};

static gint FooClass_private_offset;
static gpointer fooclass_parent_class = NULL;

VALA_EXTERN gpointer fooclass_ref (gpointer instance);
VALA_EXTERN void fooclass_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_fooclass (const gchar* name,
                                 const gchar* nick,
                                 const gchar* blurb,
                                 GType object_type,
                                 GParamFlags flags);
VALA_EXTERN void value_set_fooclass (GValue* value,
                         gpointer v_object);
VALA_EXTERN void value_take_fooclass (GValue* value,
                          gpointer v_object);
VALA_EXTERN gpointer value_get_fooclass (const GValue* value);
VALA_EXTERN GType fooclass_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (FooClass, fooclass_unref)
VALA_EXTERN FooClass* fooclass_new (void);
VALA_EXTERN FooClass* fooclass_construct (GType object_type);
static void fooclass_finalize (FooClass * obj);
static GType fooclass_get_type_once (void);
static void _vala_main (void);

static inline gpointer
fooclass_get_instance_private (FooClass* self)
{
	return G_STRUCT_MEMBER_P (self, FooClass_private_offset);
}

FooClass*
fooclass_construct (GType object_type)
{
	FooClass* self = NULL;
	self = (FooClass*) g_type_create_instance (object_type);
	_vala_assert (self->priv->pfield == 42, "pfield == 42");
	_vala_assert (FOO == 42, "parray.length == 42");
	return self;
}

FooClass*
fooclass_new (void)
{
	return fooclass_construct (TYPE_FOOCLASS);
}

static void
value_fooclass_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_fooclass_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		fooclass_unref (value->data[0].v_pointer);
	}
}

static void
value_fooclass_copy_value (const GValue* src_value,
                           GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = fooclass_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_fooclass_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_fooclass_collect_value (GValue* value,
                              guint n_collect_values,
                              GTypeCValue* collect_values,
                              guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		FooClass * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = fooclass_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_fooclass_lcopy_value (const GValue* value,
                            guint n_collect_values,
                            GTypeCValue* collect_values,
                            guint collect_flags)
{
	FooClass ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = fooclass_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_fooclass (const gchar* name,
                     const gchar* nick,
                     const gchar* blurb,
                     GType object_type,
                     GParamFlags flags)
{
	ParamSpecFooClass* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOOCLASS), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_fooclass (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOOCLASS), NULL);
	return value->data[0].v_pointer;
}

void
value_set_fooclass (GValue* value,
                    gpointer v_object)
{
	FooClass * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOOCLASS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOOCLASS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		fooclass_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		fooclass_unref (old);
	}
}

void
value_take_fooclass (GValue* value,
                     gpointer v_object)
{
	FooClass * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOOCLASS));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOOCLASS));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		fooclass_unref (old);
	}
}

static void
fooclass_class_init (FooClassClass * klass,
                     gpointer klass_data)
{
	fooclass_parent_class = g_type_class_peek_parent (klass);
	((FooClassClass *) klass)->finalize = fooclass_finalize;
	g_type_class_adjust_private_offset (klass, &FooClass_private_offset);
}

static void
fooclass_instance_init (FooClass * self,
                        gpointer klass)
{
	self->priv = fooclass_get_instance_private (self);
	self->field = FOO;
	self->priv->pfield = FOO;
	self->ref_count = 1;
}

static void
fooclass_finalize (FooClass * obj)
{
	FooClass * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOOCLASS, FooClass);
	g_signal_handlers_destroy (self);
}

static GType
fooclass_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_fooclass_init, value_fooclass_free_value, value_fooclass_copy_value, value_fooclass_peek_pointer, "p", value_fooclass_collect_value, "p", value_fooclass_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClassClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) fooclass_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FooClass), 0, (GInstanceInitFunc) fooclass_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType fooclass_type_id;
	fooclass_type_id = g_type_register_fundamental (g_type_fundamental_next (), "FooClass", &g_define_type_info, &g_define_type_fundamental_info, 0);
	FooClass_private_offset = g_type_add_instance_private (fooclass_type_id, sizeof (FooClassPrivate));
	return fooclass_type_id;
}

GType
fooclass_get_type (void)
{
	static volatile gsize fooclass_type_id__once = 0;
	if (g_once_init_enter (&fooclass_type_id__once)) {
		GType fooclass_type_id;
		fooclass_type_id = fooclass_get_type_once ();
		g_once_init_leave (&fooclass_type_id__once, fooclass_type_id);
	}
	return fooclass_type_id__once;
}

gpointer
fooclass_ref (gpointer instance)
{
	FooClass * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
fooclass_unref (gpointer instance)
{
	FooClass * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOOCLASS_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
_vala_main (void)
{
	FooClass* foo = NULL;
	FooClass* _tmp0_;
	_tmp0_ = fooclass_new ();
	foo = _tmp0_;
	_vala_assert (foo->field == 42, "foo.field == 42");
	_vala_assert (FOO == 42, "foo.array.length == 42");
	_fooclass_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

