/* asynchronous_main_block_async_call.c generated by valac, the Vala compiler
 * generated from asynchronous_main_block_async_call.vala, do not modify */

#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _FooData FooData;
typedef struct _ValaMainAsyncData ValaMainAsyncData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FooData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gchar* result;
	gchar* _tmp0_;
};

struct _ValaMainAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gchar* bar;
	gchar* _tmp0_;
};

static void foo_data_free (gpointer _data);
VALA_EXTERN void foo (GAsyncReadyCallback _callback_,
          gpointer _user_data_);
VALA_EXTERN gchar* foo_finish (GAsyncResult* _res_);
static gboolean foo_co (FooData* _data_);
static gboolean _foo_co_gsource_func (gpointer self);
static void _vala_main_async_data_free (gpointer _data);
static void _vala_main_async (GAsyncReadyCallback _callback_,
                       gpointer _user_data_);
static void _vala_main_finish (GAsyncResult* _res_);
static gboolean _vala_main_async_co (ValaMainAsyncData* _data_);
static void _vala_main_async_ready (GObject* source_object,
                             GAsyncResult* _res_,
                             gpointer _user_data_);

static void
foo_data_free (gpointer _data)
{
	FooData* _data_;
	_data_ = _data;
	_g_free0 (_data_->result);
	g_slice_free (FooData, _data_);
}

void
foo (GAsyncReadyCallback _callback_,
     gpointer _user_data_)
{
	FooData* _data_;
	_data_ = g_slice_new0 (FooData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, foo_data_free);
	foo_co (_data_);
}

gchar*
foo_finish (GAsyncResult* _res_)
{
	gchar* result;
	FooData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
	result = _data_->result;
	_data_->result = NULL;
	return result;
}

static gboolean
_foo_co_gsource_func (gpointer self)
{
	gboolean result;
	result = foo_co (self);
	return result;
}

static gboolean
foo_co (FooData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, _foo_co_gsource_func, _data_, NULL);
	_data_->_state_ = 1;
	return FALSE;
	_state_1:
	;
	_data_->_tmp0_ = g_strdup ("foo");
	_data_->result = _data_->_tmp0_;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
_vala_main_async_data_free (gpointer _data)
{
	ValaMainAsyncData* _data_;
	_data_ = _data;
	g_slice_free (ValaMainAsyncData, _data_);
}

void
_vala_main_async (GAsyncReadyCallback _callback_,
                  gpointer _user_data_)
{
	ValaMainAsyncData* _data_;
	_data_ = g_slice_new0 (ValaMainAsyncData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, _vala_main_async_data_free);
	_vala_main_async_co (_data_);
}

void
_vala_main_finish (GAsyncResult* _res_)
{
	ValaMainAsyncData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static void
_vala_main_async_ready (GObject* source_object,
                        GAsyncResult* _res_,
                        gpointer _user_data_)
{
	ValaMainAsyncData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_vala_main_async_co (_data_);
}

static gboolean
_vala_main_async_co (ValaMainAsyncData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_state_ = 1;
	foo (_vala_main_async_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp0_ = foo_finish (_data_->_res_);
	_data_->bar = _data_->_tmp0_;
	_vala_assert (g_strcmp0 (_data_->bar, "foo") == 0, "bar == \"foo\"");
	_g_free0 (_data_->bar);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
_vala_main_async_callback (GObject* source_object,
                           GAsyncResult* res,
                           gpointer user_data)
{
	GMainLoop* loop = user_data;
	_vala_main_finish (res);
	g_main_loop_quit (loop);
}

int
main (int argc,
      char ** argv)
{
	GMainLoop* loop = g_main_loop_new (NULL, FALSE);
	_vala_main_async (_vala_main_async_callback, loop);
	g_main_loop_run (loop);
	g_main_loop_unref (loop);
	return 0;
}

