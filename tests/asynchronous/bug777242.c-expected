/* asynchronous_bug777242.c generated by valac, the Vala compiler
 * generated from asynchronous_bug777242.vala, do not modify */

#include <glib.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _RunData RunData;
typedef struct _Block1Data Block1Data;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))

struct _RunData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gchar* foo;
	gchar* _tmp0_;
	gint _tmp1_;
};

struct _Block1Data {
	int _ref_count_;
	GMainLoop* loop;
};

VALA_EXTERN gint i;
gint i = 0;

static void run_data_free (gpointer _data);
VALA_EXTERN void run (GAsyncReadyCallback _callback_,
          gpointer _user_data_);
VALA_EXTERN void run_finish (GAsyncResult* _res_);
static gboolean run_co (RunData* _data_);
static void _vala_main (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static gboolean _vala_lambda0_ (Block1Data* _data1_);
static gboolean __vala_lambda0__gsource_func (gpointer self);

static void
run_data_free (gpointer _data)
{
	RunData* _data_;
	_data_ = _data;
	g_slice_free (RunData, _data_);
}

void
run (GAsyncReadyCallback _callback_,
     gpointer _user_data_)
{
	RunData* _data_;
	_data_ = g_slice_new0 (RunData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, run_data_free);
	run_co (_data_);
}

void
run_finish (GAsyncResult* _res_)
{
	RunData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static gboolean
run_co (RunData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	while (TRUE) {
		if (i == 0) {
			_data_->_tmp0_ = g_strdup ("foo");
			_g_free0 (_data_->foo);
			_data_->foo = _data_->_tmp0_;
			_data_->_tmp1_ = i;
			i = _data_->_tmp1_ + 1;
		} else {
			_g_free0 (_data_->foo);
			break;
		}
		_g_free0 (_data_->foo);
	}
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_g_main_loop_unref0 (_data1_->loop);
		g_slice_free (Block1Data, _data1_);
	}
}

static gboolean
_vala_lambda0_ (Block1Data* _data1_)
{
	gboolean result;
	run (NULL, NULL);
	g_main_loop_quit (_data1_->loop);
	result = FALSE;
	return result;
}

static gboolean
__vala_lambda0__gsource_func (gpointer self)
{
	gboolean result;
	result = _vala_lambda0_ (self);
	return result;
}

static void
_vala_main (void)
{
	Block1Data* _data1_;
	GMainLoop* _tmp0_;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_tmp0_ = g_main_loop_new (NULL, FALSE);
	_data1_->loop = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, __vala_lambda0__gsource_func, block1_data_ref (_data1_), block1_data_unref);
	g_main_loop_run (_data1_->loop);
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

