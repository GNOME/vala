/* asynchronous_bug710103.c generated by valac, the Vala compiler
 * generated from asynchronous_bug710103.vala, do not modify */

#include <gio/gio.h>
#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Block1Data Block1Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
enum  {
	FOO_0_PROPERTY,
	FOO_NUM_PROPERTIES
};
static GParamSpec* foo_properties[FOO_NUM_PROPERTIES];
typedef struct _FooBarData FooBarData;
typedef struct _FooNewAsyncData FooNewAsyncData;
typedef struct _FooCreateFooAsyncData FooCreateFooAsyncData;
typedef struct _Block2Data Block2Data;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))
typedef struct _Block3Data Block3Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Block1Data {
	int _ref_count_;
	GIOStream* is0;
};

struct _Foo {
	GObject parent_instance;
	FooPrivate * priv;
	gint manam;
};

struct _FooClass {
	GObjectClass parent_class;
};

struct _FooBarData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	Foo* self;
};

struct _FooNewAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GType object_type;
	Foo* self;
};

struct _FooCreateFooAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	Foo* result;
	Foo* foo;
	Foo* _tmp0_;
};

struct _Block2Data {
	int _ref_count_;
	GMainLoop* loop;
};

struct _Block3Data {
	int _ref_count_;
	Block2Data * _data2_;
	Foo* foo;
};

static gpointer foo_parent_class = NULL;

VALA_EXTERN void iostream (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_,
                     GObject* obj,
                     GAsyncResult* res);
static void __vala_lambda0__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, g_object_unref)
static void foo_bar_data_free (gpointer _data);
VALA_EXTERN void foo_bar (Foo* self,
              GAsyncReadyCallback _callback_,
              gpointer _user_data_);
VALA_EXTERN void foo_bar_finish (GAsyncResult* _res_);
static gboolean foo_bar_co (FooBarData* _data_);
static void foo_construct_async_data_free (gpointer _data);
VALA_EXTERN void foo_new_async (GAsyncReadyCallback _callback_,
                    gpointer _user_data_);
VALA_EXTERN Foo* foo_new_finish (GAsyncResult* _res_);
VALA_EXTERN void foo_construct_async (GType object_type,
                          GAsyncReadyCallback _callback_,
                          gpointer _user_data_);
VALA_EXTERN Foo* foo_construct_finish (GAsyncResult* _res_);
static gboolean foo_construct_async_co (FooNewAsyncData* _data_);
static void foo_create_foo_async_data_free (gpointer _data);
VALA_EXTERN void foo_create_foo_async (GAsyncReadyCallback _callback_,
                           gpointer _user_data_);
VALA_EXTERN Foo* foo_create_foo_finish (GAsyncResult* _res_);
static gboolean foo_create_foo_async_co (FooCreateFooAsyncData* _data_);
static void foo_create_foo_async_ready (GObject* source_object,
                                 GAsyncResult* _res_,
                                 gpointer _user_data_);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void foo_finalize (GObject * obj);
static GType foo_get_type_once (void);
static void _vala_main (void);
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
static void _vala_lambda1_ (Block2Data* _data2_,
                     GObject* obj,
                     GAsyncResult* res);
static Block3Data* block3_data_ref (Block3Data* _data3_);
static void block3_data_unref (void * _userdata_);
static void _vala_lambda2_ (Block3Data* _data3_,
                     GObject* obj,
                     GAsyncResult* res);
static void __vala_lambda2__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);
static void __vala_lambda1__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_g_object_unref0 (_data1_->is0);
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_,
                GObject* obj,
                GAsyncResult* res)
{
	GError* _inner_error0_ = NULL;
	g_return_if_fail ((obj == NULL) || G_TYPE_CHECK_INSTANCE_TYPE (obj, G_TYPE_OBJECT));
	g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (res, g_async_result_get_type ()));
	{
		g_io_stream_splice_finish (res, &_inner_error0_);
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			goto __catch0_g_error;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		g_clear_error (&_inner_error0_);
	}
	__finally0:
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
}

static void
__vala_lambda0__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
	_vala_lambda0_ (self, source_object, res);
	block1_data_unref (self);
}

void
iostream (void)
{
	Block1Data* _data1_;
	GIOStream* is1 = NULL;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_data1_->is0 = NULL;
	is1 = NULL;
	g_io_stream_splice_async (_data1_->is0, is1, G_IO_STREAM_SPLICE_NONE, G_PRIORITY_DEFAULT, NULL, __vala_lambda0__gasync_ready_callback, block1_data_ref (_data1_));
	_g_object_unref0 (is1);
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

static void
foo_bar_data_free (gpointer _data)
{
	FooBarData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (FooBarData, _data_);
}

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

void
foo_bar (Foo* self,
         GAsyncReadyCallback _callback_,
         gpointer _user_data_)
{
	FooBarData* _data_;
	Foo* _tmp0_;
	g_return_if_fail (IS_FOO (self));
	_data_ = g_slice_new0 (FooBarData);
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, foo_bar_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	foo_bar_co (_data_);
}

void
foo_bar_finish (GAsyncResult* _res_)
{
	FooBarData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static gboolean
foo_bar_co (FooBarData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->self->manam = 23;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
foo_construct_async_data_free (gpointer _data)
{
	FooNewAsyncData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (FooNewAsyncData, _data_);
}

void
foo_construct_async (GType object_type,
                     GAsyncReadyCallback _callback_,
                     gpointer _user_data_)
{
	FooNewAsyncData* _data_;
	_data_ = g_slice_new0 (FooNewAsyncData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, foo_construct_async_data_free);
	_data_->object_type = object_type;
	foo_construct_async_co (_data_);
}

Foo*
foo_construct_finish (GAsyncResult* _res_)
{
	Foo* result;
	FooNewAsyncData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
	result = _data_->self;
	_data_->self = NULL;
	return result;
}

static gboolean
foo_construct_async_co (FooNewAsyncData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->self = (Foo*) g_object_new (_data_->object_type, NULL);
	_data_->self->manam = 42;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

void
foo_new_async (GAsyncReadyCallback _callback_,
               gpointer _user_data_)
{
	foo_construct_async (TYPE_FOO, _callback_, _user_data_);
}

Foo*
foo_new_finish (GAsyncResult* _res_)
{
	return foo_construct_finish (_res_);
}

static void
foo_create_foo_async_data_free (gpointer _data)
{
	FooCreateFooAsyncData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->result);
	g_slice_free (FooCreateFooAsyncData, _data_);
}

void
foo_create_foo_async (GAsyncReadyCallback _callback_,
                      gpointer _user_data_)
{
	FooCreateFooAsyncData* _data_;
	_data_ = g_slice_new0 (FooCreateFooAsyncData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, foo_create_foo_async_data_free);
	foo_create_foo_async_co (_data_);
}

Foo*
foo_create_foo_finish (GAsyncResult* _res_)
{
	Foo* result;
	FooCreateFooAsyncData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
	result = _data_->result;
	_data_->result = NULL;
	return result;
}

static void
foo_create_foo_async_ready (GObject* source_object,
                            GAsyncResult* _res_,
                            gpointer _user_data_)
{
	FooCreateFooAsyncData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	foo_create_foo_async_co (_data_);
}

static gboolean
foo_create_foo_async_co (FooCreateFooAsyncData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_state_ = 1;
	foo_new_async (foo_create_foo_async_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp0_ = foo_new_finish (_data_->_res_);
	_data_->foo = _data_->_tmp0_;
	_data_->result = _data_->foo;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

Foo*
foo_construct (GType object_type)
{
	Foo * self = NULL;
	self = (Foo*) g_object_new (object_type, NULL);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = foo_finalize;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
}

static void
foo_finalize (GObject * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	G_OBJECT_CLASS (foo_parent_class)->finalize (obj);
}

static GType
foo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, NULL };
	GType foo_type_id;
	foo_type_id = g_type_register_static (G_TYPE_OBJECT, "Foo", &g_define_type_info, 0);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
	g_atomic_int_inc (&_data2_->_ref_count_);
	return _data2_;
}

static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
		_g_main_loop_unref0 (_data2_->loop);
		g_slice_free (Block2Data, _data2_);
	}
}

static Block3Data*
block3_data_ref (Block3Data* _data3_)
{
	g_atomic_int_inc (&_data3_->_ref_count_);
	return _data3_;
}

static void
block3_data_unref (void * _userdata_)
{
	Block3Data* _data3_;
	_data3_ = (Block3Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data3_->_ref_count_)) {
		_g_object_unref0 (_data3_->foo);
		block2_data_unref (_data3_->_data2_);
		_data3_->_data2_ = NULL;
		g_slice_free (Block3Data, _data3_);
	}
}

static void
_vala_lambda2_ (Block3Data* _data3_,
                GObject* obj,
                GAsyncResult* res)
{
	Block2Data* _data2_;
	_data2_ = _data3_->_data2_;
	g_return_if_fail ((obj == NULL) || G_TYPE_CHECK_INSTANCE_TYPE (obj, G_TYPE_OBJECT));
	g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (res, g_async_result_get_type ()));
	foo_bar_finish (res);
	_vala_assert (_data3_->foo->manam == 23, "foo.manam == 23");
	g_main_loop_quit (_data2_->loop);
}

static void
__vala_lambda2__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
	_vala_lambda2_ (self, source_object, res);
	block3_data_unref (self);
}

static void
_vala_lambda1_ (Block2Data* _data2_,
                GObject* obj,
                GAsyncResult* res)
{
	Block3Data* _data3_;
	Foo* _tmp0_;
	g_return_if_fail ((obj == NULL) || G_TYPE_CHECK_INSTANCE_TYPE (obj, G_TYPE_OBJECT));
	g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (res, g_async_result_get_type ()));
	_data3_ = g_slice_new0 (Block3Data);
	_data3_->_ref_count_ = 1;
	_data3_->_data2_ = block2_data_ref (_data2_);
	_tmp0_ = foo_create_foo_finish (res);
	_data3_->foo = _tmp0_;
	_vala_assert (_data3_->foo->manam == 42, "foo.manam == 42");
	foo_bar (_data3_->foo, __vala_lambda2__gasync_ready_callback, block3_data_ref (_data3_));
	block3_data_unref (_data3_);
	_data3_ = NULL;
}

static void
__vala_lambda1__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
	_vala_lambda1_ (self, source_object, res);
	block2_data_unref (self);
}

static void
_vala_main (void)
{
	Block2Data* _data2_;
	GMainLoop* _tmp0_;
	_data2_ = g_slice_new0 (Block2Data);
	_data2_->_ref_count_ = 1;
	_tmp0_ = g_main_loop_new (NULL, FALSE);
	_data2_->loop = _tmp0_;
	foo_create_foo_async (__vala_lambda1__gasync_ready_callback, block2_data_ref (_data2_));
	g_main_loop_run (_data2_->loop);
	block2_data_unref (_data2_);
	_data2_ = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

