/* asynchronous_captured_fixed_array.c generated by valac, the Vala compiler
 * generated from asynchronous_captured_fixed_array.vala, do not modify */

#include <gio/gio.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _FooData FooData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FooData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gint array_param[3];
	gint array[2];
	gint _tmp0_[2];
	gint _tmp1_;
	gint _tmp2_;
};

static void foo_data_free (gpointer _data);
VALA_EXTERN void foo (gint array_param[3],
          GAsyncReadyCallback _callback_,
          gpointer _user_data_);
VALA_EXTERN void foo_finish (GAsyncResult* _res_);
static gboolean foo_co (FooData* _data_);
static void _vala_main (void);

static void
foo_data_free (gpointer _data)
{
	FooData* _data_;
	_data_ = _data;
	g_slice_free (FooData, _data_);
}

void
foo (gint array_param[3],
     GAsyncReadyCallback _callback_,
     gpointer _user_data_)
{
	FooData* _data_;
	_data_ = g_slice_new0 (FooData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, foo_data_free);
	memcpy (_data_->array_param, array_param, 3 * sizeof (gint));
	foo_co (_data_);
}

void
foo_finish (GAsyncResult* _res_)
{
	FooData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static gboolean
foo_co (FooData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	memset (&_data_->_tmp0_, 0, 2 * sizeof (gint));
	_data_->_tmp0_[0] = 23;
	_data_->_tmp0_[1] = 42;
	memcpy (_data_->array, _data_->_tmp0_, 2 * sizeof (gint));
	_vala_assert (2 == 2, "array.length == 2");
	_data_->_tmp1_ = _data_->array[1];
	_vala_assert (_data_->_tmp1_ == 42, "array[1] == 42");
	_vala_assert (3 == 3, "array_param.length == 3");
	_data_->_tmp2_ = _data_->array_param[2];
	_vala_assert (_data_->_tmp2_ == 4711, "array_param[2] == 4711");
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
_vala_main (void)
{
	gint array[3] = {0};
	gint _tmp0_[3] = {0};
	_tmp0_[0] = 42;
	_tmp0_[1] = 23;
	_tmp0_[2] = 4711;
	memcpy (array, _tmp0_, 3 * sizeof (gint));
	foo (array, NULL, NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

