/* asynchronous_closures.c generated by valac, the Vala compiler
 * generated from asynchronous_closures.vala, do not modify */

#include <glib.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*Func) (gpointer user_data);
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block1Data Block1Data;
typedef struct _FooData FooData;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Block1Data {
	int _ref_count_;
	GSourceFunc func;
	gpointer func_target;
	gchar* bar;
	gchar* baz;
	gpointer _async_data_;
};

struct _FooData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gchar* baz;
	Block1Data* _data1_;
	gchar* _tmp0_;
	Func foobar;
	gpointer foobar_target;
	GDestroyNotify foobar_target_destroy_notify;
	GMainLoop* _tmp1_;
};

VALA_EXTERN GMainLoop* main_loop;
GMainLoop* main_loop = NULL;

static void foo_data_free (gpointer _data);
VALA_EXTERN void foo (const gchar* baz,
          GAsyncReadyCallback _callback_,
          gpointer _user_data_);
VALA_EXTERN void foo_finish (GAsyncResult* _res_);
static gboolean foo_co (FooData* _data_);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void __vala_lambda0__func (gpointer self);
static gboolean _foo_co_gsource_func (gpointer self);
static void _vala_main (void);

static void
foo_data_free (gpointer _data)
{
	FooData* _data_;
	_data_ = _data;
	g_slice_free (FooData, _data_);
}

void
foo (const gchar* baz,
     GAsyncReadyCallback _callback_,
     gpointer _user_data_)
{
	FooData* _data_;
	gchar* _tmp0_;
	g_return_if_fail (baz != NULL);
	_data_ = g_slice_new0 (FooData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_task_data (_data_->_async_result, _data_, foo_data_free);
	_tmp0_ = g_strdup (baz);
	_g_free0 (_data_->baz);
	_data_->baz = _tmp0_;
	foo_co (_data_);
}

void
foo_finish (GAsyncResult* _res_)
{
	FooData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_g_free0 (_data1_->bar);
		_g_free0 (_data1_->baz);
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	gchar* _tmp0_;
	_data1_->func = NULL;
	_data1_->func_target = NULL;
	_tmp0_ = g_strdup (_data1_->baz);
	_g_free0 (_data1_->bar);
	_data1_->bar = _tmp0_;
}

static void
__vala_lambda0__func (gpointer self)
{
	_vala_lambda0_ (self);
}

static gboolean
_foo_co_gsource_func (gpointer self)
{
	gboolean result;
	result = foo_co (self);
	return result;
}

static gboolean
foo_co (FooData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_data1_ = g_slice_new0 (Block1Data);
	_data_->_data1_->_ref_count_ = 1;
	_g_free0 (_data_->_data1_->baz);
	_data_->_data1_->baz = _data_->baz;
	_data_->_data1_->_async_data_ = _data_;
	_data_->_data1_->func = NULL;
	_data_->_data1_->func_target = NULL;
	_data_->_tmp0_ = g_strdup ("hello");
	_data_->_data1_->bar = _data_->_tmp0_;
	_data_->foobar = __vala_lambda0__func;
	_data_->foobar_target = block1_data_ref (_data_->_data1_);
	_data_->foobar_target_destroy_notify = block1_data_unref;
	_data_->foobar (_data_->foobar_target);
	_vala_assert (g_strcmp0 (_data_->_data1_->bar, "world") == 0, "bar == \"world\"");
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, _foo_co_gsource_func, _data_, NULL);
	_data_->_state_ = 1;
	return FALSE;
	_state_1:
	;
	_data_->_tmp1_ = main_loop;
	g_main_loop_quit (_data_->_tmp1_);
	(_data_->foobar_target_destroy_notify == NULL) ? NULL : (_data_->foobar_target_destroy_notify (_data_->foobar_target), NULL);
	_data_->foobar = NULL;
	_data_->foobar_target = NULL;
	_data_->foobar_target_destroy_notify = NULL;
	block1_data_unref (_data_->_data1_);
	_data_->_data1_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
_vala_main (void)
{
	GMainLoop* _tmp0_;
	GMainLoop* _tmp1_;
	foo ("world", NULL, NULL);
	_tmp0_ = g_main_loop_new (NULL, FALSE);
	_g_main_loop_unref0 (main_loop);
	main_loop = _tmp0_;
	_tmp1_ = main_loop;
	g_main_loop_run (_tmp1_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

