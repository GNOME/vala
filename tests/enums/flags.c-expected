/* enums_flags.c generated by valac, the Vala compiler
 * generated from enums_flags.vala, do not modify */

#include <glib-object.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	FOO_VAL1 = 1 << 0,
	FOO_VAL2 = 1 << 1,
	FOO_VAL3 = 1 << 2
} Foo;

#define TYPE_FOO (foo_get_type ())
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
static void _vala_main (void);

static GType
foo_get_type_once (void)
{
	static const GFlagsValue values[] = {{FOO_VAL1, "FOO_VAL1", "val1"}, {FOO_VAL2, "FOO_VAL2", "val2"}, {FOO_VAL3, "FOO_VAL3", "val3"}, {0, NULL, NULL}};
	GType foo_type_id;
	foo_type_id = g_flags_register_static ("Foo", values);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_main (void)
{
	Foo foo = 0U;
	Foo bar = 0U;
	Foo baz = 0U;
	foo = (FOO_VAL1 | FOO_VAL2) | FOO_VAL3;
	bar = FOO_VAL1 | FOO_VAL2;
	baz = bar | FOO_VAL3;
	_vala_assert (FOO_VAL1 == (1 << 0), "Foo.VAL1 == 1 << 0");
	_vala_assert (FOO_VAL2 == (1 << 1), "Foo.VAL2 == 1 << 1");
	_vala_assert (FOO_VAL3 == (1 << 2), "Foo.VAL3 == 1 << 2");
	_vala_assert ((bar & FOO_VAL1) == FOO_VAL1, "Foo.VAL1 in bar");
	_vala_assert ((bar & (FOO_VAL1 | FOO_VAL2)) == (FOO_VAL1 | FOO_VAL2), "(Foo.VAL1 | Foo.VAL2) in bar");
	_vala_assert (!((bar & FOO_VAL3) == FOO_VAL3), "!(Foo.VAL3 in bar)");
	_vala_assert ((baz & FOO_VAL1) == FOO_VAL1, "Foo.VAL1 in baz");
	_vala_assert ((baz & FOO_VAL2) == FOO_VAL2, "Foo.VAL2 in baz");
	_vala_assert ((baz & FOO_VAL3) == FOO_VAL3, "Foo.VAL3 in baz");
	_vala_assert ((foo & bar) == bar, "bar in foo");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

