/* enums_bug763831.c generated by valac, the Vala compiler
 * generated from enums_bug763831.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	FOO_TEST = 1 << 0
} Foo;

#define TYPE_FOO (foo_get_type ())
typedef enum  {
	BAR_TEST = 1 << 0
} Bar;

#define TYPE_BAR (bar_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN GType bar_get_type (void) G_GNUC_CONST ;
static void _vala_main (void);

static GType
foo_get_type_once (void)
{
	static const GFlagsValue values[] = {{FOO_TEST, "FOO_TEST", "test"}, {0, NULL, NULL}};
	GType foo_type_id;
	foo_type_id = g_flags_register_static ("Foo", values);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static GType
bar_get_type_once (void)
{
	static const GEnumValue values[] = {{BAR_TEST, "BAR_TEST", "test"}, {0, NULL, NULL}};
	GType bar_type_id;
	bar_type_id = g_enum_register_static ("Bar", values);
	return bar_type_id;
}

GType
bar_get_type (void)
{
	static volatile gsize bar_type_id__once = 0;
	if (g_once_init_enter (&bar_type_id__once)) {
		GType bar_type_id;
		bar_type_id = bar_get_type_once ();
		g_once_init_leave (&bar_type_id__once, bar_type_id);
	}
	return bar_type_id__once;
}

static void
_vala_main (void)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = g_flags_to_string (TYPE_FOO, FOO_TEST);
	_g_free0 (_tmp0_);
	_tmp1_ = g_enum_to_string (TYPE_BAR, BAR_TEST);
	_g_free0 (_tmp1_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

