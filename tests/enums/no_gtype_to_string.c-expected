/* enums_no_gtype_to_string.c generated by valac, the Vala compiler
 * generated from enums_no_gtype_to_string.vala, do not modify */

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif

typedef enum  {
	FOO_BAR,
	FOO_MANAM,
	FOO_BAZ_FAZ
} Foo;

typedef enum  {
	BAR_FOO = 1 << 0,
	BAR_MANAM = 1 << 1,
	BAR_FAZ_BAZ = 1 << 2
} Bar;

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
static const char* _foo_to_string (Foo value);
static const char* _bar_to_string (Bar value);

static const char*
_foo_to_string (Foo value)
{
	switch (value) {
		case FOO_BAR:
		return "FOO_BAR";
		case FOO_MANAM:
		return "FOO_MANAM";
		case FOO_BAZ_FAZ:
		return "FOO_BAZ_FAZ";
	}
	return NULL;
}

static const char*
_bar_to_string (Bar value)
{
	switch (value) {
		case BAR_FOO:
		return "BAR_FOO";
		case BAR_MANAM:
		return "BAR_MANAM";
		case BAR_FAZ_BAZ:
		return "BAR_FAZ_BAZ";
	}
	return NULL;
}

static void
_vala_main (void)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	_tmp0_ = _foo_to_string (FOO_BAR);
	_vala_assert (g_strcmp0 ("FOO_BAR", _tmp0_) == 0, "\"FOO_BAR\" == Foo.BAR.to_string ()");
	_tmp1_ = _foo_to_string (FOO_BAZ_FAZ);
	_vala_assert (g_strcmp0 ("FOO_BAZ_FAZ", _tmp1_) == 0, "\"FOO_BAZ_FAZ\" == Foo.BAZ_FAZ.to_string ()");
	_tmp2_ = _bar_to_string (BAR_FOO);
	_vala_assert (g_strcmp0 ("BAR_FOO", _tmp2_) == 0, "\"BAR_FOO\" == Bar.FOO.to_string ()");
	_tmp3_ = _bar_to_string (BAR_FAZ_BAZ);
	_vala_assert (g_strcmp0 ("BAR_FAZ_BAZ", _tmp3_) == 0, "\"BAR_FAZ_BAZ\" == Bar.FAZ_BAZ.to_string ()");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

