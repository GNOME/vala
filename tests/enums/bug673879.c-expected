/* enums_bug673879.c generated by valac, the Vala compiler
 * generated from enums_bug673879.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	TEST_TEST = 10
} Test;

#define TYPE_TEST (test_get_type ())
#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
static void _vala_main (void);
static Test* _test_dup (Test* self);

static GType
test_get_type_once (void)
{
	static const GEnumValue values[] = {{TEST_TEST, "TEST_TEST", "test"}, {0, NULL, NULL}};
	GType test_type_id;
	test_type_id = g_enum_register_static ("Test", values);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

static Test*
_test_dup (Test* self)
{
	Test* dup;
	dup = g_new0 (Test, 1);
	memcpy (dup, self, sizeof (Test));
	return dup;
}

static gpointer
__test_dup0 (gpointer self)
{
	return self ? _test_dup (self) : NULL;
}

static void
_vala_main (void)
{
	Test* test = NULL;
	Test _tmp0_;
	Test* _tmp1_;
	Test* _tmp2_;
	test = NULL;
	_tmp0_ = TEST_TEST;
	_tmp1_ = __test_dup0 (&_tmp0_);
	_g_free0 (test);
	test = _tmp1_;
	_tmp2_ = test;
	_vala_assert (((Test) (*_tmp2_)) == 10, "(!)test == 10");
	_g_free0 (test);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

