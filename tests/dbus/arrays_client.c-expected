/* dbus_arrays_client.c generated by valac, the Vala compiler
 * generated from dbus_arrays_client.vala, do not modify */

#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define TEST_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_TEST, TestIface))

typedef struct _Test Test;
typedef struct _TestIface TestIface;

#define TYPE_TEST_PROXY (test_proxy_get_type ())
typedef GDBusProxy TestProxy;
typedef GDBusProxyClass TestProxyClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _TestIface {
	GTypeInterface parent_iface;
	gint* (*test_int) (Test* self, gint* i, gint i_length1, gint** j, gint* j_length1, gint* result_length1, GError** error);
	gchar** (*test_string) (Test* self, gchar** s, gint s_length1, gchar*** t, gint* t_length1, gint* result_length1, GError** error);
	gchar** (*get_test_property) (Test* self, gint* result_length1);
	void (*set_test_property) (Test* self, gchar** value, gint value_length1);
};

VALA_EXTERN GType test_proxy_get_type (void) G_GNUC_CONST ;
VALA_EXTERN guint test_register_object (void* object,
                            GDBusConnection* connection,
                            const gchar* path,
                            GError** error);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, g_object_unref)
VALA_EXTERN gint* test_test_int (Test* self,
                     gint* i,
                     gint i_length1,
                     gint** j,
                     gint* j_length1,
                     gint* result_length1,
                     GError** error);
VALA_EXTERN gchar** test_test_string (Test* self,
                          gchar** s,
                          gint s_length1,
                          gchar*** t,
                          gint* t_length1,
                          gint* result_length1,
                          GError** error);
VALA_EXTERN gchar** test_get_test_property (Test* self,
                                gint* result_length1);
VALA_EXTERN void test_set_test_property (Test* self,
                             gchar** value,
                             gint value_length1);
static GType test_get_type_once (void);
static void test_proxy_g_signal (GDBusProxy* proxy,
                          const gchar* sender_name,
                          const gchar* signal_name,
                          GVariant* parameters);
static gint* test_proxy_test_int (Test* self,
                           gint* i,
                           gint i_length1,
                           gint** j,
                           gint* j_length1,
                           gint* result_length1,
                           GError** error);
static gchar** test_proxy_test_string (Test* self,
                                gchar** s,
                                gint s_length1,
                                gchar*** t,
                                gint* t_length1,
                                gint* result_length1,
                                GError** error);
static gchar** test_dbus_proxy_get_test_property (Test* self,
                                           gint* result_length1);
static void test_dbus_proxy_set_test_property (Test* self,
                                        gchar** value,
                                        gint value_length1);
static void test_proxy_test_interface_init (TestIface* iface);
static void _dbus_test_test_int (Test* self,
                          GVariant* _parameters_,
                          GDBusMethodInvocation* invocation);
static void _dbus_test_test_string (Test* self,
                             GVariant* _parameters_,
                             GDBusMethodInvocation* invocation);
static void test_dbus_interface_method_call (GDBusConnection* connection,
                                      const gchar* sender,
                                      const gchar* object_path,
                                      const gchar* interface_name,
                                      const gchar* method_name,
                                      GVariant* parameters,
                                      GDBusMethodInvocation* invocation,
                                      gpointer user_data);
static GVariant* test_dbus_interface_get_property (GDBusConnection* connection,
                                            const gchar* sender,
                                            const gchar* object_path,
                                            const gchar* interface_name,
                                            const gchar* property_name,
                                            GError** error,
                                            gpointer user_data);
static GVariant* _dbus_test_get_test_property (Test* self);
static gboolean test_dbus_interface_set_property (GDBusConnection* connection,
                                           const gchar* sender,
                                           const gchar* object_path,
                                           const gchar* interface_name,
                                           const gchar* property_name,
                                           GVariant* value,
                                           GError** error,
                                           gpointer user_data);
static void _dbus_test_set_test_property (Test* self,
                                   GVariant* _value);
static void _test_unregister_object (gpointer user_data);
static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static const GDBusArgInfo _test_dbus_arg_info_test_int_i = {-1, "i", "ai", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_int_j = {-1, "j", "ai", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_int_result = {-1, "result", "ai", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_int_in[] = {&_test_dbus_arg_info_test_int_i, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_int_out[] = {&_test_dbus_arg_info_test_int_j, &_test_dbus_arg_info_test_int_result, NULL};
static const GDBusMethodInfo _test_dbus_method_info_test_int = {-1, "TestInt", (GDBusArgInfo **) (&_test_dbus_arg_info_test_int_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test_int_out), NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_string_s = {-1, "s", "as", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_string_t = {-1, "t", "as", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_string_result = {-1, "result", "as", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_string_in[] = {&_test_dbus_arg_info_test_string_s, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_string_out[] = {&_test_dbus_arg_info_test_string_t, &_test_dbus_arg_info_test_string_result, NULL};
static const GDBusMethodInfo _test_dbus_method_info_test_string = {-1, "TestString", (GDBusArgInfo **) (&_test_dbus_arg_info_test_string_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test_string_out), NULL};
static const GDBusMethodInfo * const _test_dbus_method_info[] = {&_test_dbus_method_info_test_int, &_test_dbus_method_info_test_string, NULL};
static const GDBusSignalInfo * const _test_dbus_signal_info[] = {NULL};
static const GDBusPropertyInfo _test_dbus_property_info_test_property = {-1, "TestProperty", "as", G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE, NULL};
static const GDBusPropertyInfo * const _test_dbus_property_info[] = {&_test_dbus_property_info_test_property, NULL};
static const GDBusInterfaceInfo _test_dbus_interface_info = {-1, "org.example.Test", (GDBusMethodInfo **) (&_test_dbus_method_info), (GDBusSignalInfo **) (&_test_dbus_signal_info), (GDBusPropertyInfo **) (&_test_dbus_property_info), NULL};
static const GDBusInterfaceVTable _test_dbus_interface_vtable = {test_dbus_interface_method_call, test_dbus_interface_get_property, test_dbus_interface_set_property};

gint*
test_test_int (Test* self,
               gint* i,
               gint i_length1,
               gint** j,
               gint* j_length1,
               gint* result_length1,
               GError** error)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), NULL);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test_int) {
		return _iface_->test_int (self, i, i_length1, j, j_length1, result_length1, error);
	}
	return NULL;
}

gchar**
test_test_string (Test* self,
                  gchar** s,
                  gint s_length1,
                  gchar*** t,
                  gint* t_length1,
                  gint* result_length1,
                  GError** error)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), NULL);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test_string) {
		return _iface_->test_string (self, s, s_length1, t, t_length1, result_length1, error);
	}
	return NULL;
}

gchar**
test_get_test_property (Test* self,
                        gint* result_length1)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), NULL);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->get_test_property) {
		return _iface_->get_test_property (self, result_length1);
	}
	return NULL;
}

void
test_set_test_property (Test* self,
                        gchar** value,
                        gint value_length1)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->set_test_property) {
		_iface_->set_test_property (self, value, value_length1);
	}
}

static void
test_default_init (TestIface * iface,
                   gpointer iface_data)
{
}

static GType
test_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (TestIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType test_type_id;
	test_type_id = g_type_register_static (G_TYPE_INTERFACE, "Test", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (test_type_id, G_TYPE_OBJECT);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-proxy-type"), (void*) test_proxy_get_type);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-interface-name"), "org.example.Test");
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-interface-info"), (void*) (&_test_dbus_interface_info));
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) test_register_object);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

G_DEFINE_TYPE_EXTENDED (TestProxy, test_proxy, G_TYPE_DBUS_PROXY, 0, G_IMPLEMENT_INTERFACE (TYPE_TEST, test_proxy_test_interface_init) )
static void
test_proxy_class_init (TestProxyClass* klass)
{
	G_DBUS_PROXY_CLASS (klass)->g_signal = test_proxy_g_signal;
}

static void
test_proxy_g_signal (GDBusProxy* proxy,
                     const gchar* sender_name,
                     const gchar* signal_name,
                     GVariant* parameters)
{
}

static void
test_proxy_init (TestProxy* self)
{
	g_dbus_proxy_set_interface_info (G_DBUS_PROXY (self), (GDBusInterfaceInfo *) (&_test_dbus_interface_info));
}

static gint*
test_proxy_test_int (Test* self,
                     gint* i,
                     gint i_length1,
                     gint** j,
                     gint* j_length1,
                     gint* result_length1,
                     GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	gint* _tmp0_;
	GVariantBuilder _tmp1_;
	gint _tmp2_;
	GDBusMessage *_reply_message;
	GVariant *_reply;
	GVariantIter _reply_iter;
	gint* _vala_j = NULL;
	gint _vala_j_length1;
	GVariant* _tmp3_;
	gint* _tmp4_;
	gint _tmp4__length;
	gint _tmp4__size;
	gint _tmp4__length1;
	GVariantIter _tmp5_;
	GVariant* _tmp6_;
	gint* _result = NULL;
	gint _result_length1;
	GVariant* _tmp7_;
	gint* _tmp8_;
	gint _tmp8__length;
	gint _tmp8__size;
	gint _tmp8__length1;
	GVariantIter _tmp9_;
	GVariant* _tmp10_;
	G_IO_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "TestInt");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	_tmp0_ = i;
	g_variant_builder_init (&_tmp1_, G_VARIANT_TYPE ("ai"));
	for (_tmp2_ = 0; _tmp2_ < i_length1; _tmp2_++) {
		g_variant_builder_add_value (&_tmp1_, g_variant_new_int32 (*_tmp0_));
		_tmp0_++;
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp1_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return NULL;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return NULL;
	}
	_reply = g_dbus_message_get_body (_reply_message);
	g_variant_iter_init (&_reply_iter, _reply);
	_vala_j_length1 = 0;
	_tmp3_ = g_variant_iter_next_value (&_reply_iter);
	_tmp4_ = g_new (gint, 5);
	_tmp4__length = 0;
	_tmp4__size = 4;
	_tmp4__length1 = 0;
	g_variant_iter_init (&_tmp5_, _tmp3_);
	for (; (_tmp6_ = g_variant_iter_next_value (&_tmp5_)) != NULL; _tmp4__length1++) {
		if (_tmp4__size == _tmp4__length) {
			_tmp4__size = 2 * _tmp4__size;
			_tmp4_ = g_renew (gint, _tmp4_, _tmp4__size + 1);
		}
		_tmp4_[_tmp4__length++] = g_variant_get_int32 (_tmp6_);
		g_variant_unref (_tmp6_);
	}
	_vala_j_length1 = _tmp4__length1;
	_vala_j = _tmp4_;
	g_variant_unref (_tmp3_);
	*j = _vala_j;
	*j_length1 = _vala_j_length1;
	_result_length1 = 0;
	_tmp7_ = g_variant_iter_next_value (&_reply_iter);
	_tmp8_ = g_new (gint, 5);
	_tmp8__length = 0;
	_tmp8__size = 4;
	_tmp8__length1 = 0;
	g_variant_iter_init (&_tmp9_, _tmp7_);
	for (; (_tmp10_ = g_variant_iter_next_value (&_tmp9_)) != NULL; _tmp8__length1++) {
		if (_tmp8__size == _tmp8__length) {
			_tmp8__size = 2 * _tmp8__size;
			_tmp8_ = g_renew (gint, _tmp8_, _tmp8__size + 1);
		}
		_tmp8_[_tmp8__length++] = g_variant_get_int32 (_tmp10_);
		g_variant_unref (_tmp10_);
	}
	_result_length1 = _tmp8__length1;
	_result = _tmp8_;
	g_variant_unref (_tmp7_);
	*result_length1 = _result_length1;
	g_object_unref (_reply_message);
	return _result;
}

static gchar**
test_proxy_test_string (Test* self,
                        gchar** s,
                        gint s_length1,
                        gchar*** t,
                        gint* t_length1,
                        gint* result_length1,
                        GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	gchar** _tmp11_;
	GVariantBuilder _tmp12_;
	gint _tmp13_;
	GDBusMessage *_reply_message;
	GVariant *_reply;
	GVariantIter _reply_iter;
	gchar** _vala_t = NULL;
	gint _vala_t_length1;
	GVariant* _tmp14_;
	gchar** _tmp15_;
	gint _tmp15__length;
	gint _tmp15__size;
	gint _tmp15__length1;
	GVariantIter _tmp16_;
	GVariant* _tmp17_;
	gchar** _result = NULL;
	gint _result_length1;
	GVariant* _tmp18_;
	gchar** _tmp19_;
	gint _tmp19__length;
	gint _tmp19__size;
	gint _tmp19__length1;
	GVariantIter _tmp20_;
	GVariant* _tmp21_;
	G_IO_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "TestString");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	_tmp11_ = s;
	g_variant_builder_init (&_tmp12_, G_VARIANT_TYPE ("as"));
	for (_tmp13_ = 0; _tmp13_ < s_length1; _tmp13_++) {
		g_variant_builder_add_value (&_tmp12_, g_variant_new_string (*_tmp11_));
		_tmp11_++;
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp12_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return NULL;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return NULL;
	}
	_reply = g_dbus_message_get_body (_reply_message);
	g_variant_iter_init (&_reply_iter, _reply);
	_vala_t_length1 = 0;
	_tmp14_ = g_variant_iter_next_value (&_reply_iter);
	_tmp15_ = g_new (gchar*, 5);
	_tmp15__length = 0;
	_tmp15__size = 4;
	_tmp15__length1 = 0;
	g_variant_iter_init (&_tmp16_, _tmp14_);
	for (; (_tmp17_ = g_variant_iter_next_value (&_tmp16_)) != NULL; _tmp15__length1++) {
		if (_tmp15__size == _tmp15__length) {
			_tmp15__size = 2 * _tmp15__size;
			_tmp15_ = g_renew (gchar*, _tmp15_, _tmp15__size + 1);
		}
		_tmp15_[_tmp15__length++] = g_variant_dup_string (_tmp17_, NULL);
		g_variant_unref (_tmp17_);
	}
	_vala_t_length1 = _tmp15__length1;
	_tmp15_[_tmp15__length] = NULL;
	_vala_t = _tmp15_;
	g_variant_unref (_tmp14_);
	*t = _vala_t;
	*t_length1 = _vala_t_length1;
	_result_length1 = 0;
	_tmp18_ = g_variant_iter_next_value (&_reply_iter);
	_tmp19_ = g_new (gchar*, 5);
	_tmp19__length = 0;
	_tmp19__size = 4;
	_tmp19__length1 = 0;
	g_variant_iter_init (&_tmp20_, _tmp18_);
	for (; (_tmp21_ = g_variant_iter_next_value (&_tmp20_)) != NULL; _tmp19__length1++) {
		if (_tmp19__size == _tmp19__length) {
			_tmp19__size = 2 * _tmp19__size;
			_tmp19_ = g_renew (gchar*, _tmp19_, _tmp19__size + 1);
		}
		_tmp19_[_tmp19__length++] = g_variant_dup_string (_tmp21_, NULL);
		g_variant_unref (_tmp21_);
	}
	_result_length1 = _tmp19__length1;
	_tmp19_[_tmp19__length] = NULL;
	_result = _tmp19_;
	g_variant_unref (_tmp18_);
	*result_length1 = _result_length1;
	g_object_unref (_reply_message);
	return _result;
}

static gchar**
test_dbus_proxy_get_test_property (Test* self,
                                   gint* result_length1)
{
	GVariant *_inner_reply;
	gchar** _result;
	gint _result_length1;
	gchar** _tmp22_;
	gint _tmp22__length;
	gint _tmp22__size;
	gint _tmp22__length1;
	GVariantIter _tmp23_;
	GVariant* _tmp24_;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "TestProperty");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestProperty"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result_length1 = 0;
	_tmp22_ = g_new (gchar*, 5);
	_tmp22__length = 0;
	_tmp22__size = 4;
	_tmp22__length1 = 0;
	g_variant_iter_init (&_tmp23_, _inner_reply);
	for (; (_tmp24_ = g_variant_iter_next_value (&_tmp23_)) != NULL; _tmp22__length1++) {
		if (_tmp22__size == _tmp22__length) {
			_tmp22__size = 2 * _tmp22__size;
			_tmp22_ = g_renew (gchar*, _tmp22_, _tmp22__size + 1);
		}
		_tmp22_[_tmp22__length++] = g_variant_dup_string (_tmp24_, NULL);
		g_variant_unref (_tmp24_);
	}
	_result_length1 = _tmp22__length1;
	_tmp22_[_tmp22__length] = NULL;
	_result = _tmp22_;
	*result_length1 = _result_length1;
	g_variant_unref (_inner_reply);
	return _result;
}

static void
test_dbus_proxy_set_test_property (Test* self,
                                   gchar** value,
                                   gint value_length1)
{
	GVariant *_arguments;
	GVariant *_reply;
	GVariantBuilder _arguments_builder;
	gchar** _tmp25_;
	GVariantBuilder _tmp26_;
	gint _tmp27_;
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestProperty"));
	g_variant_builder_open (&_arguments_builder, G_VARIANT_TYPE_VARIANT);
	_tmp25_ = value;
	g_variant_builder_init (&_tmp26_, G_VARIANT_TYPE ("as"));
	for (_tmp27_ = 0; _tmp27_ < value_length1; _tmp27_++) {
		g_variant_builder_add_value (&_tmp26_, g_variant_new_string (*_tmp25_));
		_tmp25_++;
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp26_));
	g_variant_builder_close (&_arguments_builder);
	_arguments = g_variant_builder_end (&_arguments_builder);
	_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Set", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
	if (!_reply) {
		return;
	}
	g_variant_unref (_reply);
}

static void
test_proxy_test_interface_init (TestIface* iface)
{
	iface->test_int = test_proxy_test_int;
	iface->test_string = test_proxy_test_string;
	iface->get_test_property = test_dbus_proxy_get_test_property;
	iface->set_test_property = test_dbus_proxy_set_test_property;
}

static void
_dbus_test_test_int (Test* self,
                     GVariant* _parameters_,
                     GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	gint* i = NULL;
	gint i_length1 = 0;
	GVariant* _tmp28_;
	gint* _tmp29_;
	gint _tmp29__length;
	gint _tmp29__size;
	gint _tmp29__length1;
	GVariantIter _tmp30_;
	GVariant* _tmp31_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	gint* j = NULL;
	gint j_length1 = 0;
	gint* _tmp32_;
	GVariantBuilder _tmp33_;
	gint _tmp34_;
	gint* result;
	gint result_length1 = 0;
	gint* _tmp35_;
	GVariantBuilder _tmp36_;
	gint _tmp37_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp28_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp29_ = g_new (gint, 5);
	_tmp29__length = 0;
	_tmp29__size = 4;
	_tmp29__length1 = 0;
	g_variant_iter_init (&_tmp30_, _tmp28_);
	for (; (_tmp31_ = g_variant_iter_next_value (&_tmp30_)) != NULL; _tmp29__length1++) {
		if (_tmp29__size == _tmp29__length) {
			_tmp29__size = 2 * _tmp29__size;
			_tmp29_ = g_renew (gint, _tmp29_, _tmp29__size + 1);
		}
		_tmp29_[_tmp29__length++] = g_variant_get_int32 (_tmp31_);
		g_variant_unref (_tmp31_);
	}
	i_length1 = _tmp29__length1;
	i = _tmp29_;
	g_variant_unref (_tmp28_);
	result = test_test_int (self, i, i_length1, &j, &j_length1, &result_length1, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		goto _error;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_tmp32_ = j;
	g_variant_builder_init (&_tmp33_, G_VARIANT_TYPE ("ai"));
	for (_tmp34_ = 0; _tmp34_ < j_length1; _tmp34_++) {
		g_variant_builder_add_value (&_tmp33_, g_variant_new_int32 (*_tmp32_));
		_tmp32_++;
	}
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp33_));
	_tmp35_ = result;
	g_variant_builder_init (&_tmp36_, G_VARIANT_TYPE ("ai"));
	for (_tmp37_ = 0; _tmp37_ < result_length1; _tmp37_++) {
		g_variant_builder_add_value (&_tmp36_, g_variant_new_int32 (*_tmp35_));
		_tmp35_++;
	}
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp36_));
	result = (g_free (result), NULL);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	_error:
	i = (g_free (i), NULL);
	j = (g_free (j), NULL);
	;
}

static void
_dbus_test_test_string (Test* self,
                        GVariant* _parameters_,
                        GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	gchar** s = NULL;
	gint s_length1 = 0;
	GVariant* _tmp38_;
	gchar** _tmp39_;
	gint _tmp39__length;
	gint _tmp39__size;
	gint _tmp39__length1;
	GVariantIter _tmp40_;
	GVariant* _tmp41_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	gchar** t = NULL;
	gint t_length1 = 0;
	gchar** _tmp42_;
	GVariantBuilder _tmp43_;
	gint _tmp44_;
	gchar** result;
	gint result_length1 = 0;
	gchar** _tmp45_;
	GVariantBuilder _tmp46_;
	gint _tmp47_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp38_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp39_ = g_new (gchar*, 5);
	_tmp39__length = 0;
	_tmp39__size = 4;
	_tmp39__length1 = 0;
	g_variant_iter_init (&_tmp40_, _tmp38_);
	for (; (_tmp41_ = g_variant_iter_next_value (&_tmp40_)) != NULL; _tmp39__length1++) {
		if (_tmp39__size == _tmp39__length) {
			_tmp39__size = 2 * _tmp39__size;
			_tmp39_ = g_renew (gchar*, _tmp39_, _tmp39__size + 1);
		}
		_tmp39_[_tmp39__length++] = g_variant_dup_string (_tmp41_, NULL);
		g_variant_unref (_tmp41_);
	}
	s_length1 = _tmp39__length1;
	_tmp39_[_tmp39__length] = NULL;
	s = _tmp39_;
	g_variant_unref (_tmp38_);
	result = test_test_string (self, s, s_length1, &t, &t_length1, &result_length1, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		goto _error;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_tmp42_ = t;
	g_variant_builder_init (&_tmp43_, G_VARIANT_TYPE ("as"));
	for (_tmp44_ = 0; _tmp44_ < t_length1; _tmp44_++) {
		g_variant_builder_add_value (&_tmp43_, g_variant_new_string (*_tmp42_));
		_tmp42_++;
	}
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp43_));
	_tmp45_ = result;
	g_variant_builder_init (&_tmp46_, G_VARIANT_TYPE ("as"));
	for (_tmp47_ = 0; _tmp47_ < result_length1; _tmp47_++) {
		g_variant_builder_add_value (&_tmp46_, g_variant_new_string (*_tmp45_));
		_tmp45_++;
	}
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp46_));
	result = (_vala_array_free (result, result_length1, (GDestroyNotify) g_free), NULL);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	_error:
	s = (_vala_array_free (s, s_length1, (GDestroyNotify) g_free), NULL);
	t = (_vala_array_free (t, t_length1, (GDestroyNotify) g_free), NULL);
	;
}

static void
test_dbus_interface_method_call (GDBusConnection* connection,
                                 const gchar* sender,
                                 const gchar* object_path,
                                 const gchar* interface_name,
                                 const gchar* method_name,
                                 GVariant* parameters,
                                 GDBusMethodInvocation* invocation,
                                 gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "TestInt") == 0) {
		_dbus_test_test_int (object, parameters, invocation);
	} else if (strcmp (method_name, "TestString") == 0) {
		_dbus_test_test_string (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}

static GVariant*
_dbus_test_get_test_property (Test* self)
{
	gchar** result;
	gint result_length1 = 0;
	GVariant* _reply;
	gchar** _tmp48_;
	GVariantBuilder _tmp49_;
	gint _tmp50_;
	result = test_get_test_property (self, &result_length1);
	_tmp48_ = result;
	g_variant_builder_init (&_tmp49_, G_VARIANT_TYPE ("as"));
	for (_tmp50_ = 0; _tmp50_ < result_length1; _tmp50_++) {
		g_variant_builder_add_value (&_tmp49_, g_variant_new_string (*_tmp48_));
		_tmp48_++;
	}
	_reply = g_variant_builder_end (&_tmp49_);
	result = (_vala_array_free (result, result_length1, (GDestroyNotify) g_free), NULL);
	return _reply;
}

static GVariant*
test_dbus_interface_get_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "TestProperty") == 0) {
		return _dbus_test_get_test_property (object);
	}
	return NULL;
}

static void
_dbus_test_set_test_property (Test* self,
                              GVariant* _value)
{
	gchar** value = NULL;
	gint value_length1;
	gchar** _tmp51_;
	gint _tmp51__length;
	gint _tmp51__size;
	gint _tmp51__length1;
	GVariantIter _tmp52_;
	GVariant* _tmp53_;
	_tmp51_ = g_new (gchar*, 5);
	_tmp51__length = 0;
	_tmp51__size = 4;
	_tmp51__length1 = 0;
	g_variant_iter_init (&_tmp52_, _value);
	for (; (_tmp53_ = g_variant_iter_next_value (&_tmp52_)) != NULL; _tmp51__length1++) {
		if (_tmp51__size == _tmp51__length) {
			_tmp51__size = 2 * _tmp51__size;
			_tmp51_ = g_renew (gchar*, _tmp51_, _tmp51__size + 1);
		}
		_tmp51_[_tmp51__length++] = g_variant_dup_string (_tmp53_, NULL);
		g_variant_unref (_tmp53_);
	}
	value_length1 = _tmp51__length1;
	_tmp51_[_tmp51__length] = NULL;
	value = _tmp51_;
	test_set_test_property (self, value, value_length1);
	value = (_vala_array_free (value, value_length1, (GDestroyNotify) g_free), NULL);
}

static gboolean
test_dbus_interface_set_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GVariant* value,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "TestProperty") == 0) {
		_dbus_test_set_test_property (object, value);
		return TRUE;
	}
	return FALSE;
}

guint
test_register_object (gpointer object,
                      GDBusConnection* connection,
                      const gchar* path,
                      GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_test_dbus_interface_info), &_test_dbus_interface_vtable, data, _test_unregister_object, error);
	if (!result) {
		return 0;
	}
	return result;
}

static void
_test_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}

static void
_vala_main (void)
{
	Test* test = NULL;
	Test* _tmp0_;
	gint* j = NULL;
	gint j_length1 = 0;
	gint _j_size_ = 0;
	gint* k = NULL;
	gint k_length1 = 0;
	gint _k_size_ = 0;
	gint* _tmp1_ = NULL;
	Test* _tmp2_;
	gint* _tmp3_;
	gint* _tmp4_;
	gint _tmp4__length1;
	gint* _tmp5_ = NULL;
	gint _tmp6_ = 0;
	gint _tmp7_ = 0;
	gint* _tmp8_;
	gint* _tmp9_;
	gint _tmp9__length1;
	gint _tmp1__length1;
	gint __tmp1__size_;
	gint* _tmp10_;
	gint _tmp10__length1;
	gboolean _tmp11_ = FALSE;
	gint* _tmp12_;
	gint _tmp12__length1;
	gboolean _tmp15_ = FALSE;
	gint* _tmp16_;
	gint _tmp16__length1;
	gchar** t = NULL;
	gint t_length1 = 0;
	gint _t_size_ = 0;
	gchar** u = NULL;
	gint u_length1 = 0;
	gint _u_size_ = 0;
	gchar** _tmp19_ = NULL;
	Test* _tmp20_;
	gchar* _tmp21_;
	gchar** _tmp22_;
	gchar** _tmp23_;
	gint _tmp23__length1;
	gchar** _tmp24_ = NULL;
	gint _tmp25_ = 0;
	gint _tmp26_ = 0;
	gchar** _tmp27_;
	gchar** _tmp28_;
	gint _tmp28__length1;
	gint _tmp19__length1;
	gint __tmp19__size_;
	gchar** _tmp29_;
	gint _tmp29__length1;
	gboolean _tmp30_ = FALSE;
	gchar** _tmp31_;
	gint _tmp31__length1;
	gboolean _tmp34_ = FALSE;
	gchar** _tmp35_;
	gint _tmp35__length1;
	Test* _tmp38_;
	gchar* _tmp39_;
	gchar** _tmp40_;
	gchar** _tmp41_;
	gint _tmp41__length1;
	Test* _tmp42_;
	gchar** _tmp43_;
	gint _tmp43__length1;
	gint _tmp44_ = 0;
	gchar** _tmp45_;
	gint _tmp45__length1;
	gboolean _tmp46_ = FALSE;
	gchar** _tmp47_;
	gint _tmp47__length1;
	GError* _inner_error0_ = NULL;
	_tmp0_ = (Test*) g_initable_new (TYPE_TEST_PROXY, NULL, &_inner_error0_, "g-flags", G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES, "g-name", "org.example.Test", "g-bus-type", G_BUS_TYPE_SESSION, "g-object-path", "/org/example/test", "g-interface-name", "org.example.Test", NULL);
	test = (Test*) _tmp0_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp2_ = test;
	_tmp3_ = g_new0 (gint, 1);
	_tmp3_[0] = 42;
	_tmp4_ = _tmp3_;
	_tmp4__length1 = 1;
	_tmp8_ = test_test_int (_tmp2_, _tmp4_, (gint) 1, &_tmp5_, &_tmp6_, &_tmp7_, &_inner_error0_);
	j = (g_free (j), NULL);
	j = _tmp5_;
	j_length1 = _tmp6_;
	_j_size_ = j_length1;
	_tmp9_ = _tmp8_;
	_tmp9__length1 = _tmp7_;
	_tmp4_ = (g_free (_tmp4_), NULL);
	_tmp1_ = _tmp9_;
	_tmp1__length1 = _tmp9__length1;
	__tmp1__size_ = _tmp1__length1;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		k = (g_free (k), NULL);
		j = (g_free (j), NULL);
		_g_object_unref0 (test);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp10_ = _tmp1_;
	_tmp10__length1 = _tmp1__length1;
	_tmp1_ = NULL;
	_tmp1__length1 = 0;
	k = (g_free (k), NULL);
	k = _tmp10_;
	k_length1 = _tmp10__length1;
	_k_size_ = k_length1;
	_tmp12_ = j;
	_tmp12__length1 = j_length1;
	if (_tmp12__length1 == 1) {
		gint* _tmp13_;
		gint _tmp13__length1;
		gint _tmp14_;
		_tmp13_ = j;
		_tmp13__length1 = j_length1;
		_tmp14_ = _tmp13_[0];
		_tmp11_ = _tmp14_ == 23;
	} else {
		_tmp11_ = FALSE;
	}
	_vala_assert (_tmp11_, "j.length == 1 && j[0] == 23");
	_tmp16_ = k;
	_tmp16__length1 = k_length1;
	if (_tmp16__length1 == 1) {
		gint* _tmp17_;
		gint _tmp17__length1;
		gint _tmp18_;
		_tmp17_ = k;
		_tmp17__length1 = k_length1;
		_tmp18_ = _tmp17_[0];
		_tmp15_ = _tmp18_ == 11;
	} else {
		_tmp15_ = FALSE;
	}
	_vala_assert (_tmp15_, "k.length == 1 && k[0] == 11");
	_tmp20_ = test;
	_tmp21_ = g_strdup ("hello");
	_tmp22_ = g_new0 (gchar*, 1 + 1);
	_tmp22_[0] = _tmp21_;
	_tmp23_ = _tmp22_;
	_tmp23__length1 = 1;
	_tmp27_ = test_test_string (_tmp20_, _tmp23_, (gint) 1, &_tmp24_, &_tmp25_, &_tmp26_, &_inner_error0_);
	t = (_vala_array_free (t, t_length1, (GDestroyNotify) g_free), NULL);
	t = _tmp24_;
	t_length1 = _tmp25_;
	_t_size_ = t_length1;
	_tmp28_ = _tmp27_;
	_tmp28__length1 = _tmp26_;
	_tmp23_ = (_vala_array_free (_tmp23_, _tmp23__length1, (GDestroyNotify) g_free), NULL);
	_tmp19_ = _tmp28_;
	_tmp19__length1 = _tmp28__length1;
	__tmp19__size_ = _tmp19__length1;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		u = (_vala_array_free (u, u_length1, (GDestroyNotify) g_free), NULL);
		t = (_vala_array_free (t, t_length1, (GDestroyNotify) g_free), NULL);
		_tmp1_ = (g_free (_tmp1_), NULL);
		k = (g_free (k), NULL);
		j = (g_free (j), NULL);
		_g_object_unref0 (test);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp29_ = _tmp19_;
	_tmp29__length1 = _tmp19__length1;
	_tmp19_ = NULL;
	_tmp19__length1 = 0;
	u = (_vala_array_free (u, u_length1, (GDestroyNotify) g_free), NULL);
	u = _tmp29_;
	u_length1 = _tmp29__length1;
	_u_size_ = u_length1;
	_tmp31_ = t;
	_tmp31__length1 = t_length1;
	if (_tmp31__length1 == 1) {
		gchar** _tmp32_;
		gint _tmp32__length1;
		const gchar* _tmp33_;
		_tmp32_ = t;
		_tmp32__length1 = t_length1;
		_tmp33_ = _tmp32_[0];
		_tmp30_ = g_strcmp0 (_tmp33_, "world") == 0;
	} else {
		_tmp30_ = FALSE;
	}
	_vala_assert (_tmp30_, "t.length == 1 && t[0] == \"world\"");
	_tmp35_ = u;
	_tmp35__length1 = u_length1;
	if (_tmp35__length1 == 1) {
		gchar** _tmp36_;
		gint _tmp36__length1;
		const gchar* _tmp37_;
		_tmp36_ = u;
		_tmp36__length1 = u_length1;
		_tmp37_ = _tmp36_[0];
		_tmp34_ = g_strcmp0 (_tmp37_, "vala") == 0;
	} else {
		_tmp34_ = FALSE;
	}
	_vala_assert (_tmp34_, "u.length == 1 && u[0] == \"vala\"");
	_tmp38_ = test;
	_tmp39_ = g_strdup ("hello");
	_tmp40_ = g_new0 (gchar*, 1 + 1);
	_tmp40_[0] = _tmp39_;
	_tmp41_ = _tmp40_;
	_tmp41__length1 = 1;
	test_set_test_property (_tmp38_, _tmp41_, 1);
	_tmp41_ = (_vala_array_free (_tmp41_, _tmp41__length1, (GDestroyNotify) g_free), NULL);
	_tmp42_ = test;
	_tmp43_ = test_get_test_property (_tmp42_, &_tmp44_);
	_tmp43__length1 = _tmp44_;
	_tmp45_ = _tmp43_;
	_tmp45__length1 = _tmp43__length1;
	t = (_vala_array_free (t, t_length1, (GDestroyNotify) g_free), NULL);
	t = _tmp45_;
	t_length1 = _tmp45__length1;
	_t_size_ = t_length1;
	_tmp47_ = t;
	_tmp47__length1 = t_length1;
	if (_tmp47__length1 == 1) {
		gchar** _tmp48_;
		gint _tmp48__length1;
		const gchar* _tmp49_;
		_tmp48_ = t;
		_tmp48__length1 = t_length1;
		_tmp49_ = _tmp48_[0];
		_tmp46_ = g_strcmp0 (_tmp49_, "hello") == 0;
	} else {
		_tmp46_ = FALSE;
	}
	_vala_assert (_tmp46_, "t.length == 1 && t[0] == \"hello\"");
	_tmp19_ = (_vala_array_free (_tmp19_, _tmp19__length1, (GDestroyNotify) g_free), NULL);
	u = (_vala_array_free (u, u_length1, (GDestroyNotify) g_free), NULL);
	t = (_vala_array_free (t, t_length1, (GDestroyNotify) g_free), NULL);
	_tmp1_ = (g_free (_tmp1_), NULL);
	k = (g_free (k), NULL);
	j = (g_free (j), NULL);
	_g_object_unref0 (test);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

