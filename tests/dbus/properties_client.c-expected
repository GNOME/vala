/* dbus_properties_client.c generated by valac, the Vala compiler
 * generated from dbus_properties_client.vala, do not modify */

#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define TEST_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_TEST, TestIface))

typedef struct _Test Test;
typedef struct _TestIface TestIface;

#define TYPE_TEST_PROXY (test_proxy_get_type ())
typedef GDBusProxy TestProxy;
typedef GDBusProxyClass TestProxyClass;
enum  {
	TEST_PROXY_0_PROPERTY,
	TEST_PROXY_TEST_PROPERTY_PROPERTY,
	TEST_PROXY_TEST_INT_PROPERTY_PROPERTY,
	TEST_PROXY_NUM_PROPERTIES
};
static GParamSpec* test_proxy_properties[TEST_PROXY_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_TEST2 (test2_get_type ())
#define TEST2(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST2, Test2))
#define TEST2_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEST2, Test2Class))
#define IS_TEST2(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST2))
#define IS_TEST2_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEST2))
#define TEST2_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEST2, Test2Class))

typedef struct _Test2 Test2;
typedef struct _Test2Class Test2Class;
typedef struct _Test2Private Test2Private;
enum  {
	TEST2_0_PROPERTY,
	TEST2_TEST_PROPERTY_PROPERTY,
	TEST2_TEST_INT_PROPERTY_PROPERTY,
	TEST2_NUM_PROPERTIES
};
static GParamSpec* test2_properties[TEST2_NUM_PROPERTIES];
typedef struct _Block1Data Block1Data;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block2Data Block2Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _TestIface {
	GTypeInterface parent_iface;
	void (*change_everything) (Test* self, GError** error);
	void (*check_everything) (Test* self, GError** error);
	gchar* (*get_test_property) (Test* self);
	void (*set_test_property) (Test* self, const gchar* value);
	gint (*get_test_int_property) (Test* self);
	void (*set_test_int_property) (Test* self, gint value);
};

struct _Test2 {
	GObject parent_instance;
	Test2Private * priv;
};

struct _Test2Class {
	GObjectClass parent_class;
};

struct _Test2Private {
	gchar* _test_property;
	gint _test_int_property;
};

struct _Block1Data {
	int _ref_count_;
	GMainLoop* main_loop;
};

struct _Block2Data {
	int _ref_count_;
	GMainLoop* main_loop2;
};

static gint Test2_private_offset;
static gpointer test2_parent_class = NULL;

VALA_EXTERN GType test_proxy_get_type (void) G_GNUC_CONST ;
VALA_EXTERN guint test_register_object (void* object,
                            GDBusConnection* connection,
                            const gchar* path,
                            GError** error);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, g_object_unref)
VALA_EXTERN void test_change_everything (Test* self,
                             GError** error);
VALA_EXTERN void test_check_everything (Test* self,
                            GError** error);
VALA_EXTERN gchar* test_get_test_property (Test* self);
VALA_EXTERN void test_set_test_property (Test* self,
                             const gchar* value);
VALA_EXTERN gint test_get_test_int_property (Test* self);
VALA_EXTERN void test_set_test_int_property (Test* self,
                                 gint value);
static GType test_get_type_once (void);
static GParamSpec * _vala_test_find_property_from_dbus_name (const gchar * dbus_property_name);
static void test_proxy_get_property (GObject* object,
                              guint property_id,
                              GValue* value,
                              GParamSpec* pspec);
static void test_proxy_set_property (GObject* object,
                              guint property_id,
                              const GValue* value,
                              GParamSpec* pspec);
static void test_proxy_g_signal (GDBusProxy* proxy,
                          const gchar* sender_name,
                          const gchar* signal_name,
                          GVariant* parameters);
static void test_proxy_g_properties_changed (GDBusProxy* proxy,
                                      GVariant* changed_properties,
                                      const gchar* const* invalidated_properties);
static void test_proxy_change_everything (Test* self,
                                   GError** error);
static void test_proxy_check_everything (Test* self,
                                  GError** error);
static gchar* test_dbus_proxy_get_test_property (Test* self);
static void test_dbus_proxy_set_test_property (Test* self,
                                        const gchar* value);
static gint test_dbus_proxy_get_test_int_property (Test* self);
static void test_dbus_proxy_set_test_int_property (Test* self,
                                            gint value);
static void test_proxy_test_interface_init (TestIface* iface);
static void _dbus_test_change_everything (Test* self,
                                   GVariant* _parameters_,
                                   GDBusMethodInvocation* invocation);
static void _dbus_test_check_everything (Test* self,
                                  GVariant* _parameters_,
                                  GDBusMethodInvocation* invocation);
static void test_dbus_interface_method_call (GDBusConnection* connection,
                                      const gchar* sender,
                                      const gchar* object_path,
                                      const gchar* interface_name,
                                      const gchar* method_name,
                                      GVariant* parameters,
                                      GDBusMethodInvocation* invocation,
                                      gpointer user_data);
static GVariant* test_dbus_interface_get_property (GDBusConnection* connection,
                                            const gchar* sender,
                                            const gchar* object_path,
                                            const gchar* interface_name,
                                            const gchar* property_name,
                                            GError** error,
                                            gpointer user_data);
static GVariant* _dbus_test_get_test_property (Test* self);
static GVariant* _dbus_test_get_test_int_property (Test* self);
static gboolean test_dbus_interface_set_property (GDBusConnection* connection,
                                           const gchar* sender,
                                           const gchar* object_path,
                                           const gchar* interface_name,
                                           const gchar* property_name,
                                           GVariant* value,
                                           GError** error,
                                           gpointer user_data);
static void _dbus_test_set_test_property (Test* self,
                                   GVariant* _value);
static void _dbus_test_set_test_int_property (Test* self,
                                       GVariant* _value);
static void _test_notify_test_property (GObject * gobject,
                                 GParamSpec * pspec,
                                 gpointer user_data);
static void _test_notify_test_int_property (GObject * gobject,
                                     GParamSpec * pspec,
                                     gpointer user_data);
static void _test_unregister_object (gpointer user_data);
VALA_EXTERN GType test2_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test2, g_object_unref)
VALA_EXTERN Test2* test2_new (void);
VALA_EXTERN Test2* test2_construct (GType object_type);
VALA_EXTERN const gchar* test2_get_test_property (Test2* self);
VALA_EXTERN void test2_set_test_property (Test2* self,
                              const gchar* value);
VALA_EXTERN gint test2_get_test_int_property (Test2* self);
VALA_EXTERN void test2_set_test_int_property (Test2* self,
                                  gint value);
static void test2_finalize (GObject * obj);
static GType test2_get_type_once (void);
static void _vala_test2_get_property (GObject * object,
                               guint property_id,
                               GValue * value,
                               GParamSpec * pspec);
static void _vala_test2_set_property (GObject * object,
                               guint property_id,
                               const GValue * value,
                               GParamSpec * pspec);
static void _vala_main (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_,
                  GParamSpec* p);
static void __vala_lambda0__g_object_notify (GObject* _sender,
                                   GParamSpec* pspec,
                                   gpointer self);
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
static void _vala_lambda1_ (Block2Data* _data2_,
                  GParamSpec* p);
static void __vala_lambda1__g_object_notify (GObject* _sender,
                                   GParamSpec* pspec,
                                   gpointer self);

static const GDBusArgInfo * const _test_dbus_arg_info_change_everything_in[] = {NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_change_everything_out[] = {NULL};
static const GDBusMethodInfo _test_dbus_method_info_change_everything = {-1, "ChangeEverything", (GDBusArgInfo **) (&_test_dbus_arg_info_change_everything_in), (GDBusArgInfo **) (&_test_dbus_arg_info_change_everything_out), NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_check_everything_in[] = {NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_check_everything_out[] = {NULL};
static const GDBusMethodInfo _test_dbus_method_info_check_everything = {-1, "CheckEverything", (GDBusArgInfo **) (&_test_dbus_arg_info_check_everything_in), (GDBusArgInfo **) (&_test_dbus_arg_info_check_everything_out), NULL};
static const GDBusMethodInfo * const _test_dbus_method_info[] = {&_test_dbus_method_info_change_everything, &_test_dbus_method_info_check_everything, NULL};
static const GDBusSignalInfo * const _test_dbus_signal_info[] = {NULL};
static const GDBusPropertyInfo _test_dbus_property_info_test_property = {-1, "TestProperty", "s", G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE, NULL};
static const GDBusPropertyInfo _test_dbus_property_info_test_int_property = {-1, "TestIntProperty", "i", G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE, NULL};
static const GDBusPropertyInfo * const _test_dbus_property_info[] = {&_test_dbus_property_info_test_property, &_test_dbus_property_info_test_int_property, NULL};
static const GDBusInterfaceInfo _test_dbus_interface_info = {-1, "org.example.Test", (GDBusMethodInfo **) (&_test_dbus_method_info), (GDBusSignalInfo **) (&_test_dbus_signal_info), (GDBusPropertyInfo **) (&_test_dbus_property_info), NULL};
static const GDBusInterfaceVTable _test_dbus_interface_vtable = {test_dbus_interface_method_call, test_dbus_interface_get_property, test_dbus_interface_set_property};

void
test_change_everything (Test* self,
                        GError** error)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->change_everything) {
		_iface_->change_everything (self, error);
	}
}

void
test_check_everything (Test* self,
                       GError** error)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->check_everything) {
		_iface_->check_everything (self, error);
	}
}

gchar*
test_get_test_property (Test* self)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), NULL);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->get_test_property) {
		return _iface_->get_test_property (self);
	}
	return NULL;
}

void
test_set_test_property (Test* self,
                        const gchar* value)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->set_test_property) {
		_iface_->set_test_property (self, value);
	}
}

gint
test_get_test_int_property (Test* self)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), 0);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->get_test_int_property) {
		return _iface_->get_test_int_property (self);
	}
	return -1;
}

void
test_set_test_int_property (Test* self,
                            gint value)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->set_test_int_property) {
		_iface_->set_test_int_property (self, value);
	}
}

static void
test_default_init (TestIface * iface,
                   gpointer iface_data)
{
	g_object_interface_install_property (iface, g_param_spec_string ("test-property", "test-property", "test-property", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_interface_install_property (iface, g_param_spec_int ("test-int-property", "test-int-property", "test-int-property", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static GType
test_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (TestIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType test_type_id;
	test_type_id = g_type_register_static (G_TYPE_INTERFACE, "Test", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (test_type_id, G_TYPE_OBJECT);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-proxy-type"), (void*) test_proxy_get_type);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-interface-name"), "org.example.Test");
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-interface-info"), (void*) (&_test_dbus_interface_info));
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) test_register_object);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

G_DEFINE_TYPE_EXTENDED (TestProxy, test_proxy, G_TYPE_DBUS_PROXY, 0, G_IMPLEMENT_INTERFACE (TYPE_TEST, test_proxy_test_interface_init) )
static void
test_proxy_class_init (TestProxyClass* klass)
{
	GDBusProxyClass * proxy_class = G_DBUS_PROXY_CLASS (klass);
	GObjectClass * object_class = G_OBJECT_CLASS (klass);
	proxy_class->g_signal = test_proxy_g_signal;
	proxy_class->g_properties_changed = test_proxy_g_properties_changed;
	object_class->get_property = test_proxy_get_property;
	object_class->set_property = test_proxy_set_property;
	g_object_class_override_property (object_class, TEST_PROXY_TEST_PROPERTY_PROPERTY, "test-property");
	test_proxy_properties[TEST_PROXY_TEST_PROPERTY_PROPERTY] = g_object_class_find_property (object_class, "test-property");
	g_object_class_override_property (object_class, TEST_PROXY_TEST_INT_PROPERTY_PROPERTY, "test-int-property");
	test_proxy_properties[TEST_PROXY_TEST_INT_PROPERTY_PROPERTY] = g_object_class_find_property (object_class, "test-int-property");
}

static GParamSpec *
_vala_test_find_property_from_dbus_name (const gchar * dbus_property_name)
{
	if (g_strcmp0 (dbus_property_name, "TestProperty") == 0) {
		return test_proxy_properties[TEST_PROXY_TEST_PROPERTY_PROPERTY];
	} else if (g_strcmp0 (dbus_property_name, "TestIntProperty") == 0) {
		return test_proxy_properties[TEST_PROXY_TEST_INT_PROPERTY_PROPERTY];
	}
	return NULL;
}

static void
test_proxy_get_property (GObject* object,
                         guint property_id,
                         GValue* value,
                         GParamSpec* pspec)
{
	Test * self;
	GVariant * variant;
	const gchar * dbus_property_name = NULL;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_TEST, Test);
	switch (property_id) {
		case TEST_PROXY_TEST_PROPERTY_PROPERTY:
		g_value_take_string (value, test_dbus_proxy_get_test_property (self));
		break;
		case TEST_PROXY_TEST_INT_PROPERTY_PROPERTY:
		g_value_set_int (value, test_dbus_proxy_get_test_int_property (self));
		break;
		default:
		return;
	}
}

static void
test_proxy_set_property (GObject* object,
                         guint property_id,
                         const GValue* value,
                         GParamSpec* pspec)
{
	Test * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_TEST, Test);
	switch (property_id) {
		case TEST_PROXY_TEST_PROPERTY_PROPERTY:
		test_dbus_proxy_set_test_property (self, g_value_get_string (value));
		break;
		case TEST_PROXY_TEST_INT_PROPERTY_PROPERTY:
		test_dbus_proxy_set_test_int_property (self, g_value_get_int (value));
		break;
		default:
		return;
	}
}

static void
test_proxy_g_signal (GDBusProxy* proxy,
                     const gchar* sender_name,
                     const gchar* signal_name,
                     GVariant* parameters)
{
}

static void
test_proxy_g_properties_changed (GDBusProxy* proxy,
                                 GVariant* changed_properties,
                                 const gchar* const* invalidated_properties)
{
	GVariantIter * iter;
	const gchar * key;
	GParamSpec * pspec;
	guint n;
	g_variant_get (changed_properties, "a{sv}", &iter);
	while (g_variant_iter_next (iter, "{&sv}", &key, NULL)) {
		pspec = _vala_test_find_property_from_dbus_name (key);
		if (pspec != NULL) {
			g_object_notify_by_pspec ((GObject *) proxy, pspec);
		}
	}
	g_variant_iter_free (iter);
	for (n = 0; invalidated_properties[n] != NULL; n++) {
		pspec = _vala_test_find_property_from_dbus_name (invalidated_properties[n]);
		if (pspec != NULL) {
			g_object_notify_by_pspec ((GObject *) proxy, pspec);
		}
	}
}

static void
test_proxy_init (TestProxy* self)
{
	g_dbus_proxy_set_interface_info (G_DBUS_PROXY (self), (GDBusInterfaceInfo *) (&_test_dbus_interface_info));
}

static void
test_proxy_change_everything (Test* self,
                              GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "ChangeEverything");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}

static void
test_proxy_check_everything (Test* self,
                             GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "CheckEverything");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}

static gchar*
test_dbus_proxy_get_test_property (Test* self)
{
	GVariant *_inner_reply;
	gchar* _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "TestProperty");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestProperty"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_dup_string (_inner_reply, NULL);
	g_variant_unref (_inner_reply);
	return _result;
}

static void
test_dbus_proxy_set_test_property (Test* self,
                                   const gchar* value)
{
	GVariant *_arguments;
	GVariant *_reply;
	GVariantBuilder _arguments_builder;
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestProperty"));
	g_variant_builder_open (&_arguments_builder, G_VARIANT_TYPE_VARIANT);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (value));
	g_variant_builder_close (&_arguments_builder);
	_arguments = g_variant_builder_end (&_arguments_builder);
	_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Set", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
	if (!_reply) {
		return;
	}
	g_variant_unref (_reply);
}

static gint
test_dbus_proxy_get_test_int_property (Test* self)
{
	GVariant *_inner_reply;
	gint _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "TestIntProperty");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestIntProperty"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			gint _tmp0_ = 0;
			return _tmp0_;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_get_int32 (_inner_reply);
	g_variant_unref (_inner_reply);
	return _result;
}

static void
test_dbus_proxy_set_test_int_property (Test* self,
                                       gint value)
{
	GVariant *_arguments;
	GVariant *_reply;
	GVariantBuilder _arguments_builder;
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestIntProperty"));
	g_variant_builder_open (&_arguments_builder, G_VARIANT_TYPE_VARIANT);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_int32 (value));
	g_variant_builder_close (&_arguments_builder);
	_arguments = g_variant_builder_end (&_arguments_builder);
	_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Set", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
	if (!_reply) {
		return;
	}
	g_variant_unref (_reply);
}

static void
test_proxy_test_interface_init (TestIface* iface)
{
	iface->change_everything = test_proxy_change_everything;
	iface->check_everything = test_proxy_check_everything;
	iface->get_test_property = test_dbus_proxy_get_test_property;
	iface->set_test_property = test_dbus_proxy_set_test_property;
	iface->get_test_int_property = test_dbus_proxy_get_test_int_property;
	iface->set_test_int_property = test_dbus_proxy_set_test_int_property;
}

static void
_dbus_test_change_everything (Test* self,
                              GVariant* _parameters_,
                              GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	test_change_everything (self, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}

static void
_dbus_test_check_everything (Test* self,
                             GVariant* _parameters_,
                             GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	test_check_everything (self, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}

static void
test_dbus_interface_method_call (GDBusConnection* connection,
                                 const gchar* sender,
                                 const gchar* object_path,
                                 const gchar* interface_name,
                                 const gchar* method_name,
                                 GVariant* parameters,
                                 GDBusMethodInvocation* invocation,
                                 gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "ChangeEverything") == 0) {
		_dbus_test_change_everything (object, parameters, invocation);
	} else if (strcmp (method_name, "CheckEverything") == 0) {
		_dbus_test_check_everything (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}

static GVariant*
_dbus_test_get_test_property (Test* self)
{
	gchar* result;
	GVariant* _reply;
	result = test_get_test_property (self);
	_reply = g_variant_new_string (result);
	_g_free0 (result);
	return _reply;
}

static GVariant*
_dbus_test_get_test_int_property (Test* self)
{
	gint result;
	GVariant* _reply;
	result = test_get_test_int_property (self);
	_reply = g_variant_new_int32 (result);
	return _reply;
}

static GVariant*
test_dbus_interface_get_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "TestProperty") == 0) {
		return _dbus_test_get_test_property (object);
	} else if (strcmp (property_name, "TestIntProperty") == 0) {
		return _dbus_test_get_test_int_property (object);
	}
	return NULL;
}

static void
_dbus_test_set_test_property (Test* self,
                              GVariant* _value)
{
	gchar* value = NULL;
	value = g_variant_dup_string (_value, NULL);
	test_set_test_property (self, value);
	_g_free0 (value);
}

static void
_dbus_test_set_test_int_property (Test* self,
                                  GVariant* _value)
{
	gint value = 0;
	value = g_variant_get_int32 (_value);
	test_set_test_int_property (self, value);
}

static gboolean
test_dbus_interface_set_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GVariant* value,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "TestProperty") == 0) {
		_dbus_test_set_test_property (object, value);
		return TRUE;
	} else if (strcmp (property_name, "TestIntProperty") == 0) {
		_dbus_test_set_test_int_property (object, value);
		return TRUE;
	}
	return FALSE;
}

static void
_test_notify_test_property (GObject * gobject,
                            GParamSpec * pspec,
                            gpointer user_data)
{
	gpointer* data = user_data;
	GError* error = NULL;
	GVariant* parameters = NULL;
	GVariant* variant = NULL;
	GVariantBuilder changed_builder;
	GVariantBuilder invalidated_builder;
	Test * self;
	g_variant_builder_init (&changed_builder, G_VARIANT_TYPE_VARDICT);
	g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE_STRING_ARRAY);
	self = G_TYPE_CHECK_INSTANCE_CAST (gobject, TYPE_TEST, Test);
	variant = _dbus_test_get_test_property (self);
	g_variant_builder_add (&changed_builder, "{sv}", "TestProperty", variant);
	parameters = g_variant_new ("(sa{sv}as)", "org.example.Test", &changed_builder, &invalidated_builder);
	g_dbus_connection_emit_signal ((GDBusConnection *) data[1], NULL, (const gchar *) data[2], "org.freedesktop.DBus.Properties", "PropertiesChanged", parameters, &error);
}

static void
_test_notify_test_int_property (GObject * gobject,
                                GParamSpec * pspec,
                                gpointer user_data)
{
	gpointer* data = user_data;
	GError* error = NULL;
	GVariant* parameters = NULL;
	GVariant* variant = NULL;
	GVariantBuilder changed_builder;
	GVariantBuilder invalidated_builder;
	Test * self;
	g_variant_builder_init (&changed_builder, G_VARIANT_TYPE_VARDICT);
	g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE_STRING_ARRAY);
	self = G_TYPE_CHECK_INSTANCE_CAST (gobject, TYPE_TEST, Test);
	variant = _dbus_test_get_test_int_property (self);
	g_variant_builder_add (&changed_builder, "{sv}", "TestIntProperty", variant);
	parameters = g_variant_new ("(sa{sv}as)", "org.example.Test", &changed_builder, &invalidated_builder);
	g_dbus_connection_emit_signal ((GDBusConnection *) data[1], NULL, (const gchar *) data[2], "org.freedesktop.DBus.Properties", "PropertiesChanged", parameters, &error);
}

guint
test_register_object (gpointer object,
                      GDBusConnection* connection,
                      const gchar* path,
                      GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_test_dbus_interface_info), &_test_dbus_interface_vtable, data, _test_unregister_object, error);
	if (!result) {
		return 0;
	}
	g_signal_connect (object, "notify::test-property", (GCallback) _test_notify_test_property, data);
	g_signal_connect (object, "notify::test-int-property", (GCallback) _test_notify_test_int_property, data);
	return result;
}

static void
_test_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_signal_handlers_disconnect_by_func (data[0], _test_notify_test_property, data);
	g_signal_handlers_disconnect_by_func (data[0], _test_notify_test_int_property, data);
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}

static inline gpointer
test2_get_instance_private (Test2* self)
{
	return G_STRUCT_MEMBER_P (self, Test2_private_offset);
}

Test2*
test2_construct (GType object_type)
{
	Test2 * self = NULL;
	self = (Test2*) g_object_new (object_type, NULL);
	return self;
}

Test2*
test2_new (void)
{
	return test2_construct (TYPE_TEST2);
}

const gchar*
test2_get_test_property (Test2* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (IS_TEST2 (self), NULL);
	_tmp0_ = self->priv->_test_property;
	result = _tmp0_;
	return result;
}

void
test2_set_test_property (Test2* self,
                         const gchar* value)
{
	gchar* old_value;
	g_return_if_fail (IS_TEST2 (self));
	old_value = test2_get_test_property (self);
	if (g_strcmp0 (value, old_value) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_test_property);
		self->priv->_test_property = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, test2_properties[TEST2_TEST_PROPERTY_PROPERTY]);
	}
}

gint
test2_get_test_int_property (Test2* self)
{
	gint result;
	g_return_val_if_fail (IS_TEST2 (self), 0);
	result = self->priv->_test_int_property;
	return result;
}

void
test2_set_test_int_property (Test2* self,
                             gint value)
{
	gint old_value;
	g_return_if_fail (IS_TEST2 (self));
	old_value = test2_get_test_int_property (self);
	if (old_value != value) {
		self->priv->_test_int_property = value;
		g_object_notify_by_pspec ((GObject *) self, test2_properties[TEST2_TEST_INT_PROPERTY_PROPERTY]);
	}
}

static void
test2_class_init (Test2Class * klass,
                  gpointer klass_data)
{
	test2_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Test2_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_test2_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_test2_set_property;
	G_OBJECT_CLASS (klass)->finalize = test2_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), TEST2_TEST_PROPERTY_PROPERTY, test2_properties[TEST2_TEST_PROPERTY_PROPERTY] = g_param_spec_string ("test-property", "test-property", "test-property", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), TEST2_TEST_INT_PROPERTY_PROPERTY, test2_properties[TEST2_TEST_INT_PROPERTY_PROPERTY] = g_param_spec_int ("test-int-property", "test-int-property", "test-int-property", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
test2_instance_init (Test2 * self,
                     gpointer klass)
{
	self->priv = test2_get_instance_private (self);
}

static void
test2_finalize (GObject * obj)
{
	Test2 * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TEST2, Test2);
	_g_free0 (self->priv->_test_property);
	G_OBJECT_CLASS (test2_parent_class)->finalize (obj);
}

static GType
test2_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (Test2Class), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test2_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Test2), 0, (GInstanceInitFunc) test2_instance_init, NULL };
	GType test2_type_id;
	test2_type_id = g_type_register_static (G_TYPE_OBJECT, "Test2", &g_define_type_info, 0);
	Test2_private_offset = g_type_add_instance_private (test2_type_id, sizeof (Test2Private));
	return test2_type_id;
}

GType
test2_get_type (void)
{
	static volatile gsize test2_type_id__once = 0;
	if (g_once_init_enter (&test2_type_id__once)) {
		GType test2_type_id;
		test2_type_id = test2_get_type_once ();
		g_once_init_leave (&test2_type_id__once, test2_type_id);
	}
	return test2_type_id__once;
}

static void
_vala_test2_get_property (GObject * object,
                          guint property_id,
                          GValue * value,
                          GParamSpec * pspec)
{
	Test2 * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_TEST2, Test2);
	switch (property_id) {
		case TEST2_TEST_PROPERTY_PROPERTY:
		g_value_set_string (value, test2_get_test_property (self));
		break;
		case TEST2_TEST_INT_PROPERTY_PROPERTY:
		g_value_set_int (value, test2_get_test_int_property (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_test2_set_property (GObject * object,
                          guint property_id,
                          const GValue * value,
                          GParamSpec * pspec)
{
	Test2 * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_TEST2, Test2);
	switch (property_id) {
		case TEST2_TEST_PROPERTY_PROPERTY:
		test2_set_test_property (self, g_value_get_string (value));
		break;
		case TEST2_TEST_INT_PROPERTY_PROPERTY:
		test2_set_test_int_property (self, g_value_get_int (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_g_main_loop_unref0 (_data1_->main_loop);
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_,
             GParamSpec* p)
{
	const gchar* _tmp0_;
	GMainLoop* _tmp1_;
	g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (p, G_TYPE_PARAM));
	_tmp0_ = G_TYPE_CHECK_INSTANCE_CAST (G_TYPE_CHECK_INSTANCE_CAST (p, G_TYPE_PARAM_INT, GParamSpecInt), G_TYPE_PARAM, GParamSpec)->name;
	_vala_assert (g_strcmp0 (_tmp0_, "test-int-property") == 0, "((ParamSpecInt) p).name == \"test-int-property\"");
	_tmp1_ = _data1_->main_loop;
	g_main_loop_quit (_tmp1_);
}

static void
__vala_lambda0__g_object_notify (GObject* _sender,
                              GParamSpec* pspec,
                              gpointer self)
{
	_vala_lambda0_ (self, pspec);
}

static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
	g_atomic_int_inc (&_data2_->_ref_count_);
	return _data2_;
}

static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
		_g_main_loop_unref0 (_data2_->main_loop2);
		g_slice_free (Block2Data, _data2_);
	}
}

static void
_vala_lambda1_ (Block2Data* _data2_,
             GParamSpec* p)
{
	const gchar* _tmp0_;
	GMainLoop* _tmp1_;
	g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (p, G_TYPE_PARAM));
	_tmp0_ = G_TYPE_CHECK_INSTANCE_CAST (G_TYPE_CHECK_INSTANCE_CAST (p, G_TYPE_PARAM_STRING, GParamSpecString), G_TYPE_PARAM, GParamSpec)->name;
	_vala_assert (g_strcmp0 (_tmp0_, "test-property") == 0, "((ParamSpecString) p).name == \"test-property\"");
	_tmp1_ = _data2_->main_loop2;
	g_main_loop_quit (_tmp1_);
}

static void
__vala_lambda1__g_object_notify (GObject* _sender,
                              GParamSpec* pspec,
                              gpointer self)
{
	_vala_lambda1_ (self, pspec);
}

static void
_vala_main (void)
{
	Test* test = NULL;
	Test* _tmp0_;
	Test* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	Test* _tmp5_;
	gint _tmp6_;
	gint _tmp7_;
	Test2* test2 = NULL;
	Test2* _tmp8_;
	Test* _tmp9_;
	Test2* _tmp10_;
	Test* _tmp11_;
	Test2* _tmp12_;
	GError* _inner_error0_ = NULL;
	_tmp0_ = (Test*) g_initable_new (TYPE_TEST_PROXY, NULL, &_inner_error0_, "g-flags", G_DBUS_PROXY_FLAGS_NONE, "g-name", "org.example.Test", "g-bus-type", G_BUS_TYPE_SESSION, "g-object-path", "/org/example/test", "g-interface-name", "org.example.Test", NULL);
	test = (Test*) _tmp0_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp1_ = test;
	_tmp2_ = test_get_test_property (_tmp1_);
	_tmp3_ = _tmp2_;
	_tmp4_ = _tmp3_;
	_vala_assert (g_strcmp0 (_tmp4_, "foo") == 0, "test.test_property == \"foo\"");
	_g_free0 (_tmp4_);
	_tmp5_ = test;
	_tmp6_ = test_get_test_int_property (_tmp5_);
	_tmp7_ = _tmp6_;
	_vala_assert (_tmp7_ == 17, "test.test_int_property == 17");
	_tmp8_ = test2_new ();
	test2 = _tmp8_;
	_tmp9_ = test;
	_tmp10_ = test2;
	g_object_bind_property_with_closures (G_TYPE_CHECK_INSTANCE_CAST (_tmp9_, G_TYPE_OBJECT, GObject), "test-property", G_TYPE_CHECK_INSTANCE_CAST (_tmp10_, G_TYPE_OBJECT, GObject), "test-property", G_BINDING_SYNC_CREATE | G_BINDING_BIDIRECTIONAL, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)));
	_tmp11_ = test;
	_tmp12_ = test2;
	g_object_bind_property_with_closures (G_TYPE_CHECK_INSTANCE_CAST (_tmp11_, G_TYPE_OBJECT, GObject), "test-int-property", G_TYPE_CHECK_INSTANCE_CAST (_tmp12_, G_TYPE_OBJECT, GObject), "test-int-property", G_BINDING_SYNC_CREATE | G_BINDING_BIDIRECTIONAL, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)));
	{
		Block1Data* _data1_;
		GMainLoop* _tmp13_;
		Test2* _tmp14_;
		const gchar* _tmp15_;
		const gchar* _tmp16_;
		Test2* _tmp17_;
		gint _tmp18_;
		gint _tmp19_;
		Test2* _tmp20_;
		Test* _tmp21_;
		GMainLoop* _tmp22_;
		Test* _tmp23_;
		gchar* _tmp24_;
		gchar* _tmp25_;
		gchar* _tmp26_;
		Test* _tmp27_;
		gint _tmp28_;
		gint _tmp29_;
		_data1_ = g_slice_new0 (Block1Data);
		_data1_->_ref_count_ = 1;
		_tmp13_ = g_main_loop_new (NULL, FALSE);
		_data1_->main_loop = _tmp13_;
		_tmp14_ = test2;
		_tmp15_ = test2_get_test_property (_tmp14_);
		_tmp16_ = _tmp15_;
		_vala_assert (g_strcmp0 (_tmp16_, "foo") == 0, "test2.test_property == \"foo\"");
		_tmp17_ = test2;
		_tmp18_ = test2_get_test_int_property (_tmp17_);
		_tmp19_ = _tmp18_;
		_vala_assert (_tmp19_ == 17, "test2.test_int_property == 17");
		_tmp20_ = test2;
		g_signal_connect_data (G_TYPE_CHECK_INSTANCE_CAST (_tmp20_, G_TYPE_OBJECT, GObject), "notify::test-int-property", (GCallback) __vala_lambda0__g_object_notify, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
		_tmp21_ = test;
		test_change_everything (_tmp21_, &_inner_error0_);
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			block1_data_unref (_data1_);
			_data1_ = NULL;
			_g_object_unref0 (test2);
			_g_object_unref0 (test);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
		_tmp22_ = _data1_->main_loop;
		g_main_loop_run (_tmp22_);
		_tmp23_ = test;
		_tmp24_ = test_get_test_property (_tmp23_);
		_tmp25_ = _tmp24_;
		_tmp26_ = _tmp25_;
		_vala_assert (g_strcmp0 (_tmp26_, "bar") == 0, "test.test_property == \"bar\"");
		_g_free0 (_tmp26_);
		_tmp27_ = test;
		_tmp28_ = test_get_test_int_property (_tmp27_);
		_tmp29_ = _tmp28_;
		_vala_assert (_tmp29_ == 53, "test.test_int_property == 53");
		block1_data_unref (_data1_);
		_data1_ = NULL;
	}
	{
		Block2Data* _data2_;
		GMainLoop* _tmp30_;
		Test2* _tmp31_;
		const gchar* _tmp32_;
		const gchar* _tmp33_;
		Test2* _tmp34_;
		gint _tmp35_;
		gint _tmp36_;
		Test* _tmp37_;
		Test2* _tmp38_;
		Test2* _tmp39_;
		GMainLoop* _tmp40_;
		Test2* _tmp41_;
		const gchar* _tmp42_;
		const gchar* _tmp43_;
		Test2* _tmp44_;
		gint _tmp45_;
		gint _tmp46_;
		Test* _tmp47_;
		_data2_ = g_slice_new0 (Block2Data);
		_data2_->_ref_count_ = 1;
		_tmp30_ = g_main_loop_new (NULL, FALSE);
		_data2_->main_loop2 = _tmp30_;
		_tmp31_ = test2;
		_tmp32_ = test2_get_test_property (_tmp31_);
		_tmp33_ = _tmp32_;
		_vala_assert (g_strcmp0 (_tmp33_, "bar") == 0, "test2.test_property == \"bar\"");
		_tmp34_ = test2;
		_tmp35_ = test2_get_test_int_property (_tmp34_);
		_tmp36_ = _tmp35_;
		_vala_assert (_tmp36_ == 53, "test2.test_int_property == 53");
		_tmp37_ = test;
		g_signal_connect_data (G_TYPE_CHECK_INSTANCE_CAST (_tmp37_, G_TYPE_OBJECT, GObject), "notify::test-property", (GCallback) __vala_lambda1__g_object_notify, block2_data_ref (_data2_), (GClosureNotify) block2_data_unref, 0);
		_tmp38_ = test2;
		test2_set_test_property (_tmp38_, "baz");
		_tmp39_ = test2;
		test2_set_test_int_property (_tmp39_, 765);
		_tmp40_ = _data2_->main_loop2;
		g_main_loop_run (_tmp40_);
		_tmp41_ = test2;
		_tmp42_ = test2_get_test_property (_tmp41_);
		_tmp43_ = _tmp42_;
		_vala_assert (g_strcmp0 (_tmp43_, "baz") == 0, "test2.test_property == \"baz\"");
		_tmp44_ = test2;
		_tmp45_ = test2_get_test_int_property (_tmp44_);
		_tmp46_ = _tmp45_;
		_vala_assert (_tmp46_ == 765, "test2.test_int_property == 765");
		_tmp47_ = test;
		test_check_everything (_tmp47_, &_inner_error0_);
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
			block2_data_unref (_data2_);
			_data2_ = NULL;
			_g_object_unref0 (test2);
			_g_object_unref0 (test);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
			g_clear_error (&_inner_error0_);
			return;
		}
		block2_data_unref (_data2_);
		_data2_ = NULL;
	}
	_g_object_unref0 (test2);
	_g_object_unref0 (test);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

