/* dbus_enum_string_marshalling.c generated by valac, the Vala compiler
 * generated from dbus_enum_string_marshalling.vala, do not modify */

#include <glib-object.h>
#include <string.h>
#include <gio/gio.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	FOO_ENUM_BAR
} FooEnum;

#define TYPE_FOO_ENUM (foo_enum_get_type ())

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define TEST_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_TEST, TestIface))

typedef struct _Test Test;
typedef struct _TestIface TestIface;

#define TYPE_TEST_PROXY (test_proxy_get_type ())
typedef GDBusProxy TestProxy;
typedef GDBusProxyClass TestProxyClass;
typedef struct _TestTest1ReadyData TestTest1ReadyData;
typedef struct _TestTest5ReadyData TestTest5ReadyData;

struct _TestIface {
	GTypeInterface parent_iface;
	void (*test1) (Test* self, FooEnum e, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*test1_finish) (Test* self, GAsyncResult* _res_, GError** error);
	void (*test2) (Test* self, FooEnum e, GError** error);
	void (*test3) (Test* self, FooEnum e1, gint fd, FooEnum e2, GError** error);
	void (*test4) (Test* self, FooEnum e);
	void (*test5) (Test* self, FooEnum e, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*test5_finish) (Test* self, GAsyncResult* _res_);
};

struct _TestTest1ReadyData {
	GDBusMethodInvocation* _invocation_;
	FooEnum e;
};

struct _TestTest5ReadyData {
	GDBusMethodInvocation* _invocation_;
	FooEnum e;
};

VALA_EXTERN GType foo_enum_get_type (void) G_GNUC_CONST ;
VALA_EXTERN FooEnum foo_enum_from_string (const char* str,
                              GError** error);
VALA_EXTERN const char* foo_enum_to_string (FooEnum value);
VALA_EXTERN GType test_proxy_get_type (void) G_GNUC_CONST ;
VALA_EXTERN guint test_register_object (void* object,
                            GDBusConnection* connection,
                            const gchar* path,
                            GError** error);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, g_object_unref)
VALA_EXTERN void test_test1 (Test* self,
                 FooEnum e,
                 GAsyncReadyCallback _callback_,
                 gpointer _user_data_);
VALA_EXTERN void test_test1_finish (Test* self,
                        GAsyncResult* _res_,
                        GError** error);
VALA_EXTERN void test_test2 (Test* self,
                 FooEnum e,
                 GError** error);
VALA_EXTERN void test_test3 (Test* self,
                 FooEnum e1,
                 gint fd,
                 FooEnum e2,
                 GError** error);
VALA_EXTERN void test_test4 (Test* self,
                 FooEnum e);
VALA_EXTERN void test_test5 (Test* self,
                 FooEnum e,
                 GAsyncReadyCallback _callback_,
                 gpointer _user_data_);
VALA_EXTERN void test_test5_finish (Test* self,
                        GAsyncResult* _res_);
static GType test_get_type_once (void);
static void test_proxy_g_signal (GDBusProxy* proxy,
                          const gchar* sender_name,
                          const gchar* signal_name,
                          GVariant* parameters);
static void _vala_g_async_ready_callback (GObject *source_object,
                                   GAsyncResult *res,
                                   void *user_data);
static void test_proxy_test1_async (Test* self,
                             FooEnum e,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_);
static void test_proxy_test1_finish (Test* self,
                              GAsyncResult* _res_,
                              GError** error);
static void test_proxy_test2 (Test* self,
                       FooEnum e,
                       GError** error);
static void test_proxy_test3 (Test* self,
                       FooEnum e1,
                       gint fd,
                       FooEnum e2,
                       GError** error);
static void test_proxy_test4 (Test* self,
                       FooEnum e);
static void test_proxy_test5_async (Test* self,
                             FooEnum e,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_);
static void test_proxy_test5_finish (Test* self,
                              GAsyncResult* _res_);
static void test_proxy_test_interface_init (TestIface* iface);
static void _dbus_test_test1 (Test* self,
                       GVariant* _parameters_,
                       GDBusMethodInvocation* invocation);
static void _dbus_test_test1_ready (GObject * source_object,
                             GAsyncResult * _res_,
                             gpointer _user_data_);
static void _dbus_test_test2 (Test* self,
                       GVariant* _parameters_,
                       GDBusMethodInvocation* invocation);
static void _dbus_test_test3 (Test* self,
                       GVariant* _parameters_,
                       GDBusMethodInvocation* invocation);
static void _dbus_test_test4 (Test* self,
                       GVariant* _parameters_,
                       GDBusMethodInvocation* invocation);
static void _dbus_test_test5 (Test* self,
                       GVariant* _parameters_,
                       GDBusMethodInvocation* invocation);
static void _dbus_test_test5_ready (GObject * source_object,
                             GAsyncResult * _res_,
                             gpointer _user_data_);
static void test_dbus_interface_method_call (GDBusConnection* connection,
                                      const gchar* sender,
                                      const gchar* object_path,
                                      const gchar* interface_name,
                                      const gchar* method_name,
                                      GVariant* parameters,
                                      GDBusMethodInvocation* invocation,
                                      gpointer user_data);
static GVariant* test_dbus_interface_get_property (GDBusConnection* connection,
                                            const gchar* sender,
                                            const gchar* object_path,
                                            const gchar* interface_name,
                                            const gchar* property_name,
                                            GError** error,
                                            gpointer user_data);
static gboolean test_dbus_interface_set_property (GDBusConnection* connection,
                                           const gchar* sender,
                                           const gchar* object_path,
                                           const gchar* interface_name,
                                           const gchar* property_name,
                                           GVariant* value,
                                           GError** error,
                                           gpointer user_data);
static void _test_unregister_object (gpointer user_data);
static void _vala_main (void);

static const GDBusArgInfo _test_dbus_arg_info_test1_e = {-1, "e", "s", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test1_in[] = {&_test_dbus_arg_info_test1_e, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test1_out[] = {NULL};
static const GDBusMethodInfo _test_dbus_method_info_test1 = {-1, "Test1", (GDBusArgInfo **) (&_test_dbus_arg_info_test1_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test1_out), NULL};
static const GDBusArgInfo _test_dbus_arg_info_test2_e = {-1, "e", "s", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test2_in[] = {&_test_dbus_arg_info_test2_e, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test2_out[] = {NULL};
static const GDBusMethodInfo _test_dbus_method_info_test2 = {-1, "Test2", (GDBusArgInfo **) (&_test_dbus_arg_info_test2_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test2_out), NULL};
static const GDBusArgInfo _test_dbus_arg_info_test3_e1 = {-1, "e1", "s", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test3_fd = {-1, "fd", "i", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test3_e2 = {-1, "e2", "s", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test3_in[] = {&_test_dbus_arg_info_test3_e1, &_test_dbus_arg_info_test3_fd, &_test_dbus_arg_info_test3_e2, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test3_out[] = {NULL};
static const GDBusMethodInfo _test_dbus_method_info_test3 = {-1, "Test3", (GDBusArgInfo **) (&_test_dbus_arg_info_test3_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test3_out), NULL};
static const GDBusArgInfo _test_dbus_arg_info_test4_e = {-1, "e", "s", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test4_in[] = {&_test_dbus_arg_info_test4_e, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test4_out[] = {NULL};
static const GDBusMethodInfo _test_dbus_method_info_test4 = {-1, "Test4", (GDBusArgInfo **) (&_test_dbus_arg_info_test4_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test4_out), NULL};
static const GDBusArgInfo _test_dbus_arg_info_test5_e = {-1, "e", "s", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test5_in[] = {&_test_dbus_arg_info_test5_e, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test5_out[] = {NULL};
static const GDBusMethodInfo _test_dbus_method_info_test5 = {-1, "Test5", (GDBusArgInfo **) (&_test_dbus_arg_info_test5_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test5_out), NULL};
static const GDBusMethodInfo * const _test_dbus_method_info[] = {&_test_dbus_method_info_test1, &_test_dbus_method_info_test2, &_test_dbus_method_info_test3, &_test_dbus_method_info_test4, &_test_dbus_method_info_test5, NULL};
static const GDBusSignalInfo * const _test_dbus_signal_info[] = {NULL};
static const GDBusPropertyInfo * const _test_dbus_property_info[] = {NULL};
static const GDBusInterfaceInfo _test_dbus_interface_info = {-1, "org.example.Test", (GDBusMethodInfo **) (&_test_dbus_method_info), (GDBusSignalInfo **) (&_test_dbus_signal_info), (GDBusPropertyInfo **) (&_test_dbus_property_info), NULL};
static const GDBusInterfaceVTable _test_dbus_interface_vtable = {test_dbus_interface_method_call, test_dbus_interface_get_property, test_dbus_interface_set_property};

static GType
foo_enum_get_type_once (void)
{
	static const GEnumValue values[] = {{FOO_ENUM_BAR, "FOO_ENUM_BAR", "bar"}, {0, NULL, NULL}};
	GType foo_enum_type_id;
	foo_enum_type_id = g_enum_register_static ("FooEnum", values);
	return foo_enum_type_id;
}

GType
foo_enum_get_type (void)
{
	static volatile gsize foo_enum_type_id__once = 0;
	if (g_once_init_enter (&foo_enum_type_id__once)) {
		GType foo_enum_type_id;
		foo_enum_type_id = foo_enum_get_type_once ();
		g_once_init_leave (&foo_enum_type_id__once, foo_enum_type_id);
	}
	return foo_enum_type_id__once;
}

FooEnum
foo_enum_from_string (const char* str,
                      GError** error)
{
	FooEnum value = 0;
	if (strcmp (str, "BAR") == 0) {
		value = FOO_ENUM_BAR;
	} else {
		g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "Invalid value for enum `FooEnum'");
	}
	return value;
}

const char*
foo_enum_to_string (FooEnum value)
{
	const char * str;
	switch (value) {
		case FOO_ENUM_BAR:
		str = "BAR";
		break;
	}
	return str;
}

void
test_test1 (Test* self,
            FooEnum e,
            GAsyncReadyCallback _callback_,
            gpointer _user_data_)
{
	TestIface* _iface_;
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test1) {
		_iface_->test1 (self, e, _callback_, _user_data_);
	}
}

void
test_test1_finish (Test* self,
                   GAsyncResult* _res_,
                   GError** error)
{
	TestIface* _iface_;
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test1_finish) {
		_iface_->test1_finish (self, _res_, error);
	}
}

void
test_test2 (Test* self,
            FooEnum e,
            GError** error)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test2) {
		_iface_->test2 (self, e, error);
	}
}

void
test_test3 (Test* self,
            FooEnum e1,
            gint fd,
            FooEnum e2,
            GError** error)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test3) {
		_iface_->test3 (self, e1, fd, e2, error);
	}
}

void
test_test4 (Test* self,
            FooEnum e)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test4) {
		_iface_->test4 (self, e);
	}
}

void
test_test5 (Test* self,
            FooEnum e,
            GAsyncReadyCallback _callback_,
            gpointer _user_data_)
{
	TestIface* _iface_;
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test5) {
		_iface_->test5 (self, e, _callback_, _user_data_);
	}
}

void
test_test5_finish (Test* self,
                   GAsyncResult* _res_)
{
	TestIface* _iface_;
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test5_finish) {
		_iface_->test5_finish (self, _res_);
	}
}

static void
test_default_init (TestIface * iface,
                   gpointer iface_data)
{
}

static GType
test_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (TestIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType test_type_id;
	test_type_id = g_type_register_static (G_TYPE_INTERFACE, "Test", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (test_type_id, G_TYPE_OBJECT);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-proxy-type"), (void*) test_proxy_get_type);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-interface-name"), "org.example.Test");
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-interface-info"), (void*) (&_test_dbus_interface_info));
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) test_register_object);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

G_DEFINE_TYPE_EXTENDED (TestProxy, test_proxy, G_TYPE_DBUS_PROXY, 0, G_IMPLEMENT_INTERFACE (TYPE_TEST, test_proxy_test_interface_init) )
static void
test_proxy_class_init (TestProxyClass* klass)
{
	G_DBUS_PROXY_CLASS (klass)->g_signal = test_proxy_g_signal;
}

static void
test_proxy_g_signal (GDBusProxy* proxy,
                     const gchar* sender_name,
                     const gchar* signal_name,
                     GVariant* parameters)
{
}

static void
test_proxy_init (TestProxy* self)
{
	g_dbus_proxy_set_interface_info (G_DBUS_PROXY (self), (GDBusInterfaceInfo *) (&_test_dbus_interface_info));
}

static void
_vala_g_async_ready_callback (GObject *source_object,
                              GAsyncResult *res,
                              void *user_data)
{
	g_task_return_pointer (user_data, g_object_ref (res), g_object_unref);
	g_object_unref (user_data);
}

static void
test_proxy_test1_async (Test* self,
                        FooEnum e,
                        GAsyncReadyCallback _callback_,
                        gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	G_DBUS_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "Test1");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (foo_enum_to_string (e)));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	if (_callback_ != NULL) {
		g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	} else {
		g_dbus_message_set_flags (_message, G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED);
		g_dbus_connection_send_message (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	}
	g_object_unref (_message);
}

static void
test_proxy_test1_finish (Test* self,
                         GAsyncResult* _res_,
                         GError** error)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, error);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}

static void
test_proxy_test2 (Test* self,
                  FooEnum e,
                  GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	G_DBUS_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "Test2");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (foo_enum_to_string (e)));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}

static void
test_proxy_test3 (Test* self,
                  FooEnum e1,
                  gint fd,
                  FooEnum e2,
                  GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	G_DBUS_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "Test3");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (foo_enum_to_string (e1)));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_int32 (fd));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (foo_enum_to_string (e2)));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}

static void
test_proxy_test4 (Test* self,
                  FooEnum e)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "Test4");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (foo_enum_to_string (e)));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, NULL);
	g_object_unref (_message);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, NULL)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}

static void
test_proxy_test5_async (Test* self,
                        FooEnum e,
                        GAsyncReadyCallback _callback_,
                        gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "Test5");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (foo_enum_to_string (e)));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	if (_callback_ != NULL) {
		g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	} else {
		g_dbus_message_set_flags (_message, G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED);
		g_dbus_connection_send_message (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	}
	g_object_unref (_message);
}

static void
test_proxy_test5_finish (Test* self,
                         GAsyncResult* _res_)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, NULL);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, NULL)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}

static void
test_proxy_test_interface_init (TestIface* iface)
{
	iface->test1 = test_proxy_test1_async;
	iface->test1_finish = test_proxy_test1_finish;
	iface->test2 = test_proxy_test2;
	iface->test3 = test_proxy_test3;
	iface->test4 = test_proxy_test4;
	iface->test5 = test_proxy_test5_async;
	iface->test5_finish = test_proxy_test5_finish;
}

static void
_dbus_test_test1 (Test* self,
                  GVariant* _parameters_,
                  GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	TestTest1ReadyData* _ready_data;
	GVariant* _tmp0_;
	GError* error = NULL;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_ready_data = g_slice_new0 (TestTest1ReadyData);
	_ready_data->_invocation_ = invocation;
	_tmp0_ = g_variant_iter_next_value (&_arguments_iter);
	_ready_data->e = foo_enum_from_string (g_variant_get_string (_tmp0_, NULL), &error);
	g_variant_unref (_tmp0_);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	test_test1 (self, _ready_data->e, (GAsyncReadyCallback) _dbus_test_test1_ready, _ready_data);
}

static void
_dbus_test_test1_ready (GObject * source_object,
                        GAsyncResult * _res_,
                        gpointer _user_data_)
{
	TestTest1ReadyData* _ready_data;
	GDBusMethodInvocation* invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	_ready_data = _user_data_;
	invocation = _ready_data->_invocation_;
	test_test1_finish ((Test*) source_object, _res_, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		goto _error;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	_error:
	g_slice_free (TestTest1ReadyData, _ready_data);
}

static void
_dbus_test_test2 (Test* self,
                  GVariant* _parameters_,
                  GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	FooEnum e = 0;
	GVariant* _tmp1_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp1_ = g_variant_iter_next_value (&_arguments_iter);
	e = foo_enum_from_string (g_variant_get_string (_tmp1_, NULL), &error);
	g_variant_unref (_tmp1_);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	test_test2 (self, e, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}

static void
_dbus_test_test3 (Test* self,
                  GVariant* _parameters_,
                  GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	FooEnum e1 = 0;
	GVariant* _tmp2_;
	gint fd = 0;
	GVariant* _tmp3_;
	FooEnum e2 = 0;
	GVariant* _tmp4_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp2_ = g_variant_iter_next_value (&_arguments_iter);
	e1 = foo_enum_from_string (g_variant_get_string (_tmp2_, NULL), &error);
	g_variant_unref (_tmp2_);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	_tmp3_ = g_variant_iter_next_value (&_arguments_iter);
	fd = g_variant_get_int32 (_tmp3_);
	g_variant_unref (_tmp3_);
	_tmp4_ = g_variant_iter_next_value (&_arguments_iter);
	e2 = foo_enum_from_string (g_variant_get_string (_tmp4_, NULL), &error);
	g_variant_unref (_tmp4_);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	test_test3 (self, e1, fd, e2, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}

static void
_dbus_test_test4 (Test* self,
                  GVariant* _parameters_,
                  GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	FooEnum e = 0;
	GVariant* _tmp5_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp5_ = g_variant_iter_next_value (&_arguments_iter);
	e = foo_enum_from_string (g_variant_get_string (_tmp5_, NULL), &error);
	g_variant_unref (_tmp5_);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	test_test4 (self, e);
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}

static void
_dbus_test_test5 (Test* self,
                  GVariant* _parameters_,
                  GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	TestTest5ReadyData* _ready_data;
	GVariant* _tmp6_;
	GError* error = NULL;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_ready_data = g_slice_new0 (TestTest5ReadyData);
	_ready_data->_invocation_ = invocation;
	_tmp6_ = g_variant_iter_next_value (&_arguments_iter);
	_ready_data->e = foo_enum_from_string (g_variant_get_string (_tmp6_, NULL), &error);
	g_variant_unref (_tmp6_);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	test_test5 (self, _ready_data->e, (GAsyncReadyCallback) _dbus_test_test5_ready, _ready_data);
}

static void
_dbus_test_test5_ready (GObject * source_object,
                        GAsyncResult * _res_,
                        gpointer _user_data_)
{
	TestTest5ReadyData* _ready_data;
	GDBusMethodInvocation* invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	_ready_data = _user_data_;
	invocation = _ready_data->_invocation_;
	test_test5_finish ((Test*) source_object, _res_);
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	_error:
	g_slice_free (TestTest5ReadyData, _ready_data);
}

static void
test_dbus_interface_method_call (GDBusConnection* connection,
                                 const gchar* sender,
                                 const gchar* object_path,
                                 const gchar* interface_name,
                                 const gchar* method_name,
                                 GVariant* parameters,
                                 GDBusMethodInvocation* invocation,
                                 gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "Test1") == 0) {
		_dbus_test_test1 (object, parameters, invocation);
	} else if (strcmp (method_name, "Test2") == 0) {
		_dbus_test_test2 (object, parameters, invocation);
	} else if (strcmp (method_name, "Test3") == 0) {
		_dbus_test_test3 (object, parameters, invocation);
	} else if (strcmp (method_name, "Test4") == 0) {
		_dbus_test_test4 (object, parameters, invocation);
	} else if (strcmp (method_name, "Test5") == 0) {
		_dbus_test_test5 (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}

static GVariant*
test_dbus_interface_get_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return NULL;
}

static gboolean
test_dbus_interface_set_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GVariant* value,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return FALSE;
}

guint
test_register_object (gpointer object,
                      GDBusConnection* connection,
                      const gchar* path,
                      GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_test_dbus_interface_info), &_test_dbus_interface_vtable, data, _test_unregister_object, error);
	if (!result) {
		return 0;
	}
	return result;
}

static void
_test_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}

static void
_vala_main (void)
{
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

