/* dbus_structs_server.c generated by valac, the Vala compiler
 * generated from dbus_structs_server.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO_STRUCT (foo_struct_get_type ())
typedef struct _FooStruct FooStruct;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEST, TestClass))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define IS_TEST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEST))
#define TEST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEST, TestClass))

typedef struct _Test Test;
typedef struct _TestClass TestClass;
typedef struct _TestPrivate TestPrivate;
enum  {
	TEST_0_PROPERTY,
	TEST_TEST_PROPERTY_PROPERTY,
	TEST_NUM_PROPERTIES
};
static GParamSpec* test_properties[TEST_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FooStruct {
	gint i;
	gchar* s;
};

struct _Test {
	GObject parent_instance;
	TestPrivate * priv;
};

struct _TestClass {
	GObjectClass parent_class;
};

struct _TestPrivate {
	FooStruct _test_property;
};

static gint Test_private_offset;
static gpointer test_parent_class = NULL;
VALA_EXTERN GMainLoop* main_loop;
GMainLoop* main_loop = NULL;

VALA_EXTERN GType foo_struct_get_type (void) G_GNUC_CONST ;
VALA_EXTERN FooStruct* foo_struct_dup (const FooStruct* self);
VALA_EXTERN void foo_struct_free (FooStruct* self);
VALA_EXTERN void foo_struct_copy (const FooStruct* self,
                      FooStruct* dest);
VALA_EXTERN void foo_struct_destroy (FooStruct* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (FooStruct, foo_struct_destroy)
VALA_EXTERN void foo_struct_init (FooStruct *self,
                      gint i,
                      const gchar* s);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, g_object_unref)
VALA_EXTERN guint test_register_object (void* object,
                            GDBusConnection* connection,
                            const gchar* path,
                            GError** error);
VALA_EXTERN void test_test_struct (Test* self,
                       FooStruct* f,
                       FooStruct* g,
                       FooStruct* result);
VALA_EXTERN Test* test_new (void);
VALA_EXTERN Test* test_construct (GType object_type);
VALA_EXTERN void test_get_test_property (Test* self,
                             FooStruct * result);
VALA_EXTERN void test_set_test_property (Test* self,
                             FooStruct * value);
static gboolean _foo_struct_equal (const FooStruct * s1,
                            const FooStruct * s2);
static void test_finalize (GObject * obj);
static GType test_get_type_once (void);
static void _vala_test_get_property (GObject * object,
                              guint property_id,
                              GValue * value,
                              GParamSpec * pspec);
static void _vala_test_set_property (GObject * object,
                              guint property_id,
                              const GValue * value,
                              GParamSpec * pspec);
static void _dbus_test_test_struct (Test* self,
                             GVariant* _parameters_,
                             GDBusMethodInvocation* invocation);
static void test_dbus_interface_method_call (GDBusConnection* connection,
                                      const gchar* sender,
                                      const gchar* object_path,
                                      const gchar* interface_name,
                                      const gchar* method_name,
                                      GVariant* parameters,
                                      GDBusMethodInvocation* invocation,
                                      gpointer user_data);
static GVariant* test_dbus_interface_get_property (GDBusConnection* connection,
                                            const gchar* sender,
                                            const gchar* object_path,
                                            const gchar* interface_name,
                                            const gchar* property_name,
                                            GError** error,
                                            gpointer user_data);
static GVariant* _dbus_test_get_test_property (Test* self);
static gboolean test_dbus_interface_set_property (GDBusConnection* connection,
                                           const gchar* sender,
                                           const gchar* object_path,
                                           const gchar* interface_name,
                                           const gchar* property_name,
                                           GVariant* value,
                                           GError** error,
                                           gpointer user_data);
static void _dbus_test_set_test_property (Test* self,
                                   GVariant* _value);
static void _test_unregister_object (gpointer user_data);
VALA_EXTERN void client_exit (GPid pid,
                  gint status);
static void _vala_main (void);
static guint _variant_get1 (GVariant* value);
static void _client_exit_gchild_watch_func (GPid pid,
                                     gint wait_status,
                                     gpointer self);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static const GDBusArgInfo _test_dbus_arg_info_test_struct_f = {-1, "f", "(is)", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_struct_g = {-1, "g", "(is)", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_struct_result = {-1, "result", "(is)", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_struct_in[] = {&_test_dbus_arg_info_test_struct_f, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_struct_out[] = {&_test_dbus_arg_info_test_struct_g, &_test_dbus_arg_info_test_struct_result, NULL};
static const GDBusMethodInfo _test_dbus_method_info_test_struct = {-1, "TestStruct", (GDBusArgInfo **) (&_test_dbus_arg_info_test_struct_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test_struct_out), NULL};
static const GDBusMethodInfo * const _test_dbus_method_info[] = {&_test_dbus_method_info_test_struct, NULL};
static const GDBusSignalInfo * const _test_dbus_signal_info[] = {NULL};
static const GDBusPropertyInfo _test_dbus_property_info_test_property = {-1, "TestProperty", "(is)", G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE, NULL};
static const GDBusPropertyInfo * const _test_dbus_property_info[] = {&_test_dbus_property_info_test_property, NULL};
static const GDBusInterfaceInfo _test_dbus_interface_info = {-1, "org.example.Test", (GDBusMethodInfo **) (&_test_dbus_method_info), (GDBusSignalInfo **) (&_test_dbus_signal_info), (GDBusPropertyInfo **) (&_test_dbus_property_info), NULL};
static const GDBusInterfaceVTable _test_dbus_interface_vtable = {test_dbus_interface_method_call, test_dbus_interface_get_property, test_dbus_interface_set_property};

void
foo_struct_init (FooStruct *self,
                 gint i,
                 const gchar* s)
{
	gchar* _tmp0_;
	g_return_if_fail (s != NULL);
	memset (self, 0, sizeof (FooStruct));
	(*self).i = i;
	_tmp0_ = g_strdup (s);
	_g_free0 ((*self).s);
	(*self).s = _tmp0_;
}

void
foo_struct_copy (const FooStruct* self,
                 FooStruct* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	(*dest).i = (*self).i;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
}

void
foo_struct_destroy (FooStruct* self)
{
	_g_free0 ((*self).s);
}

FooStruct*
foo_struct_dup (const FooStruct* self)
{
	FooStruct* dup;
	dup = g_new0 (FooStruct, 1);
	foo_struct_copy (self, dup);
	return dup;
}

void
foo_struct_free (FooStruct* self)
{
	foo_struct_destroy (self);
	g_free (self);
}

static GType
foo_struct_get_type_once (void)
{
	GType foo_struct_type_id;
	foo_struct_type_id = g_boxed_type_register_static ("FooStruct", (GBoxedCopyFunc) foo_struct_dup, (GBoxedFreeFunc) foo_struct_free);
	return foo_struct_type_id;
}

GType
foo_struct_get_type (void)
{
	static volatile gsize foo_struct_type_id__once = 0;
	if (g_once_init_enter (&foo_struct_type_id__once)) {
		GType foo_struct_type_id;
		foo_struct_type_id = foo_struct_get_type_once ();
		g_once_init_leave (&foo_struct_type_id__once, foo_struct_type_id);
	}
	return foo_struct_type_id__once;
}

static inline gpointer
test_get_instance_private (Test* self)
{
	return G_STRUCT_MEMBER_P (self, Test_private_offset);
}

void
test_test_struct (Test* self,
                  FooStruct* f,
                  FooStruct* g,
                  FooStruct* result)
{
	FooStruct _vala_g = {0};
	FooStruct _tmp0_;
	FooStruct _tmp1_;
	const gchar* _tmp2_;
	FooStruct _tmp3_ = {0};
	g_return_if_fail (IS_TEST (self));
	g_return_if_fail (f != NULL);
	_tmp0_ = *f;
	_vala_assert (_tmp0_.i == 42, "f.i == 42");
	_tmp1_ = *f;
	_tmp2_ = _tmp1_.s;
	_vala_assert (g_strcmp0 (_tmp2_, "hello") == 0, "f.s == \"hello\"");
	foo_struct_destroy (&_vala_g);
	foo_struct_init (&_vala_g, 23, "world");
	foo_struct_init (&_tmp3_, 11, "vala");
	*result = _tmp3_;
	if (g) {
		*g = _vala_g;
	} else {
		foo_struct_destroy (&_vala_g);
	}
	return;
}

Test*
test_construct (GType object_type)
{
	Test * self = NULL;
	self = (Test*) g_object_new (object_type, NULL);
	return self;
}

Test*
test_new (void)
{
	return test_construct (TYPE_TEST);
}

void
test_get_test_property (Test* self,
                        FooStruct * result)
{
	FooStruct _tmp0_;
	FooStruct _tmp1_;
	FooStruct _tmp2_ = {0};
	g_return_if_fail (IS_TEST (self));
	_tmp0_ = self->priv->_test_property;
	_tmp1_ = _tmp0_;
	foo_struct_copy (&_tmp1_, &_tmp2_);
	*result = _tmp2_;
	return;
}

static gboolean
_foo_struct_equal (const FooStruct * s1,
                   const FooStruct * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (s1->i != s2->i) {
		return FALSE;
	}
	if (g_strcmp0 (s1->s, s2->s)) {
		return FALSE;
	}
	return TRUE;
}

void
test_set_test_property (Test* self,
                        FooStruct * value)
{
	FooStruct old_value;
	g_return_if_fail (IS_TEST (self));
	test_get_test_property (self, &old_value);
	if (_foo_struct_equal (value, &old_value) != TRUE) {
		FooStruct _tmp0_;
		FooStruct _tmp1_;
		FooStruct _tmp2_ = {0};
		_tmp0_ = *value;
		_tmp1_ = _tmp0_;
		foo_struct_copy (&_tmp1_, &_tmp2_);
		foo_struct_destroy (&self->priv->_test_property);
		self->priv->_test_property = _tmp2_;
		g_object_notify_by_pspec ((GObject *) self, test_properties[TEST_TEST_PROPERTY_PROPERTY]);
	}
	foo_struct_destroy (&old_value);
}

static void
test_class_init (TestClass * klass,
                 gpointer klass_data)
{
	test_parent_class = g_type_class_peek_parent (klass);
	g_type_class_adjust_private_offset (klass, &Test_private_offset);
	G_OBJECT_CLASS (klass)->get_property = _vala_test_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_test_set_property;
	G_OBJECT_CLASS (klass)->finalize = test_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), TEST_TEST_PROPERTY_PROPERTY, test_properties[TEST_TEST_PROPERTY_PROPERTY] = g_param_spec_boxed ("test-property", "test-property", "test-property", TYPE_FOO_STRUCT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}

static void
test_instance_init (Test * self,
                    gpointer klass)
{
	self->priv = test_get_instance_private (self);
}

static void
test_finalize (GObject * obj)
{
	Test * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_TEST, Test);
	foo_struct_destroy (&self->priv->_test_property);
	G_OBJECT_CLASS (test_parent_class)->finalize (obj);
}

static GType
test_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (TestClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Test), 0, (GInstanceInitFunc) test_instance_init, NULL };
	GType test_type_id;
	test_type_id = g_type_register_static (G_TYPE_OBJECT, "Test", &g_define_type_info, 0);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) test_register_object);
	Test_private_offset = g_type_add_instance_private (test_type_id, sizeof (TestPrivate));
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

static void
_vala_test_get_property (GObject * object,
                         guint property_id,
                         GValue * value,
                         GParamSpec * pspec)
{
	Test * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_TEST, Test);
	switch (property_id) {
		case TEST_TEST_PROPERTY_PROPERTY:
		{
			FooStruct boxed;
			test_get_test_property (self, &boxed);
			g_value_set_boxed (value, &boxed);
			foo_struct_destroy (&boxed);
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_vala_test_set_property (GObject * object,
                         guint property_id,
                         const GValue * value,
                         GParamSpec * pspec)
{
	Test * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_TEST, Test);
	switch (property_id) {
		case TEST_TEST_PROPERTY_PROPERTY:
		test_set_test_property (self, g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}

static void
_dbus_test_test_struct (Test* self,
                        GVariant* _parameters_,
                        GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	FooStruct f = {0};
	GVariant* _tmp0_;
	FooStruct _tmp1_;
	GVariantIter _tmp2_;
	GVariant* _tmp3_;
	GVariant* _tmp4_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	FooStruct g = {0};
	GVariantBuilder _tmp5_;
	FooStruct result = {0};
	GVariantBuilder _tmp6_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp0_ = g_variant_iter_next_value (&_arguments_iter);
	g_variant_iter_init (&_tmp2_, _tmp0_);
	_tmp3_ = g_variant_iter_next_value (&_tmp2_);
	_tmp1_.i = g_variant_get_int32 (_tmp3_);
	g_variant_unref (_tmp3_);
	_tmp4_ = g_variant_iter_next_value (&_tmp2_);
	_tmp1_.s = g_variant_dup_string (_tmp4_, NULL);
	g_variant_unref (_tmp4_);
	f = _tmp1_;
	g_variant_unref (_tmp0_);
	test_test_struct (self, &f, &g, &result);
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_init (&_tmp5_, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_tmp5_, g_variant_new_int32 (g.i));
	g_variant_builder_add_value (&_tmp5_, g_variant_new_string (g.s));
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp5_));
	g_variant_builder_init (&_tmp6_, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_tmp6_, g_variant_new_int32 (result.i));
	g_variant_builder_add_value (&_tmp6_, g_variant_new_string (result.s));
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp6_));
	foo_struct_destroy (&result);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	foo_struct_destroy (&f);
	foo_struct_destroy (&g);
}

static void
test_dbus_interface_method_call (GDBusConnection* connection,
                                 const gchar* sender,
                                 const gchar* object_path,
                                 const gchar* interface_name,
                                 const gchar* method_name,
                                 GVariant* parameters,
                                 GDBusMethodInvocation* invocation,
                                 gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "TestStruct") == 0) {
		_dbus_test_test_struct (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}

static GVariant*
_dbus_test_get_test_property (Test* self)
{
	FooStruct result = {0};
	GVariant* _reply;
	GVariantBuilder _tmp7_;
	test_get_test_property (self, &result);
	g_variant_builder_init (&_tmp7_, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_tmp7_, g_variant_new_int32 (result.i));
	g_variant_builder_add_value (&_tmp7_, g_variant_new_string (result.s));
	_reply = g_variant_builder_end (&_tmp7_);
	foo_struct_destroy (&result);
	return _reply;
}

static GVariant*
test_dbus_interface_get_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "TestProperty") == 0) {
		return _dbus_test_get_test_property (object);
	}
	return NULL;
}

static void
_dbus_test_set_test_property (Test* self,
                              GVariant* _value)
{
	FooStruct value = {0};
	FooStruct _tmp8_;
	GVariantIter _tmp9_;
	GVariant* _tmp10_;
	GVariant* _tmp11_;
	g_variant_iter_init (&_tmp9_, _value);
	_tmp10_ = g_variant_iter_next_value (&_tmp9_);
	_tmp8_.i = g_variant_get_int32 (_tmp10_);
	g_variant_unref (_tmp10_);
	_tmp11_ = g_variant_iter_next_value (&_tmp9_);
	_tmp8_.s = g_variant_dup_string (_tmp11_, NULL);
	g_variant_unref (_tmp11_);
	value = _tmp8_;
	test_set_test_property (self, &value);
	foo_struct_destroy (&value);
}

static gboolean
test_dbus_interface_set_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GVariant* value,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "TestProperty") == 0) {
		_dbus_test_set_test_property (object, value);
		return TRUE;
	}
	return FALSE;
}

guint
test_register_object (gpointer object,
                      GDBusConnection* connection,
                      const gchar* path,
                      GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_test_dbus_interface_info), &_test_dbus_interface_vtable, data, _test_unregister_object, error);
	if (!result) {
		return 0;
	}
	return result;
}

static void
_test_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}

void
client_exit (GPid pid,
             gint status)
{
	GMainLoop* _tmp0_;
	_vala_assert (status == 0, "status == 0");
	_tmp0_ = main_loop;
	g_main_loop_quit (_tmp0_);
}

static guint
_variant_get1 (GVariant* value)
{
	return g_variant_get_uint32 (value);
}

static void
_client_exit_gchild_watch_func (GPid pid,
                                gint wait_status,
                                gpointer self)
{
	client_exit (pid, wait_status);
}

static void
_vala_main (void)
{
	GDBusConnection* conn = NULL;
	GDBusConnection* _tmp0_;
	GDBusConnection* _tmp1_;
	Test* _tmp2_;
	Test* _tmp3_;
	GVariant* request_result = NULL;
	GDBusConnection* _tmp4_;
	GVariant* _tmp5_;
	GVariant* _tmp6_;
	GVariant* _tmp7_;
	GVariant* _tmp8_;
	GVariant* _tmp9_;
	GVariant* _tmp10_;
	GVariant* _tmp11_;
	guint _tmp12_;
	GPid client_pid = 0;
	gchar* _tmp13_;
	gchar** _tmp14_;
	gchar** _tmp15_;
	gint _tmp15__length1;
	GPid _tmp16_ = 0;
	GMainLoop* _tmp17_;
	GMainLoop* _tmp18_;
	GError* _inner_error0_ = NULL;
	_tmp0_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error0_);
	conn = _tmp0_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp1_ = conn;
	_tmp2_ = test_new ();
	_tmp3_ = _tmp2_;
	test_register_object (_tmp3_, _tmp1_, "/org/example/test", &_inner_error0_);
	_g_object_unref0 (_tmp3_);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_g_object_unref0 (conn);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp4_ = conn;
	_tmp5_ = g_variant_new ("(su)", "org.example.Test", 0x4, NULL);
	g_variant_ref_sink (_tmp5_);
	_tmp6_ = _tmp5_;
	_tmp7_ = g_dbus_connection_call_sync (_tmp4_, "org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "RequestName", _tmp6_, NULL, 0, -1, NULL, &_inner_error0_);
	_tmp8_ = _tmp7_;
	_g_variant_unref0 (_tmp6_);
	request_result = _tmp8_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_g_object_unref0 (conn);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp9_ = request_result;
	_tmp10_ = g_variant_get_child_value (_tmp9_, (gsize) 0);
	_tmp11_ = _tmp10_;
	_tmp12_ = _variant_get1 (_tmp11_);
	_vala_assert (_tmp12_ == ((guint) 1), "(uint) request_result.get_child_value (0) == 1");
	_g_variant_unref0 (_tmp11_);
	_tmp13_ = g_strdup ("dbus_structs_client");
	_tmp14_ = g_new0 (gchar*, 1 + 1);
	_tmp14_[0] = _tmp13_;
	_tmp15_ = _tmp14_;
	_tmp15__length1 = 1;
	g_spawn_async (NULL, _tmp15_, NULL, G_SPAWN_DO_NOT_REAP_CHILD, NULL, NULL, &_tmp16_, &_inner_error0_);
	client_pid = _tmp16_;
	_tmp15_ = (_vala_array_free (_tmp15_, _tmp15__length1, (GDestroyNotify) g_free), NULL);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_g_variant_unref0 (request_result);
		_g_object_unref0 (conn);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	g_child_watch_add_full (G_PRIORITY_DEFAULT_IDLE, client_pid, _client_exit_gchild_watch_func, NULL, NULL);
	_tmp17_ = g_main_loop_new (NULL, FALSE);
	_g_main_loop_unref0 (main_loop);
	main_loop = _tmp17_;
	_tmp18_ = main_loop;
	g_main_loop_run (_tmp18_);
	_g_variant_unref0 (request_result);
	_g_object_unref0 (conn);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

