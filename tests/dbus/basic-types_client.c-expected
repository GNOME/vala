/* dbus_basic_types_client.c generated by valac, the Vala compiler
 * generated from dbus_basic_types_client.vala, do not modify */

#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_TEST (test_get_type ())
#define TEST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEST, Test))
#define IS_TEST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEST))
#define TEST_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_TEST, TestIface))

typedef struct _Test Test;
typedef struct _TestIface TestIface;

#define TYPE_TEST_PROXY (test_proxy_get_type ())
typedef GDBusProxy TestProxy;
typedef GDBusProxyClass TestProxyClass;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _TestIface {
	GTypeInterface parent_iface;
	void (*test_void) (Test* self, GError** error);
	gint (*test_int) (Test* self, gint i, gint* j, GError** error);
	gchar* (*test_string) (Test* self, const gchar* s, gchar** t, GError** error);
	gchar* (*get_test_property) (Test* self);
	void (*set_test_property) (Test* self, const gchar* value);
	gint (*get_test_int_property) (Test* self);
	void (*set_test_int_property) (Test* self, gint value);
};

VALA_EXTERN GType test_proxy_get_type (void) G_GNUC_CONST ;
VALA_EXTERN guint test_register_object (void* object,
                            GDBusConnection* connection,
                            const gchar* path,
                            GError** error);
VALA_EXTERN GType test_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Test, g_object_unref)
VALA_EXTERN void test_test_void (Test* self,
                     GError** error);
VALA_EXTERN gint test_test_int (Test* self,
                    gint i,
                    gint* j,
                    GError** error);
VALA_EXTERN gchar* test_test_string (Test* self,
                         const gchar* s,
                         gchar** t,
                         GError** error);
VALA_EXTERN gchar* test_get_test_property (Test* self);
VALA_EXTERN void test_set_test_property (Test* self,
                             const gchar* value);
VALA_EXTERN gint test_get_test_int_property (Test* self);
VALA_EXTERN void test_set_test_int_property (Test* self,
                                 gint value);
static GType test_get_type_once (void);
static void test_proxy_g_signal (GDBusProxy* proxy,
                          const gchar* sender_name,
                          const gchar* signal_name,
                          GVariant* parameters);
static void test_proxy_test_void (Test* self,
                           GError** error);
static gint test_proxy_test_int (Test* self,
                          gint i,
                          gint* j,
                          GError** error);
static gchar* test_proxy_test_string (Test* self,
                               const gchar* s,
                               gchar** t,
                               GError** error);
static gchar* test_dbus_proxy_get_test_property (Test* self);
static void test_dbus_proxy_set_test_property (Test* self,
                                        const gchar* value);
static gint test_dbus_proxy_get_test_int_property (Test* self);
static void test_dbus_proxy_set_test_int_property (Test* self,
                                            gint value);
static void test_proxy_test_interface_init (TestIface* iface);
static void _dbus_test_test_void (Test* self,
                           GVariant* _parameters_,
                           GDBusMethodInvocation* invocation);
static void _dbus_test_test_int (Test* self,
                          GVariant* _parameters_,
                          GDBusMethodInvocation* invocation);
static void _dbus_test_test_string (Test* self,
                             GVariant* _parameters_,
                             GDBusMethodInvocation* invocation);
static void test_dbus_interface_method_call (GDBusConnection* connection,
                                      const gchar* sender,
                                      const gchar* object_path,
                                      const gchar* interface_name,
                                      const gchar* method_name,
                                      GVariant* parameters,
                                      GDBusMethodInvocation* invocation,
                                      gpointer user_data);
static GVariant* test_dbus_interface_get_property (GDBusConnection* connection,
                                            const gchar* sender,
                                            const gchar* object_path,
                                            const gchar* interface_name,
                                            const gchar* property_name,
                                            GError** error,
                                            gpointer user_data);
static GVariant* _dbus_test_get_test_property (Test* self);
static GVariant* _dbus_test_get_test_int_property (Test* self);
static gboolean test_dbus_interface_set_property (GDBusConnection* connection,
                                           const gchar* sender,
                                           const gchar* object_path,
                                           const gchar* interface_name,
                                           const gchar* property_name,
                                           GVariant* value,
                                           GError** error,
                                           gpointer user_data);
static void _dbus_test_set_test_property (Test* self,
                                   GVariant* _value);
static void _dbus_test_set_test_int_property (Test* self,
                                       GVariant* _value);
static void _test_unregister_object (gpointer user_data);
static void _vala_main (void);

static const GDBusArgInfo * const _test_dbus_arg_info_test_void_in[] = {NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_void_out[] = {NULL};
static const GDBusMethodInfo _test_dbus_method_info_test_void = {-1, "TestVoid", (GDBusArgInfo **) (&_test_dbus_arg_info_test_void_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test_void_out), NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_int_i = {-1, "i", "i", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_int_j = {-1, "j", "i", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_int_result = {-1, "result", "i", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_int_in[] = {&_test_dbus_arg_info_test_int_i, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_int_out[] = {&_test_dbus_arg_info_test_int_j, &_test_dbus_arg_info_test_int_result, NULL};
static const GDBusMethodInfo _test_dbus_method_info_test_int = {-1, "TestInt", (GDBusArgInfo **) (&_test_dbus_arg_info_test_int_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test_int_out), NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_string_s = {-1, "s", "s", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_string_t = {-1, "t", "s", NULL};
static const GDBusArgInfo _test_dbus_arg_info_test_string_result = {-1, "result", "s", NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_string_in[] = {&_test_dbus_arg_info_test_string_s, NULL};
static const GDBusArgInfo * const _test_dbus_arg_info_test_string_out[] = {&_test_dbus_arg_info_test_string_t, &_test_dbus_arg_info_test_string_result, NULL};
static const GDBusMethodInfo _test_dbus_method_info_test_string = {-1, "TestString", (GDBusArgInfo **) (&_test_dbus_arg_info_test_string_in), (GDBusArgInfo **) (&_test_dbus_arg_info_test_string_out), NULL};
static const GDBusMethodInfo * const _test_dbus_method_info[] = {&_test_dbus_method_info_test_void, &_test_dbus_method_info_test_int, &_test_dbus_method_info_test_string, NULL};
static const GDBusSignalInfo * const _test_dbus_signal_info[] = {NULL};
static const GDBusPropertyInfo _test_dbus_property_info_test_property = {-1, "TestProperty", "s", G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE, NULL};
static const GDBusPropertyInfo _test_dbus_property_info_test_int_property = {-1, "TestIntProperty", "i", G_DBUS_PROPERTY_INFO_FLAGS_READABLE | G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE, NULL};
static const GDBusPropertyInfo * const _test_dbus_property_info[] = {&_test_dbus_property_info_test_property, &_test_dbus_property_info_test_int_property, NULL};
static const GDBusInterfaceInfo _test_dbus_interface_info = {-1, "org.example.Test", (GDBusMethodInfo **) (&_test_dbus_method_info), (GDBusSignalInfo **) (&_test_dbus_signal_info), (GDBusPropertyInfo **) (&_test_dbus_property_info), NULL};
static const GDBusInterfaceVTable _test_dbus_interface_vtable = {test_dbus_interface_method_call, test_dbus_interface_get_property, test_dbus_interface_set_property};

void
test_test_void (Test* self,
                GError** error)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test_void) {
		_iface_->test_void (self, error);
	}
}

gint
test_test_int (Test* self,
               gint i,
               gint* j,
               GError** error)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), 0);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test_int) {
		return _iface_->test_int (self, i, j, error);
	}
	return -1;
}

gchar*
test_test_string (Test* self,
                  const gchar* s,
                  gchar** t,
                  GError** error)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), NULL);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->test_string) {
		return _iface_->test_string (self, s, t, error);
	}
	return NULL;
}

gchar*
test_get_test_property (Test* self)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), NULL);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->get_test_property) {
		return _iface_->get_test_property (self);
	}
	return NULL;
}

void
test_set_test_property (Test* self,
                        const gchar* value)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->set_test_property) {
		_iface_->set_test_property (self, value);
	}
}

gint
test_get_test_int_property (Test* self)
{
	TestIface* _iface_;
	g_return_val_if_fail (IS_TEST (self), 0);
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->get_test_int_property) {
		return _iface_->get_test_int_property (self);
	}
	return -1;
}

void
test_set_test_int_property (Test* self,
                            gint value)
{
	TestIface* _iface_;
	g_return_if_fail (IS_TEST (self));
	_iface_ = TEST_GET_INTERFACE (self);
	if (_iface_->set_test_int_property) {
		_iface_->set_test_int_property (self, value);
	}
}

static void
test_default_init (TestIface * iface,
                   gpointer iface_data)
{
}

static GType
test_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (TestIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) test_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType test_type_id;
	test_type_id = g_type_register_static (G_TYPE_INTERFACE, "Test", &g_define_type_info, 0);
	g_type_interface_add_prerequisite (test_type_id, G_TYPE_OBJECT);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-proxy-type"), (void*) test_proxy_get_type);
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-interface-name"), "org.example.Test");
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-interface-info"), (void*) (&_test_dbus_interface_info));
	g_type_set_qdata (test_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) test_register_object);
	return test_type_id;
}

GType
test_get_type (void)
{
	static volatile gsize test_type_id__once = 0;
	if (g_once_init_enter (&test_type_id__once)) {
		GType test_type_id;
		test_type_id = test_get_type_once ();
		g_once_init_leave (&test_type_id__once, test_type_id);
	}
	return test_type_id__once;
}

G_DEFINE_TYPE_EXTENDED (TestProxy, test_proxy, G_TYPE_DBUS_PROXY, 0, G_IMPLEMENT_INTERFACE (TYPE_TEST, test_proxy_test_interface_init) )
static void
test_proxy_class_init (TestProxyClass* klass)
{
	G_DBUS_PROXY_CLASS (klass)->g_signal = test_proxy_g_signal;
}

static void
test_proxy_g_signal (GDBusProxy* proxy,
                     const gchar* sender_name,
                     const gchar* signal_name,
                     GVariant* parameters)
{
}

static void
test_proxy_init (TestProxy* self)
{
	g_dbus_proxy_set_interface_info (G_DBUS_PROXY (self), (GDBusInterfaceInfo *) (&_test_dbus_interface_info));
}

static void
test_proxy_test_void (Test* self,
                      GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	G_IO_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "TestVoid");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}

static gint
test_proxy_test_int (Test* self,
                     gint i,
                     gint* j,
                     GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	GVariant *_reply;
	GVariantIter _reply_iter;
	gint _vala_j = 0;
	GVariant* _tmp2_;
	gint _result = 0;
	GVariant* _tmp3_;
	G_IO_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "TestInt");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_int32 (i));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		gint _tmp0_ = 0;
		return _tmp0_;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		gint _tmp1_ = 0;
		g_object_unref (_reply_message);
		return _tmp1_;
	}
	_reply = g_dbus_message_get_body (_reply_message);
	g_variant_iter_init (&_reply_iter, _reply);
	_tmp2_ = g_variant_iter_next_value (&_reply_iter);
	_vala_j = g_variant_get_int32 (_tmp2_);
	g_variant_unref (_tmp2_);
	*j = _vala_j;
	_tmp3_ = g_variant_iter_next_value (&_reply_iter);
	_result = g_variant_get_int32 (_tmp3_);
	g_variant_unref (_tmp3_);
	g_object_unref (_reply_message);
	return _result;
}

static gchar*
test_proxy_test_string (Test* self,
                        const gchar* s,
                        gchar** t,
                        GError** error)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GDBusMessage *_reply_message;
	GVariant *_reply;
	GVariantIter _reply_iter;
	gchar* _vala_t = NULL;
	GVariant* _tmp4_;
	gchar* _result = NULL;
	GVariant* _tmp5_;
	G_IO_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.example.Test", "TestString");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (s));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	_reply_message = g_dbus_connection_send_message_with_reply_sync (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, error);
	g_object_unref (_message);
	if (!_reply_message) {
		return NULL;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return NULL;
	}
	_reply = g_dbus_message_get_body (_reply_message);
	g_variant_iter_init (&_reply_iter, _reply);
	_tmp4_ = g_variant_iter_next_value (&_reply_iter);
	_vala_t = g_variant_dup_string (_tmp4_, NULL);
	g_variant_unref (_tmp4_);
	*t = _vala_t;
	_tmp5_ = g_variant_iter_next_value (&_reply_iter);
	_result = g_variant_dup_string (_tmp5_, NULL);
	g_variant_unref (_tmp5_);
	g_object_unref (_reply_message);
	return _result;
}

static gchar*
test_dbus_proxy_get_test_property (Test* self)
{
	GVariant *_inner_reply;
	gchar* _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "TestProperty");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestProperty"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_dup_string (_inner_reply, NULL);
	g_variant_unref (_inner_reply);
	return _result;
}

static void
test_dbus_proxy_set_test_property (Test* self,
                                   const gchar* value)
{
	GVariant *_arguments;
	GVariant *_reply;
	GVariantBuilder _arguments_builder;
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestProperty"));
	g_variant_builder_open (&_arguments_builder, G_VARIANT_TYPE_VARIANT);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (value));
	g_variant_builder_close (&_arguments_builder);
	_arguments = g_variant_builder_end (&_arguments_builder);
	_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Set", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
	if (!_reply) {
		return;
	}
	g_variant_unref (_reply);
}

static gint
test_dbus_proxy_get_test_int_property (Test* self)
{
	GVariant *_inner_reply;
	gint _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "TestIntProperty");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestIntProperty"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			gint _tmp6_ = 0;
			return _tmp6_;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_get_int32 (_inner_reply);
	g_variant_unref (_inner_reply);
	return _result;
}

static void
test_dbus_proxy_set_test_int_property (Test* self,
                                       gint value)
{
	GVariant *_arguments;
	GVariant *_reply;
	GVariantBuilder _arguments_builder;
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("org.example.Test"));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("TestIntProperty"));
	g_variant_builder_open (&_arguments_builder, G_VARIANT_TYPE_VARIANT);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_int32 (value));
	g_variant_builder_close (&_arguments_builder);
	_arguments = g_variant_builder_end (&_arguments_builder);
	_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Set", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
	if (!_reply) {
		return;
	}
	g_variant_unref (_reply);
}

static void
test_proxy_test_interface_init (TestIface* iface)
{
	iface->test_void = test_proxy_test_void;
	iface->test_int = test_proxy_test_int;
	iface->test_string = test_proxy_test_string;
	iface->get_test_property = test_dbus_proxy_get_test_property;
	iface->set_test_property = test_dbus_proxy_set_test_property;
	iface->get_test_int_property = test_dbus_proxy_get_test_int_property;
	iface->set_test_int_property = test_dbus_proxy_set_test_int_property;
}

static void
_dbus_test_test_void (Test* self,
                      GVariant* _parameters_,
                      GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	test_test_void (self, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}

static void
_dbus_test_test_int (Test* self,
                     GVariant* _parameters_,
                     GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	gint i = 0;
	GVariant* _tmp7_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	gint j = 0;
	gint result;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp7_ = g_variant_iter_next_value (&_arguments_iter);
	i = g_variant_get_int32 (_tmp7_);
	g_variant_unref (_tmp7_);
	result = test_test_int (self, i, &j, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_reply_builder, g_variant_new_int32 (j));
	g_variant_builder_add_value (&_reply_builder, g_variant_new_int32 (result));
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}

static void
_dbus_test_test_string (Test* self,
                        GVariant* _parameters_,
                        GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	gchar* s = NULL;
	GVariant* _tmp8_;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	gchar* t = NULL;
	gchar* result;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp8_ = g_variant_iter_next_value (&_arguments_iter);
	s = g_variant_dup_string (_tmp8_, NULL);
	g_variant_unref (_tmp8_);
	result = test_test_string (self, s, &t, &error);
	if (error) {
		g_dbus_method_invocation_take_error (invocation, error);
		goto _error;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_reply_builder, g_variant_new_string (t));
	g_variant_builder_add_value (&_reply_builder, g_variant_new_string (result));
	_g_free0 (result);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	_error:
	_g_free0 (s);
	_g_free0 (t);
	;
}

static void
test_dbus_interface_method_call (GDBusConnection* connection,
                                 const gchar* sender,
                                 const gchar* object_path,
                                 const gchar* interface_name,
                                 const gchar* method_name,
                                 GVariant* parameters,
                                 GDBusMethodInvocation* invocation,
                                 gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "TestVoid") == 0) {
		_dbus_test_test_void (object, parameters, invocation);
	} else if (strcmp (method_name, "TestInt") == 0) {
		_dbus_test_test_int (object, parameters, invocation);
	} else if (strcmp (method_name, "TestString") == 0) {
		_dbus_test_test_string (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}

static GVariant*
_dbus_test_get_test_property (Test* self)
{
	gchar* result;
	GVariant* _reply;
	result = test_get_test_property (self);
	_reply = g_variant_new_string (result);
	_g_free0 (result);
	return _reply;
}

static GVariant*
_dbus_test_get_test_int_property (Test* self)
{
	gint result;
	GVariant* _reply;
	result = test_get_test_int_property (self);
	_reply = g_variant_new_int32 (result);
	return _reply;
}

static GVariant*
test_dbus_interface_get_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "TestProperty") == 0) {
		return _dbus_test_get_test_property (object);
	} else if (strcmp (property_name, "TestIntProperty") == 0) {
		return _dbus_test_get_test_int_property (object);
	}
	return NULL;
}

static void
_dbus_test_set_test_property (Test* self,
                              GVariant* _value)
{
	gchar* value = NULL;
	value = g_variant_dup_string (_value, NULL);
	test_set_test_property (self, value);
	_g_free0 (value);
}

static void
_dbus_test_set_test_int_property (Test* self,
                                  GVariant* _value)
{
	gint value = 0;
	value = g_variant_get_int32 (_value);
	test_set_test_int_property (self, value);
}

static gboolean
test_dbus_interface_set_property (GDBusConnection* connection,
                                  const gchar* sender,
                                  const gchar* object_path,
                                  const gchar* interface_name,
                                  const gchar* property_name,
                                  GVariant* value,
                                  GError** error,
                                  gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "TestProperty") == 0) {
		_dbus_test_set_test_property (object, value);
		return TRUE;
	} else if (strcmp (property_name, "TestIntProperty") == 0) {
		_dbus_test_set_test_int_property (object, value);
		return TRUE;
	}
	return FALSE;
}

guint
test_register_object (gpointer object,
                      GDBusConnection* connection,
                      const gchar* path,
                      GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_test_dbus_interface_info), &_test_dbus_interface_vtable, data, _test_unregister_object, error);
	if (!result) {
		return 0;
	}
	return result;
}

static void
_test_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}

static void
_vala_main (void)
{
	Test* test = NULL;
	Test* _tmp0_;
	Test* _tmp1_;
	gint j = 0;
	gint k = 0;
	gint _tmp2_ = 0;
	Test* _tmp3_;
	gint _tmp4_ = 0;
	gint _tmp5_;
	gchar* t = NULL;
	gchar* u = NULL;
	gchar* _tmp6_ = NULL;
	Test* _tmp7_;
	gchar* _tmp8_ = NULL;
	gchar* _tmp9_;
	gchar* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	Test* _tmp13_;
	Test* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	const gchar* _tmp17_;
	Test* _tmp18_;
	Test* _tmp19_;
	gint _tmp20_;
	gint _tmp21_;
	GError* _inner_error0_ = NULL;
	_tmp0_ = (Test*) g_initable_new (TYPE_TEST_PROXY, NULL, &_inner_error0_, "g-flags", G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES, "g-name", "org.example.Test", "g-bus-type", G_BUS_TYPE_SESSION, "g-object-path", "/org/example/test", "g-interface-name", "org.example.Test", NULL);
	test = (Test*) _tmp0_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp1_ = test;
	test_test_void (_tmp1_, &_inner_error0_);
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_g_object_unref0 (test);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp3_ = test;
	_tmp5_ = test_test_int (_tmp3_, 42, &_tmp4_, &_inner_error0_);
	j = _tmp4_;
	_tmp2_ = _tmp5_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_g_object_unref0 (test);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	k = _tmp2_;
	_vala_assert (j == 23, "j == 23");
	_vala_assert (k == 11, "k == 11");
	_tmp7_ = test;
	_tmp9_ = test_test_string (_tmp7_, "hello", &_tmp8_, &_inner_error0_);
	_g_free0 (t);
	t = _tmp8_;
	_tmp6_ = _tmp9_;
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
		_g_free0 (u);
		_g_free0 (t);
		_g_object_unref0 (test);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
		g_clear_error (&_inner_error0_);
		return;
	}
	_tmp10_ = _tmp6_;
	_tmp6_ = NULL;
	_g_free0 (u);
	u = _tmp10_;
	_tmp11_ = t;
	_vala_assert (g_strcmp0 (_tmp11_, "world") == 0, "t == \"world\"");
	_tmp12_ = u;
	_vala_assert (g_strcmp0 (_tmp12_, "vala") == 0, "u == \"vala\"");
	_tmp13_ = test;
	test_set_test_property (_tmp13_, "hello");
	_tmp14_ = test;
	_tmp15_ = test_get_test_property (_tmp14_);
	_tmp16_ = _tmp15_;
	_g_free0 (t);
	t = _tmp16_;
	_tmp17_ = t;
	_vala_assert (g_strcmp0 (_tmp17_, "hello") == 0, "t == \"hello\"");
	_tmp18_ = test;
	test_set_test_int_property (_tmp18_, 42);
	_tmp19_ = test;
	_tmp20_ = test_get_test_int_property (_tmp19_);
	_tmp21_ = _tmp20_;
	j = _tmp21_;
	_vala_assert (j == 42, "j == 42");
	_g_free0 (_tmp6_);
	_g_free0 (u);
	_g_free0 (t);
	_g_object_unref0 (test);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

