/* semantic_member_access_static_transformed_qualified.c generated by valac, the Vala compiler
 * generated from semantic_member_access_static_transformed_qualified.vala, do not modify */

#include <glib-object.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define MANAM_TYPE_MANAM (manam_manam_get_type ())
#define MANAM_MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MANAM_TYPE_MANAM, ManamManam))
#define MANAM_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MANAM_TYPE_MANAM, ManamManamClass))
#define MANAM_IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MANAM_TYPE_MANAM))
#define MANAM_IS_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MANAM_TYPE_MANAM))
#define MANAM_MANAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MANAM_TYPE_MANAM, ManamManamClass))

typedef struct _ManamManam ManamManam;
typedef struct _ManamManamClass ManamManamClass;
typedef struct _ManamManamPrivate ManamManamPrivate;
typedef struct _ManamParamSpecManam ManamParamSpecManam;

#define MANAM_TYPE_FOO (manam_foo_get_type ())
#define MANAM_FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MANAM_TYPE_FOO, ManamFoo))
#define MANAM_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MANAM_TYPE_FOO, ManamFooClass))
#define MANAM_IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MANAM_TYPE_FOO))
#define MANAM_IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MANAM_TYPE_FOO))
#define MANAM_FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MANAM_TYPE_FOO, ManamFooClass))

typedef struct _ManamFoo ManamFoo;
typedef struct _ManamFooClass ManamFooClass;
typedef struct _ManamFooPrivate ManamFooPrivate;
typedef struct _ManamParamSpecFoo ManamParamSpecFoo;
#define _manam_foo_unref0(var) ((var == NULL) ? NULL : (var = (manam_foo_unref (var), NULL)))

struct _ManamManam {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ManamManamPrivate * priv;
};

struct _ManamManamClass {
	GTypeClass parent_class;
	void (*finalize) (ManamManam *self);
};

struct _ManamParamSpecManam {
	GParamSpec parent_instance;
};

struct _ManamFoo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ManamFooPrivate * priv;
};

struct _ManamFooClass {
	GTypeClass parent_class;
	void (*finalize) (ManamFoo *self);
};

struct _ManamParamSpecFoo {
	GParamSpec parent_instance;
};

static gpointer manam_manam_parent_class = NULL;
static gpointer manam_foo_parent_class = NULL;

VALA_EXTERN gpointer manam_manam_ref (gpointer instance);
VALA_EXTERN void manam_manam_unref (gpointer instance);
VALA_EXTERN GParamSpec* manam_param_spec_manam (const gchar* name,
                                    const gchar* nick,
                                    const gchar* blurb,
                                    GType object_type,
                                    GParamFlags flags);
VALA_EXTERN void manam_value_set_manam (GValue* value,
                            gpointer v_object);
VALA_EXTERN void manam_value_take_manam (GValue* value,
                             gpointer v_object);
VALA_EXTERN gpointer manam_value_get_manam (const GValue* value);
VALA_EXTERN GType manam_manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ManamManam, manam_manam_unref)
VALA_EXTERN ManamManam* manam_manam_new (void);
VALA_EXTERN ManamManam* manam_manam_construct (GType object_type);
static void manam_manam_finalize (ManamManam * obj);
static GType manam_manam_get_type_once (void);
VALA_EXTERN gpointer manam_foo_ref (gpointer instance);
VALA_EXTERN void manam_foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* manam_param_spec_foo (const gchar* name,
                                  const gchar* nick,
                                  const gchar* blurb,
                                  GType object_type,
                                  GParamFlags flags);
VALA_EXTERN void manam_value_set_foo (GValue* value,
                          gpointer v_object);
VALA_EXTERN void manam_value_take_foo (GValue* value,
                           gpointer v_object);
VALA_EXTERN gpointer manam_value_get_foo (const GValue* value);
VALA_EXTERN GType manam_foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ManamFoo, manam_foo_unref)
VALA_EXTERN void manam_foo_bar (void);
VALA_EXTERN ManamFoo* manam_foo_new (void);
VALA_EXTERN ManamFoo* manam_foo_construct (GType object_type);
static void manam_foo_finalize (ManamFoo * obj);
static GType manam_foo_get_type_once (void);
static void manam_main (void);

ManamManam*
manam_manam_construct (GType object_type)
{
	ManamManam* self = NULL;
	self = (ManamManam*) g_type_create_instance (object_type);
	return self;
}

ManamManam*
manam_manam_new (void)
{
	return manam_manam_construct (MANAM_TYPE_MANAM);
}

static void
manam_value_manam_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
manam_value_manam_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		manam_manam_unref (value->data[0].v_pointer);
	}
}

static void
manam_value_manam_copy_value (const GValue* src_value,
                              GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = manam_manam_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
manam_value_manam_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
manam_value_manam_collect_value (GValue* value,
                                 guint n_collect_values,
                                 GTypeCValue* collect_values,
                                 guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		ManamManam * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = manam_manam_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
manam_value_manam_lcopy_value (const GValue* value,
                               guint n_collect_values,
                               GTypeCValue* collect_values,
                               guint collect_flags)
{
	ManamManam ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = manam_manam_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
manam_param_spec_manam (const gchar* name,
                        const gchar* nick,
                        const gchar* blurb,
                        GType object_type,
                        GParamFlags flags)
{
	ManamParamSpecManam* spec;
	g_return_val_if_fail (g_type_is_a (object_type, MANAM_TYPE_MANAM), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
manam_value_get_manam (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_TYPE_MANAM), NULL);
	return value->data[0].v_pointer;
}

void
manam_value_set_manam (GValue* value,
                       gpointer v_object)
{
	ManamManam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, MANAM_TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		manam_manam_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_manam_unref (old);
	}
}

void
manam_value_take_manam (GValue* value,
                        gpointer v_object)
{
	ManamManam * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_TYPE_MANAM));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, MANAM_TYPE_MANAM));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_manam_unref (old);
	}
}

static void
manam_manam_class_init (ManamManamClass * klass,
                        gpointer klass_data)
{
	manam_manam_parent_class = g_type_class_peek_parent (klass);
	((ManamManamClass *) klass)->finalize = manam_manam_finalize;
}

static void
manam_manam_instance_init (ManamManam * self,
                           gpointer klass)
{
	self->ref_count = 1;
}

static void
manam_manam_finalize (ManamManam * obj)
{
	ManamManam * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, MANAM_TYPE_MANAM, ManamManam);
	g_signal_handlers_destroy (self);
}

static GType
manam_manam_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { manam_value_manam_init, manam_value_manam_free_value, manam_value_manam_copy_value, manam_value_manam_peek_pointer, "p", manam_value_manam_collect_value, "p", manam_value_manam_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (ManamManamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_manam_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ManamManam), 0, (GInstanceInitFunc) manam_manam_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType manam_manam_type_id;
	manam_manam_type_id = g_type_register_fundamental (g_type_fundamental_next (), "ManamManam", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return manam_manam_type_id;
}

GType
manam_manam_get_type (void)
{
	static volatile gsize manam_manam_type_id__once = 0;
	if (g_once_init_enter (&manam_manam_type_id__once)) {
		GType manam_manam_type_id;
		manam_manam_type_id = manam_manam_get_type_once ();
		g_once_init_leave (&manam_manam_type_id__once, manam_manam_type_id);
	}
	return manam_manam_type_id__once;
}

gpointer
manam_manam_ref (gpointer instance)
{
	ManamManam * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
manam_manam_unref (gpointer instance)
{
	ManamManam * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		MANAM_MANAM_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

void
manam_foo_bar (void)
{
}

ManamFoo*
manam_foo_construct (GType object_type)
{
	ManamFoo* self = NULL;
	self = (ManamFoo*) g_type_create_instance (object_type);
	return self;
}

ManamFoo*
manam_foo_new (void)
{
	return manam_foo_construct (MANAM_TYPE_FOO);
}

static void
manam_value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
manam_value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		manam_foo_unref (value->data[0].v_pointer);
	}
}

static void
manam_value_foo_copy_value (const GValue* src_value,
                            GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = manam_foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
manam_value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
manam_value_foo_collect_value (GValue* value,
                               guint n_collect_values,
                               GTypeCValue* collect_values,
                               guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		ManamFoo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = manam_foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
manam_value_foo_lcopy_value (const GValue* value,
                             guint n_collect_values,
                             GTypeCValue* collect_values,
                             guint collect_flags)
{
	ManamFoo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = manam_foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
manam_param_spec_foo (const gchar* name,
                      const gchar* nick,
                      const gchar* blurb,
                      GType object_type,
                      GParamFlags flags)
{
	ManamParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, MANAM_TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
manam_value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
manam_value_set_foo (GValue* value,
                     gpointer v_object)
{
	ManamFoo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, MANAM_TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		manam_foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_foo_unref (old);
	}
}

void
manam_value_take_foo (GValue* value,
                      gpointer v_object)
{
	ManamFoo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, MANAM_TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, MANAM_TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		manam_foo_unref (old);
	}
}

static void
manam_foo_class_init (ManamFooClass * klass,
                      gpointer klass_data)
{
	manam_foo_parent_class = g_type_class_peek_parent (klass);
	((ManamFooClass *) klass)->finalize = manam_foo_finalize;
}

static void
manam_foo_instance_init (ManamFoo * self,
                         gpointer klass)
{
	self->ref_count = 1;
}

static void
manam_foo_finalize (ManamFoo * obj)
{
	ManamFoo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, MANAM_TYPE_FOO, ManamFoo);
	g_signal_handlers_destroy (self);
}

static GType
manam_foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { manam_value_foo_init, manam_value_foo_free_value, manam_value_foo_copy_value, manam_value_foo_peek_pointer, "p", manam_value_foo_collect_value, "p", manam_value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (ManamFooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ManamFoo), 0, (GInstanceInitFunc) manam_foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType manam_foo_type_id;
	manam_foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "ManamFoo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	return manam_foo_type_id;
}

GType
manam_foo_get_type (void)
{
	static volatile gsize manam_foo_type_id__once = 0;
	if (g_once_init_enter (&manam_foo_type_id__once)) {
		GType manam_foo_type_id;
		manam_foo_type_id = manam_foo_get_type_once ();
		g_once_init_leave (&manam_foo_type_id__once, manam_foo_type_id);
	}
	return manam_foo_type_id__once;
}

gpointer
manam_foo_ref (gpointer instance)
{
	ManamFoo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
manam_foo_unref (gpointer instance)
{
	ManamFoo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		MANAM_FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static void
manam_main (void)
{
	ManamFoo* foo = NULL;
	ManamFoo* _tmp0_;
	_tmp0_ = manam_foo_new ();
	foo = _tmp0_;
	manam_foo_bar ();
	_manam_foo_unref0 (foo);
}

int
main (int argc,
      char ** argv)
{
	manam_main ();
	return 0;
}

