/* semantic_floating_reference_base_method.c generated by valac, the Vala compiler
 * generated from semantic_floating_reference_base_method.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 14)
#pragma GCC diagnostic warning "-Wincompatible-pointer-types"
#elif defined(__clang__) && (__clang_major__ >= 16)
#pragma clang diagnostic ignored "-Wincompatible-function-pointer-types"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_IFOO (ifoo_get_type ())
#define IFOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IFOO, IFoo))
#define IS_IFOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IFOO))
#define IFOO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IFOO, IFooIface))

typedef struct _IFoo IFoo;
typedef struct _IFooIface IFooIface;

#define TYPE_IBAR (ibar_get_type ())
#define IBAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_IBAR, IBar))
#define IS_IBAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_IBAR))
#define IBAR_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_IBAR, IBarIface))

typedef struct _IBar IBar;
typedef struct _IBarIface IBarIface;

#define TYPE_FOO (foo_get_type ())
#define FOO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_FOO, Foo))
#define FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_FOO, FooClass))
#define IS_FOO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_FOO))
#define IS_FOO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_FOO))
#define FOO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_FOO, FooClass))

typedef struct _Foo Foo;
typedef struct _FooClass FooClass;
typedef struct _FooPrivate FooPrivate;
typedef struct _ParamSpecFoo ParamSpecFoo;

#define TYPE_MANAM (manam_get_type ())
#define MANAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAM, Manam))
#define MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MANAM, ManamClass))
#define IS_MANAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAM))
#define IS_MANAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MANAM))
#define MANAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MANAM, ManamClass))

typedef struct _Manam Manam;
typedef struct _ManamClass ManamClass;
typedef struct _ManamPrivate ManamPrivate;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _foo_unref0(var) ((var == NULL) ? NULL : (var = (foo_unref (var), NULL)))

struct _IFooIface {
	GTypeInterface parent_iface;
	GInitiallyUnowned* (*foo) (IFoo* self);
};

struct _IBarIface {
	GTypeInterface parent_iface;
	GInitiallyUnowned* (*bar) (IBar* self);
};

struct _Foo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FooPrivate * priv;
};

struct _FooClass {
	GTypeClass parent_class;
	void (*finalize) (Foo *self);
	GInitiallyUnowned* (*faz) (Foo* self);
	GInitiallyUnowned* (*baz) (Foo* self);
};

struct _ParamSpecFoo {
	GParamSpec parent_instance;
};

struct _Manam {
	Foo parent_instance;
	ManamPrivate * priv;
};

struct _ManamClass {
	FooClass parent_class;
};

static gpointer foo_parent_class = NULL;
static IFooIface * foo_ifoo_parent_iface = NULL;
static IBarIface * foo_ibar_parent_iface = NULL;
static gpointer manam_parent_class = NULL;

VALA_EXTERN GType ifoo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN GInitiallyUnowned* ifoo_foo (IFoo* self);
static GType ifoo_get_type_once (void);
VALA_EXTERN GType ibar_get_type (void) G_GNUC_CONST ;
VALA_EXTERN GInitiallyUnowned* ibar_bar (IBar* self);
static GType ibar_get_type_once (void);
VALA_EXTERN gpointer foo_ref (gpointer instance);
VALA_EXTERN void foo_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_foo (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags);
VALA_EXTERN void value_set_foo (GValue* value,
                    gpointer v_object);
VALA_EXTERN void value_take_foo (GValue* value,
                     gpointer v_object);
VALA_EXTERN gpointer value_get_foo (const GValue* value);
VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_unref)
VALA_EXTERN GInitiallyUnowned* foo_faz (Foo* self);
VALA_EXTERN GInitiallyUnowned* foo_baz (Foo* self);
static GInitiallyUnowned* foo_real_foo (IFoo* base);
static GInitiallyUnowned* foo_real_bar (IBar* base);
static GInitiallyUnowned* foo_real_faz (Foo* self);
static GInitiallyUnowned* foo_real_baz (Foo* self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN Foo* foo_construct (GType object_type);
static void foo_finalize (Foo * obj);
static GType foo_get_type_once (void);
VALA_EXTERN GType manam_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Manam, foo_unref)
static GInitiallyUnowned* manam_real_faz (Foo* base);
static GInitiallyUnowned* manam_real_baz (Foo* base);
VALA_EXTERN Manam* manam_new (void);
VALA_EXTERN Manam* manam_construct (GType object_type);
static GType manam_get_type_once (void);
static void _vala_main (void);

GInitiallyUnowned*
ifoo_foo (IFoo* self)
{
	IFooIface* _iface_;
	g_return_val_if_fail (IS_IFOO (self), NULL);
	_iface_ = IFOO_GET_INTERFACE (self);
	if (_iface_->foo) {
		return _iface_->foo (self);
	}
	return NULL;
}

static void
ifoo_default_init (IFooIface * iface,
                   gpointer iface_data)
{
}

static GType
ifoo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (IFooIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) ifoo_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType ifoo_type_id;
	ifoo_type_id = g_type_register_static (G_TYPE_INTERFACE, "IFoo", &g_define_type_info, 0);
	return ifoo_type_id;
}

GType
ifoo_get_type (void)
{
	static volatile gsize ifoo_type_id__once = 0;
	if (g_once_init_enter (&ifoo_type_id__once)) {
		GType ifoo_type_id;
		ifoo_type_id = ifoo_get_type_once ();
		g_once_init_leave (&ifoo_type_id__once, ifoo_type_id);
	}
	return ifoo_type_id__once;
}

GInitiallyUnowned*
ibar_bar (IBar* self)
{
	IBarIface* _iface_;
	g_return_val_if_fail (IS_IBAR (self), NULL);
	_iface_ = IBAR_GET_INTERFACE (self);
	if (_iface_->bar) {
		return _iface_->bar (self);
	}
	return NULL;
}

static void
ibar_default_init (IBarIface * iface,
                   gpointer iface_data)
{
}

static GType
ibar_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (IBarIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) ibar_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
	GType ibar_type_id;
	ibar_type_id = g_type_register_static (G_TYPE_INTERFACE, "IBar", &g_define_type_info, 0);
	return ibar_type_id;
}

GType
ibar_get_type (void)
{
	static volatile gsize ibar_type_id__once = 0;
	if (g_once_init_enter (&ibar_type_id__once)) {
		GType ibar_type_id;
		ibar_type_id = ibar_get_type_once ();
		g_once_init_leave (&ibar_type_id__once, ibar_type_id);
	}
	return ibar_type_id__once;
}

static GInitiallyUnowned*
foo_real_foo (IFoo* base)
{
	Foo * self;
	GInitiallyUnowned* result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_FOO, Foo);
	result = NULL;
	return result;
}

static GInitiallyUnowned*
foo_real_bar (IBar* base)
{
	Foo * self;
	GInitiallyUnowned* result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_FOO, Foo);
	result = NULL;
	return result;
}

static GInitiallyUnowned*
foo_real_faz (Foo* self)
{
	GInitiallyUnowned* result;
	result = NULL;
	return result;
}

GInitiallyUnowned*
foo_faz (Foo* self)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->faz) {
		return _klass_->faz (self);
	}
	return NULL;
}

static GInitiallyUnowned*
foo_real_baz (Foo* self)
{
	GInitiallyUnowned* result;
	result = NULL;
	return result;
}

GInitiallyUnowned*
foo_baz (Foo* self)
{
	FooClass* _klass_;
	g_return_val_if_fail (IS_FOO (self), NULL);
	_klass_ = FOO_GET_CLASS (self);
	if (_klass_->baz) {
		return _klass_->baz (self);
	}
	return NULL;
}

Foo*
foo_construct (GType object_type)
{
	Foo* self = NULL;
	self = (Foo*) g_type_create_instance (object_type);
	return self;
}

Foo*
foo_new (void)
{
	return foo_construct (TYPE_FOO);
}

static void
value_foo_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}

static void
value_foo_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		foo_unref (value->data[0].v_pointer);
	}
}

static void
value_foo_copy_value (const GValue* src_value,
                      GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = foo_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}

static gpointer
value_foo_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}

static gchar*
value_foo_collect_value (GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		Foo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = foo_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}

static gchar*
value_foo_lcopy_value (const GValue* value,
                       guint n_collect_values,
                       GTypeCValue* collect_values,
                       guint collect_flags)
{
	Foo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = foo_ref (value->data[0].v_pointer);
	}
	return NULL;
}

GParamSpec*
param_spec_foo (const gchar* name,
                const gchar* nick,
                const gchar* blurb,
                GType object_type,
                GParamFlags flags)
{
	ParamSpecFoo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_FOO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}

gpointer
value_get_foo (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO), NULL);
	return value->data[0].v_pointer;
}

void
value_set_foo (GValue* value,
               gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		foo_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

void
value_take_foo (GValue* value,
                gpointer v_object)
{
	Foo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_FOO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_FOO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		foo_unref (old);
	}
}

static void
foo_class_init (FooClass * klass,
                gpointer klass_data)
{
	foo_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->finalize = foo_finalize;
	((FooClass *) klass)->faz = (GInitiallyUnowned* (*) (Foo*)) foo_real_faz;
	((FooClass *) klass)->baz = (GInitiallyUnowned* (*) (Foo*)) foo_real_baz;
}

static void
foo_ifoo_interface_init (IFooIface * iface,
                         gpointer iface_data)
{
	foo_ifoo_parent_iface = g_type_interface_peek_parent (iface);
	iface->foo = (GInitiallyUnowned* (*) (IFoo*)) foo_real_foo;
}

static void
foo_ibar_interface_init (IBarIface * iface,
                         gpointer iface_data)
{
	foo_ibar_parent_iface = g_type_interface_peek_parent (iface);
	iface->bar = (GInitiallyUnowned* (*) (IBar*)) foo_real_bar;
}

static void
foo_instance_init (Foo * self,
                   gpointer klass)
{
	self->ref_count = 1;
}

static void
foo_finalize (Foo * obj)
{
	Foo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_FOO, Foo);
	g_signal_handlers_destroy (self);
}

static GType
foo_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_foo_init, value_foo_free_value, value_foo_copy_value, value_foo_peek_pointer, "p", value_foo_collect_value, "p", value_foo_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (FooClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) foo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Foo), 0, (GInstanceInitFunc) foo_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	static const GInterfaceInfo ifoo_info = { (GInterfaceInitFunc) foo_ifoo_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	static const GInterfaceInfo ibar_info = { (GInterfaceInitFunc) foo_ibar_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
	GType foo_type_id;
	foo_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Foo", &g_define_type_info, &g_define_type_fundamental_info, 0);
	g_type_add_interface_static (foo_type_id, TYPE_IFOO, &ifoo_info);
	g_type_add_interface_static (foo_type_id, TYPE_IBAR, &ibar_info);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

gpointer
foo_ref (gpointer instance)
{
	Foo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}

void
foo_unref (gpointer instance)
{
	Foo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		FOO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}

static GInitiallyUnowned*
manam_real_faz (Foo* base)
{
	Manam * self;
	GInitiallyUnowned* result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_MANAM, Manam);
	result = NULL;
	return result;
}

static GInitiallyUnowned*
manam_real_baz (Foo* base)
{
	Manam * self;
	GInitiallyUnowned* result;
	self = G_TYPE_CHECK_INSTANCE_CAST (base, TYPE_MANAM, Manam);
	result = NULL;
	return result;
}

Manam*
manam_construct (GType object_type)
{
	Manam* self = NULL;
	self = (Manam*) foo_construct (object_type);
	return self;
}

Manam*
manam_new (void)
{
	return manam_construct (TYPE_MANAM);
}

static void
manam_class_init (ManamClass * klass,
                  gpointer klass_data)
{
	manam_parent_class = g_type_class_peek_parent (klass);
	((FooClass *) klass)->faz = (GInitiallyUnowned* (*) (Foo*)) manam_real_faz;
	((FooClass *) klass)->baz = (GInitiallyUnowned* (*) (Foo*)) manam_real_baz;
}

static void
manam_instance_init (Manam * self,
                     gpointer klass)
{
}

static GType
manam_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (ManamClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) manam_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Manam), 0, (GInstanceInitFunc) manam_instance_init, NULL };
	GType manam_type_id;
	manam_type_id = g_type_register_static (TYPE_FOO, "Manam", &g_define_type_info, 0);
	return manam_type_id;
}

GType
manam_get_type (void)
{
	static volatile gsize manam_type_id__once = 0;
	if (g_once_init_enter (&manam_type_id__once)) {
		GType manam_type_id;
		manam_type_id = manam_get_type_once ();
		g_once_init_leave (&manam_type_id__once, manam_type_id);
	}
	return manam_type_id__once;
}

static void
_vala_main (void)
{
	Manam* manam = NULL;
	Manam* _tmp0_;
	GInitiallyUnowned* _tmp1_;
	GInitiallyUnowned* _tmp2_;
	GInitiallyUnowned* _tmp3_;
	GInitiallyUnowned* _tmp4_;
	GInitiallyUnowned* _tmp5_;
	GInitiallyUnowned* _tmp6_;
	GInitiallyUnowned* _tmp7_;
	GInitiallyUnowned* _tmp8_;
	_tmp0_ = manam_new ();
	manam = _tmp0_;
	_tmp1_ = ifoo_foo (G_TYPE_CHECK_INSTANCE_CAST (manam, TYPE_IFOO, IFoo));
	if (_tmp1_ != NULL) {
		g_object_ref_sink (_tmp1_);
	}
	_tmp2_ = _tmp1_;
	_g_object_unref0 (_tmp2_);
	_tmp3_ = ibar_bar (G_TYPE_CHECK_INSTANCE_CAST (manam, TYPE_IBAR, IBar));
	if (_tmp3_ != NULL) {
		g_object_ref_sink (_tmp3_);
	}
	_tmp4_ = _tmp3_;
	_g_object_unref0 (_tmp4_);
	_tmp5_ = foo_faz (G_TYPE_CHECK_INSTANCE_CAST (manam, TYPE_FOO, Foo));
	if (_tmp5_ != NULL) {
		g_object_ref_sink (_tmp5_);
	}
	_tmp6_ = _tmp5_;
	_g_object_unref0 (_tmp6_);
	_tmp7_ = foo_baz (G_TYPE_CHECK_INSTANCE_CAST (manam, TYPE_FOO, Foo));
	if (_tmp7_ != NULL) {
		g_object_ref_sink (_tmp7_);
	}
	_tmp8_ = _tmp7_;
	_g_object_unref0 (_tmp8_);
	_foo_unref0 (manam);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

