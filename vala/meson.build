valacore_sources = files(
	'valaaddressofexpression.vala',
	'valaarraycopymethod.vala',
	'valaarraycreationexpression.vala',
	'valaarraylengthfield.vala',
	'valaarraymovemethod.vala',
	'valaarrayresizemethod.vala',
	'valaarraytype.vala',
	'valaassignment.vala',
	'valaattribute.vala',
	'valabaseaccess.vala',
	'valabasicblock.vala',
	'valabinaryexpression.vala',
	'valablock.vala',
	'valabooleanliteral.vala',
	'valabooleantype.vala',
	'valabreakstatement.vala',
	'valacallable.vala',
	'valacallabletype.vala',
	'valacastexpression.vala',
	'valacatchclause.vala',
	'valacharacterliteral.vala',
	'valaclasstype.vala',
	'valaclass.vala',
	'valacodecontext.vala',
	'valacodegenerator.vala',
	'valacodenode.vala',
	'valacodevisitor.vala',
	'valacodewriter.vala',
	'valacomment.vala',
	'valaconditionalexpression.vala',
	'valaconstant.vala',
	'valaconstructor.vala',
	'valacontinuestatement.vala',
	'valacreationmethod.vala',
	'valadatatype.vala',
	'valadeclarationstatement.vala',
	'valadelegatedestroyfield.vala',
	'valadelegatetargetfield.vala',
	'valadelegatetype.vala',
	'valadelegate.vala',
	'valadeletestatement.vala',
	'valadestructor.vala',
	'valadostatement.vala',
	'valadynamicmethod.vala',
	'valadynamicproperty.vala',
	'valadynamicsignal.vala',
	'valaelementaccess.vala',
	'valaemptystatement.vala',
	'valaenum.vala',
	'valaenumvaluetype.vala',
	'valaenumvalue.vala',
	'valaerrorcode.vala',
	'valaerrordomain.vala',
	'valaerrortype.vala',
	'valaexpressionstatement.vala',
	'valaexpression.vala',
	'valafieldprototype.vala',
	'valafield.vala',
	'valafloatingtype.vala',
	'valaflowanalyzer.vala',
	'valaforeachstatement.vala',
	'valaforstatement.vala',
	'valagenericdestroyfield.vala',
	'valagenericdupfield.vala',
	'valagenerictype.vala',
	'valagenieparser.vala',
	'valageniescanner.vala',
	'valagenietokentype.vala',
	'valagircomment.vala',
	'valagirparser.vala',
	'valaifstatement.vala',
	'valainitializerlist.vala',
	'valaintegerliteral.vala',
	'valaintegertype.vala',
	'valainterfacetype.vala',
	'valainterface.vala',
	'valainvalidexpression.vala',
	'valainvalidtype.vala',
	'valalambdaexpression.vala',
	'valaliteral.vala',
	'valalocalvariable.vala',
	'valalockable.vala',
	'valalockstatement.vala',
	'valaloop.vala',
	'valamarkupreader.vala',
	'valamemberaccess.vala',
	'valamemberinitializer.vala',
	'valamethodcall.vala',
	'valamethodtype.vala',
	'valamethod.vala',
	'valanamedargument.vala',
	'valanamespace.vala',
	'valanullliteral.vala',
	'valanulltype.vala',
	'valaobjectcreationexpression.vala',
	'valaobjecttypesymbol.vala',
	'valaobjecttype.vala',
	'valaparameter.vala',
	'valaparser.vala',
	'valaphifunction.vala',
	'valapointerindirection.vala',
	'valapointertype.vala',
	'valapostfixexpression.vala',
	'valaprofile.vala',
	'valapropertyaccessor.vala',
	'valaproperty.vala',
	'valapropertyprototype.vala',
	'valarealliteral.vala',
	'valareferencetransferexpression.vala',
	'valareferencetype.vala',
	'valaregexliteral.vala',
	'valareport.vala',
	'valareturnstatement.vala',
	'valascanner.vala',
	'valascope.vala',
	'valasemanticanalyzer.vala',
	'valasignaltype.vala',
	'valasignal.vala',
	'valasizeofexpression.vala',
	'valasliceexpression.vala',
	'valasourcefile.vala',
	'valasourcelocation.vala',
	'valasourcereference.vala',
	'valastatementlist.vala',
	'valastatement.vala',
	'valastringliteral.vala',
	'valastruct.vala',
	'valastructvaluetype.vala',
	'valasubroutine.vala',
	'valaswitchlabel.vala',
	'valaswitchsection.vala',
	'valaswitchstatement.vala',
	'valasymbolresolver.vala',
	'valasymbol.vala',
	'valatargetvalue.vala',
	'valatemplate.vala',
	'valathrowstatement.vala',
	'valatokentype.vala',
	'valatrystatement.vala',
	'valatuple.vala',
	'valatypecheck.vala',
	'valatypeofexpression.vala',
	'valatypeparameter.vala',
	'valatypesymbol.vala',
	'valaunaryexpression.vala',
	'valaunlockstatement.vala',
	'valaunresolvedsymbol.vala',
	'valaunresolvedtype.vala',
	'valausedattr.vala',
	'valausingdirective.vala',
	'valavaluetype.vala',
	'valavariable.vala',
	'valavartype.vala',
	'valaversionattribute.vala',
	'valavoidtype.vala',
	'valawhilestatement.vala',
	'valawithstatement.vala',
	'valayieldstatement.vala',
)

# https://github.com/mesonbuild/meson/issues/688
valaversion_source = vcs_tag(
	input: configure_file(
		input: 'valaversion.vala.in',
		output: 'valaversion.vala.in',
		configuration: versionconf,
	),
	output: 'valaversion.vala',
)

valacore_lib = library(
	'vala@0@'.format(vala_version_suffix),
	valacore_sources,
	valaversion_source,
	dependencies: [gobject_dep, gmodule_dep, valagee_dep],
	version: '0.0.0',
	install: true,
	vala_args: ['--use-header'],
	vala_header: 'vala.h',
	vala_vapi: 'vala.vapi',
	install_dir: [
		true,
		join_paths (get_option('includedir'), 'vala@0@'.format (vala_version_suffix)),
		false
	],
)

valacore_dep = declare_dependency(
	link_with: [valacore_lib],
	dependencies: [valagee_dep],
	include_directories: include_directories('.', '..'),
)

custom_target(
	'libvala@0@.vapi'.format(vala_version_suffix),
	command: [
		find_program('cat'),
		join_paths(meson.build_root(), 'gee', 'gee.vapi'),
		join_paths(meson.current_build_dir(), 'vala.vapi'),
	],
	depends: [valagee_lib, valacore_lib],
	capture: true,
	install: true,
	install_dir: join_paths('share', 'vala', 'vapi'),
	output: 'libvala@0@.vapi'.format(vala_version_suffix),
)
